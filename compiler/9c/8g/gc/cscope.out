cscope 15 $HOME/pipul/9c/8g/gc               0001023871
	@align.c

5 
	~<u.h
>

6 
	~<libc.h
>

7 
	~"go.h
"

16 
	gde„rˇlc
;

18 
uöt32


19 
	$∫d
(
uöt32
 
o
, uöt32 
r
)

21 if(
r
 < 1 ||Ñ > 8 || (r&(r-1)) != 0)

22 
	`Áèl
("rnd");

23  (
o
+
r
-1)&~(r-1);

24 
	}
}

27 
	$offmod
(
Ty≥
 *
t
)

29 
Ty≥
 *
f
;

30 
öt32
 
o
;

32 
o
 = 0;

33 
f
=
t
->
ty≥
; f!=
T
; f=f->
down
) {

34 if(
f
->
ëy≥
 !
TFIELD
)

35 
	`Áèl
("offmod:ÇŸ TFIELD: %lT", 
f
);

36 
f
->
width
 = 
o
;

37 
o
 +
width±r
;

38 if(
o
 >
MAXWIDTH
) {

39 
	`yyîr‹
("interfaceÅooÜarge");

40 
o
 = 
width±r
;

43 
	}
}

45 
vl⁄g


46 
	$wid°ru˘
(
Ty≥
 *
îπy≥
, Ty≥ *
t
, 
vl⁄g
 
o
, 
Êag
)

48 
Ty≥
 *
f
;

49 
öt32
 
w
, 
maxÆign
;

51 
maxÆign
 = 
Êag
;

52 if(
maxÆign
 < 1)

53 
maxÆign
 = 1;

54 
f
=
t
->
ty≥
; f!=
T
; f=f->
down
) {

55 if(
f
->
ëy≥
 !
TFIELD
)

56 
	`Áèl
("wid°ru˘:ÇŸ TFIELD: %lT", 
f
);

57 
	`dowidth
(
f
->
ty≥
);

58 if(
f
->
ty≥
->
Æign
 > 
maxÆign
)

59 
maxÆign
 = 
f
->
ty≥
->
Æign
;

60 if(
f
->
ty≥
->
width
 < 0)

61 
	`Áèl
("övÆid width %Œd", 
f
->
ty≥
->
width
);

62 
w
 = 
f
->
ty≥
->
width
;

63 if(
f
->
ty≥
->
Æign
 > 0)

64 
o
 = 
	`∫d
(o, 
f
->
ty≥
->
Æign
);

65 
f
->
width
 = 
o
;

66 if(
f
->
¬ame
 !
N
) {

71 if(
f
->
¬ame
->
°ack∑øm
) {

72 
f
->
¬ame
->
°ack∑øm
->
xoff£t
 = 
o
;

73 
f
->
¬ame
->
xoff£t
 = 0;

75 
f
->
¬ame
->
xoff£t
 = 
o
;

77 
o
 +
w
;

78 if(
o
 >
MAXWIDTH
) {

79 
	`yyîr‹
("ty≥ %lTÅoÿœrge", 
îπy≥
);

80 
o
 = 8;

84 if(
Êag
)

85 
o
 = 
	`∫d
(o, 
maxÆign
);

86 
t
->
Æign
 = 
maxÆign
;

89 if(
t
->
ty≥
 =
T
)

90 
t
->
width
 = 0;

92 
t
->
width
 = 
o
 -Å->
ty≥
->width;

93  
o
;

94 
	}
}

97 
	$dowidth
(
Ty≥
 *
t
)

99 
öt32
 
ë
;

100 
öt64
 
w
;

101 
 o
;

102 
Ty≥
 *
t1
;

104 if(
width±r
 == 0)

105 
	`Áèl
("dowidth without betypeinit");

107 if(
t
 =
T
)

110 if(
t
->
width
 > 0)

113 if(
t
->
width
 == -2) {

114 
 o
 = 
löío
;

115 
löío
 = 
t
->lineno;

116 
	`yyîr‹
("övÆidÑecursivêty≥ %T", 
t
);

117 
t
->
width
 = 0;

118 
löío
 = 
 o
;

123 
de„rˇlc
++;

125 
 o
 = 
löío
;

126 
löío
 = 
t
->lineno;

127 
t
->
width
 = -2;

128 
t
->
Æign
 = 0;

130 
ë
 = 
t
->
ëy≥
;

131 
ë
) {

132 
TFUNC
:

133 
TCHAN
:

134 
TMAP
:

135 
TSTRING
:

140 if(
simty≥
[
t
->
ëy≥
] != 0)

141 
ë
 = 
simty≥
[
t
->
ëy≥
];

145 
w
 = 0;

146 
ë
) {

148 
	`Áèl
("dowidth: unknow¿ty≥: %T", 
t
);

152 
TINT8
:

153 
TUINT8
:

154 
TBOOL
:

155 
w
 = 1;

157 
TINT16
:

158 
TUINT16
:

159 
w
 = 2;

161 
TINT32
:

162 
TUINT32
:

163 
TFLOAT32
:

164 
w
 = 4;

166 
TINT64
:

167 
TUINT64
:

168 
TFLOAT64
:

169 
TCOMPLEX64
:

170 
w
 = 8;

171 
t
->
Æign
 = 
width±r
;

173 
TCOMPLEX128
:

174 
w
 = 16;

175 
t
->
Æign
 = 
width±r
;

177 
TPTR32
:

178 
w
 = 4;

179 
	`checkwidth
(
t
->
ty≥
);

181 
TPTR64
:

182 
w
 = 8;

183 
	`checkwidth
(
t
->
ty≥
);

185 
TUNSAFEPTR
:

186 
w
 = 
width±r
;

188 
TINTER
:

189 
w
 = 2*
width±r
;

190 
t
->
Æign
 = 
width±r
;

191 
	`offmod
(
t
);

193 
TCHAN
:

194 
w
 = 
width±r
;

195 
	`checkwidth
(
t
->
ty≥
);

199 
t1
 = 
	`typ
(
TCHANARGS
);

200 
t1
->
ty≥
 = 
t
;

201 
	`checkwidth
(
t1
);

203 
TCHANARGS
:

204 
t1
 = 
t
->
ty≥
;

205 
	`dowidth
(
t
->
ty≥
);

206 if(
t1
->
ty≥
->
width
 >= (1<<16))

207 
	`yyîr‹
("channelÉlementÅypeÅooÜarge (>64kB)");

208 
t
->
width
 = 1;

210 
TMAP
:

211 
w
 = 
width±r
;

212 
	`checkwidth
(
t
->
ty≥
);

213 
	`checkwidth
(
t
->
down
);

215 
TFORW
:

216 
	`yyîr‹
("övÆidÑecursivêty≥ %T", 
t
);

217 
w
 = 1;

219 
TANY
:

221 if(!
debug
['A'])

222 
	`Áèl
("dowidthány");

223 
w
 = 1;

225 
TSTRING
:

226 if(
sizeof_Såög
 == 0)

227 
	`Áèl
("early dowidth string");

228 
w
 = 
sizeof_Såög
;

229 
t
->
Æign
 = 
width±r
;

231 
TARRAY
:

232 if(
t
->
ty≥
 =
T
)

234 if(
t
->
bound
 >= 0) {

235 
uöt64
 
ˇp
;

237 
	`dowidth
(
t
->
ty≥
);

238 if(
t
->
ty≥
->
width
 != 0) {

239 
ˇp
 = (
MAXWIDTH
-1Ë/ 
t
->
ty≥
->
width
;

240 if(
t
->
bound
 > 
ˇp
)

241 
	`yyîr‹
("ty≥ %lTÜ¨gîÅh™áddªs†•a˚", 
t
);

243 
w
 = 
t
->
bound
 *Å->
ty≥
->
width
;

244 
t
->
Æign
 =Å->
ty≥
->align;

246 if(
t
->
bound
 == -1) {

247 
w
 = 
sizeof_Aºay
;

248 
	`checkwidth
(
t
->
ty≥
);

249 
t
->
Æign
 = 
width±r
;

251 if(
t
->
bound
 == -100)

252 
	`yyîr‹
("use of [...]árray outside ofárrayÜiteral");

254 
	`Áèl
("dowidth %T", 
t
);

257 
TSTRUCT
:

258 if(
t
->
fu«rg
)

259 
	`Áèl
("dowidth f¿°ru˘ %T", 
t
);

260 
w
 = 
	`wid°ru˘
(
t
,Å, 0, 1);

263 
TFUNC
:

266 
t1
 = 
	`typ
(
TFUNCARGS
);

267 
t1
->
ty≥
 = 
t
;

268 
	`checkwidth
(
t1
);

271 
w
 = 
width±r
;

274 
TFUNCARGS
:

277 
t1
 = 
t
->
ty≥
;

278 
w
 = 
	`wid°ru˘
(
t
->
ty≥
, *
	`gëthis
(
t1
), 0, 0);

279 
w
 = 
	`wid°ru˘
(
t
->
ty≥
, *
	`gëö¨g
(
t1
), w, 
width±r
);

280 
w
 = 
	`wid°ru˘
(
t
->
ty≥
, *
	`gëouèrg
(
t1
), w, 
width±r
);

281 
t1
->
¨gwid
 = 
w
;

282 if(
w
%
width±r
)

283 
	`w¨n
("badÅy≥ %T %d\n", 
t1
, 
w
);

284 
t
->
Æign
 = 1;

288 if(
width±r
 =4 && 
w
 !(
öt32
)w)

289 
	`yyîr‹
("ty≥ %TÅoÿœrge", 
t
);

291 
t
->
width
 = 
w
;

292 if(
t
->
Æign
 == 0) {

293 if(
w
 > 8 || (w&(w-1)) != 0)

294 
	`Áèl
("övÆidálignmíàf‹ %T", 
t
);

295 
t
->
Æign
 = 
w
;

297 
löío
 = 
 o
;

299 if(
de„rˇlc
 == 1)

300 
	`ªsumecheckwidth
();

302 --
de„rˇlc
;

303 
	}
}

322 
Ty≥Li°
 
	tTy≥Li°
;

323 
	sTy≥Li°
 {

324 
Ty≥
 *
	mt
;

325 
Ty≥Li°
 *
	m√xt
;

328 
Ty≥Li°
 *
	gé‰ì
;

329 
Ty≥Li°
 *
	géq
;

332 
	$checkwidth
(
Ty≥
 *
t
)

334 
Ty≥Li°
 *
l
;

336 if(
t
 =
T
)

341 if(
t
->
fu«rg
)

342 
	`Áèl
("checkwidth %T", 
t
);

344 if(!
de„rˇlc
) {

345 
	`dowidth
(
t
);

348 if(
t
->
de„rwidth
)

350 
t
->
de„rwidth
 = 1;

352 
l
 = 
é‰ì
;

353 if(
l
 !
nû
)

354 
é‰ì
 = 
l
->
√xt
;

356 
l
 = 
	`mÆ
( *l);

358 
l
->
t
 =Å;

359 
l
->
√xt
 = 
éq
;

360 
éq
 = 
l
;

361 
	}
}

364 
	$de„rcheckwidth
()

367 if(
de„rˇlc
 && 
√º‹s
 == 0)

368 
	`Áèl
("defercheckwidth");

369 
de„rˇlc
 = 1;

370 
	}
}

373 
	$ªsumecheckwidth
()

375 
Ty≥Li°
 *
l
;

377 if(!
de„rˇlc
)

378 
	`Áèl
("resumecheckwidth");

379 
l
 = 
éq
;Ü !
nû
;Ü =Ålq) {

380 
l
->
t
->
de„rwidth
 = 0;

381 
éq
 = 
l
->
√xt
;

382 
	`dowidth
(
l
->
t
);

383 
l
->
√xt
 = 
é‰ì
;

384 
é‰ì
 = 
l
;

386 
de„rˇlc
 = 0;

387 
	}
}

390 
	$ty≥öô
()

392 
i
, 
ëy≥
, 
ßmós
;

393 
Ty≥
 *
t
;

394 
Sym
 *
s
, *
s1
;

396 if(
width±r
 == 0)

397 
	`Áèl
("typeinit before betypeinit");

399 
i
=0; i<
NTYPE
; i++)

400 
simty≥
[
i
] = i;

402 
ty≥s
[
TPTR32
] = 
	`typ
(TPTR32);

403 
	`dowidth
(
ty≥s
[
TPTR32
]);

405 
ty≥s
[
TPTR64
] = 
	`typ
(TPTR64);

406 
	`dowidth
(
ty≥s
[
TPTR64
]);

408 
t
 = 
	`typ
(
TUNSAFEPTR
);

409 
ty≥s
[
TUNSAFEPTR
] = 
t
;

410 
t
->
sym
 = 
	`pkglookup
("Poöãr", 
unß„pkg
);

411 
t
->
sym
->
def
 = 
	`ty≥nod
(t);

413 
	`dowidth
(
ty≥s
[
TUNSAFEPTR
]);

415 
çå
 = 
TPTR32
;

416 if(
width±r
 == 8)

417 
çå
 = 
TPTR64
;

419 
i
=
TINT8
; i<=
TUINT64
; i++)

420 
isöt
[
i
] = 1;

421 
isöt
[
TINT
] = 1;

422 
isöt
[
TUINT
] = 1;

423 
isöt
[
TUINTPTR
] = 1;

425 
isÊﬂt
[
TFLOAT32
] = 1;

426 
isÊﬂt
[
TFLOAT64
] = 1;

428 
iscom∂ex
[
TCOMPLEX64
] = 1;

429 
iscom∂ex
[
TCOMPLEX128
] = 1;

431 
i•å
[
TPTR32
] = 1;

432 
i•å
[
TPTR64
] = 1;

434 
isf‹w
[
TFORW
] = 1;

436 
issig√d
[
TINT
] = 1;

437 
issig√d
[
TINT8
] = 1;

438 
issig√d
[
TINT16
] = 1;

439 
issig√d
[
TINT32
] = 1;

440 
issig√d
[
TINT64
] = 1;

445 
i
=0; i<
NTYPE
; i++) {

446 if(
isöt
[
i
] || i =
TIDEAL
) {

447 
okf‹eq
[
i
] = 1;

448 
okf‹cmp
[
i
] = 1;

449 
okf‹¨ôh
[
i
] = 1;

450 
okf‹add
[
i
] = 1;

451 
okf‹™d
[
i
] = 1;

452 
okf‹c⁄°
[
i
] = 1;

453 
issim∂e
[
i
] = 1;

454 
möötvÆ
[
i
] = 
	`mÆ
((*minintval[i]));

455 
maxötvÆ
[
i
] = 
	`mÆ
((*maxintval[i]));

457 if(
isÊﬂt
[
i
]) {

458 
okf‹eq
[
i
] = 1;

459 
okf‹cmp
[
i
] = 1;

460 
okf‹add
[
i
] = 1;

461 
okf‹¨ôh
[
i
] = 1;

462 
okf‹c⁄°
[
i
] = 1;

463 
issim∂e
[
i
] = 1;

464 
möÊtvÆ
[
i
] = 
	`mÆ
((*minfltval[i]));

465 
maxÊtvÆ
[
i
] = 
	`mÆ
((*maxfltval[i]));

467 if(
iscom∂ex
[
i
]) {

468 
okf‹eq
[
i
] = 1;

469 
okf‹add
[
i
] = 1;

470 
okf‹¨ôh
[
i
] = 1;

471 
okf‹c⁄°
[
i
] = 1;

472 
issim∂e
[
i
] = 1;

476 
issim∂e
[
TBOOL
] = 1;

478 
okf‹add
[
TSTRING
] = 1;

480 
okf‹boﬁ
[
TBOOL
] = 1;

482 
okf‹ˇp
[
TARRAY
] = 1;

483 
okf‹ˇp
[
TCHAN
] = 1;

485 
okf‹c⁄°
[
TBOOL
] = 1;

486 
okf‹c⁄°
[
TSTRING
] = 1;

488 
okf‹Àn
[
TARRAY
] = 1;

489 
okf‹Àn
[
TCHAN
] = 1;

490 
okf‹Àn
[
TMAP
] = 1;

491 
okf‹Àn
[
TSTRING
] = 1;

493 
okf‹eq
[
TPTR32
] = 1;

494 
okf‹eq
[
TPTR64
] = 1;

495 
okf‹eq
[
TUNSAFEPTR
] = 1;

496 
okf‹eq
[
TINTER
] = 1;

497 
okf‹eq
[
TCHAN
] = 1;

498 
okf‹eq
[
TSTRING
] = 1;

499 
okf‹eq
[
TBOOL
] = 1;

500 
okf‹eq
[
TMAP
] = 1;

501 
okf‹eq
[
TFUNC
] = 1;

502 
okf‹eq
[
TARRAY
] = 1;

503 
okf‹eq
[
TSTRUCT
] = 1;

505 
okf‹cmp
[
TSTRING
] = 1;

507 
i
=0; i<
	`√Àm
(
okf‹
); i++)

508 
okf‹
[
i
] = 
okf‹n⁄e
;

511 
okf‹
[
OADD
] = 
okf‹add
;

512 
okf‹
[
OAND
] = 
okf‹™d
;

513 
okf‹
[
OANDAND
] = 
okf‹boﬁ
;

514 
okf‹
[
OANDNOT
] = 
okf‹™d
;

515 
okf‹
[
ODIV
] = 
okf‹¨ôh
;

516 
okf‹
[
OEQ
] = 
okf‹eq
;

517 
okf‹
[
OGE
] = 
okf‹cmp
;

518 
okf‹
[
OGT
] = 
okf‹cmp
;

519 
okf‹
[
OLE
] = 
okf‹cmp
;

520 
okf‹
[
OLT
] = 
okf‹cmp
;

521 
okf‹
[
OMOD
] = 
okf‹™d
;

522 
okf‹
[
OMUL
] = 
okf‹¨ôh
;

523 
okf‹
[
ONE
] = 
okf‹eq
;

524 
okf‹
[
OOR
] = 
okf‹™d
;

525 
okf‹
[
OOROR
] = 
okf‹boﬁ
;

526 
okf‹
[
OSUB
] = 
okf‹¨ôh
;

527 
okf‹
[
OXOR
] = 
okf‹™d
;

528 
okf‹
[
OLSH
] = 
okf‹™d
;

529 
okf‹
[
ORSH
] = 
okf‹™d
;

532 
okf‹
[
OCOM
] = 
okf‹™d
;

533 
okf‹
[
OMINUS
] = 
okf‹¨ôh
;

534 
okf‹
[
ONOT
] = 
okf‹boﬁ
;

535 
okf‹
[
OPLUS
] = 
okf‹¨ôh
;

538 
okf‹
[
OCAP
] = 
okf‹ˇp
;

539 
okf‹
[
OLEN
] = 
okf‹Àn
;

542 
iscmp
[
OLT
] = 1;

543 
iscmp
[
OGT
] = 1;

544 
iscmp
[
OGE
] = 1;

545 
iscmp
[
OLE
] = 1;

546 
iscmp
[
OEQ
] = 1;

547 
iscmp
[
ONE
] = 1;

549 
	`m∑tofix
(
maxötvÆ
[
TINT8
], "0x7f");

550 
	`m∑tofix
(
möötvÆ
[
TINT8
], "-0x80");

551 
	`m∑tofix
(
maxötvÆ
[
TINT16
], "0x7fff");

552 
	`m∑tofix
(
möötvÆ
[
TINT16
], "-0x8000");

553 
	`m∑tofix
(
maxötvÆ
[
TINT32
], "0x7fffffff");

554 
	`m∑tofix
(
möötvÆ
[
TINT32
], "-0x80000000");

555 
	`m∑tofix
(
maxötvÆ
[
TINT64
], "0x7fffffffffffffff");

556 
	`m∑tofix
(
möötvÆ
[
TINT64
], "-0x8000000000000000");

558 
	`m∑tofix
(
maxötvÆ
[
TUINT8
], "0xff");

559 
	`m∑tofix
(
maxötvÆ
[
TUINT16
], "0xffff");

560 
	`m∑tofix
(
maxötvÆ
[
TUINT32
], "0xffffffff");

561 
	`m∑tofix
(
maxötvÆ
[
TUINT64
], "0xffffffffffffffff");

564 
	`m∑toÊt
(
maxÊtvÆ
[
TFLOAT32
], "33554431p103");

565 
	`m∑toÊt
(
möÊtvÆ
[
TFLOAT32
], "-33554431p103");

566 
	`m∑toÊt
(
maxÊtvÆ
[
TFLOAT64
], "18014398509481983p970");

567 
	`m∑toÊt
(
möÊtvÆ
[
TFLOAT64
], "-18014398509481983p970");

569 
maxÊtvÆ
[
TCOMPLEX64
] = maxÊtvÆ[
TFLOAT32
];

570 
möÊtvÆ
[
TCOMPLEX64
] = möÊtvÆ[
TFLOAT32
];

571 
maxÊtvÆ
[
TCOMPLEX128
] = maxÊtvÆ[
TFLOAT64
];

572 
möÊtvÆ
[
TCOMPLEX128
] = möÊtvÆ[
TFLOAT64
];

575 
ty≥s
[
TFUNC
] = 
	`fun˘y≥
(
N
, 
nû
,Çil);

579 
ty≥s
[
TIDEAL
] = 
	`typ
(TIDEAL);

580 
ty≥s
[
TINTER
] = 
	`typ
(TINTER);

583 
simty≥
[
TMAP
] = 
çå
;

584 
simty≥
[
TCHAN
] = 
çå
;

585 
simty≥
[
TFUNC
] = 
çå
;

586 
simty≥
[
TUNSAFEPTR
] = 
çå
;

589 
i
=0; 
ty≥defs
[i].
«me
; i++) {

590 
s
 = 
	`lookup
(
ty≥defs
[
i
].
«me
);

591 
s1
 = 
	`pkglookup
(
ty≥defs
[
i
].
«me
, 
buûtöpkg
);

593 
ëy≥
 = 
ty≥defs
[
i
].etype;

594 if(
ëy≥
 < 0 ||Éty≥ >
	`√Àm
(
ty≥s
))

595 
	`Áèl
("ty≥öô: %†badÉty≥", 
s
->
«me
);

596 
ßmós
 = 
ty≥defs
[
i
].sameas;

597 if(
ßmós
 < 0 || samó†>
	`√Àm
(
ty≥s
))

598 
	`Áèl
("ty≥öô: %†bad samós", 
s
->
«me
);

599 
simty≥
[
ëy≥
] = 
ßmós
;

600 
möÊtvÆ
[
ëy≥
] = möÊtvÆ[
ßmós
];

601 
maxÊtvÆ
[
ëy≥
] = maxÊtvÆ[
ßmós
];

602 
möötvÆ
[
ëy≥
] = möötvÆ[
ßmós
];

603 
maxötvÆ
[
ëy≥
] = maxötvÆ[
ßmós
];

605 
t
 = 
ty≥s
[
ëy≥
];

606 if(
t
 !
T
)

607 
	`Áèl
("ty≥öô: %†Æªady deföed", 
s
->
«me
);

609 
t
 = 
	`typ
(
ëy≥
);

610 
t
->
sym
 = 
s
;

612 
	`dowidth
(
t
);

613 
ty≥s
[
ëy≥
] = 
t
;

614 
s1
->
def
 = 
	`ty≥nod
(
t
);

617 
Aºay_¨øy
 = 
	`∫d
(0, 
width±r
);

618 
Aºay_√l
 = 
	`∫d
(
Aºay_¨øy
+
width±r
, 
ty≥s
[
TUINT32
]->
width
);

619 
Aºay_ˇp
 = 
	`∫d
(
Aºay_√l
+
ty≥s
[
TUINT32
]->
width
,Åypes[TUINT32]->width);

620 
sizeof_Aºay
 = 
	`∫d
(
Aºay_ˇp
+
ty≥s
[
TUINT32
]->
width
, 
width±r
);

623 
sizeof_Såög
 = 
	`∫d
(
Aºay_√l
+
ty≥s
[
TUINT32
]->
width
, 
width±r
);

625 
	`dowidth
(
ty≥s
[
TSTRING
]);

626 
	`dowidth
(
idól°rög
);

627 
	}
}

633 
	$¨gsize
(
Ty≥
 *
t
)

635 
Iãr
 
ßve
;

636 
Ty≥
 *
Â
;

637 
w
, 
x
;

639 
w
 = 0;

641 
Â
 = 
	`°ru˘fú°
(&
ßve
, 
	`gëouèrg
(
t
));

642 
Â
 !
T
) {

643 
x
 = 
Â
->
width
 + fp->
ty≥
->width;

644 if(
x
 > 
w
)

645 
w
 = 
x
;

646 
Â
 = 
	`°ru˘√xt
(&
ßve
);

649 
Â
 = 
	`funcfú°
(&
ßve
, 
t
);

650 
Â
 !
T
) {

651 
x
 = 
Â
->
width
 + fp->
ty≥
->width;

652 if(
x
 > 
w
)

653 
w
 = 
x
;

654 
Â
 = 
	`fun˙ext
(&
ßve
);

657 
w
 = (w+
width±r
-1) & ~(widthptr-1);

658  
w
;

659 
	}
}

	@bits.c

31 
	~<u.h
>

32 
	~<libc.h
>

33 
	~"go.h
"

71 
	$b™y
(
Bôs
 *
a
)

73 
i
;

75 
i
=0; i<
BITS
; i++)

76 if(
a
->
b
[
i
])

79 
	}
}

95 
	$bnum
(
Bôs
 
a
)

97 
i
;

98 
öt32
 
b
;

100 
i
=0; i<
BITS
; i++)

101 if(
b
 = 
a
.b[
i
])

102  32*
i
 + 
	`bôno
(
b
);

103 
	`Áèl
("bad in bnum");

105 
	}
}

107 
Bôs


108 
	$blsh
(
uöt
 
n
)

110 
Bôs
 
c
;

112 
c
 = 
zbôs
;

113 
c
.
b
[
n
/32] = 1L << (n%32);

114  
c
;

115 
	}
}

128 
	$bôno
(
öt32
 
b
)

130 
i
;

132 
i
=0; i<32; i++)

133 if(
b
 & (1L<<
i
))

134  
i
;

135 
	`Áèl
("bad in bitno");

137 
	}
}

140 
	$Qc⁄v
(
Fmt
 *
Â
)

142 
Bôs
 
bôs
;

143 
i
, 
fú°
;

145 
fú°
 = 1;

146 
bôs
 = 
	`va_¨g
(
Â
->
¨gs
, 
Bôs
);

147 
	`b™y
(&
bôs
)) {

148 
i
 = 
	`bnum
(
bôs
);

149 if(
fú°
)

150 
fú°
 = 0;

152 
	`fmçröt
(
Â
, " ");

153 if(
v¨
[
i
].
node
 =
N
 || v¨[i].node->
sym
 =
S
)

154 
	`fmçröt
(
Â
, "$%d", 
i
);

156 
	`fmçröt
(
Â
, "%s", 
v¨
[
i
].
node
->
sym
->
«me
);

157 if(
v¨
[
i
].
off£t
 != 0)

158 
	`fmçröt
(
Â
, "%+Œd", (
vl⁄g
)
v¨
[
i
].
off£t
);

160 
bôs
.
b
[
i
/32] &= ~(1L << (i%32));

163 
	}
}

	@builtin.c

1 *
	gru¡imeimp‹t
 =

110 *
	gunß„imp‹t
 =

	@closure.c

9 
	~<u.h
>

10 
	~<libc.h
>

11 
	~"go.h
"

14 
	$˛osuªhdr
(
Node
 *
¡y≥
)

16 
Node
 *
n
, *
«me
, *
a
;

17 
NodeLi°
 *
l
;

19 
n
 = 
	`nod
(
OCLOSURE
, 
N
, N);

20 
n
->
¡y≥
 =Çtype;

21 
n
->
funcdïth
 = funcdepth;

23 
	`funchdr
(
n
);

30 
n
->
li°
 = 
¡y≥
->list;

31 
n
->
æi°
 = 
¡y≥
->rlist;

32 
¡y≥
->
li°
 = 
nû
;

33 
¡y≥
->
æi°
 = 
nû
;

34 
l
=
n
->
li°
;Ü;Üˆ->
√xt
) {

35 
«me
 = 
l
->
n
->
À·
;

36 if(
«me
)

37 
«me
 = 
	`√w«me
“ame->
sym
);

38 
a
 = 
	`nod
(
ODCLFIELD
, 
«me
, 
l
->
n
->
right
);

39 
a
->
isddd
 = 
l
->
n
->isddd;

40 if(
«me
)

41 
«me
->
isddd
 = 
a
->isddd;

42 
¡y≥
->
li°
 = 
	`li°
“ty≥->li°, 
a
);

44 
l
=
n
->
æi°
;Ü;Üˆ->
√xt
) {

45 
«me
 = 
l
->
n
->
À·
;

46 if(
«me
)

47 
«me
 = 
	`√w«me
“ame->
sym
);

48 
¡y≥
->
æi°
 = 
	`li°
“ty≥->æi°, 
	`nod
(
ODCLFIELD
, 
«me
, 
l
->
n
->
right
));

50 
	}
}

52 
Node
*

53 
	$˛osuªbody
(
NodeLi°
 *
body
)

55 
Node
 *
func
, *
v
;

56 
NodeLi°
 *
l
;

58 if(
body
 =
nû
)

59 
body
 = 
	`li°1
(
	`nod
(
OEMPTY
, 
N
, N));

61 
func
 = 
cur‚
;

62 
func
->
nbody
 = 
body
;

63 
	`funcbody
(
func
);

69 
l
=
func
->
cv¨s
;Ü;Üˆ->
√xt
) {

70 
v
 = 
l
->
n
;

71 
v
->
˛osuª
->˛osuª = v->
ouãr
;

72 
v
->
hó∑ddr
 = 
	`nod
(
OADDR
, 
	`ﬁd«me
(v->
sym
), 
N
);

75  
func
;

76 
	}
}

79 
	$ty≥check˛osuª
(
Node
 *
func
, 
t›
)

81 
Node
 *
ﬁd‚
;

82 
NodeLi°
 *
l
;

83 
Node
 *
v
;

85 
ﬁd‚
 = 
cur‚
;

86 
	`ty≥check
(&
func
->
¡y≥
, 
Ety≥
);

87 
func
->
ty≥
 = func->
¡y≥
->type;

88 if(
cur‚
 =
nû
) {

89 
xt›
 = 
	`li°
(xt›, 
func
);

93 if(
func
->
ty≥
 !
T
) {

94 
cur‚
 = 
func
;

95 
	`ty≥checkli°
(
func
->
nbody
, 
Et›
);

96 
cur‚
 = 
ﬁd‚
;

102 
func
->
íãr
 = 
nû
;

103 
l
=
func
->
cv¨s
;Ü;Üˆ->
√xt
) {

104 
v
 = 
l
->
n
;

105 if(
v
->
ty≥
 =
T
) {

112 
v
->
›
 = 0;

117 i‡((
t›
 & (
EˇŒ
|
E¥oc
)) == Ecall)

118 
v
->
hó∑ddr
->
ëy≥
 = 1;

119 
	`ty≥check
(&
v
->
hó∑ddr
, 
Erv
);

120 
func
->
íãr
 = 
	`li°
(func->íãr, 
v
->
hó∑ddr
);

121 
v
->
hó∑ddr
 = 
N
;

123 
	}
}

125 
Node
*

126 
	$make˛osuª
(
Node
 *
func
, 
NodeLi°
 **
öô
, 
nowøp
)

128 
Node
 *
xty≥
, *
v
, *
addr
, *
xfunc
;

129 
NodeLi°
 *
l
;

130 
˛osgí
;

131 *
p
;

133 
	`USED
(
öô
);

139 
xty≥
 = 
	`nod
(
OTFUNC
, 
N
, N);

143 
l
=
func
->
cv¨s
;Ü;Üˆ->
√xt
) {

144 
v
 = 
l
->
n
;

145 if(
v
->
›
 == 0)

147 
addr
 = 
	`nod
(
ONAME
, 
N
, N);

148 
p
 = 
	`sm¥öt
("&%s", 
v
->
sym
->
«me
);

149 
addr
->
sym
 = 
	`lookup
(
p
);

150 
	`‰ì
(
p
);

151 
addr
->
¡y≥
 = 
	`nod
(
OIND
, 
	`ty≥nod
(
v
->
ty≥
), 
N
);

152 
addr
->
˛ass
 = 
PPARAM
;

153 
addr
->
addabÀ
 = 1;

154 
addr
->
uŒm™
 = 1;

156 
v
->
hó∑ddr
 = 
addr
;

158 
xty≥
->
li°
 = 
	`li°
(xty≥->li°, 
	`nod
(
ODCLFIELD
, 
addr
,áddr->
¡y≥
));

162 i‡(!
nowøp
)

163 
xty≥
->
li°
 = 
	`li°
(xty≥->li°, 
	`nod
(
ODCLFIELD
, 
N
, 
	`ty≥nod
(
ty≥s
[
TUINTPTR
])));

166 
xty≥
->
li°
 = 
	`c⁄ˇt
(xty≥->li°, 
func
->list);

167 
xty≥
->
æi°
 = 
	`c⁄ˇt
(xty≥->æi°, 
func
->rlist);

170 
xfunc
 = 
	`nod
(
ODCLFUNC
, 
N
, N);

171 
	`¢¥öt
(
«mebuf
, Çamebuf, "_func_%.3d", ++
˛osgí
);

172 
xfunc
->
¬ame
 = 
	`√w«me
(
	`lookup
(
«mebuf
));

173 
xfunc
->
¬ame
->
¡y≥
 = 
xty≥
;

174 
xfunc
->
¬ame
->
de‚
 = xfunc;

175 
	`de˛¨e
(
xfunc
->
¬ame
, 
PFUNC
);

176 
xfunc
->
¬ame
->
funcdïth
 = 
func
->funcdepth;

177 
xfunc
->
funcdïth
 = 
func
->funcdepth;

178 
xfunc
->
nbody
 = 
func
->nbody;

179 
xfunc
->
d˛
 = 
func
->dcl;

180 if(
xfunc
->
nbody
 =
nû
)

181 
	`Áèl
("empty body - won't generateány code");

182 
	`ty≥check
(&
xfunc
, 
Et›
);

183 
˛osuªs
 = 
	`li°
(˛osuªs, 
xfunc
);

185  
xfunc
;

186 
	}
}

188 
Node
*

189 
	$wÆk˛osuª
(
Node
 *
func
, 
NodeLi°
 **
öô
)

191 
«rg
;

192 
Node
 *
xty≥
, *
xfunc
, *
ˇŒ
, *
˛os
;

193 
NodeLi°
 *
l
, *
ö
;

196 if(
func
->
cv¨s
 =
nû
)

197  
	`make˛osuª
(
func
, 
öô
, 1)->
¬ame
;

205 
xfunc
 = 
	`make˛osuª
(
func
, 
öô
, 0);

206 
xty≥
 = 
xfunc
->
¬ame
->
¡y≥
;

209 
˛os
 = 
	`sy¶ook
("closure", 1);

210 
˛os
->
ty≥
 = 
T
;

211 
˛os
->
¡y≥
 = 
	`nod
(
OTFUNC
, 
N
, N);

212 
ö
 = 
	`li°1
(
	`nod
(
ODCLFIELD
, 
N
, 
	`ty≥nod
(
ty≥s
[
TINT
])));

213 
ö
 = 
	`li°
(ö, 
	`nod
(
ODCLFIELD
, 
N
, 
xty≥
));

214 
«rg
 = 0;

215 
l
=
func
->
cv¨s
;Ü;Üˆ->
√xt
) {

216 if(
l
->
n
->
›
 == 0)

218 
«rg
++;

219 
ö
 = 
	`li°
(ö, 
	`nod
(
ODCLFIELD
, 
N
, 
l
->
n
->
hó∑ddr
->
¡y≥
));

221 
˛os
->
¡y≥
->
li°
 = 
ö
;

222 
˛os
->
¡y≥
->
æi°
 = 
	`li°1
(
	`nod
(
ODCLFIELD
, 
N
, 
	`ty≥nod
(
func
->
ty≥
)));

223 
	`ty≥check
(&
˛os
, 
Erv
);

225 
ˇŒ
 = 
	`nod
(
OCALL
, 
˛os
, 
N
);

226 if(
«rg
*
width±r
 > 100)

227 
	`yyîr‹
("closureÇeedsÅoo many variables;Ñuntime willÑeject it");

228 
ö
 = 
	`li°1
(
	`nodötc⁄°
(
«rg
*
width±r
));

229 
ö
 = 
	`li°
(ö, 
xfunc
->
¬ame
);

230 
ö
 = 
	`c⁄ˇt
(ö, 
func
->
íãr
);

231 
ˇŒ
->
li°
 = 
ö
;

233 
	`ty≥check
(&
ˇŒ
, 
Erv
);

234 
	`wÆkex¥
(&
ˇŒ
, 
öô
);

235  
ˇŒ
;

236 
	}
}

243 
	$wÆkˇŒ˛osuª
(
Node
 *
n
, 
NodeLi°
 **
öô
)

245 i‡(
n
->
›
 !
OCALLFUNC
 ||Ç->
À·
->› !
OCLOSURE
) {

246 
	`dump
("wÆkˇŒ˛osuª", 
n
);

247 
	`Áèl
("abuse of walkcallclosure");

252 
n
->
li°
 = 
	`c⁄ˇt
“->
À·
->
íãr
,Ç->list);

253 
n
->
À·
 = 
	`make˛osuª
“->À·, 
öô
, 1)->
¬ame
;

254 
	`dowidth
(
n
->
À·
->
ty≥
);

255 
n
->
ty≥
 = 
	`gëouèrgx
“->
À·
->type);

257 i‡(
n
->
ty≥
 &&Ç->ty≥->ty≥ && !n->ty≥->ty≥->
down
)

258 
n
->
ty≥
 =Ç->type->type->type;

259 
	}
}

	@const.c

5 
	~<u.h
>

6 
	~<libc.h
>

7 
	~"go.h
"

8 
	#TUP
(
x
,
y
Ë(((x)<<16)|(y))

	)

10 
VÆ
 
to˝lx
(Val);

11 
VÆ
 
toÊt
(Val);

12 
VÆ
 
to°r
(Val);

13 
VÆ
 
c›yvÆ
(Val);

14 
cm∂xmpy
(
Mp˝lx
*, Mpcplx*);

15 
cm∂xdiv
(
Mp˝lx
*, Mpcplx*);

21 
MpÊt
*

22 
	$åuncÊéô
(
MpÊt
 *
ﬁdv
, 
Ty≥
 *
t
)

24 
d
;

25 
f
;

26 
MpÊt
 *
fv
;

28 if(
t
 =
T
)

29  
ﬁdv
;

31 
fv
 = 
	`mÆ
( *fv);

32 *
fv
 = *
ﬁdv
;

38 
t
->
ëy≥
) {

39 
TFLOAT64
:

40 
d
 = 
	`mpgëÊt
(
fv
);

41 
	`mpmovecÊt
(
fv
, 
d
);

44 
TFLOAT32
:

45 
d
 = 
	`mpgëÊt
(
fv
);

46 
f
 = 
d
;

47 
d
 = 
f
;

48 
	`mpmovecÊt
(
fv
, 
d
);

51  
fv
;

52 
	}
}

59 
	$c⁄vlô
(
Node
 **
≈
, 
Ty≥
 *
t
)

61 
	`c⁄vlô1
(
≈
, 
t
, 0);

62 
	}
}

70 
	$c⁄vlô1
(
Node
 **
≈
, 
Ty≥
 *
t
, 
ex∂icô
)

72 
˘
, 
ë
;

73 
Node
 *
n
, *
¬
;

75 
n
 = *
≈
;

76 if(
n
 =
N
 || 
t
 =
T
 ||Ç->
ty≥
 =T || 
	`isidól
(t) ||Ç->type ==Å)

78 if(!
ex∂icô
 && !
	`isidól
(
n
->
ty≥
))

81 if(
n
->
›
 =
OLITERAL
) {

82 
¬
 = 
	`nod
(
OXXX
, 
N
, N);

83 *
¬
 = *
n
;

84 
n
 = 
¬
;

85 *
≈
 = 
n
;

88 
n
->
›
) {

90 if(
n
->
ty≥
 =
idólboﬁ
)

91 
n
->
ty≥
 = 
ty≥s
[
TBOOL
];

92 if(
n
->
ty≥
->
ëy≥
 =
TIDEAL
) {

93 
	`c⁄vlô
(&
n
->
À·
, 
t
);

94 
	`c⁄vlô
(&
n
->
right
, 
t
);

95 
n
->
ty≥
 = 
t
;

98 
OLITERAL
:

100 if(!
okf‹c⁄°
[
t
->
ëy≥
] && 
n
->
ty≥
->ëy≥ !
TNIL
) {

101 
	`deÁu…lô
(&
n
, 
T
);

102 *
≈
 = 
n
;

106 
OLSH
:

107 
ORSH
:

108 
	`c⁄vlô1
(&
n
->
À·
, 
t
, 
ex∂icô
 && 
	`isidól
“->À·->
ty≥
));

109 
t
 = 
n
->
À·
->
ty≥
;

110 if(
t
 !
T
 &&Å->
ëy≥
 =
TIDEAL
 && 
n
->
vÆ
.
˘y≥
 !
CTINT
)

111 
n
->
vÆ
 = 
	`toöt
(n->val);

112 if(
t
 !
T
 && !
isöt
[t->
ëy≥
]) {

113 
	`yyîr‹
("övÆid o≥øti⁄: %N (shi· o‡ty≥ %T)", 
n
, 
t
);

114 
t
 = 
T
;

116 
n
->
ty≥
 = 
t
;

121 if(
	`eqty≥
(
n
->
ty≥
, 
t
))

124 
˘
 = 
	`c⁄°ty≥
(
n
);

125 if(
˘
 < 0)

126 
bad
;

128 
ë
 = 
t
->
ëy≥
;

129 if(
ë
 =
TINTER
) {

130 if(
˘
 =
CTNIL
 && 
n
->
ty≥
 =
ty≥s
[
TNIL
]) {

131 
n
->
ty≥
 = 
t
;

134 
	`deÁu…lô
(
≈
, 
T
);

138 
˘
) {

140 
bad
;

142 
CTNIL
:

143 
ë
) {

145 
n
->
ty≥
 = 
T
;

146 
bad
;

148 
TSTRING
:

152 
TARRAY
:

153 if(!
	`is¶i˚
(
t
))

154 
bad
;

157 
TPTR32
:

158 
TPTR64
:

159 
TINTER
:

160 
TMAP
:

161 
TCHAN
:

162 
TFUNC
:

163 
TUNSAFEPTR
:

168 
CTSTR
:

169 
CTBOOL
:

170 if(
ë
 !
n
->
ty≥
->
ëy≥
)

171 
bad
;

174 
CTINT
:

175 
CTRUNE
:

176 
CTFLT
:

177 
CTCPLX
:

178 
˘
 = 
n
->
vÆ
.
˘y≥
;

179 if(
isöt
[
ë
]) {

180 
˘
) {

182 
bad
;

183 
CTCPLX
:

184 
CTFLT
:

185 
CTRUNE
:

186 
n
->
vÆ
 = 
	`toöt
(n->val);

188 
CTINT
:

189 
	`ovîÊow
(
n
->
vÆ
, 
t
);

193 if(
isÊﬂt
[
ë
]) {

194 
˘
) {

196 
bad
;

197 
CTCPLX
:

198 
CTINT
:

199 
CTRUNE
:

200 
n
->
vÆ
 = 
	`toÊt
(n->val);

202 
CTFLT
:

203 
	`ovîÊow
(
n
->
vÆ
, 
t
);

204 
n
->
vÆ
.
u
.
fvÆ
 = 
	`åuncÊéô
“->vÆ.u.fvÆ, 
t
);

208 if(
iscom∂ex
[
ë
]) {

209 
˘
) {

211 
bad
;

212 
CTFLT
:

213 
CTINT
:

214 
CTRUNE
:

215 
n
->
vÆ
 = 
	`to˝lx
(n->val);

217 
CTCPLX
:

218 
	`ovîÊow
(
n
->
vÆ
, 
t
);

222 if(
ë
 =
TSTRING
 && (
˘
 =
CTINT
 || cà=
CTRUNE
Ë&& 
ex∂icô
)

223 
n
->
vÆ
 = 
	`to°r
(n->val);

225 
bad
;

228 
n
->
ty≥
 = 
t
;

231 
bad
:

232 if(!
n
->
düg
) {

233 
	`yyîr‹
("ˇ¬Ÿ c⁄vîà%NÅÿty≥ %T", 
n
, 
t
);

234 
n
->
düg
 = 1;

236 if(
	`isidól
(
n
->
ty≥
)) {

237 
	`deÁu…lô
(&
n
, 
T
);

238 *
≈
 = 
n
;

241 
	}
}

243 
VÆ


244 
	$c›yvÆ
(
VÆ
 
v
)

246 
Mpöt
 *
i
;

247 
MpÊt
 *
f
;

248 
Mp˝lx
 *
c
;

250 
v
.
˘y≥
) {

251 
CTINT
:

252 
CTRUNE
:

253 
i
 = 
	`mÆ
((*i));

254 
	`mpmovefixfix
(
i
, 
v
.
u
.
xvÆ
);

255 
v
.
u
.
xvÆ
 = 
i
;

257 
CTFLT
:

258 
f
 = 
	`mÆ
((*f));

259 
	`mpmoveÊtÊt
(
f
, 
v
.
u
.
fvÆ
);

260 
v
.
u
.
fvÆ
 = 
f
;

262 
CTCPLX
:

263 
c
 = 
	`mÆ
((*c));

264 
	`mpmoveÊtÊt
(&
c
->
ªÆ
, &
v
.
u
.
cvÆ
->real);

265 
	`mpmoveÊtÊt
(&
c
->
imag
, &
v
.
u
.
cvÆ
->imag);

266 
v
.
u
.
cvÆ
 = 
c
;

269  
v
;

270 
	}
}

272 
VÆ


273 
	$to˝lx
(
VÆ
 
v
)

275 
Mp˝lx
 *
c
;

277 
v
.
˘y≥
) {

278 
CTINT
:

279 
CTRUNE
:

280 
c
 = 
	`mÆ
((*c));

281 
	`mpmovefixÊt
(&
c
->
ªÆ
, 
v
.
u
.
xvÆ
);

282 
	`mpmovecÊt
(&
c
->
imag
, 0.0);

283 
v
.
˘y≥
 = 
CTCPLX
;

284 
v
.
u
.
cvÆ
 = 
c
;

286 
CTFLT
:

287 
c
 = 
	`mÆ
((*c));

288 
	`mpmoveÊtÊt
(&
c
->
ªÆ
, 
v
.
u
.
fvÆ
);

289 
	`mpmovecÊt
(&
c
->
imag
, 0.0);

290 
v
.
˘y≥
 = 
CTCPLX
;

291 
v
.
u
.
cvÆ
 = 
c
;

294  
v
;

295 
	}
}

297 
VÆ


298 
	$toÊt
(
VÆ
 
v
)

300 
MpÊt
 *
f
;

302 
v
.
˘y≥
) {

303 
CTINT
:

304 
CTRUNE
:

305 
f
 = 
	`mÆ
((*f));

306 
	`mpmovefixÊt
(
f
, 
v
.
u
.
xvÆ
);

307 
v
.
˘y≥
 = 
CTFLT
;

308 
v
.
u
.
fvÆ
 = 
f
;

310 
CTCPLX
:

311 
f
 = 
	`mÆ
((*f));

312 
	`mpmoveÊtÊt
(
f
, &
v
.
u
.
cvÆ
->
ªÆ
);

313 if(
	`mpcmpÊtc
(&
v
.
u
.
cvÆ
->
imag
, 0) != 0)

314 
	`yyîr‹
("c⁄°™à%#F%+#FòåunˇãdÅÿªÆ", &
v
.
u
.
cvÆ
->
ªÆ
, &v.u.cvÆ->
imag
);

315 
v
.
˘y≥
 = 
CTFLT
;

316 
v
.
u
.
fvÆ
 = 
f
;

319  
v
;

320 
	}
}

322 
VÆ


323 
	$toöt
(
VÆ
 
v
)

325 
Mpöt
 *
i
;

327 
v
.
˘y≥
) {

328 
CTRUNE
:

329 
v
.
˘y≥
 = 
CTINT
;

331 
CTFLT
:

332 
i
 = 
	`mÆ
((*i));

333 if(
	`mpmoveÊtfix
(
i
, 
v
.
u
.
fvÆ
) < 0)

334 
	`yyîr‹
("c⁄°™à%#FÅrunˇãdÅÿöãgî", 
v
.
u
.
fvÆ
);

335 
v
.
˘y≥
 = 
CTINT
;

336 
v
.
u
.
xvÆ
 = 
i
;

338 
CTCPLX
:

339 
i
 = 
	`mÆ
((*i));

340 if(
	`mpmoveÊtfix
(
i
, &
v
.
u
.
cvÆ
->
ªÆ
) < 0)

341 
	`yyîr‹
("c⁄°™à%#F%+#FòåunˇãdÅÿöãgî", &
v
.
u
.
cvÆ
->
ªÆ
, &v.u.cvÆ->
imag
);

342 if(
	`mpcmpÊtc
(&
v
.
u
.
cvÆ
->
imag
, 0) != 0)

343 
	`yyîr‹
("c⁄°™à%#F%+#FòåunˇãdÅÿªÆ", &
v
.
u
.
cvÆ
->
ªÆ
, &v.u.cvÆ->
imag
);

344 
v
.
˘y≥
 = 
CTINT
;

345 
v
.
u
.
xvÆ
 = 
i
;

348  
v
;

349 
	}
}

352 
	$ovîÊow
(
VÆ
 
v
, 
Ty≥
 *
t
)

356 if(
t
 =
T
 ||Å->
ëy≥
 =
TIDEAL
)

358 
v
.
˘y≥
) {

359 
CTINT
:

360 
CTRUNE
:

361 if(!
isöt
[
t
->
ëy≥
])

362 
	`Áèl
("ovîÊow: %T i¡egî c⁄°™t", 
t
);

363 if(
	`mpcmpfixfix
(
v
.
u
.
xvÆ
, 
möötvÆ
[
t
->
ëy≥
]) < 0 ||

364 
	`mpcmpfixfix
(
v
.
u
.
xvÆ
, 
maxötvÆ
[
t
->
ëy≥
]) > 0)

365 
	`yyîr‹
("c⁄°™à%B ovîÊow†%T", 
v
.
u
.
xvÆ
, 
t
);

367 
CTFLT
:

368 if(!
isÊﬂt
[
t
->
ëy≥
])

369 
	`Áèl
("ovîÊow: %T flﬂtög-poöàc⁄°™t", 
t
);

370 if(
	`mpcmpÊtÊt
(
v
.
u
.
fvÆ
, 
möÊtvÆ
[
t
->
ëy≥
]) <= 0 ||

371 
	`mpcmpÊtÊt
(
v
.
u
.
fvÆ
, 
maxÊtvÆ
[
t
->
ëy≥
]) >= 0)

372 
	`yyîr‹
("c⁄°™à%#F ovîÊow†%T", 
v
.
u
.
fvÆ
, 
t
);

374 
CTCPLX
:

375 if(!
iscom∂ex
[
t
->
ëy≥
])

376 
	`Áèl
("ovîÊow: %T com∂ex c⁄°™t", 
t
);

377 if(
	`mpcmpÊtÊt
(&
v
.
u
.
cvÆ
->
ªÆ
, 
möÊtvÆ
[
t
->
ëy≥
]) <= 0 ||

378 
	`mpcmpÊtÊt
(&
v
.
u
.
cvÆ
->
ªÆ
, 
maxÊtvÆ
[
t
->
ëy≥
]) >= 0 ||

379 
	`mpcmpÊtÊt
(&
v
.
u
.
cvÆ
->
imag
, 
möÊtvÆ
[
t
->
ëy≥
]) <= 0 ||

380 
	`mpcmpÊtÊt
(&
v
.
u
.
cvÆ
->
imag
, 
maxÊtvÆ
[
t
->
ëy≥
]) >= 0)

381 
	`yyîr‹
("c⁄°™à%#F ovîÊow†%T", 
v
.
u
.
fvÆ
, 
t
);

384 
	}
}

386 
VÆ


387 
	$to°r
(
VÆ
 
v
)

389 
Ru√
 
ru√
;

390 
l
;

391 
Sålô
 *
s
;

393 
v
.
˘y≥
) {

394 
CTINT
:

395 
CTRUNE
:

396 if(
	`mpcmpfixfix
(
v
.
u
.
xvÆ
, 
möötvÆ
[
TINT
]) < 0 ||

397 
	`mpcmpfixfix
(
v
.
u
.
xvÆ
, 
maxötvÆ
[
TINT
]) > 0)

398 
	`yyîr‹
("overflow in int -> string");

399 
ru√
 = 
	`mpgëfix
(
v
.
u
.
xvÆ
);

400 
l
 = 
	`ru√Àn
(
ru√
);

401 
s
 = 
	`mÆ
((*s)+
l
);

402 
s
->
Àn
 = 
l
;

403 
	`ru√toch¨
((*)
s
->s, &
ru√
);

404 
	`mem£t
(&
v
, 0,  v);

405 
v
.
˘y≥
 = 
CTSTR
;

406 
v
.
u
.
svÆ
 = 
s
;

409 
CTFLT
:

410 
	`yyîr‹
("no float -> string");

412 
CTNIL
:

413 
	`mem£t
(&
v
, 0,  v);

414 
v
.
˘y≥
 = 
CTSTR
;

415 
v
.
u
.
svÆ
 = 
	`mÆ
( *
s
);

418  
v
;

419 
	}
}

422 
	$c⁄°ty≥
(
Node
 *
n
)

424 if(
n
 =
N
 ||Ç->
›
 !
OLITERAL
)

426  
n
->
vÆ
.
˘y≥
;

427 
	}
}

430 
	$isc⁄°
(
Node
 *
n
, 
˘
)

432 
t
;

434 
t
 = 
	`c⁄°ty≥
(
n
);

437  
t
 =
˘
 || (˘ =
CTINT
 &&Å =
CTRUNE
);

438 
	}
}

444 
	$evc⁄°
(
Node
 *
n
)

446 
Node
 *
∆
, *
ƒ
, *
n‹ig
;

447 
öt32
 
Àn
;

448 
Sålô
 *
°r
;

449 
wl
, 
wr
, 
 o
, 
ë
;

450 
VÆ
 
v
, 
rv
;

451 
Mpöt
 
b
;

455 
n
->
›
) {

458 
OADD
:

459 
OADDSTR
:

460 
OAND
:

461 
OANDAND
:

462 
OANDNOT
:

463 
OARRAYBYTESTR
:

464 
OCOM
:

465 
ODIV
:

466 
OEQ
:

467 
OGE
:

468 
OGT
:

469 
OLE
:

470 
OLSH
:

471 
OLT
:

472 
OMINUS
:

473 
OMOD
:

474 
OMUL
:

475 
ONE
:

476 
ONOT
:

477 
OOR
:

478 
OOROR
:

479 
OPLUS
:

480 
ORSH
:

481 
OSUB
:

482 
OXOR
:

484 
OCONV
:

485 if(
n
->
ty≥
 =
T
)

487 if(!
okf‹c⁄°
[
n
->
ty≥
->
ëy≥
] &&Ç->ty≥->ëy≥ !
TNIL
)

492 
∆
 = 
n
->
À·
;

493 if(
∆
 =
N
 ||Çl->
ty≥
 =
T
)

495 if(
	`c⁄°ty≥
(
∆
) < 0)

497 
wl
 = 
∆
->
ty≥
->
ëy≥
;

498 if(
isöt
[
wl
] || 
isÊﬂt
[wl] || 
iscom∂ex
[wl])

499 
wl
 = 
TIDEAL
;

501 
ƒ
 = 
n
->
right
;

502 if(
ƒ
 =
N
)

503 
u«ry
;

504 if(
ƒ
->
ty≥
 =
T
)

506 if(
	`c⁄°ty≥
(
ƒ
) < 0)

508 
wr
 = 
ƒ
->
ty≥
->
ëy≥
;

509 if(
isöt
[
wr
] || 
isÊﬂt
[wr] || 
iscom∂ex
[wr])

510 
wr
 = 
TIDEAL
;

513 if(
wl
 !
wr
)

514 
ûÀgÆ
;

517 
n
->
›
) {

520 if(
∆
->
ty≥
->
ëy≥
 !
TIDEAL
) {

521 
	`deÁu…lô
(&
ƒ
, 
∆
->
ty≥
);

522 
n
->
right
 = 
ƒ
;

524 if(
ƒ
->
ty≥
->
ëy≥
 !
TIDEAL
) {

525 
	`deÁu…lô
(&
∆
, 
ƒ
->
ty≥
);

526 
n
->
À·
 = 
∆
;

528 if(
∆
->
ty≥
->
ëy≥
 !
ƒ
->type->etype)

529 
ûÀgÆ
;

532 
OLSH
:

533 
ORSH
:

536 
	`deÁu…lô
(&
ƒ
, 
ty≥s
[
TUINT
]);

537 
n
->
right
 = 
ƒ
;

538 if(
ƒ
->
ty≥
 && (
issig√d
[ƒ->ty≥->
ëy≥
] || !
isöt
[nr->type->etype]))

539 
ûÀgÆ
;

540 if(
∆
->
vÆ
.
˘y≥
 !
CTRUNE
)

541 
∆
->
vÆ
 = 
	`toöt
(nl->val);

542 
ƒ
->
vÆ
 = 
	`toöt
(nr->val);

548 
v
 = 
∆
->
vÆ
;

549 if(
wl
 =
TIDEAL
)

550 
v
 = 
	`c›yvÆ
(v);

552 
rv
 = 
ƒ
->
vÆ
;

555 if(
v
.
˘y≥
 =
CTCPLX
 || 
rv
.ctype == CTCPLX) {

556 
v
 = 
	`to˝lx
(v);

557 
rv
 = 
	`to˝lx
(rv);

559 if(
v
.
˘y≥
 =
CTFLT
 || 
rv
.ctype == CTFLT) {

560 
v
 = 
	`toÊt
(v);

561 
rv
 = 
	`toÊt
(rv);

565 if(
v
.
˘y≥
 =
CTRUNE
 && 
rv
.˘y≥ =
CTINT
)

566 
rv
.
˘y≥
 = 
CTRUNE
;

567 if(
v
.
˘y≥
 =
CTINT
 && 
rv
.˘y≥ =
CTRUNE
) {

568 if(
n
->
›
 =
OLSH
 ||Ç->› =
ORSH
)

569 
rv
.
˘y≥
 = 
CTINT
;

571 
v
.
˘y≥
 = 
CTRUNE
;

574 if(
v
.
˘y≥
 !
rv
.ctype) {

576 if((
v
.
˘y≥
 =0 || 
rv
.˘y≥ =0Ë&& 
√º‹s
 > 0)

578 
	`Áèl
("c⁄°™àty≥ mism©ch %T(%dË%T(%d)", 
∆
->
ty≥
, 
v
.
˘y≥
, 
ƒ
->ty≥, 
rv
.ctype);

582 
	`TUP
(
n
->
›
, 
v
.
˘y≥
)) {

584 
ûÀgÆ
:

585 if(!
n
->
düg
) {

586 
	`yyîr‹
("illegal constantÉxpression: %T %O %T",

587 
∆
->
ty≥
, 
n
->
›
, 
ƒ
->type);

588 
n
->
düg
 = 1;

592 
	`TUP
(
OADD
, 
CTINT
):

593 
	`TUP
(
OADD
, 
CTRUNE
):

594 
	`m∑ddfixfix
(
v
.
u
.
xvÆ
, 
rv
.u.xval, 0);

596 
	`TUP
(
OSUB
, 
CTINT
):

597 
	`TUP
(
OSUB
, 
CTRUNE
):

598 
	`mpsubfixfix
(
v
.
u
.
xvÆ
, 
rv
.u.xval);

600 
	`TUP
(
OMUL
, 
CTINT
):

601 
	`TUP
(
OMUL
, 
CTRUNE
):

602 
	`mpmulfixfix
(
v
.
u
.
xvÆ
, 
rv
.u.xval);

604 
	`TUP
(
ODIV
, 
CTINT
):

605 
	`TUP
(
ODIV
, 
CTRUNE
):

606 if(
	`mpcmpfixc
(
rv
.
u
.
xvÆ
, 0) == 0) {

607 
	`yyîr‹
("division by zero");

608 
	`mpmovecfix
(
v
.
u
.
xvÆ
, 1);

611 
	`mpdivfixfix
(
v
.
u
.
xvÆ
, 
rv
.u.xval);

613 
	`TUP
(
OMOD
, 
CTINT
):

614 
	`TUP
(
OMOD
, 
CTRUNE
):

615 if(
	`mpcmpfixc
(
rv
.
u
.
xvÆ
, 0) == 0) {

616 
	`yyîr‹
("division by zero");

617 
	`mpmovecfix
(
v
.
u
.
xvÆ
, 1);

620 
	`mpmodfixfix
(
v
.
u
.
xvÆ
, 
rv
.u.xval);

623 
	`TUP
(
OLSH
, 
CTINT
):

624 
	`TUP
(
OLSH
, 
CTRUNE
):

625 
	`m∂shfixfix
(
v
.
u
.
xvÆ
, 
rv
.u.xval);

627 
	`TUP
(
ORSH
, 
CTINT
):

628 
	`TUP
(
ORSH
, 
CTRUNE
):

629 
	`m¥shfixfix
(
v
.
u
.
xvÆ
, 
rv
.u.xval);

631 
	`TUP
(
OOR
, 
CTINT
):

632 
	`TUP
(
OOR
, 
CTRUNE
):

633 
	`mp‹fixfix
(
v
.
u
.
xvÆ
, 
rv
.u.xval);

635 
	`TUP
(
OAND
, 
CTINT
):

636 
	`TUP
(
OAND
, 
CTRUNE
):

637 
	`m∑ndfixfix
(
v
.
u
.
xvÆ
, 
rv
.u.xval);

639 
	`TUP
(
OANDNOT
, 
CTINT
):

640 
	`TUP
(
OANDNOT
, 
CTRUNE
):

641 
	`m∑ndnŸfixfix
(
v
.
u
.
xvÆ
, 
rv
.u.xval);

643 
	`TUP
(
OXOR
, 
CTINT
):

644 
	`TUP
(
OXOR
, 
CTRUNE
):

645 
	`mpx‹fixfix
(
v
.
u
.
xvÆ
, 
rv
.u.xval);

648 
	`TUP
(
OADD
, 
CTFLT
):

649 
	`m∑ddÊtÊt
(
v
.
u
.
fvÆ
, 
rv
.u.fval);

651 
	`TUP
(
OSUB
, 
CTFLT
):

652 
	`mpsubÊtÊt
(
v
.
u
.
fvÆ
, 
rv
.u.fval);

654 
	`TUP
(
OMUL
, 
CTFLT
):

655 
	`mpmulÊtÊt
(
v
.
u
.
fvÆ
, 
rv
.u.fval);

657 
	`TUP
(
ODIV
, 
CTFLT
):

658 if(
	`mpcmpÊtc
(
rv
.
u
.
fvÆ
, 0) == 0) {

659 
	`yyîr‹
("division by zero");

660 
	`mpmovecÊt
(
v
.
u
.
fvÆ
, 1.0);

663 
	`mpdivÊtÊt
(
v
.
u
.
fvÆ
, 
rv
.u.fval);

665 
	`TUP
(
OMOD
, 
CTFLT
):

668 if(!
n
->
düg
) {

669 
	`yyîr‹
("illegal constantÉxpression: floating-point %% operation");

670 
n
->
düg
 = 1;

674 
	`TUP
(
OADD
, 
CTCPLX
):

675 
	`m∑ddÊtÊt
(&
v
.
u
.
cvÆ
->
ªÆ
, &
rv
.u.cval->real);

676 
	`m∑ddÊtÊt
(&
v
.
u
.
cvÆ
->
imag
, &
rv
.u.cval->imag);

678 
	`TUP
(
OSUB
, 
CTCPLX
):

679 
	`mpsubÊtÊt
(&
v
.
u
.
cvÆ
->
ªÆ
, &
rv
.u.cval->real);

680 
	`mpsubÊtÊt
(&
v
.
u
.
cvÆ
->
imag
, &
rv
.u.cval->imag);

682 
	`TUP
(
OMUL
, 
CTCPLX
):

683 
	`cm∂xmpy
(
v
.
u
.
cvÆ
, 
rv
.u.cval);

685 
	`TUP
(
ODIV
, 
CTCPLX
):

686 if(
	`mpcmpÊtc
(&
rv
.
u
.
cvÆ
->
ªÆ
, 0) == 0 &&

687 
	`mpcmpÊtc
(&
rv
.
u
.
cvÆ
->
imag
, 0) == 0) {

688 
	`yyîr‹
("complex division by zero");

689 
	`mpmovecÊt
(&
rv
.
u
.
cvÆ
->
ªÆ
, 1.0);

690 
	`mpmovecÊt
(&
rv
.
u
.
cvÆ
->
imag
, 0.0);

693 
	`cm∂xdiv
(
v
.
u
.
cvÆ
, 
rv
.u.cval);

696 
	`TUP
(
OEQ
, 
CTNIL
):

697 
£ârue
;

698 
	`TUP
(
ONE
, 
CTNIL
):

699 
£tÁl£
;

701 
	`TUP
(
OEQ
, 
CTINT
):

702 
	`TUP
(
OEQ
, 
CTRUNE
):

703 if(
	`mpcmpfixfix
(
v
.
u
.
xvÆ
, 
rv
.u.xval) == 0)

704 
£ârue
;

705 
£tÁl£
;

706 
	`TUP
(
ONE
, 
CTINT
):

707 
	`TUP
(
ONE
, 
CTRUNE
):

708 if(
	`mpcmpfixfix
(
v
.
u
.
xvÆ
, 
rv
.u.xval) != 0)

709 
£ârue
;

710 
£tÁl£
;

711 
	`TUP
(
OLT
, 
CTINT
):

712 
	`TUP
(
OLT
, 
CTRUNE
):

713 if(
	`mpcmpfixfix
(
v
.
u
.
xvÆ
, 
rv
.u.xval) < 0)

714 
£ârue
;

715 
£tÁl£
;

716 
	`TUP
(
OLE
, 
CTINT
):

717 
	`TUP
(
OLE
, 
CTRUNE
):

718 if(
	`mpcmpfixfix
(
v
.
u
.
xvÆ
, 
rv
.u.xval) <= 0)

719 
£ârue
;

720 
£tÁl£
;

721 
	`TUP
(
OGE
, 
CTINT
):

722 
	`TUP
(
OGE
, 
CTRUNE
):

723 if(
	`mpcmpfixfix
(
v
.
u
.
xvÆ
, 
rv
.u.xval) >= 0)

724 
£ârue
;

725 
£tÁl£
;

726 
	`TUP
(
OGT
, 
CTINT
):

727 
	`TUP
(
OGT
, 
CTRUNE
):

728 if(
	`mpcmpfixfix
(
v
.
u
.
xvÆ
, 
rv
.u.xval) > 0)

729 
£ârue
;

730 
£tÁl£
;

732 
	`TUP
(
OEQ
, 
CTFLT
):

733 if(
	`mpcmpÊtÊt
(
v
.
u
.
fvÆ
, 
rv
.u.fval) == 0)

734 
£ârue
;

735 
£tÁl£
;

736 
	`TUP
(
ONE
, 
CTFLT
):

737 if(
	`mpcmpÊtÊt
(
v
.
u
.
fvÆ
, 
rv
.u.fval) != 0)

738 
£ârue
;

739 
£tÁl£
;

740 
	`TUP
(
OLT
, 
CTFLT
):

741 if(
	`mpcmpÊtÊt
(
v
.
u
.
fvÆ
, 
rv
.u.fval) < 0)

742 
£ârue
;

743 
£tÁl£
;

744 
	`TUP
(
OLE
, 
CTFLT
):

745 if(
	`mpcmpÊtÊt
(
v
.
u
.
fvÆ
, 
rv
.u.fval) <= 0)

746 
£ârue
;

747 
£tÁl£
;

748 
	`TUP
(
OGE
, 
CTFLT
):

749 if(
	`mpcmpÊtÊt
(
v
.
u
.
fvÆ
, 
rv
.u.fval) >= 0)

750 
£ârue
;

751 
£tÁl£
;

752 
	`TUP
(
OGT
, 
CTFLT
):

753 if(
	`mpcmpÊtÊt
(
v
.
u
.
fvÆ
, 
rv
.u.fval) > 0)

754 
£ârue
;

755 
£tÁl£
;

757 
	`TUP
(
OEQ
, 
CTCPLX
):

758 if(
	`mpcmpÊtÊt
(&
v
.
u
.
cvÆ
->
ªÆ
, &
rv
.u.cval->real) == 0 &&

759 
	`mpcmpÊtÊt
(&
v
.
u
.
cvÆ
->
imag
, &
rv
.u.cval->imag) == 0)

760 
£ârue
;

761 
£tÁl£
;

762 
	`TUP
(
ONE
, 
CTCPLX
):

763 if(
	`mpcmpÊtÊt
(&
v
.
u
.
cvÆ
->
ªÆ
, &
rv
.u.cval->real) != 0 ||

764 
	`mpcmpÊtÊt
(&
v
.
u
.
cvÆ
->
imag
, &
rv
.u.cval->imag) != 0)

765 
£ârue
;

766 
£tÁl£
;

768 
	`TUP
(
OEQ
, 
CTSTR
):

769 if(
	`cmp¶ô
(
∆
, 
ƒ
) == 0)

770 
£ârue
;

771 
£tÁl£
;

772 
	`TUP
(
ONE
, 
CTSTR
):

773 if(
	`cmp¶ô
(
∆
, 
ƒ
) != 0)

774 
£ârue
;

775 
£tÁl£
;

776 
	`TUP
(
OLT
, 
CTSTR
):

777 if(
	`cmp¶ô
(
∆
, 
ƒ
) < 0)

778 
£ârue
;

779 
£tÁl£
;

780 
	`TUP
(
OLE
, 
CTSTR
):

781 if(
	`cmp¶ô
(
∆
, 
ƒ
) <= 0)

782 
£ârue
;

783 
£tÁl£
;

784 
	`TUP
(
OGE
, 
CTSTR
):

785 if(
	`cmp¶ô
(
∆
, 
ƒ
) >= 0l)

786 
£ârue
;

787 
£tÁl£
;

788 
	`TUP
(
OGT
, 
CTSTR
):

789 if(
	`cmp¶ô
(
∆
, 
ƒ
) > 0)

790 
£ârue
;

791 
£tÁl£
;

792 
	`TUP
(
OADDSTR
, 
CTSTR
):

793 
Àn
 = 
v
.
u
.
svÆ
->À¿+ 
rv
.u.sval->len;

794 
°r
 = 
	`mÆ
((*°rË+ 
Àn
);

795 
°r
->
Àn
 =Üen;

796 
	`mem˝y
(
°r
->
s
, 
v
.
u
.
svÆ
->s, v.u.svÆ->
Àn
);

797 
	`mem˝y
(
°r
->
s
+
v
.
u
.
svÆ
->
Àn
, 
rv
.u.sval->s,Ñv.u.sval->len);

798 
°r
->
Àn
 =Üen;

799 
v
.
u
.
svÆ
 = 
°r
;

802 
	`TUP
(
OOROR
, 
CTBOOL
):

803 if(
v
.
u
.
bvÆ
 || 
rv
.u.bval)

804 
£ârue
;

805 
£tÁl£
;

806 
	`TUP
(
OANDAND
, 
CTBOOL
):

807 if(
v
.
u
.
bvÆ
 && 
rv
.u.bval)

808 
£ârue
;

809 
£tÁl£
;

810 
	`TUP
(
OEQ
, 
CTBOOL
):

811 if(
v
.
u
.
bvÆ
 =
rv
.u.bval)

812 
£ârue
;

813 
£tÁl£
;

814 
	`TUP
(
ONE
, 
CTBOOL
):

815 if(
v
.
u
.
bvÆ
 !
rv
.u.bval)

816 
£ârue
;

817 
£tÁl£
;

819 
ªt
;

821 
u«ry
:

824 
v
 = 
∆
->
vÆ
;

825 if(
wl
 =
TIDEAL
)

826 
v
 = 
	`c›yvÆ
(v);

828 
	`TUP
(
n
->
›
, 
v
.
˘y≥
)) {

830 if(!
n
->
düg
) {

831 
	`yyîr‹
("ûÀgÆ c⁄°™àex¥essi⁄ %O %T", 
n
->
›
, 
∆
->
ty≥
);

832 
n
->
düg
 = 1;

836 
	`TUP
(
OCONV
, 
CTNIL
):

837 
	`TUP
(
OARRAYBYTESTR
, 
CTNIL
):

838 if(
n
->
ty≥
->
ëy≥
 =
TSTRING
) {

839 
v
 = 
	`to°r
(v);

840 
∆
->
ty≥
 = 
n
->type;

844 
	`TUP
(
OCONV
, 
CTINT
):

845 
	`TUP
(
OCONV
, 
CTRUNE
):

846 
	`TUP
(
OCONV
, 
CTFLT
):

847 
	`TUP
(
OCONV
, 
CTSTR
):

848 
	`c⁄vlô1
(&
∆
, 
n
->
ty≥
, 1);

851 
	`TUP
(
OPLUS
, 
CTINT
):

852 
	`TUP
(
OPLUS
, 
CTRUNE
):

854 
	`TUP
(
OMINUS
, 
CTINT
):

855 
	`TUP
(
OMINUS
, 
CTRUNE
):

856 
	`m≤egfix
(
v
.
u
.
xvÆ
);

858 
	`TUP
(
OCOM
, 
CTINT
):

859 
	`TUP
(
OCOM
, 
CTRUNE
):

860 
ë
 = 
Txxx
;

861 if(
∆
->
ty≥
 !
T
)

862 
ë
 = 
∆
->
ty≥
->
ëy≥
;

866 
ë
) {

869 
	`mpmovecfix
(&
b
, -1);

872 
TUINT8
:

873 
TUINT16
:

874 
TUINT32
:

875 
TUINT64
:

876 
TUINT
:

877 
TUINTPTR
:

879 
	`mpmovefixfix
(&
b
, 
maxötvÆ
[
ë
]);

882 
	`mpx‹fixfix
(
v
.
u
.
xvÆ
, &
b
);

885 
	`TUP
(
OPLUS
, 
CTFLT
):

887 
	`TUP
(
OMINUS
, 
CTFLT
):

888 
	`m≤egÊt
(
v
.
u
.
fvÆ
);

891 
	`TUP
(
OPLUS
, 
CTCPLX
):

893 
	`TUP
(
OMINUS
, 
CTCPLX
):

894 
	`m≤egÊt
(&
v
.
u
.
cvÆ
->
ªÆ
);

895 
	`m≤egÊt
(&
v
.
u
.
cvÆ
->
imag
);

898 
	`TUP
(
ONOT
, 
CTBOOL
):

899 if(!
v
.
u
.
bvÆ
)

900 
£ârue
;

901 
£tÁl£
;

904 
ªt
:

905 if(
n
 =n->
‹ig
) {

907 
n‹ig
 = 
	`nod
(
OLITERAL
, 
N
, N);

908 *
n‹ig
 = *
n
;

910 
n‹ig
 = 
n
->
‹ig
;

911 *
n
 = *
∆
;

913 
n
->
‹ig
 = 
n‹ig
;

914 
n
->
vÆ
 = 
v
;

917 
 o
 = 
	`£éöío
(
n
);

918 
	`ovîÊow
(
v
, 
n
->
ty≥
);

919 
löío
 = 
 o
;

922 if(
v
.
˘y≥
 =
CTFLT
 && 
n
->
ty≥
->
ëy≥
 !
TIDEAL
)

923 
n
->
vÆ
.
u
.
fvÆ
 = 
	`åuncÊéô
(
v
.u.fvÆ,Ç->
ty≥
);

926 
£ârue
:

927 *
n
 = *
	`nodboﬁ
(1);

930 
£tÁl£
:

931 *
n
 = *
	`nodboﬁ
(0);

933 
	}
}

935 
Node
*

936 
	$nodlô
(
VÆ
 
v
)

938 
Node
 *
n
;

940 
n
 = 
	`nod
(
OLITERAL
, 
N
, N);

941 
n
->
vÆ
 = 
v
;

942 
v
.
˘y≥
) {

944 
	`Áèl
("nodlô cty≥ %d", 
v
.
˘y≥
);

945 
CTSTR
:

946 
n
->
ty≥
 = 
idól°rög
;

948 
CTBOOL
:

949 
n
->
ty≥
 = 
idólboﬁ
;

951 
CTINT
:

952 
CTRUNE
:

953 
CTFLT
:

954 
CTCPLX
:

955 
n
->
ty≥
 = 
ty≥s
[
TIDEAL
];

957 
CTNIL
:

958 
n
->
ty≥
 = 
ty≥s
[
TNIL
];

961  
n
;

962 
	}
}

964 
Node
*

965 
	$nod˝lxlô
(
VÆ
 
r
, VÆ 
i
)

967 
Node
 *
n
;

968 
Mp˝lx
 *
c
;

970 
r
 = 
	`toÊt
(r);

971 
i
 = 
	`toÊt
(i);

973 
c
 = 
	`mÆ
((*c));

974 
n
 = 
	`nod
(
OLITERAL
, 
N
, N);

975 
n
->
ty≥
 = 
ty≥s
[
TIDEAL
];

976 
n
->
vÆ
.
u
.
cvÆ
 = 
c
;

977 
n
->
vÆ
.
˘y≥
 = 
CTCPLX
;

979 if(
r
.
˘y≥
 !
CTFLT
 || 
i
.ctype != CTFLT)

980 
	`Áèl
("nod˝lxlô cty≥ %d/%d", 
r
.
˘y≥
, 
i
.ctype);

982 
	`mpmoveÊtÊt
(&
c
->
ªÆ
, 
r
.
u
.
fvÆ
);

983 
	`mpmoveÊtÊt
(&
c
->
imag
, 
i
.
u
.
fvÆ
);

984  
n
;

985 
	}
}

989 
	$deÁu…lô
(
Node
 **
≈
, 
Ty≥
 *
t
)

991 
 o
;

992 
Node
 *
n
, *
¬
;

994 
n
 = *
≈
;

995 if(
n
 =
N
 || !
	`isidól
“->
ty≥
))

998 
n
->
›
) {

999 
OLITERAL
:

1000 
¬
 = 
	`nod
(
OXXX
, 
N
, N);

1001 *
¬
 = *
n
;

1002 
n
 = 
¬
;

1003 *
≈
 = 
n
;

1005 
OLSH
:

1006 
ORSH
:

1007 
	`deÁu…lô
(&
n
->
À·
, 
t
);

1008 
t
 = 
n
->
À·
->
ty≥
;

1009 if(
t
 !
T
 && !
isöt
[t->
ëy≥
]) {

1010 
	`yyîr‹
("övÆid o≥øti⁄: %N (shi· o‡ty≥ %T)", 
n
, 
t
);

1011 
t
 = 
T
;

1013 
n
->
ty≥
 = 
t
;

1015 
ONOT
:

1016 
	`deÁu…lô
(&
n
->
À·
, 
t
);

1017 
n
->
ty≥
 =Ç->
À·
->type;

1020 if(
n
->
À·
 =
N
) {

1021 
	`dump
("deÁu…lô", 
n
);

1022 
	`Áèl
("defaultlit");

1032 if(
t
 =
T
 && (
n
->
right
->
›
 =
OLSH
 ||Ç->right->› =
ORSH
)) {

1033 
	`deÁu…lô
(&
n
->
À·
, 
T
);

1034 
	`deÁu…lô
(&
n
->
right
,Ç->
À·
->
ty≥
);

1035 } if(
t
 =
T
 && (
n
->
À·
->
›
 =
OLSH
 ||Ç->À·->› =
ORSH
)) {

1036 
	`deÁu…lô
(&
n
->
right
, 
T
);

1037 
	`deÁu…lô
(&
n
->
À·
,Ç->
right
->
ty≥
);

1038 } if(
iscmp
[
n
->
›
]) {

1039 
	`deÁu…lô2
(&
n
->
À·
, &n->
right
, 1);

1041 
	`deÁu…lô
(&
n
->
À·
, 
t
);

1042 
	`deÁu…lô
(&
n
->
right
, 
t
);

1044 if(
n
->
ty≥
 =
idólboﬁ
 ||Ç->ty≥ =
idól°rög
) {

1045 if(
t
 !
T
 &&Å->
ëy≥
 =
n
->
ty≥
->etype)

1046 
n
->
ty≥
 = 
t
;

1048 
n
->
ty≥
 = 
ty≥s
[n->ty≥->
ëy≥
];

1050 
n
->
ty≥
 =Ç->
À·
->type;

1054 
 o
 = 
	`£éöío
(
n
);

1055 
n
->
vÆ
.
˘y≥
) {

1057 if(
t
 !
T
) {

1058 
	`c⁄vlô
(
≈
, 
t
);

1061 if(
n
->
vÆ
.
˘y≥
 =
CTNIL
) {

1062 
löío
 = 
 o
;

1063 
	`yyîr‹
("use of untypedÇil");

1064 
n
->
ty≥
 = 
T
;

1067 if(
n
->
vÆ
.
˘y≥
 =
CTSTR
) {

1068 
n
->
ty≥
 = 
ty≥s
[
TSTRING
];

1071 
	`yyîr‹
("deÁu…lô: unknow¿lôîÆ: %N", 
n
);

1073 
CTBOOL
:

1074 
n
->
ty≥
 = 
ty≥s
[
TBOOL
];

1075 if(
t
 !
T
 &&Å->
ëy≥
 =
TBOOL
)

1076 
n
->
ty≥
 = 
t
;

1078 
CTINT
:

1079 
n
->
ty≥
 = 
ty≥s
[
TINT
];

1080 
num
;

1081 
CTRUNE
:

1082 
n
->
ty≥
 = 
ru√ty≥
;

1083 
num
;

1084 
CTFLT
:

1085 
n
->
ty≥
 = 
ty≥s
[
TFLOAT64
];

1086 
num
;

1087 
CTCPLX
:

1088 
n
->
ty≥
 = 
ty≥s
[
TCOMPLEX128
];

1089 
num
;

1090 
num
:

1091 if(
t
 !
T
) {

1092 if(
isöt
[
t
->
ëy≥
]) {

1093 
n
->
ty≥
 = 
t
;

1094 
n
->
vÆ
 = 
	`toöt
(n->val);

1097 if(
isÊﬂt
[
t
->
ëy≥
]) {

1098 
n
->
ty≥
 = 
t
;

1099 
n
->
vÆ
 = 
	`toÊt
(n->val);

1102 if(
iscom∂ex
[
t
->
ëy≥
]) {

1103 
n
->
ty≥
 = 
t
;

1104 
n
->
vÆ
 = 
	`to˝lx
(n->val);

1107 
	`ovîÊow
(
n
->
vÆ
,Ç->
ty≥
);

1110 
löío
 = 
 o
;

1111 
	}
}

1120 
	$deÁu…lô2
(
Node
 **
Õ
, Nodê**
Ω
, 
f‹˚
)

1122 
Node
 *
l
, *
r
;

1124 
l
 = *
Õ
;

1125 
r
 = *
Ω
;

1126 if(
l
->
ty≥
 =
T
 || 
r
->type == T)

1128 if(!
	`isidól
(
l
->
ty≥
)) {

1129 
	`c⁄vlô
(
Ω
, 
l
->
ty≥
);

1132 if(!
	`isidól
(
r
->
ty≥
)) {

1133 
	`c⁄vlô
(
Õ
, 
r
->
ty≥
);

1136 if(!
f‹˚
)

1138 if(
l
->
ty≥
->
ëy≥
 =
TBOOL
) {

1139 
	`c⁄vlô
(
Õ
, 
ty≥s
[
TBOOL
]);

1140 
	`c⁄vlô
(
Ω
, 
ty≥s
[
TBOOL
]);

1142 if(
	`isc⁄°
(
l
, 
CTCPLX
Ë|| isc⁄°(
r
, CTCPLX)) {

1143 
	`c⁄vlô
(
Õ
, 
ty≥s
[
TCOMPLEX128
]);

1144 
	`c⁄vlô
(
Ω
, 
ty≥s
[
TCOMPLEX128
]);

1147 if(
	`isc⁄°
(
l
, 
CTFLT
Ë|| isc⁄°(
r
, CTFLT)) {

1148 
	`c⁄vlô
(
Õ
, 
ty≥s
[
TFLOAT64
]);

1149 
	`c⁄vlô
(
Ω
, 
ty≥s
[
TFLOAT64
]);

1153 if(
	`isc⁄°
(
l
, 
CTRUNE
Ë|| isc⁄°(
r
, CTRUNE)) {

1154 
	`c⁄vlô
(
Õ
, 
ru√ty≥
);

1155 
	`c⁄vlô
(
Ω
, 
ru√ty≥
);

1159 
	`c⁄vlô
(
Õ
, 
ty≥s
[
TINT
]);

1160 
	`c⁄vlô
(
Ω
, 
ty≥s
[
TINT
]);

1161 
	}
}

1164 
	$cmp¶ô
(
Node
 *
l
, Nodê*
r
)

1166 
öt32
 
l1
, 
l2
, 
i
, 
m
;

1167 
uch¨
 *
s1
, *
s2
;

1169 
l1
 = 
l
->
vÆ
.
u
.
svÆ
->
Àn
;

1170 
l2
 = 
r
->
vÆ
.
u
.
svÆ
->
Àn
;

1171 
s1
 = (
uch¨
*)
l
->
vÆ
.
u
.
svÆ
->
s
;

1172 
s2
 = (
uch¨
*)
r
->
vÆ
.
u
.
svÆ
->
s
;

1174 
m
 = 
l1
;

1175 if(
l2
 < 
m
)

1176 
m
 = 
l2
;

1178 
i
=0; i<
m
; i++) {

1179 if(
s1
[
i
] =
s2
[i])

1181 if(
s1
[
i
] > 
s2
[i])

1185 if(
l1
 =
l2
)

1187 if(
l1
 > 
l2
)

1190 
	}
}

1193 
	$smÆlötc⁄°
(
Node
 *
n
)

1195 if(
n
->
›
 =
OLITERAL
 && 
	`isc⁄°
“, 
CTINT
Ë&&Ç->
ty≥
 !
T
)

1196 
simty≥
[
n
->
ty≥
->
ëy≥
]) {

1197 
TINT8
:

1198 
TUINT8
:

1199 
TINT16
:

1200 
TUINT16
:

1201 
TINT32
:

1202 
TUINT32
:

1203 
TBOOL
:

1204 
TPTR32
:

1206 
TIDEAL
:

1207 
TINT64
:

1208 
TUINT64
:

1209 if(
	`mpcmpfixfix
(
n
->
vÆ
.
u
.
xvÆ
, 
möötvÆ
[
TINT32
]) < 0

1210 || 
	`mpcmpfixfix
(
n
->
vÆ
.
u
.
xvÆ
, 
maxötvÆ
[
TINT32
]) > 0)

1215 
	}
}

1218 
	$n⁄√gc⁄°
(
Node
 *
n
)

1220 if(
n
->
›
 =
OLITERAL
 &&Ç->
ty≥
 !
T
)

1221 
simty≥
[
n
->
ty≥
->
ëy≥
]) {

1222 
TINT8
:

1223 
TUINT8
:

1224 
TINT16
:

1225 
TUINT16
:

1226 
TINT32
:

1227 
TUINT32
:

1228 
TINT64
:

1229 
TUINT64
:

1230 
TIDEAL
:

1232 if(
	`mpcmpfixfix
(
n
->
vÆ
.
u
.
xvÆ
, 
möötvÆ
[
TUINT32
]) < 0

1233 || 
	`mpcmpfixfix
(
n
->
vÆ
.
u
.
xvÆ
, 
maxötvÆ
[
TINT32
]) > 0)

1235  
	`mpgëfix
(
n
->
vÆ
.
u
.
xvÆ
);

1238 
	}
}

1244 
öt64


1245 
	$ic⁄v
(
öt64
 
x
, 
ë
)

1247 
ë
) {

1248 
TINT8
:

1249 
x
 = (
öt8
)x;

1251 
TUINT8
:

1252 
x
 = (
uöt8
)x;

1254 
TINT16
:

1255 
x
 = (
öt16
)x;

1257 
TUINT16
:

1258 
x
 = (
uöt64
)x;

1260 
TINT32
:

1261 
x
 = (
öt32
)x;

1263 
TUINT32
:

1264 
x
 = (
uöt32
)x;

1266 
TINT64
:

1267 
TUINT64
:

1270  
x
;

1271 
	}
}

1278 
	$c⁄vc⁄°
(
Node
 *
c⁄
, 
Ty≥
 *
t
, 
VÆ
 *
vÆ
)

1280 
öt64
 
i
;

1281 
â
;

1283 
â
 = 
	`simsimty≥
(
t
);

1286 
	`nodc⁄°
(
c⁄
, 
ty≥s
[
TINT8
], 0);

1287 
c⁄
->
ty≥
 = 
t
;

1288 
c⁄
->
vÆ
 = *val;

1290 if(
isöt
[
â
]) {

1291 
c⁄
->
vÆ
.
˘y≥
 = 
CTINT
;

1292 
c⁄
->
vÆ
.
u
.
xvÆ
 = 
	`mÆ
( *con->val.u.xval);

1293 
vÆ
->
˘y≥
) {

1295 
	`Áèl
("c⁄vc⁄° cty≥=%d %lT", 
vÆ
->
˘y≥
, 
t
);

1296 
CTINT
:

1297 
CTRUNE
:

1298 
i
 = 
	`mpgëfix
(
vÆ
->
u
.
xvÆ
);

1300 
CTBOOL
:

1301 
i
 = 
vÆ
->
u
.
bvÆ
;

1303 
CTNIL
:

1304 
i
 = 0;

1307 
i
 = 
	`ic⁄v
(i, 
â
);

1308 
	`mpmovecfix
(
c⁄
->
vÆ
.
u
.
xvÆ
, 
i
);

1312 if(
isÊﬂt
[
â
]) {

1313 
c⁄
->
vÆ
 = 
	`toÊt
(con->val);

1314 if(
c⁄
->
vÆ
.
˘y≥
 !
CTFLT
)

1315 
	`Áèl
("c⁄vc⁄° cty≥=%d %T", 
c⁄
->
vÆ
.
˘y≥
, 
t
);

1316 if(
â
 =
TFLOAT32
)

1317 
c⁄
->
vÆ
.
u
.
fvÆ
 = 
	`åuncÊéô
(c⁄->vÆ.u.fvÆ, 
t
);

1321 if(
iscom∂ex
[
â
]) {

1322 
c⁄
->
vÆ
 = 
	`to˝lx
(con->val);

1323 if(
â
 =
TCOMPLEX64
) {

1324 
c⁄
->
vÆ
.
u
.
cvÆ
->
ªÆ
 = *
	`åuncÊéô
(&c⁄->vÆ.u.cvÆ->ªÆ, 
ty≥s
[
TFLOAT32
]);

1325 
c⁄
->
vÆ
.
u
.
cvÆ
->
imag
 = *
	`åuncÊéô
(&c⁄->vÆ.u.cvÆ->imag, 
ty≥s
[
TFLOAT32
]);

1330 
	`Áèl
("c⁄vc⁄° %lT c⁄°™t", 
t
);

1332 
	}
}

1337 
	$cm∂xmpy
(
Mp˝lx
 *
v
, Mp˝lx *
rv
)

1339 
MpÊt
 
ac
, 
bd
, 
bc
, 
ad
;

1341 
	`mpmoveÊtÊt
(&
ac
, &
v
->
ªÆ
);

1342 
	`mpmulÊtÊt
(&
ac
, &
rv
->
ªÆ
);

1344 
	`mpmoveÊtÊt
(&
bd
, &
v
->
imag
);

1345 
	`mpmulÊtÊt
(&
bd
, &
rv
->
imag
);

1347 
	`mpmoveÊtÊt
(&
bc
, &
v
->
imag
);

1348 
	`mpmulÊtÊt
(&
bc
, &
rv
->
ªÆ
);

1350 
	`mpmoveÊtÊt
(&
ad
, &
v
->
ªÆ
);

1351 
	`mpmulÊtÊt
(&
ad
, &
rv
->
imag
);

1353 
	`mpmoveÊtÊt
(&
v
->
ªÆ
, &
ac
);

1354 
	`mpsubÊtÊt
(&
v
->
ªÆ
, &
bd
);

1356 
	`mpmoveÊtÊt
(&
v
->
imag
, &
bc
);

1357 
	`m∑ddÊtÊt
(&
v
->
imag
, &
ad
);

1358 
	}
}

1363 
	$cm∂xdiv
(
Mp˝lx
 *
v
, Mp˝lx *
rv
)

1365 
MpÊt
 
ac
, 
bd
, 
bc
, 
ad
, 
cc_∂us_dd
;

1367 
	`mpmoveÊtÊt
(&
cc_∂us_dd
, &
rv
->
ªÆ
);

1368 
	`mpmulÊtÊt
(&
cc_∂us_dd
, &
rv
->
ªÆ
);

1370 
	`mpmoveÊtÊt
(&
ac
, &
rv
->
imag
);

1371 
	`mpmulÊtÊt
(&
ac
, &
rv
->
imag
);

1373 
	`m∑ddÊtÊt
(&
cc_∂us_dd
, &
ac
);

1375 
	`mpmoveÊtÊt
(&
ac
, &
v
->
ªÆ
);

1376 
	`mpmulÊtÊt
(&
ac
, &
rv
->
ªÆ
);

1378 
	`mpmoveÊtÊt
(&
bd
, &
v
->
imag
);

1379 
	`mpmulÊtÊt
(&
bd
, &
rv
->
imag
);

1381 
	`mpmoveÊtÊt
(&
bc
, &
v
->
imag
);

1382 
	`mpmulÊtÊt
(&
bc
, &
rv
->
ªÆ
);

1384 
	`mpmoveÊtÊt
(&
ad
, &
v
->
ªÆ
);

1385 
	`mpmulÊtÊt
(&
ad
, &
rv
->
imag
);

1387 
	`mpmoveÊtÊt
(&
v
->
ªÆ
, &
ac
);

1388 
	`m∑ddÊtÊt
(&
v
->
ªÆ
, &
bd
);

1389 
	`mpdivÊtÊt
(&
v
->
ªÆ
, &
cc_∂us_dd
);

1391 
	`mpmoveÊtÊt
(&
v
->
imag
, &
bc
);

1392 
	`mpsubÊtÊt
(&
v
->
imag
, &
ad
);

1393 
	`mpdivÊtÊt
(&
v
->
imag
, &
cc_∂us_dd
);

1394 
	}
}

	@cplx.c

5 
	~<u.h
>

6 
	~<libc.h
>

7 
	~"gg.h
"

9 
subnode
(
Node
 *
ƒ
, Nodê*
ni
, Nodê*
nc
);

10 
möus
(
Node
 *
∆
, Nodê*
ªs
);

11 
com∂exmöus
(
Node
*, Node*);

12 
com∂exadd
(
›
, 
Node
*, Node*, Node*);

13 
com∂exmul
(
Node
*, Node*, Node*);

15 
	#CASE
(
a
,
b
Ë((◊)<<16)|((b)<<0))

	)

18 
	$ovîœp
(
Node
 *
f
, Nodê*
t
)

24  
f
->
›
 =
OINDREG
 &&

25 
t
->
›
 =
OINDREG
 &&

26 
f
->
xoff£t
+f->
ty≥
->
width
 >
t
->xoffset &&

27 
t
->
xoff£t
+t->
ty≥
->
width
 >
f
->xoffset;

28 
	}
}

36 
	$com∂exmove
(
Node
 *
f
, Nodê*
t
)

38 
·
, 
â
;

39 
Node
 
n1
, 
n2
, 
n3
, 
n4
;

41 if(
debug
['g']) {

42 
	`dump
("\ncom∂exmove-f", 
f
);

43 
	`dump
("com∂exmove-t", 
t
);

46 if(!
t
->
addabÀ
)

47 
	`Áèl
("complexmove:ÅoÇotáddable");

49 
·
 = 
	`simsimty≥
(
f
->
ty≥
);

50 
â
 = 
	`simsimty≥
(
t
->
ty≥
);

51 
	`CASE
(
·
,
â
)) {

54 
	`Áèl
("complexmove: unknown conversion: %T -> %T\n",

55 
f
->
ty≥
, 
t
->type);

57 
	`CASE
(
TCOMPLEX64
,TCOMPLEX64):

58 
	`CASE
(
TCOMPLEX64
,
TCOMPLEX128
):

59 
	`CASE
(
TCOMPLEX128
,
TCOMPLEX64
):

60 
	`CASE
(
TCOMPLEX128
,TCOMPLEX128):

64 if(!
f
->
addabÀ
 || 
	`ovîœp
(f, 
t
)) {

65 
	`ãm≤ame
(&
n1
, 
f
->
ty≥
);

66 
	`com∂exmove
(
f
, &
n1
);

67 
f
 = &
n1
;

70 
	`subnode
(&
n1
, &
n2
, 
f
);

71 
	`subnode
(&
n3
, &
n4
, 
t
);

73 
	`cgí
(&
n1
, &
n3
);

74 
	`cgí
(&
n2
, &
n4
);

77 
	}
}

80 
	$com∂ex›
(
Node
 *
n
, Nodê*
ªs
)

82 if(
n
 !
N
 &&Ç->
ty≥
 !
T
)

83 if(
iscom∂ex
[
n
->
ty≥
->
ëy≥
]) {

84 
maybe
;

86 if(
ªs
 !
N
 &&Ñes->
ty≥
 !
T
)

87 if(
iscom∂ex
[
ªs
->
ty≥
->
ëy≥
]) {

88 
maybe
;

91 if(
n
->
›
 =
OREAL
 ||Ç->› =
OIMAG
)

92 
yes
;

94 
no
;

96 
maybe
:

97 
n
->
›
) {

98 
OCONV
:

99 
OADD
:

100 
OSUB
:

101 
OMUL
:

102 
OMINUS
:

103 
OCOMPLEX
:

104 
OREAL
:

105 
OIMAG
:

106 
yes
;

108 
ODOT
:

109 
ODOTPTR
:

110 
OINDEX
:

111 
OIND
:

112 
ONAME
:

113 
yes
;

116 
no
:

119 
yes
:

122 
	}
}

125 
	$com∂exgí
(
Node
 *
n
, Nodê*
ªs
)

127 
Node
 *
∆
, *
ƒ
;

128 
Node
 
äl
, 
är
;

129 
Node
 
n1
, 
n2
, 
tmp
;

130 
é
, 
å
;

132 if(
debug
['g']) {

133 
	`dump
("\ncom∂exgí-n", 
n
);

134 
	`dump
("com∂exgí-ªs", 
ªs
);

137 
n
->
›
 =
OCONVNOP
)

138 
n
 =Ç->
À·
;

141 
n
->
›
) {

142 
OCOMPLEX
:

143 if(
ªs
->
addabÀ
) {

144 
	`subnode
(&
n1
, &
n2
, 
ªs
);

145 
	`ãm≤ame
(&
tmp
, 
n1
.
ty≥
);

146 
	`cgí
(
n
->
À·
, &
tmp
);

147 
	`cgí
(
n
->
right
, &
n2
);

148 
	`cgí
(&
tmp
, &
n1
);

153 
OREAL
:

154 
OIMAG
:

155 
∆
 = 
n
->
À·
;

156 if(!
∆
->
addabÀ
) {

157 
	`ãm≤ame
(&
tmp
, 
∆
->
ty≥
);

158 
	`com∂exgí
(
∆
, &
tmp
);

159 
∆
 = &
tmp
;

161 
	`subnode
(&
n1
, &
n2
, 
∆
);

162 if(
n
->
›
 =
OREAL
) {

163 
	`cgí
(&
n1
, 
ªs
);

166 
	`cgí
(&
n2
, 
ªs
);

171 
é
 = 
	`simsimty≥
(
ªs
->
ty≥
);

172 
é
 = 
	`˝lxsubty≥
(tl);

173 
å
 = 
	`simsimty≥
(
n
->
ty≥
);

174 
å
 = 
	`˝lxsubty≥
(tr);

175 if(
é
 !
å
) {

176 if(!
n
->
addabÀ
) {

177 
	`ãm≤ame
(&
n1
, 
n
->
ty≥
);

178 
	`com∂exmove
(
n
, &
n1
);

179 
n
 = &
n1
;

181 
	`com∂exmove
(
n
, 
ªs
);

185 if(!
ªs
->
addabÀ
) {

186 
	`igí
(
ªs
, &
n1
, 
N
);

187 
	`cgí
(
n
, &
n1
);

188 
	`ªg‰ì
(&
n1
);

191 if(
n
->
addabÀ
) {

192 
	`com∂exmove
(
n
, 
ªs
);

196 
n
->
›
) {

198 
	`dump
("com∂exgí: unknow¿›", 
n
);

199 
	`Áèl
("com∂exgí: unknow¿› %O", 
n
->
›
);

201 
ODOT
:

202 
ODOTPTR
:

203 
OINDEX
:

204 
OIND
:

205 
ONAME
:

206 
OCALLFUNC
:

207 
OCALLMETH
:

208 
OCALLINTER
:

209 
	`igí
(
n
, &
n1
, 
ªs
);

210 
	`com∂exmove
(&
n1
, 
ªs
);

211 
	`ªg‰ì
(&
n1
);

214 
OCONV
:

215 
OADD
:

216 
OSUB
:

217 
OMUL
:

218 
OMINUS
:

219 
OCOMPLEX
:

220 
OREAL
:

221 
OIMAG
:

225 
∆
 = 
n
->
À·
;

226 if(
∆
 =
N
)

228 
ƒ
 = 
n
->
right
;

231 if(
ƒ
 !
N
) {

232 if(
∆
->
uŒm™
 > 
ƒ
->uŒm™ && !∆->
addabÀ
) {

233 
	`ãm≤ame
(&
äl
, 
∆
->
ty≥
);

234 
	`cgí
(
∆
, &
äl
);

235 
∆
 = &
äl
;

237 if(!
ƒ
->
addabÀ
) {

238 
	`ãm≤ame
(&
är
, 
ƒ
->
ty≥
);

239 
	`cgí
(
ƒ
, &
är
);

240 
ƒ
 = &
är
;

243 if(!
∆
->
addabÀ
) {

244 
	`ãm≤ame
(&
äl
, 
∆
->
ty≥
);

245 
	`cgí
(
∆
, &
äl
);

246 
∆
 = &
äl
;

249 
n
->
›
) {

251 
	`Áèl
("com∂exgí: unknow¿› %O", 
n
->
›
);

254 
OCONV
:

255 
	`com∂exmove
(
∆
, 
ªs
);

258 
OMINUS
:

259 
	`com∂exmöus
(
∆
, 
ªs
);

262 
OADD
:

263 
OSUB
:

264 
	`com∂exadd
(
n
->
›
, 
∆
, 
ƒ
, 
ªs
);

267 
OMUL
:

268 
	`com∂exmul
(
∆
, 
ƒ
, 
ªs
);

271 
	}
}

274 
	$com∂exboﬁ
(
›
, 
Node
 *
∆
, Nodê*
ƒ
, 
åue
, 
Prog
 *
to
)

276 
Node
 
äl
, 
är
;

277 
Node
 
n1
, 
n2
, 
n3
, 
n4
;

278 
Node
 
«
, 
nb
, 
nc
;

281 if(
ƒ
 !
N
) {

282 if(
∆
->
uŒm™
 > 
ƒ
->uŒm™ && !∆->
addabÀ
) {

283 
	`ãm≤ame
(&
äl
, 
∆
->
ty≥
);

284 
	`cgí
(
∆
, &
äl
);

285 
∆
 = &
äl
;

287 if(!
ƒ
->
addabÀ
) {

288 
	`ãm≤ame
(&
är
, 
ƒ
->
ty≥
);

289 
	`cgí
(
ƒ
, &
är
);

290 
ƒ
 = &
är
;

293 if(!
∆
->
addabÀ
) {

294 
	`ãm≤ame
(&
äl
, 
∆
->
ty≥
);

295 
	`cgí
(
∆
, &
äl
);

296 
∆
 = &
äl
;

302 
	`subnode
(&
n1
, &
n2
, 
∆
);

303 
	`subnode
(&
n3
, &
n4
, 
ƒ
);

305 
	`mem£t
(&
«
, 0, (na));

306 
«
.
›
 = 
OANDAND
;

307 
«
.
À·
 = &
nb
;

308 
«
.
right
 = &
nc
;

309 
«
.
ty≥
 = 
ty≥s
[
TBOOL
];

311 
	`mem£t
(&
nb
, 0, (
«
));

312 
nb
.
›
 = 
OEQ
;

313 
nb
.
À·
 = &
n1
;

314 
nb
.
right
 = &
n3
;

315 
nb
.
ty≥
 = 
ty≥s
[
TBOOL
];

317 
	`mem£t
(&
nc
, 0, (
«
));

318 
nc
.
›
 = 
OEQ
;

319 
nc
.
À·
 = &
n2
;

320 
nc
.
right
 = &
n4
;

321 
nc
.
ty≥
 = 
ty≥s
[
TBOOL
];

323 if(
›
 =
ONE
)

324 
åue
 = !true;

326 
	`bgí
(&
«
, 
åue
, 
to
);

327 
	}
}

330 
	$nodfc⁄°
(
Node
 *
n
, 
Ty≥
 *
t
, 
MpÊt
* 
fvÆ
)

332 
	`mem£t
(
n
, 0, (*n));

333 
n
->
›
 = 
OLITERAL
;

334 
n
->
addabÀ
 = 1;

335 
	`uŒm™ˇlc
(
n
);

336 
n
->
vÆ
.
u
.
fvÆ
 = fval;

337 
n
->
vÆ
.
˘y≥
 = 
CTFLT
;

338 
n
->
ty≥
 = 
t
;

340 if(!
isÊﬂt
[
t
->
ëy≥
])

341 
	`Áèl
("nodfc⁄°: badÅy≥ %T", 
t
);

342 
	}
}

346 
	$subnode
(
Node
 *
ƒ
, Nodê*
ni
, Nodê*
nc
)

348 
tc
;

349 
Ty≥
 *
t
;

351 if(!
nc
->
addabÀ
)

352 
	`Áèl
("subnodeÇotáddable");

354 
tc
 = 
	`simsimty≥
(
nc
->
ty≥
);

355 
tc
 = 
	`˝lxsubty≥
(tc);

356 
t
 = 
ty≥s
[
tc
];

358 if(
nc
->
›
 =
OLITERAL
) {

359 
	`nodfc⁄°
(
ƒ
, 
t
, &
nc
->
vÆ
.
u
.
cvÆ
->
ªÆ
);

360 
	`nodfc⁄°
(
ni
, 
t
, &
nc
->
vÆ
.
u
.
cvÆ
->
imag
);

364 *
ƒ
 = *
nc
;

365 
ƒ
->
ty≥
 = 
t
;

367 *
ni
 = *
nc
;

368 
ni
->
ty≥
 = 
t
;

369 
ni
->
xoff£t
 +
t
->
width
;

370 
	}
}

374 
	$möus
(
Node
 *
∆
, Nodê*
ªs
)

376 
Node
 
ø
;

378 
	`mem£t
(&
ø
, 0, (ra));

379 
ø
.
›
 = 
OMINUS
;

380 
ø
.
À·
 = 
∆
;

381 
ø
.
ty≥
 = 
∆
->type;

382 
	`cgí
(&
ø
, 
ªs
);

383 
	}
}

389 
	$com∂exmöus
(
Node
 *
∆
, Nodê*
ªs
)

391 
Node
 
n1
, 
n2
, 
n5
, 
n6
;

393 
	`subnode
(&
n1
, &
n2
, 
∆
);

394 
	`subnode
(&
n5
, &
n6
, 
ªs
);

396 
	`möus
(&
n1
, &
n5
);

397 
	`möus
(&
n2
, &
n6
);

398 
	}
}

405 
	$com∂exadd
(
›
, 
Node
 *
∆
, Nodê*
ƒ
, Nodê*
ªs
)

407 
Node
 
n1
, 
n2
, 
n3
, 
n4
, 
n5
, 
n6
;

408 
Node
 
ø
;

410 
	`subnode
(&
n1
, &
n2
, 
∆
);

411 
	`subnode
(&
n3
, &
n4
, 
ƒ
);

412 
	`subnode
(&
n5
, &
n6
, 
ªs
);

414 
	`mem£t
(&
ø
, 0, (ra));

415 
ø
.
›
 = op;

416 
ø
.
À·
 = &
n1
;

417 
ø
.
right
 = &
n3
;

418 
ø
.
ty≥
 = 
n1
.type;

419 
	`cgí
(&
ø
, &
n5
);

421 
	`mem£t
(&
ø
, 0, (ra));

422 
ø
.
›
 = op;

423 
ø
.
À·
 = &
n2
;

424 
ø
.
right
 = &
n4
;

425 
ø
.
ty≥
 = 
n2
.type;

426 
	`cgí
(&
ø
, &
n6
);

427 
	}
}

434 
	$com∂exmul
(
Node
 *
∆
, Nodê*
ƒ
, Nodê*
ªs
)

436 
Node
 
n1
, 
n2
, 
n3
, 
n4
, 
n5
, 
n6
;

437 
Node
 
rm1
, 
rm2
, 
ø
, 
tmp
;

439 
	`subnode
(&
n1
, &
n2
, 
∆
);

440 
	`subnode
(&
n3
, &
n4
, 
ƒ
);

441 
	`subnode
(&
n5
, &
n6
, 
ªs
);

442 
	`ãm≤ame
(&
tmp
, 
n5
.
ty≥
);

445 
	`mem£t
(&
rm1
, 0, (
ø
));

446 
rm1
.
›
 = 
OMUL
;

447 
rm1
.
À·
 = &
n1
;

448 
rm1
.
right
 = &
n3
;

449 
rm1
.
ty≥
 = 
n1
.type;

451 
	`mem£t
(&
rm2
, 0, (
ø
));

452 
rm2
.
›
 = 
OMUL
;

453 
rm2
.
À·
 = &
n2
;

454 
rm2
.
right
 = &
n4
;

455 
rm2
.
ty≥
 = 
n2
.type;

457 
	`mem£t
(&
ø
, 0, (ra));

458 
ø
.
›
 = 
OSUB
;

459 
ø
.
À·
 = &
rm1
;

460 
ø
.
right
 = &
rm2
;

461 
ø
.
ty≥
 = 
rm1
.type;

462 
	`cgí
(&
ø
, &
tmp
);

465 
	`mem£t
(&
rm1
, 0, (
ø
));

466 
rm1
.
›
 = 
OMUL
;

467 
rm1
.
À·
 = &
n1
;

468 
rm1
.
right
 = &
n4
;

469 
rm1
.
ty≥
 = 
n1
.type;

471 
	`mem£t
(&
rm2
, 0, (
ø
));

472 
rm2
.
›
 = 
OMUL
;

473 
rm2
.
À·
 = &
n2
;

474 
rm2
.
right
 = &
n3
;

475 
rm2
.
ty≥
 = 
n2
.type;

477 
	`mem£t
(&
ø
, 0, (ra));

478 
ø
.
›
 = 
OADD
;

479 
ø
.
À·
 = &
rm1
;

480 
ø
.
right
 = &
rm2
;

481 
ø
.
ty≥
 = 
rm1
.type;

482 
	`cgí
(&
ø
, &
n6
);

485 
	`cgí
(&
tmp
, &
n5
);

486 
	}
}

	@dcl.c

5 
	~<u.h
>

6 
	~<libc.h
>

7 
	~"go.h
"

8 
	~"y.èb.h
"

10 
funˇrgs
(
Node
*);

11 
funˇrgs2
(
Ty≥
*);

14 
	$dÊag
()

16 if(!
debug
['d'])

18 if(
debug
['y'])

20 if(
öˇ¬edimp‹t
)

23 
	}
}

30 
	$dc›y
(
Sym
 *
a
, Sym *
b
)

32 
a
->
pkg
 = 
b
->pkg;

33 
a
->
«me
 = 
b
->name;

34 
a
->
def
 = 
b
->def;

35 
a
->
block
 = 
b
->block;

36 
a
->
œ°löío
 = 
b
->lastlineno;

37 
	}
}

39 
Sym
*

40 
	$push
()

42 
Sym
 *
d
;

44 
d
 = 
	`mÆ
((*d));

45 
d
->
œ°löío
 = 
löío
;

46 
d
->
lök
 = 
d˛°ack
;

47 
d˛°ack
 = 
d
;

48  
d
;

49 
	}
}

51 
Sym
*

52 
	$pushd˛
(
Sym
 *
s
)

54 
Sym
 *
d
;

56 
d
 = 
	`push
();

57 
	`dc›y
(
d
, 
s
);

58 if(
	`dÊag
())

59 
	`¥öt
("\t%LÖush %S %p\n", 
löío
, 
s
, s->
def
);

60  
d
;

61 
	}
}

64 
	$p›d˛
()

66 
Sym
 *
d
, *
s
;

67 
 o
;

72 
d
=
d˛°ack
; d!=
S
; d=d->
lök
) {

73 if(
d
->
«me
 =
nû
)

75 
s
 = 
	`pkglookup
(
d
->
«me
, d->
pkg
);

76 
 o
 = 
s
->
œ°löío
;

77 
	`dc›y
(
s
, 
d
);

78 
d
->
œ°löío
 = 
 o
;

79 if(
	`dÊag
())

80 
	`¥öt
("\t%LÖ› %S %p\n", 
löío
, 
s
, s->
def
);

82 if(
d
 =
S
)

83 
	`Áèl
("popdcl:Ço mark");

84 
d˛°ack
 = 
d
->
lök
;

85 
block
 = 
d
->block;

86 
	}
}

89 
	$p›tod˛
()

95 
	`p›d˛
();

96 
	`m¨kd˛
();

97 
	}
}

100 
	$m¨kd˛
()

102 
Sym
 *
d
;

104 
d
 = 
	`push
();

105 
d
->
«me
 = 
nû
;

106 
d
->
block
 = block;

108 
blockgí
++;

109 
block
 = 
blockgí
;

113 
	}
}

116 
	$dumpd˛
(*
°
)

118 
Sym
 *
s
, *
d
;

119 
i
;

121 
	`USED
(
°
);

123 
i
 = 0;

124 
d
=
d˛°ack
; d!=
S
; d=d->
lök
) {

125 
i
++;

126 
	`¥öt
(" %.2d %p", 
i
, 
d
);

127 if(
d
->
«me
 =
nû
) {

128 
	`¥öt
("\n");

131 
	`¥öt
(" '%s'", 
d
->
«me
);

132 
s
 = 
	`pkglookup
(
d
->
«me
, d->
pkg
);

133 
	`¥öt
(" %lS\n", 
s
);

135 
	}
}

138 
	$ã°d˛°ack
()

140 
Sym
 *
d
;

142 
d
=
d˛°ack
; d!=
S
; d=d->
lök
) {

143 if(
d
->
«me
 =
nû
) {

144 
	`yyîr‹
("markÜeft onÅhe stack");

148 
	}
}

151 
	$ªde˛¨e
(
Sym
 *
s
, *
whîe
)

153 if(
s
->
œ°löío
 == 0)

154 
	`yyîr‹
("%SÑedeclared %s\n"

156 
s
, 
whîe
);

158 
	`yyîr‹
("%SÑedeclared %s\n"

160 
s
, 
whîe
, s->
œ°löío
);

161 
	}
}

167 
	$de˛¨e
(
Node
 *
n
, 
˘xt
)

169 
Sym
 *
s
;

170 
gí
;

171 
ty≥gí
, 
v¨gí
;

173 if(
	`isbœnk
(
n
))

176 
n
->
löío
 = 
	`∑r£æöe
();

177 
s
 = 
n
->
sym
;

180 if(
imp‹çkg
 =
nû
 && !
ty≥checkok
 && 
s
->
pkg
 !
loˇÕkg
)

181 
	`yyîr‹
("ˇ¬Ÿ de˛¨ê«mê%S", 
s
);

183 
gí
 = 0;

184 if(
˘xt
 =
PEXTERN
) {

185 
exã∫d˛
 = 
	`li°
”xã∫d˛, 
n
);

186 if(
	`dÊag
())

187 
	`¥öt
("\t%L globÆ de˛ %S %p\n", 
löío
, 
s
, 
n
);

189 if(
cur‚
 =
nû
 && 
˘xt
 =
PAUTO
)

190 
	`Áèl
("automatic outside function");

191 if(
cur‚
 !
nû
)

192 
cur‚
->
d˛
 = 
	`li°
(cur‚->d˛, 
n
);

193 if(
n
->
›
 =
OTYPE
)

194 
gí
 = ++
ty≥gí
;

195 if(
n
->
›
 =
ONAME
)

196 
gí
 = ++
v¨gí
;

197 
	`pushd˛
(
s
);

198 
n
->
cur‚
 = curfn;

200 if(
˘xt
 =
PAUTO
)

201 
n
->
xoff£t
 = 0;

203 if(
s
->
block
 == block)

204 
	`ªde˛¨e
(
s
, "inÅhis block");

206 
s
->
block
 = block;

207 
s
->
œ°löío
 = 
	`∑r£æöe
();

208 
s
->
def
 = 
n
;

209 
n
->
v¨gí
 = 
gí
;

210 
n
->
funcdïth
 = funcdepth;

211 
n
->
˛ass
 = 
˘xt
;

213 
	`aut€xp‹t
(
n
, 
˘xt
);

214 
	}
}

217 
	$addv¨
(
Node
 *
n
, 
Ty≥
 *
t
, 
˘xt
)

219 if(
n
==
N
 ||Ç->
sym
 =
S
 || (n->
›
 !
ONAME
 &&Ç->› !
ONONAME
Ë|| 
t
 =
T
)

220 
	`Áèl
("addv¨:Ç=%NÅ=%TÇû", 
n
, 
t
);

222 
n
->
›
 = 
ONAME
;

223 
	`de˛¨e
(
n
, 
˘xt
);

224 
n
->
ty≥
 = 
t
;

225 
	}
}

231 
NodeLi°
*

232 
	$v¨ôî
(
NodeLi°
 *
vl
, 
Node
 *
t
, NodeLi° *
ñ
)

234 
d€x¥
;

235 
Node
 *
v
, *
e
, *
as2
;

236 
NodeLi°
 *
öô
;

238 
öô
 = 
nû
;

239 
d€x¥
 = 
ñ
 !
nû
;

241 if(
	`cou¡
(
ñ
Ë=1 && cou¡(
vl
) > 1) {

242 
e
 = 
ñ
->
n
;

243 
as2
 = 
	`nod
(
OAS2
, 
N
, N);

244 
as2
->
li°
 = 
vl
;

245 
as2
->
æi°
 = 
	`li°1
(
e
);

246 ; 
vl
; vl=vl->
√xt
) {

247 
v
 = 
vl
->
n
;

248 
v
->
›
 = 
ONAME
;

249 
	`de˛¨e
(
v
, 
d˛c⁄ãxt
);

250 
v
->
¡y≥
 = 
t
;

251 
v
->
de‚
 = 
as2
;

252 if(
funcdïth
 > 0)

253 
öô
 = 
	`li°
(öô, 
	`nod
(
ODCL
, 
v
, 
N
));

255  
	`li°
(
öô
, 
as2
);

258 ; 
vl
; vl=vl->
√xt
) {

259 if(
d€x¥
) {

260 if(
ñ
 =
nû
) {

261 
	`yyîr‹
("missingÉxpr in var dcl");

264 
e
 = 
ñ
->
n
;

265 
ñ
 =Él->
√xt
;

267 
e
 = 
N
;

269 
v
 = 
vl
->
n
;

270 
v
->
›
 = 
ONAME
;

271 
	`de˛¨e
(
v
, 
d˛c⁄ãxt
);

272 
v
->
¡y≥
 = 
t
;

274 if(
e
 !
N
 || 
funcdïth
 > 0 || 
	`isbœnk
(
v
)) {

275 if(
funcdïth
 > 0)

276 
öô
 = 
	`li°
(öô, 
	`nod
(
ODCL
, 
v
, 
N
));

277 
e
 = 
	`nod
(
OAS
, 
v
,É);

278 
öô
 = 
	`li°
(öô, 
e
);

279 if(
e
->
right
 !
N
)

280 
v
->
de‚
 = 
e
;

283 if(
ñ
 !
nû
)

284 
	`yyîr‹
("extraÉxpr in var dcl");

285  
öô
;

286 
	}
}

292 
NodeLi°
*

293 
	$c⁄°ôî
(
NodeLi°
 *
vl
, 
Node
 *
t
, NodeLi° *
˛
)

295 
Node
 *
v
, *
c
;

296 
NodeLi°
 *
vv
;

298 
vv
 = 
nû
;

299 if(
˛
 =
nû
) {

300 if(
t
 !
N
)

301 
	`yyîr‹
("constdcl cannot haveÅype withoutÉxpr");

302 
˛
 = 
œ°c⁄°
;

303 
t
 = 
œ°ty≥
;

305 
œ°c⁄°
 = 
˛
;

306 
œ°ty≥
 = 
t
;

308 
˛
 = 
	`li°åìc›y
(cl);

310 ; 
vl
; vl=vl->
√xt
) {

311 if(
˛
 =
nû
) {

312 
	`yyîr‹
("missingÉxpr in const dcl");

315 
c
 = 
˛
->
n
;

316 
˛
 = cl->
√xt
;

318 
v
 = 
vl
->
n
;

319 
v
->
›
 = 
OLITERAL
;

320 
	`de˛¨e
(
v
, 
d˛c⁄ãxt
);

322 
v
->
¡y≥
 = 
t
;

323 
v
->
de‚
 = 
c
;

325 
vv
 = 
	`li°
(vv, 
	`nod
(
ODCLCONST
, 
v
, 
N
));

327 if(
˛
 !
nû
)

328 
	`yyîr‹
("extraÉxpr in const dcl");

329 
iŸa
 += 1;

330  
vv
;

331 
	}
}

337 
Node
*

338 
	$√w«me
(
Sym
 *
s
)

340 
Node
 *
n
;

342 if(
s
 =
S
)

343 
	`Áèl
("newnameÇil");

345 
n
 = 
	`nod
(
ONAME
, 
N
, N);

346 
n
->
sym
 = 
s
;

347 
n
->
ty≥
 = 
T
;

348 
n
->
addabÀ
 = 1;

349 
n
->
uŒm™
 = 1;

350 
n
->
xoff£t
 = 0;

351  
n
;

352 
	}
}

358 
Node
*

359 
	$d˛«me
(
Sym
 *
s
)

361 
Node
 *
n
;

363 
n
 = 
	`√w«me
(
s
);

364 
n
->
›
 = 
ONONAME
;

365  
n
;

366 
	}
}

368 
Node
*

369 
	$ty≥nod
(
Ty≥
 *
t
)

374 if(
t
->
nod
 =
N
 ||Å->nod->
ty≥
 !=Å) {

375 
t
->
nod
 = 
	`nod
(
OTYPE
, 
N
, N);

376 
t
->
nod
->
ty≥
 =Å;

377 
t
->
nod
->
sym
 =Å->sym;

379  
t
->
nod
;

380 
	}
}

389 
Node
*

390 
	$ﬁd«me
(
Sym
 *
s
)

392 
Node
 *
n
;

393 
Node
 *
c
;

395 
n
 = 
s
->
def
;

396 if(
n
 =
N
) {

401 
n
 = 
	`√w«me
(
s
);

402 
n
->
›
 = 
ONONAME
;

403 
n
->
iŸa
 = iota;

405 if(
cur‚
 !
nû
 && 
n
->
funcdïth
 > 0 &&Ç->funcdïth !funcdïth &&Ç->
›
 =
ONAME
) {

412 if(
n
->
˛osuª
 =
N
 ||Ç->˛osuª->
funcdïth
 != funcdepth) {

414 
c
 = 
	`nod
(
ONAME
, 
N
, N);

415 
c
->
sym
 = 
s
;

416 
c
->
˛ass
 = 
PPARAMREF
;

417 
c
->
isddd
 = 
n
->isddd;

418 
c
->
de‚
 = 
n
;

419 
c
->
addabÀ
 = 0;

420 
c
->
uŒm™
 = 2;

421 
c
->
funcdïth
 = funcdepth;

422 
c
->
ouãr
 = 
n
->
˛osuª
;

423 
n
->
˛osuª
 = 
c
;

424 
n
->
addπakí
 = 1;

425 
c
->
˛osuª
 = 
n
;

426 
c
->
xoff£t
 = 0;

427 
cur‚
->
cv¨s
 = 
	`li°
(cur‚->cv¨s, 
c
);

430  
n
->
˛osuª
;

432  
n
;

433 
	}
}

440 
	$cﬁa¢ame
(
Node
 *
n
)

442 
n
->
›
) {

443 
ONAME
:

444 
ONONAME
:

445 
OPACK
:

446 
OTYPE
:

447 
OLITERAL
:

448  
n
->
sym
 !
S
;

451 
	}
}

454 
	$cﬁasde‚
(
NodeLi°
 *
À·
, 
Node
 *
de‚
)

456 
¬ew
, 
√º
;

457 
NodeLi°
 *
l
;

458 
Node
 *
n
;

460 
¬ew
 = 0;

461 
√º
 = 0;

462 
l
=
À·
;Ü;Üˆ->
√xt
) {

463 
n
 = 
l
->n;

464 if(
	`isbœnk
(
n
))

466 if(!
	`cﬁa¢ame
(
n
)) {

467 
	`yyîr‹
("n⁄-«mê%N o¿À· sidêo‡:=", 
n
);

468 
√º
++;

471 if(
n
->
sym
->
block
 == block)

474 
¬ew
++;

475 
n
 = 
	`√w«me
“->
sym
);

476 
	`de˛¨e
(
n
, 
d˛c⁄ãxt
);

477 
n
->
de‚
 = defn;

478 
de‚
->
nöô
 = 
	`li°
(de‚->nöô, 
	`nod
(
ODCL
, 
n
, 
N
));

479 
l
->
n
 =Ç;

481 if(
¬ew
 =0 && 
√º
 == 0)

482 
	`yyîr‹
("noÇew variables onÜeft side of :=");

483 
	}
}

485 
Node
*

486 
	$cﬁas
(
NodeLi°
 *
À·
, NodeLi° *
right
)

488 
Node
 *
as
;

490 
as
 = 
	`nod
(
OAS2
, 
N
, N);

491 
as
->
li°
 = 
À·
;

492 
as
->
æi°
 = 
right
;

493 
as
->
cﬁas
 = 1;

494 
	`cﬁasde‚
(
À·
, 
as
);

497 if(
	`cou¡
(
À·
Ë=1 && cou¡(
right
) == 1) {

498 
as
->
À·
 =ás->
li°
->
n
;

499 
as
->
right
 =ás->
æi°
->
n
;

500 
as
->
li°
 = 
nû
;

501 
as
->
æi°
 = 
nû
;

502 
as
->
›
 = 
OAS
;

505  
as
;

506 
	}
}

513 
	$iÁ˚d˛
(
Node
 *
n
)

515 if(
n
->
›
 !
ODCLFIELD
 ||Ç->
right
 =
N
)

516 
	`Áèl
("ifacedcl");

518 
d˛c⁄ãxt
 = 
PAUTO
;

519 
	`m¨kd˛
();

520 
funcdïth
++;

521 
n
->
ouãr
 = 
cur‚
;

522 
cur‚
 = 
n
;

523 
	`funˇrgs
(
n
->
right
);

529 
	`funcbody
(
n
);

530 
	}
}

539 
	$funchdr
(
Node
 *
n
)

542 if(
funcdïth
 =0 && 
d˛c⁄ãxt
 !
PEXTERN
)

543 
	`Áèl
("funchdr: dclcontext");

545 
d˛c⁄ãxt
 = 
PAUTO
;

546 
	`m¨kd˛
();

547 
funcdïth
++;

549 
n
->
ouãr
 = 
cur‚
;

550 
cur‚
 = 
n
;

552 if(
n
->
¬ame
)

553 
	`funˇrgs
(
n
->
¬ame
->
¡y≥
);

554 i‡(
n
->
¡y≥
)

555 
	`funˇrgs
(
n
->
¡y≥
);

557 
	`funˇrgs2
(
n
->
ty≥
);

558 
	}
}

561 
	$funˇrgs
(
Node
 *
¡
)

563 
Node
 *
n
, *
¬
;

564 
NodeLi°
 *
l
;

565 
gí
;

567 if(
¡
->
›
 !
OTFUNC
)

568 
	`Áèl
("funˇrg†%O", 
¡
->
›
);

573 if(
¡
->
À·
 !
N
) {

574 
n
 = 
¡
->
À·
;

575 if(
n
->
›
 !
ODCLFIELD
)

576 
	`Áèl
("funˇrg†ª˚ivî %O", 
n
->
›
);

577 if(
n
->
À·
 !
N
) {

578 
n
->
À·
->
›
 = 
ONAME
;

579 
n
->
À·
->
¡y≥
 =Ç->
right
;

580 
	`de˛¨e
(
n
->
À·
, 
PPARAM
);

583 
l
=
¡
->
li°
;Ü;Üˆ->
√xt
) {

584 
n
 = 
l
->n;

585 if(
n
->
›
 !
ODCLFIELD
)

586 
	`Áèl
("funˇrg†ö %O", 
n
->
›
);

587 if(
n
->
À·
 !
N
) {

588 
n
->
À·
->
›
 = 
ONAME
;

589 
n
->
À·
->
¡y≥
 =Ç->
right
;

590 
	`de˛¨e
(
n
->
À·
, 
PPARAM
);

595 
gí
 = 0;

596 
l
=
¡
->
æi°
;Ü;Üˆ->
√xt
) {

597 
n
 = 
l
->n;

598 if(
n
->
›
 !
ODCLFIELD
)

599 
	`Áèl
("funˇrg†ouà%O", 
n
->
›
);

600 if(
n
->
À·
 !
N
) {

601 
n
->
À·
->
›
 = 
ONAME
;

602 
n
->
À·
->
¡y≥
 =Ç->
right
;

603 if(
	`isbœnk
(
n
->
À·
)) {

606 
¬
 = 
	`nod
(
OXXX
, 
N
, N);

607 *
¬
 = *
n
->
À·
;

608 
n
->
À·
 = 
¬
;

609 
	`¢¥öt
(
«mebuf
, “amebuf), ".™⁄%d", 
gí
++);

610 
n
->
À·
->
sym
 = 
	`lookup
(
«mebuf
);

612 
	`de˛¨e
(
n
->
À·
, 
PPARAMOUT
);

615 
	}
}

623 
	$funˇrgs2
(
Ty≥
 *
t
)

625 
Ty≥
 *
·
;

626 
Node
 *
n
;

628 if(
t
->
ëy≥
 !
TFUNC
)

629 
	`Áèl
("funˇrgs2 %T", 
t
);

631 if(
t
->
thi°u∂e
)

632 
·
=
	`gëthisx
(
t
)->
ty≥
; ft; ft=·->
down
) {

633 if(!
·
->
¬ame
 || !·->¬ame->
sym
)

635 
n
 = 
·
->
¬ame
;

636 
n
->
ty≥
 = 
·
->type;

637 
	`de˛¨e
(
n
, 
PPARAM
);

640 if(
t
->
ötu∂e
)

641 
·
=
	`gëö¨gx
(
t
)->
ty≥
; ft; ft=·->
down
) {

642 if(!
·
->
¬ame
 || !·->¬ame->
sym
)

644 
n
 = 
·
->
¬ame
;

645 
n
->
ty≥
 = 
·
->type;

646 
	`de˛¨e
(
n
, 
PPARAM
);

649 if(
t
->
ouâu∂e
)

650 
·
=
	`gëouèrgx
(
t
)->
ty≥
; ft; ft=·->
down
) {

651 if(!
·
->
¬ame
 || !·->¬ame->
sym
)

653 
n
 = 
·
->
¬ame
;

654 
n
->
ty≥
 = 
·
->type;

655 
	`de˛¨e
(
n
, 
PPARAMOUT
);

657 
	}
}

665 
	$funcbody
(
Node
 *
n
)

668 if(
d˛c⁄ãxt
 !
PAUTO
)

669 
	`Áèl
("funcbody: dclcontext");

670 
	`p›d˛
();

671 
funcdïth
--;

672 
cur‚
 = 
n
->
ouãr
;

673 
n
->
ouãr
 = 
N
;

674 if(
funcdïth
 == 0)

675 
d˛c⁄ãxt
 = 
PEXTERN
;

676 
	}
}

681 
Node
*

682 
	$ty≥d˛0
(
Sym
 *
s
)

684 
Node
 *
n
;

686 
n
 = 
	`√w«me
(
s
);

687 
n
->
›
 = 
OTYPE
;

688 
	`de˛¨e
(
n
, 
d˛c⁄ãxt
);

689  
n
;

690 
	}
}

697 
Node
*

698 
	$ty≥d˛1
(
Node
 *
n
, Nodê*
t
, 
loˇl
)

700 
n
->
¡y≥
 = 
t
;

701 
n
->
loˇl
 =Üocal;

702  
	`nod
(
ODCLTYPE
, 
n
, 
N
);

703 
	}
}

711 
	$checkembeddedty≥
(
Ty≥
 *
t
)

713 i‡(
t
 =
T
)

716 if(
t
->
sym
 =
S
 && 
i•å
[t->
ëy≥
]) {

717 
t
 =Å->
ty≥
;

718 if(
t
->
ëy≥
 =
TINTER
)

719 
	`yyîr‹
("embeddedÅype cannot beáÖointerÅo interface");

721 if(
i•å
[
t
->
ëy≥
])

722 
	`yyîr‹
("embeddedÅype cannot beáÖointer");

723 if(
t
->
ëy≥
 =
TFORW
 &&Å->
embedlöío
 == 0)

724 
t
->
embedlöío
 = 
löío
;

725 
	}
}

727 
Ty≥
*

728 
	$°ru˘fõld
(
Node
 *
n
)

730 
Ty≥
 *
f
;

731 
 o
;

733 
 o
 = 
löío
;

734 
löío
 = 
n
->lineno;

736 if(
n
->
›
 !
ODCLFIELD
)

737 
	`Áèl
("°ru˘fõld: o›†%N\n", 
n
);

739 
f
 = 
	`typ
(
TFIELD
);

740 
f
->
isddd
 = 
n
->isddd;

742 if(
n
->
right
 !
N
) {

743 
	`ty≥check
(&
n
->
right
, 
Ety≥
);

744 
n
->
ty≥
 =Ç->
right
->type;

745 if(
n
->
À·
 !
N
)

746 
n
->
À·
->
ty≥
 =Ç->type;

747 if(
n
->
embedded
)

748 
	`checkembeddedty≥
(
n
->
ty≥
);

750 
n
->
right
 = 
N
;

752 
f
->
ty≥
 = 
n
->type;

753 if(
f
->
ty≥
 =
T
)

754 
f
->
broke
 = 1;

756 
n
->
vÆ
.
˘y≥
) {

757 
CTSTR
:

758 
f
->
nŸe
 = 
n
->
vÆ
.
u
.
svÆ
;

761 
	`yyîr‹
("fieldánnotation must be string");

763 
CTxxx
:

764 
f
->
nŸe
 = 
nû
;

768 if(
n
->
À·
 &&Ç->À·->
›
 =
ONAME
) {

769 
f
->
¬ame
 = 
n
->
À·
;

770 
f
->
embedded
 = 
n
->embedded;

771 
f
->
sym
 = f->
¬ame
->sym;

774 
löío
 = 
 o
;

775  
f
;

776 
	}
}

779 
	$checkdupfõlds
(
Ty≥
 *
t
, * 
wh©
)

781 
Ty≥
* 
t1
;

782 
 o
;

784 
 o
 = 
löío
;

786  ; 
t
;ÅÒ->
down
)

787 if(
t
->
sym
 &&Å->
¬ame
 && !
	`isbœnk
(t->nname))

788 
t1
=
t
->
down
;Å1;Å1=t1->down)

789 if(
t1
->
sym
 =
t
->sym) {

790 
löío
 = 
t
->
¬ame
->lineno;

791 
	`yyîr‹
("du∂iˇã %†%s", 
wh©
, 
t
->
sym
->
«me
);

795 
löío
 = 
 o
;

796 
	}
}

802 
Ty≥
*

803 
	$to°ru˘
(
NodeLi°
 *
l
)

805 
Ty≥
 *
t
, *
f
, **
ç
;

806 
t
 = 
	`typ
(
TSTRUCT
);

808 
ç
 = &
t
->
ty≥
; 
l
;Üˆ->
√xt
) {

809 
f
 = 
	`°ru˘fõld
(
l
->
n
);

811 *
ç
 = 
f
;

812 
ç
 = &
f
->
down
;

815 
f
=
t
->
ty≥
; f && !t->
broke
; f=f->
down
)

816 if(
f
->
broke
)

817 
t
->
broke
 = 1;

819 
	`checkdupfõlds
(
t
->
ty≥
, "field");

821 i‡(!
t
->
broke
)

822 
	`checkwidth
(
t
);

824  
t
;

825 
	}
}

827 
Ty≥
*

828 
	$tofu«rgs
(
NodeLi°
 *
l
)

830 
Ty≥
 *
t
, *
f
, **
ç
;

832 
t
 = 
	`typ
(
TSTRUCT
);

833 
t
->
fu«rg
 = 1;

835 
ç
 = &
t
->
ty≥
; 
l
;Üˆ->
√xt
) {

836 
f
 = 
	`°ru˘fõld
(
l
->
n
);

837 
f
->
fu«rg
 = 1;

840 if(
l
->
n
->
À·
 &&Ü->n->À·->
˛ass
 =
PPARAM
)

841 
l
->
n
->
À·
->
∑ømÊd
 = 
f
;

843 *
ç
 = 
f
;

844 
ç
 = &
f
->
down
;

847 
f
=
t
->
ty≥
; f && !t->
broke
; f=f->
down
)

848 if(
f
->
broke
)

849 
t
->
broke
 = 1;

851 
	`checkdupfõlds
(
t
->
ty≥
, "argument");

852  
t
;

853 
	}
}

855 
Ty≥
*

856 
	$öãrÁ˚fõld
(
Node
 *
n
)

858 
Ty≥
 *
f
;

859 
 o
;

861 
 o
 = 
löío
;

862 
löío
 = 
n
->lineno;

864 if(
n
->
›
 !
ODCLFIELD
)

865 
	`Áèl
("öãrÁ˚fõld: o›†%N\n", 
n
);

867 i‡(
n
->
vÆ
.
˘y≥
 !
CTxxx
)

868 
	`yyîr‹
("interface method cannot haveánnotation");

870 
f
 = 
	`typ
(
TFIELD
);

871 
f
->
isddd
 = 
n
->isddd;

873 if(
n
->
right
 !
N
) {

874 if(
n
->
À·
 !
N
) {

878 
n
->
ty≥
 = 
	`typ
(
TINTERMETH
);

879 
n
->
ty≥
->
¬ame
 =Ç->
right
;

880 
n
->
À·
->
ty≥
 =Ç->type;

881 
	`queuemëhod
(
n
);

883 if(
n
->
À·
->
›
 =
ONAME
) {

884 
f
->
¬ame
 = 
n
->
À·
;

885 
f
->
embedded
 = 
n
->embedded;

886 
f
->
sym
 = f->
¬ame
->sym;

887 if(
imp‹çkg
 && !
	`exp‹äame
(
f
->
sym
->
«me
))

888 
f
->
sym
 = 
	`pkglookup
(f->sym->
«me
, 
°ru˘pkg
);

893 
	`ty≥check
(&
n
->
right
, 
Ety≥
);

894 
n
->
ty≥
 =Ç->
right
->type;

896 if(
n
->
embedded
)

897 
	`checkembeddedty≥
(
n
->
ty≥
);

899 if(
n
->
ty≥
)

900 
n
->
ty≥
->
ëy≥
) {

901 
TINTER
:

903 
TFORW
:

904 
	`yyîr‹
("öãrÁ˚Åy≥Üo› invﬁvög %T", 
n
->
ty≥
);

905 
f
->
broke
 = 1;

908 
	`yyîr‹
("öãrÁ˚ c⁄èö†embeddedÇ⁄-öãrÁ˚ %T", 
n
->
ty≥
);

909 
f
->
broke
 = 1;

915 
n
->
right
 = 
N
;

917 
f
->
ty≥
 = 
n
->type;

918 if(
f
->
ty≥
 =
T
)

919 
f
->
broke
 = 1;

921 
löío
 = 
 o
;

922  
f
;

923 
	}
}

925 
Ty≥
*

926 
	$toöãrÁ˚
(
NodeLi°
 *
l
)

928 
Ty≥
 *
t
, *
f
, **
ç
, *
t1
;

930 
t
 = 
	`typ
(
TINTER
);

932 
ç
 = &
t
->
ty≥
;

933 ; 
l
;Üˆ->
√xt
) {

934 
f
 = 
	`öãrÁ˚fõld
(
l
->
n
);

936 i‡(
l
->
n
->
À·
 =
N
 && 
f
->
ty≥
->
ëy≥
 =
TINTER
) {

938 
t1
=
f
->
ty≥
->ty≥;Å1;Å1Ò1->
down
) {

939 
f
 = 
	`typ
(
TFIELD
);

940 
f
->
ty≥
 = 
t1
->type;

941 
f
->
broke
 = 
t1
->broke;

942 
f
->
sym
 = 
t1
->sym;

943 if(
f
->
sym
)

944 
f
->
¬ame
 = 
	`√w«me
(f->
sym
);

945 *
ç
 = 
f
;

946 
ç
 = &
f
->
down
;

949 *
ç
 = 
f
;

950 
ç
 = &
f
->
down
;

954 
f
=
t
->
ty≥
; f && !t->
broke
; f=f->
down
)

955 if(
f
->
broke
)

956 
t
->
broke
 = 1;

958 
	`checkdupfõlds
(
t
->
ty≥
, "method");

959 
t
 = 
	`s‹töãr
(t);

960 
	`checkwidth
(
t
);

962  
t
;

963 
	}
}

965 
Node
*

966 
	$embedded
(
Sym
 *
s
)

968 
Node
 *
n
;

969 *
«me
;

974 íum { 
CíãrDŸ
 = 0xB7 };

975 
«me
 = 
s
->name;

976 if(
	`ut‰u√
(
s
->
«me
, 
CíãrDŸ
)) {

977 
«me
 = 
	`°rdup
(
s
->name);

978 *
	`ut‰u√
(
«me
, 
CíãrDŸ
) = 0;

981 if(
	`exp‹äame
(
«me
Ë|| 
s
->
pkg
 =
buûtöpkg
)

982 
n
 = 
	`√w«me
(
	`lookup
(
«me
));

984 
n
 = 
	`√w«me
(
	`pkglookup
(
«me
, 
s
->
pkg
));

985 
n
 = 
	`nod
(
ODCLFIELD
,Ç, 
	`ﬁd«me
(
s
));

986 
n
->
embedded
 = 1;

987  
n
;

988 
	}
}

994 
Node
*

995 
	$födty≥
(
NodeLi°
 *
l
)

997 ; 
l
;Üˆ->
√xt
)

998 if(
l
->
n
->
›
 =
OKEY
)

999  
l
->
n
->
right
;

1000  
N
;

1001 
	}
}

1003 
NodeLi°
*

1004 
	$check¨gli°
(
NodeLi°
 *
Æl
, 
öput
)

1006 
«med
;

1007 
Node
 *
n
, *
t
, *
√xâ
;

1008 
NodeLi°
 *
l
;

1010 
«med
 = 0;

1011 
l
=
Æl
;Ü;Üˆ->
√xt
) {

1012 if(
l
->
n
->
›
 =
OKEY
) {

1013 
«med
 = 1;

1017 if(
«med
) {

1018 
n
 = 
N
;

1019 
l
=
Æl
;Ü;Üˆ->
√xt
) {

1020 
n
 = 
l
->n;

1021 if(
n
->
›
 !
OKEY
 &&Ç->
sym
 =
S
) {

1022 
	`yyîr‹
("mixedÇamedánd unnamed functionÖarameters");

1026 if(
l
 =
nû
 && 
n
 !
N
 &&Ç->
›
 !
OKEY
)

1027 
	`yyîr‹
("final functionÖarameter must haveÅype");

1030 
√xâ
 = 
nû
;

1031 
l
=
Æl
;Ü;Üˆ->
√xt
) {

1034 
n
 = 
l
->n;

1035 if(
«med
) {

1036 if(
n
->
›
 =
OKEY
) {

1037 
t
 = 
n
->
right
;

1038 
n
 =Ç->
À·
;

1039 
√xâ
 = 
nû
;

1041 if(
√xâ
 =
nû
)

1042 
√xâ
 = 
	`födty≥
(
l
);

1043 
t
 = 
√xâ
;

1046 
t
 = 
n
;

1047 
n
 = 
N
;

1057 if(
imp‹çkg
 && 
n
->
sym
 =
S
)

1058 
n
 = 
N
;

1060 if(
n
 !
N
 &&Ç->
sym
 =
S
) {

1061 
t
 = 
n
;

1062 
n
 = 
N
;

1064 if(
n
 !
N
)

1065 
n
 = 
	`√w«me
“->
sym
);

1066 
n
 = 
	`nod
(
ODCLFIELD
,Ç, 
t
);

1067 if(
n
->
right
 !
N
 &&Ç->right->
›
 =
ODDD
) {

1068 if(!
öput
)

1069 
	`yyîr‹
("cannot use ... in outputárgumentÜist");

1070 if(
l
->
√xt
 !
nû
)

1071 
	`yyîr‹
("can only use ...ás finalárgument inÜist");

1072 
n
->
right
->
›
 = 
OTARRAY
;

1073 
n
->
right
->righàn->right->
À·
;

1074 
n
->
right
->
À·
 = 
N
;

1075 
n
->
isddd
 = 1;

1076 if(
n
->
À·
 !
N
)

1077 
n
->
À·
->
isddd
 = 1;

1079 
l
->
n
 =Ç;

1081  
Æl
;

1082 
	}
}

1085 
Node
*

1086 
	$Ákëhis
()

1088 
Node
 *
n
;

1090 
n
 = 
	`nod
(
ODCLFIELD
, 
N
, 
	`ty≥nod
(
	`±πo
(
	`typ
(
TSTRUCT
))));

1091  
n
;

1092 
	}
}

1101 
	$isiÁ˚mëhod
(
Ty≥
 *
f
)

1103 
Ty≥
 *
rcvr
;

1104 
Ty≥
 *
t
;

1106 
rcvr
 = 
	`gëthisx
(
f
)->
ty≥
;

1107 if(
rcvr
->
sym
 !
S
)

1109 
t
 = 
rcvr
->
ty≥
;

1110 if(!
i•å
[
t
->
ëy≥
])

1112 
t
 =Å->
ty≥
;

1113 if(
t
->
sym
 !
S
 ||Å->
ëy≥
 !
TSTRUCT
 ||Å->
ty≥
 !
T
)

1116 
	}
}

1122 
Ty≥
*

1123 
	$fun˘y≥
(
Node
 *
this
, 
NodeLi°
 *
ö
, NodeLi° *
out
)

1125 
Ty≥
 *
t
;

1126 
NodeLi°
 *
rcvr
;

1128 
t
 = 
	`typ
(
TFUNC
);

1130 
rcvr
 = 
nû
;

1131 if(
this
)

1132 
rcvr
 = 
	`li°1
(
this
);

1133 
t
->
ty≥
 = 
	`tofu«rgs
(
rcvr
);

1134 
t
->
ty≥
->
down
 = 
	`tofu«rgs
(
out
);

1135 
t
->
ty≥
->
down
->dow¿
	`tofu«rgs
(
ö
);

1137 i‡(
t
->
ty≥
->
broke
 ||Å->ty≥->
down
->broke ||Å->type->down->down->broke)

1138 
t
->
broke
 = 1;

1140 if(
this
)

1141 
t
->
thi°u∂e
 = 1;

1142 
t
->
ouâu∂e
 = 
	`cou¡
(
out
);

1143 
t
->
ötu∂e
 = 
	`cou¡
(
ö
);

1144 
t
->
ouäamed
 =Å->
ouâu∂e
 > 0 && 
out
->
n
->
À·
 !
N
;

1146  
t
;

1147 
	}
}

1149 
Sym
*

1150 
	$mëhodsym
(
Sym
 *
nsym
, 
Ty≥
 *
t0
, 
iÁ˚
)

1152 
Sym
 *
s
;

1153 *
p
;

1154 
Ty≥
 *
t
;

1155 *
suffix
;

1156 
Pkg
 *
•kg
;

1157 
Pkg
 *
t›pkg
;

1159 
t
 = 
t0
;

1160 if(
t
 =
T
)

1161 
bad
;

1162 
s
 = 
t
->
sym
;

1163 if(
s
 =
S
 && 
i•å
[
t
->
ëy≥
]) {

1164 
t
 =Å->
ty≥
;

1165 if(
t
 =
T
)

1166 
bad
;

1167 
s
 = 
t
->
sym
;

1169 
•kg
 = 
nû
;

1170 if(
s
 !
S
)

1171 
•kg
 = 
s
->
pkg
;

1175 if(
t
 !
t0
 &&Å0->
sym
)

1176 
t0
 = 
	`±πo
(
t
);

1178 
suffix
 = "";

1179 if(
iÁ˚
) {

1180 
	`dowidth
(
t0
);

1181 if(
t0
->
width
 < 
ty≥s
[
çå
]->width)

1182 
suffix
 = "¬∑i";

1184 if((
•kg
 =
nû
 || 
nsym
->
pkg
 !•kgË&& !
	`exp‹äame
“sym->
«me
)) {

1185 if(
t0
->
sym
 =
S
 && 
i•å
[t0->
ëy≥
])

1186 
p
 = 
	`sm¥öt
("(%-hT).%s.%s%s", 
t0
, 
nsym
->
pkg
->
¥efix
,Çsym->
«me
, 
suffix
);

1188 
p
 = 
	`sm¥öt
("%-hT.%s.%s%s", 
t0
, 
nsym
->
pkg
->
¥efix
,Çsym->
«me
, 
suffix
);

1190 if(
t0
->
sym
 =
S
 && 
i•å
[t0->
ëy≥
])

1191 
p
 = 
	`sm¥öt
("(%-hT).%s%s", 
t0
, 
nsym
->
«me
, 
suffix
);

1193 
p
 = 
	`sm¥öt
("%-hT.%s%s", 
t0
, 
nsym
->
«me
, 
suffix
);

1195 if(
•kg
 =
nû
) {

1196 if(
t›pkg
 =
nû
)

1197 
t›pkg
 = 
	`mkpkg
(
	`°æô
("go"));

1198 
•kg
 = 
t›pkg
;

1200 
s
 = 
	`pkglookup
(
p
, 
•kg
);

1201 
	`‰ì
(
p
);

1202  
s
;

1204 
bad
:

1205 
	`yyîr‹
("ûÀgÆÑe˚ivîÅy≥: %T", 
t0
);

1206  
S
;

1207 
	}
}

1209 
Node
*

1210 
	$mëhod«me
(
Node
 *
n
, 
Ty≥
 *
t
)

1212 
Sym
 *
s
;

1214 
s
 = 
	`mëhodsym
(
n
->
sym
, 
t
, 0);

1215 if(
s
 =
S
)

1216  
n
;

1217  
	`√w«me
(
s
);

1218 
	}
}

1220 
Node
*

1221 
	$mëhod«me1
(
Node
 *
n
, Nodê*
t
)

1223 *
°¨
;

1224 *
p
;

1226 
°¨
 = 
nû
;

1227 if(
t
->
›
 =
OIND
) {

1228 
°¨
 = "*";

1229 
t
 =Å->
À·
;

1231 if(
t
->
sym
 =
S
 || 
	`isbœnk
(
n
))

1232  
	`√w«me
(
n
->
sym
);

1234 if(
°¨
)

1235 
p
 = 
	`sm¥öt
("(%s%S).%S", 
°¨
, 
t
->
sym
, 
n
->sym);

1237 
p
 = 
	`sm¥öt
("%S.%S", 
t
->
sym
, 
n
->sym);

1239 if(
	`exp‹äame
(
t
->
sym
->
«me
))

1240 
n
 = 
	`√w«me
(
	`lookup
(
p
));

1242 
n
 = 
	`√w«me
(
	`pkglookup
(
p
, 
t
->
sym
->
pkg
));

1243 
	`‰ì
(
p
);

1244  
n
;

1245 
	}
}

1252 
	$addmëhod
(
Sym
 *
sf
, 
Ty≥
 *
t
, 
loˇl
)

1254 
Ty≥
 *
f
, *
d
, *
∑
;

1255 
Node
 *
n
;

1258 if(
sf
 =
S
)

1259 
	`Áèl
("no method symbol");

1262 
∑
 = 
	`gëthisx
(
t
)->
ty≥
;

1263 if(
∑
 =
T
) {

1264 
	`yyîr‹
("missingÑeceiver");

1268 
∑
 =Öa->
ty≥
;

1269 
f
 = 
	`mëhty≥
(
∑
, 1);

1270 if(
f
 =
T
) {

1271 
t
 = 
∑
;

1272 if(
t
 !
T
) {

1273 if(
i•å
[
t
->
ëy≥
]) {

1274 if(
t
->
sym
 !
S
) {

1275 
	`yyîr‹
("övÆidÑe˚ivîÅy≥ %T (%T i†®poöã∏ty≥)", 
∑
, 
t
);

1278 
t
 =Å->
ty≥
;

1281 if(
t
->
broke
)

1283 if(
t
 !
T
) {

1284 if(
t
->
sym
 =
S
) {

1285 
	`yyîr‹
("övÆidÑe˚ivîÅy≥ %T (%T i†™ u¬amedÅy≥)", 
∑
, 
t
);

1288 if(
i•å
[
t
->
ëy≥
]) {

1289 
	`yyîr‹
("övÆidÑe˚ivîÅy≥ %T (%T i†®poöã∏ty≥)", 
∑
, 
t
);

1292 if(
t
->
ëy≥
 =
TINTER
) {

1293 
	`yyîr‹
("övÆidÑe˚ivîÅy≥ %T (%T i†™ i¡îÁ˚Åy≥)", 
∑
, 
t
);

1299 
	`yyîr‹
("övÆidÑe˚ivîÅy≥ %T (%lT / %lT)", 
∑
,Öa, 
t
);

1303 
∑
 = 
f
;

1304 if(
∑
->
ëy≥
 =
TSTRUCT
) {

1305 
f
=
∑
->
ty≥
; f; f=f->
down
) {

1306 if(
f
->
sym
 =
sf
) {

1307 
	`yyîr‹
("ty≥ %T ha†bŸh fõldánd mëhodÇamed %S", 
∑
, 
sf
);

1313 
n
 = 
	`nod
(
ODCLFIELD
, 
	`√w«me
(
sf
), 
N
);

1314 
n
->
ty≥
 = 
t
;

1316 
d
 = 
T
;

1317 
f
=
∑
->
mëhod
; f!=
T
; f=f->
down
) {

1318 
d
 = 
f
;

1319 if(
f
->
ëy≥
 !
TFIELD
)

1320 
	`Áèl
("addmëhod:ÇŸ TFIELD: %N", 
f
);

1321 if(
	`°rcmp
(
sf
->
«me
, 
f
->
sym
->name) != 0)

1323 if(!
	`eqty≥
(
t
, 
f
->
ty≥
))

1324 
	`yyîr‹
("mëhodÑede˛¨ed: %T.%S\n\t%T\n\t%T", 
∑
, 
sf
, 
f
->
ty≥
, 
t
);

1328 if(
loˇl
 && !
∑
->local) {

1330 
	`yyîr‹
("ˇ¬Ÿ deföê√w mëhod†⁄Ç⁄-loˇ»ty≥ %T", 
∑
);

1334 
f
 = 
	`°ru˘fõld
(
n
);

1337 if(
imp‹çkg
 && 
f
->
sym
 && !
	`exp‹äame
(f->sym->
«me
Ë&& f->sym->
pkg
 !
°ru˘pkg
)

1338 
	`Áèl
("imp‹ãd mëhodÇamê%+S i¿wr⁄gÖackagê%s\n", 
f
->
sym
, 
°ru˘pkg
->
«me
);

1340 if(
d
 =
T
)

1341 
∑
->
mëhod
 = 
f
;

1343 
d
->
down
 = 
f
;

1345 
	}
}

1348 
	$funccompûe
(
Node
 *
n
, 
is˛osuª
)

1350 
°ksize
 = 
BADWIDTH
;

1351 
max¨g
 = 0;

1353 if(
n
->
ty≥
 =
T
) {

1354 if(
√º‹s
 == 0)

1355 
	`Áèl
("funccompile missingÅype");

1360 
	`checkwidth
(
n
->
ty≥
);

1364 
nodÂ
->
xoff£t
 = 0;

1365 if(
is˛osuª
) {

1366 
NodeLi°
 *
l
;

1367 
l
=
n
->
¬ame
->
¡y≥
->
li°
;Ü;Üˆ->
√xt
) {

1368 
nodÂ
->
xoff£t
 +
width±r
;

1369 if(
l
->
n
->
À·
 =
N
)

1374 if(
cur‚
)

1375 
	`Áèl
("funccompûê%S insidê%S", 
n
->
¬ame
->
sym
, 
cur‚
->nname->sym);

1377 
°ksize
 = 0;

1378 
d˛c⁄ãxt
 = 
PAUTO
;

1379 
funcdïth
 = 
n
->funcdepth + 1;

1380 
	`compûe
(
n
);

1381 
cur‚
 = 
nû
;

1382 
funcdïth
 = 0;

1383 
d˛c⁄ãxt
 = 
PEXTERN
;

1384 
	}
}

	@esc.c

31 
	~<u.h
>

32 
	~<libc.h
>

33 
	~"go.h
"

35 
escfunc
(
Node
 *
func
);

36 
es˛i°
(
NodeLi°
 *
l
);

37 
esc
(
Node
 *
n
);

38 
es˛o›dïthli°
(
NodeLi°
 *
l
);

39 
es˛o›dïth
(
Node
 *
n
);

40 
esˇssign
(
Node
 *
d°
, Nodê*
§c
);

41 
escˇŒ
(
Node
*);

42 
escÊows
(
Node
 *
d°
, Nodê*
§c
);

43 
escÊood
(
Node
 *
d°
);

44 
escwÆk
(
Àvñ
, 
Node
 *
d°
, Nodê*
§c
);

45 
es˘ag
(
Node
 *
func
);

52 
Node
 
	gtheSök
;

54 
NodeLi°
* 
	gd°s
;

55 
	glo›dïth
;

56 
	gpdïth
;

57 
Sålô
* 
	gß„èg
;

58 
	gd°cou¡
, 
	gedgecou¡
;

59 
NodeLi°
* 
	gn€sc
;

62 
	$esˇ≥s
(
NodeLi°
 *
Æl
)

64 
NodeLi°
 *
l
;

66 
theSök
.
›
 = 
ONAME
;

67 
theSök
.
‹ig
 = &theSink;

68 
theSök
.
˛ass
 = 
PEXTERN
;

69 
theSök
.
sym
 = 
	`lookup
(".sink");

70 
theSök
.
es˛o›dïth
 = -1;

72 
ß„èg
 = 
	`°æô
("noescape");

73 
n€sc
 = 
nû
;

76 
l
=
Æl
;Ü;Üˆ->
√xt
)

77 if(
l
->
n
->
›
 =
ODCLFUNC
 ||Ü->n->› =
OCLOSURE
)

78 
	`escfunc
(
l
->
n
);

84 
l
 = 
d°s
;Ü;Üˆ->
√xt
)

85 
	`escÊood
(
l
->
n
);

88 
l
=
Æl
;Ü;Üˆ->
√xt
)

89 if(
l
->
n
->
›
 =
ODCLFUNC
)

90 
	`es˘ag
(
l
->
n
);

92 if(
debug
['m']) {

93 
l
=
n€sc
;Ü;Üˆ->
√xt
)

94 if(
l
->
n
->
esc
 =
EscN⁄e
)

95 
	`w¨∆
(
l
->
n
->
löío
, "%S %hN doesÇotÉscape",

96 (
l
->
n
->
cur‚
 &&Ü->n->cur‚->
¬ame
Ë?Ü->n->cur‚->¬ame->
sym
 : 
S
,

97 
l
->
n
);

99 
	}
}

103 
	$escfunc
(
Node
 *
func
)

105 
Node
 *
ßve‚
, *
n
;

106 
NodeLi°
 *
Œ
;

107 
ßvñd
;

109 
ßvñd
 = 
lo›dïth
;

110 
lo›dïth
 = 1;

111 
ßve‚
 = 
cur‚
;

112 
cur‚
 = 
func
;

114 
Œ
=
cur‚
->
d˛
;Ül;Ülˆl->
√xt
) {

115 if(
Œ
->
n
->
›
 !
ONAME
)

117 
Œ
->
n
->
˛ass
) {

118 
PPARAMOUT
:

120 
	`escÊows
(&
theSök
, 
Œ
->
n
);

121 
Œ
->
n
->
es˛o›dïth
 = 
lo›dïth
;

123 
PPARAM
:

124 if(
Œ
->
n
->
ty≥
 && !
	`ha•oöãrs
(ll->n->type))

126 
Œ
->
n
->
esc
 = 
EscN⁄e
;

127 
n€sc
 = 
	`li°
“€sc, 
Œ
->
n
);

128 
Œ
->
n
->
es˛o›dïth
 = 
lo›dïth
;

140 
Œ
=
cur‚
->
cv¨s
;Ül;Ülˆl->
√xt
) {

141 if(
Œ
->
n
->
›
 =
OXXX
)

144 
n
 = 
	`nod
(
OADDR
, 
Œ
->n->
˛osuª
, 
N
);

145 
n
->
löío
 = 
Œ
->n->lineno;

146 
	`ty≥check
(&
n
, 
Erv
);

147 
	`esˇssign
(
cur‚
, 
n
);

150 
	`es˛o›dïthli°
(
cur‚
->
nbody
);

151 
	`es˛i°
(
cur‚
->
nbody
);

152 
cur‚
 = 
ßve‚
;

153 
lo›dïth
 = 
ßvñd
;

154 
	}
}

159 
Labñ
 
	glo›ög
;

160 
Labñ
 
	gn⁄lo›ög
;

163 
	$es˛o›dïthli°
(
NodeLi°
 *
l
)

165 ; 
l
;Üˆ->
√xt
)

166 
	`es˛o›dïth
(
l
->
n
);

167 
	}
}

170 
	$es˛o›dïth
(
Node
 *
n
)

172 if(
n
 =
N
)

175 
	`es˛o›dïthli°
(
n
->
nöô
);

177 
n
->
›
) {

178 
OLABEL
:

179 if(!
n
->
À·
 || !n->À·->
sym
)

180 
	`Áèl
("esc:œbñ wôhouàœbñ: %+N", 
n
);

185 
n
->
À·
->
sym
->
œbñ
 = &
n⁄lo›ög
;

187 
OGOTO
:

188 if(!
n
->
À·
 || !n->À·->
sym
)

189 
	`Áèl
("esc:gŸÿwôhouàœbñ: %+N", 
n
);

192 if(
n
->
À·
->
sym
->
œbñ
 =&
n⁄lo›ög
)

193 
n
->
À·
->
sym
->
œbñ
 = &
lo›ög
;

197 
	`es˛o›dïth
(
n
->
À·
);

198 
	`es˛o›dïth
(
n
->
right
);

199 
	`es˛o›dïthli°
(
n
->
li°
);

200 
	`es˛o›dïth
(
n
->
¡e°
);

201 
	`es˛o›dïth
(
n
->
nö¸
);

202 
	`es˛o›dïthli°
(
n
->
nbody
);

203 
	`es˛o›dïthli°
(
n
->
√l£
);

204 
	`es˛o›dïthli°
(
n
->
æi°
);

206 
	}
}

209 
	$es˛i°
(
NodeLi°
 *
l
)

211 ; 
l
;Üˆ->
√xt
)

212 
	`esc
(
l
->
n
);

213 
	}
}

216 
	$esc
(
Node
 *
n
)

218 
 o
;

219 
NodeLi°
 *
Œ
, *
Ã
;

221 if(
n
 =
N
)

224 
 o
 = 
	`£éöío
(
n
);

226 if(
n
->
›
 =
OFOR
 ||Ç->› =
ORANGE
)

227 
lo›dïth
++;

229 if(
n
->
›
 =
OCLOSURE
) {

230 
	`escfunc
(
n
);

232 
	`esc
(
n
->
À·
);

233 
	`esc
(
n
->
right
);

234 
	`esc
(
n
->
¡e°
);

235 
	`esc
(
n
->
nö¸
);

236 
	`es˛i°
(
n
->
nöô
);

237 
	`es˛i°
(
n
->
nbody
);

238 
	`es˛i°
(
n
->
√l£
);

239 
	`es˛i°
(
n
->
li°
);

240 
	`es˛i°
(
n
->
æi°
);

242 if(
n
->
›
 =
OFOR
 ||Ç->› =
ORANGE
)

243 
lo›dïth
--;

245 if(
debug
['m'] > 1)

246 
	`¥öt
("%L:[%d] %SÉsc: %N\n", 
löío
, 
lo›dïth
,

247 (
cur‚
 && cur‚->
¬ame
Ë? cur‚->¬ame->
sym
 : 
S
, 
n
);

249 
n
->
›
) {

250 
ODCL
:

252 if(
n
->
À·
)

253 
n
->
À·
->
es˛o›dïth
 = 
lo›dïth
;

256 
OLABEL
:

257 if(
n
->
À·
->
sym
->
œbñ
 =&
n⁄lo›ög
) {

258 if(
debug
['m'] > 1)

259 
	`¥öt
("%L:%NÇ⁄-lo›ögÜabñ\n", 
löío
, 
n
);

260 } if(
n
->
À·
->
sym
->
œbñ
 =&
lo›ög
) {

261 if(
debug
['m'] > 1)

262 
	`¥öt
("%L: %NÜo›ögÜabñ\n", 
löío
, 
n
);

263 
lo›dïth
++;

269 
n
->
À·
->
sym
->
œbñ
 = 
nû
;

271 
ORANGE
:

273 if(
	`isfixed¨øy
(
n
->
ty≥
Ë&&Ç->
li°
->
√xt
)

274 
	`esˇssign
(
n
->
li°
->
√xt
->n,Ç->
right
);

277 
OSWITCH
:

278 if(
n
->
¡e°
 &&Ç->¡e°->
›
 =
OTYPESW
) {

279 
Œ
=
n
->
li°
;Ül;Ülˆl->
√xt
) {

282 
	`esˇssign
(
Œ
->
n
->
¬ame
,Ç->
¡e°
->
right
);

287 
OAS
:

288 
OASOP
:

289 
	`esˇssign
(
n
->
À·
,Ç->
right
);

292 
OAS2
:

293 if(
	`cou¡
(
n
->
li°
Ë=cou¡“->
æi°
))

294 
Œ
=
n
->
li°
, 
Ã
Ú->
æi°
;Ül;Ülˆl->
√xt
,Ür=lr->next)

295 
	`esˇssign
(
Œ
->
n
, 
Ã
->n);

298 
OAS2RECV
:

299 
OAS2MAPR
:

300 
OAS2DOTTYPE
:

301 
	`esˇssign
(
n
->
li°
->n,Ç->
æi°
->n);

304 
OSEND
:

305 
	`esˇssign
(&
theSök
, 
n
->
right
);

308 
ODEFER
:

309 if(
lo›dïth
 == 1)

314 
OPROC
:

316 
	`esˇssign
(&
theSök
, 
n
->
À·
->left);

317 
	`esˇssign
(&
theSök
, 
n
->
À·
->
right
);

318 
Œ
=
n
->
À·
->
li°
;Ül;Ülˆl->
√xt
)

319 
	`esˇssign
(&
theSök
, 
Œ
->
n
);

322 
ORETURN
:

323 
Œ
=
n
->
li°
;Ül;Ülˆl->
√xt
)

324 
	`esˇssign
(&
theSök
, 
Œ
->
n
);

327 
OPANIC
:

329 
	`esˇssign
(&
theSök
, 
n
->
À·
);

332 
OAPPEND
:

333 if(!
n
->
isddd
)

334 
Œ
=
n
->
li°
->
√xt
;Ül;Ül=ll->next)

335 
	`esˇssign
(&
theSök
, 
Œ
->
n
);

338 
OCALLMETH
:

339 
OCALLFUNC
:

340 
OCALLINTER
:

341 
	`escˇŒ
(
n
);

344 
OCONV
:

345 
OCONVNOP
:

346 
OCONVIFACE
:

347 
	`esˇssign
(
n
,Ç->
À·
);

350 
OARRAYLIT
:

351 if(
	`is¶i˚
(
n
->
ty≥
)) {

352 
n
->
esc
 = 
EscN⁄e
;

353 
n€sc
 = 
	`li°
“€sc, 
n
);

354 
n
->
es˛o›dïth
 = 
lo›dïth
;

356 
Œ
=
n
->
li°
;Ül;Ülˆl->
√xt
)

357 
	`esˇssign
(&
theSök
, 
Œ
->
n
->
right
);

360 
Œ
=
n
->
li°
;Ül;Ülˆl->
√xt
)

361 
	`esˇssign
(
n
, 
Œ
->n->
right
);

365 
OSTRUCTLIT
:

367 
Œ
=
n
->
li°
;Ül;Ülˆl->
√xt
)

368 
	`esˇssign
(
n
, 
Œ
->n->
right
);

371 
OPTRLIT
:

372 
n
->
esc
 = 
EscN⁄e
;

373 
n€sc
 = 
	`li°
“€sc, 
n
);

374 
n
->
es˛o›dïth
 = 
lo›dïth
;

376 
	`esˇssign
(&
theSök
, 
n
->
À·
);

379 
OMAPLIT
:

380 
n
->
esc
 = 
EscN⁄e
;

381 
n€sc
 = 
	`li°
“€sc, 
n
);

382 
n
->
es˛o›dïth
 = 
lo›dïth
;

384 
Œ
=
n
->
li°
;Ül;Ülˆl->
√xt
) {

385 
	`esˇssign
(&
theSök
, 
Œ
->
n
->
À·
);

386 
	`esˇssign
(&
theSök
, 
Œ
->
n
->
right
);

390 
OCLOSURE
:

391 
OADDR
:

392 
OMAKECHAN
:

393 
OMAKEMAP
:

394 
OMAKESLICE
:

395 
ONEW
:

396 
n
->
es˛o›dïth
 = 
lo›dïth
;

397 
n
->
esc
 = 
EscN⁄e
;

398 
n€sc
 = 
	`li°
“€sc, 
n
);

402 
löío
 = 
 o
;

403 
	}
}

410 
	$esˇssign
(
Node
 *
d°
, Nodê*
§c
)

412 
 o
;

414 if(
	`isbœnk
(
d°
Ë|| d° =
N
 || 
§c
 =N || src->
›
 =
ONONAME
 || src->› =
OXXX
)

417 if(
debug
['m'] > 1)

418 
	`¥öt
("%L:[%d] %SÉsˇssign: %hN(%hJË%hN(%hJ)\n", 
löío
, 
lo›dïth
,

419 (
cur‚
 && cur‚->
¬ame
Ë? cur‚->¬ame->
sym
 : 
S
, 
d°
, d°, 
§c
, src);

421 
	`£éöío
(
d°
);

425 
d°
->
›
) {

427 
	`dump
("d°", 
d°
);

428 
	`Áèl
("escassign: unexpected dst");

430 
OARRAYLIT
:

431 
OCLOSURE
:

432 
OCONV
:

433 
OCONVIFACE
:

434 
OCONVNOP
:

435 
OMAPLIT
:

436 
OSTRUCTLIT
:

439 
ONAME
:

440 if(
d°
->
˛ass
 =
PEXTERN
)

441 
d°
 = &
theSök
;

443 
ODOT
:

444 
	`esˇssign
(
d°
->
À·
, 
§c
);

446 
OINDEX
:

447 if(
	`isfixed¨øy
(
d°
->
À·
->
ty≥
)) {

448 
	`esˇssign
(
d°
->
À·
, 
§c
);

451 
d°
 = &
theSök
;

453 
OIND
:

454 
ODOTPTR
:

455 
d°
 = &
theSök
;

457 
OINDEXMAP
:

459 
	`esˇssign
(&
theSök
, 
d°
->
right
);

460 
d°
 = &
theSök
;

464 
 o
 = 
	`£éöío
(
§c
);

465 
pdïth
++;

467 
§c
->
›
) {

468 
OADDR
:

469 
OIND
:

470 
ODOTPTR
:

471 
ONAME
:

472 
OPARAM
:

473 
ODDDARG
:

474 
OPTRLIT
:

475 
OARRAYLIT
:

476 
OMAPLIT
:

477 
OSTRUCTLIT
:

478 
OMAKECHAN
:

479 
OMAKEMAP
:

480 
OMAKESLICE
:

481 
ONEW
:

482 
OCLOSURE
:

483 
	`escÊows
(
d°
, 
§c
);

486 
ODOT
:

488 if(
§c
->
ty≥
 && !
	`ha•oöãrs
(src->type))

491 
OCONV
:

492 
OCONVIFACE
:

493 
OCONVNOP
:

494 
ODOTMETH
:

496 
ODOTTYPE
:

497 
ODOTTYPE2
:

498 
OSLICE
:

499 
OSLICEARR
:

501 
	`esˇssign
(
d°
, 
§c
->
À·
);

504 
OAPPEND
:

506 
	`esˇssign
(
d°
, 
§c
->
li°
->
n
);

509 
OINDEX
:

511 if(
	`isfixed¨øy
(
§c
->
À·
->
ty≥
))

512 
	`esˇssign
(
d°
, 
§c
->
À·
);

515 
OADD
:

516 
OSUB
:

517 
OOR
:

518 
OXOR
:

519 
OMUL
:

520 
ODIV
:

521 
OMOD
:

522 
OLSH
:

523 
ORSH
:

524 
OAND
:

525 
OANDNOT
:

526 
OPLUS
:

527 
OMINUS
:

528 
OCOM
:

532 
	`esˇssign
(
d°
, 
§c
->
À·
);

533 
	`esˇssign
(
d°
, 
§c
->
right
);

538 
pdïth
--;

539 
löío
 = 
 o
;

540 
	}
}

550 
	$escˇŒ
(
Node
 *
n
)

552 
NodeLi°
 *
Œ
, *
Ã
;

553 
Node
 *
a
, *
‚
, *
§c
;

554 
Ty≥
 *
t
, *
‚ty≥
;

556 
‚
 = 
N
;

557 
n
->
›
) {

559 
	`Áèl
("esccall");

561 
OCALLFUNC
:

562 
‚
 = 
n
->
À·
;

563 
‚ty≥
 = 
‚
->
ty≥
;

566 
OCALLMETH
:

567 
‚
 = 
n
->
À·
->
right
->
sym
->
def
;

568 if(
‚
)

569 
‚ty≥
 = 
‚
->
ty≥
;

571 
‚ty≥
 = 
n
->
À·
->
ty≥
;

574 
OCALLINTER
:

575 
‚ty≥
 = 
n
->
À·
->
ty≥
;

579 
Œ
 = 
n
->
li°
;

580 if(
n
->
li°
 !
nû
 &&Ç->li°->
√xt
 ==Çil) {

581 
a
 = 
n
->
li°
->n;

582 if(
a
->
ty≥
->
ëy≥
 =
TSTRUCT
 &&á->ty≥->
fu«rg
) {

586 
Œ
 = 
nû
;

590 if(
‚
 && fn->
›
 =
ONAME
 && fn->
˛ass
 =
PFUNC
 && fn->
de‚
 && fn->de‚->
nbody
 && fn->
¡y≥
) {

594 if(
n
->
›
 !
OCALLFUNC
)

595 
	`esˇssign
(
‚
->
¡y≥
->
À·
->À·, 
n
->left->left);

597 
Ã
=
‚
->
¡y≥
->
li°
; 
Œ
 &&Ür;Ülˆl->
√xt
,Ür=lr->next) {

598 
§c
 = 
Œ
->
n
;

599 if(
Ã
->
n
->
isddd
 && !n->isddd) {

601 
§c
 = 
	`nod
(
ODDDARG
, 
N
, N);

602 
§c
->
es˛o›dïth
 = 
lo›dïth
;

603 
§c
->
löío
 = 
n
->lineno;

604 
§c
->
esc
 = 
EscN⁄e
;

605 
n€sc
 = 
	`li°
“€sc, 
§c
);

606 
n
->
right
 = 
§c
;

608 if(
Ã
->
n
->
À·
 !
N
)

609 
	`esˇssign
(
Ã
->
n
->
À·
, 
§c
);

610 if(
§c
 !
Œ
->
n
)

614 ; 
Œ
;Ülˆl->
√xt
)

615 
	`esˇssign
(&
theSök
, 
Œ
->
n
);

620 if(
n
->
›
 !
OCALLFUNC
) {

621 
t
 = 
	`gëthisx
(
‚ty≥
)->
ty≥
;

622 if(!
t
->
nŸe
 || 
	`°rcmp
—->nŸe->
s
, 
ß„èg
->s) != 0)

623 
	`esˇssign
(&
theSök
, 
n
->
À·
->left);

625 
t
=
	`gëö¨gx
(
‚ty≥
)->
ty≥
; 
Œ
;Ülˆl->
√xt
) {

626 
§c
 = 
Œ
->
n
;

627 if(
t
->
isddd
 && !
n
->isddd) {

629 
§c
 = 
	`nod
(
ODDDARG
, 
N
, N);

630 
§c
->
es˛o›dïth
 = 
lo›dïth
;

631 
§c
->
löío
 = 
n
->lineno;

632 
§c
->
esc
 = 
EscN⁄e
;

633 
n€sc
 = 
	`li°
“€sc, 
§c
);

634 
n
->
right
 = 
§c
;

636 if(!
t
->
nŸe
 || 
	`°rcmp
—->nŸe->
s
, 
ß„èg
->s) != 0)

637 
	`esˇssign
(&
theSök
, 
§c
);

638 if(
§c
 !
Œ
->
n
)

640 
t
 =Å->
down
;

643 ; 
Œ
;Ülˆl->
√xt
)

644 
	`esˇssign
(&
theSök
, 
Œ
->
n
);

645 
	}
}

649 
	$escÊows
(
Node
 *
d°
, Nodê*
§c
)

651 if(
d°
 =
nû
 || 
§c
 ==Çil || dst == src)

655 if(
§c
->
ty≥
 && !
	`ha•oöãrs
(src->type))

658 if(
debug
['m']>2)

659 
	`¥öt
("%L::Êows:: %hN <- %hN\n", 
löío
, 
d°
, 
§c
);

661 if(
d°
->
escÊow§c
 =
nû
) {

662 
d°s
 = 
	`li°
(d°s, 
d°
);

663 
d°cou¡
++;

665 
edgecou¡
++;

667 
d°
->
escÊow§c
 = 
	`li°
(d°->escÊow§c, 
§c
);

668 
	}
}

680 
	$escÊood
(
Node
 *
d°
)

682 
NodeLi°
 *
l
;

684 
d°
->
›
) {

685 
ONAME
:

686 
OCLOSURE
:

692 if(
debug
['m']>1)

693 
	`¥öt
("\√scÊood:%d: d° %hN sc›e:%S[%d]\n", 
wÆkgí
, 
d°
,

694 (
d°
->
cur‚
 && d°->cur‚->
¬ame
Ë? d°->cur‚->¬ame->
sym
 : 
S
,

695 
d°
->
es˛o›dïth
);

697 
l
 = 
d°
->
escÊow§c
;Ü;Üˆ->
√xt
) {

698 
wÆkgí
++;

699 
	`escwÆk
(0, 
d°
, 
l
->
n
);

701 
	}
}

704 
	$escwÆk
(
Àvñ
, 
Node
 *
d°
, Nodê*
§c
)

706 
NodeLi°
 *
Œ
;

707 
Àaks
;

709 if(
§c
->
wÆkgí
 == walkgen)

711 
§c
->
wÆkgí
 = walkgen;

713 if(
debug
['m']>1)

714 
	`¥öt
("escwalk:Üevel:%d depth:%d %.*s %hN(%hJ) scope:%S[%d]\n",

715 
Àvñ
, 
pdïth
,Ödïth, "\t\t\t\t\t\t\t\t\t\t", 
§c
, src,

716 (
§c
->
cur‚
 && src->cur‚->
¬ame
Ë? src->cur‚->¬ame->
sym
 : 
S
, src->
es˛o›dïth
);

718 
pdïth
++;

720 
Àaks
 = (
Àvñ
 <0Ë&& (
d°
->
es˛o›dïth
 < 
§c
->escloopdepth);

722 
§c
->
›
) {

723 
ONAME
:

724 if(
§c
->
˛ass
 =
PPARAM
 && 
Àaks
 && src->
esc
 =
EscN⁄e
) {

725 
§c
->
esc
 = 
EscSc›e
;

726 if(
debug
['m'])

727 
	`w¨∆
(
§c
->
löío
, "leakingÖaram: %hN", src);

734 if(
§c
->
˛ass
 =
PPARAMREF
) {

735 if(
Àaks
 && 
debug
['m'])

736 
	`w¨∆
(
§c
->
löío
, "leaking closureÑeference %hN", src);

737 
	`escwÆk
(
Àvñ
, 
d°
, 
§c
->
˛osuª
);

741 
OPTRLIT
:

742 
OADDR
:

743 if(
Àaks
) {

744 
§c
->
esc
 = 
EscHóp
;

745 
	`addªsˇ≥s
(
§c
->
À·
);

746 if(
debug
['m'])

747 
	`w¨∆
(
§c
->
löío
, "%hNÉscapesÅo heap", src);

749 
	`escwÆk
(
Àvñ
-1, 
d°
, 
§c
->
À·
);

752 
OARRAYLIT
:

753 if(
	`isfixed¨øy
(
§c
->
ty≥
))

756 
ODDDARG
:

757 
OMAKECHAN
:

758 
OMAKEMAP
:

759 
OMAKESLICE
:

760 
OMAPLIT
:

761 
ONEW
:

762 
OCLOSURE
:

763 if(
Àaks
) {

764 
§c
->
esc
 = 
EscHóp
;

765 if(
debug
['m'])

766 
	`w¨∆
(
§c
->
löío
, "%hNÉscapesÅo heap", src);

770 
OINDEX
:

771 if(
	`isfixed¨øy
(
§c
->
ty≥
))

774 
OSLICE
:

775 
ODOTPTR
:

776 
OINDEXMAP
:

777 
OIND
:

778 
	`escwÆk
(
Àvñ
+1, 
d°
, 
§c
->
À·
);

781 
Œ
=
§c
->
escÊow§c
;Ül;Ülˆl->
√xt
)

782 
	`escwÆk
(
Àvñ
, 
d°
, 
Œ
->
n
);

784 
pdïth
--;

785 
	}
}

788 
	$es˘ag
(
Node
 *
func
)

790 
Node
 *
ßve‚
;

791 
NodeLi°
 *
Œ
;

794 if(
func
->
nbody
 =
nû
)

797 
ßve‚
 = 
cur‚
;

798 
cur‚
 = 
func
;

800 
Œ
=
cur‚
->
d˛
;Ül;Ülˆl->
√xt
) {

801 if(
Œ
->
n
->
›
 !
ONAME
 ||Ül->n->
˛ass
 !
PPARAM
)

804 
Œ
->
n
->
esc
) {

805 
EscN⁄e
:

806 if(
	`ha•oöãrs
(
Œ
->
n
->
ty≥
))

807 
Œ
->
n
->
∑ømÊd
->
nŸe
 = 
ß„èg
;

808 
EscHóp
:

809 
EscSc›e
:

814 
cur‚
 = 
ßve‚
;

815 
	}
}

	@export.c

5 
	~<u.h
>

6 
	~<libc.h
>

7 
	~"go.h
"

8 
	~"y.èb.h
"

10 
dum≥xp‹ây≥
(
Ty≥
 *
t
);

14 
	$exp‹tsym
(
Node
 *
n
)

16 if(
n
 =
N
 ||Ç->
sym
 =
S
)

18 if(
n
->
sym
->
Êags
 & (
SymExp‹t
|
SymPackage
)) {

19 if(
n
->
sym
->
Êags
 & 
SymPackage
)

20 
	`yyîr‹
("exp‹t/∑ckagêmism©ch: %S", 
n
->
sym
);

23 
n
->
sym
->
Êags
 |
SymExp‹t
;

25 
exp‹éi°
 = 
	`li°
”xp‹éi°, 
n
);

26 
	}
}

30 
	$∑ckagesym
(
Node
 *
n
)

32 if(
n
 =
N
 ||Ç->
sym
 =
S
)

34 if(
n
->
sym
->
Êags
 & (
SymExp‹t
|
SymPackage
)) {

35 if(
n
->
sym
->
Êags
 & 
SymExp‹t
)

36 
	`yyîr‹
("exp‹t/∑ckagêmism©ch: %S", 
n
->
sym
);

39 
n
->
sym
->
Êags
 |
SymPackage
;

41 
exp‹éi°
 = 
	`li°
”xp‹éi°, 
n
);

42 
	}
}

45 
	$exp‹äame
(*
s
)

47 
Ru√
 
r
;

49 if((
uch¨
)
s
[0] < 
Ru√£lf
)

50  'A' <
s
[0] && s[0] <= 'Z';

51 
	`ch¨t‹u√
(&
r
, 
s
);

52  
	`isuµîru√
(
r
);

53 
	}
}

56 
	$öô«me
(*
s
)

58  
	`°rcmp
(
s
, "init") == 0;

59 
	}
}

62 
	$aut€xp‹t
(
Node
 *
n
, 
˘xt
)

64 if(
n
 =
N
 ||Ç->
sym
 =
S
)

66 if((
˘xt
 !
PEXTERN
 && ctxà!
PFUNC
Ë|| 
d˛c⁄ãxt
 != PEXTERN)

68 if(
n
->
¡y≥
 &&Ç->¡y≥->
›
 =
OTFUNC
 &&Ç->¡y≥->
À·
)

70 if(
	`exp‹äame
(
n
->
sym
->
«me
Ë|| 
	`öô«me
(n->sym->name))

71 
	`exp‹tsym
(
n
);

73 
	`∑ckagesym
(
n
);

74 
	}
}

77 
	$dumµkg
(
Pkg
 *
p
)

79 *
suffix
;

81 if(
p
 =
nû
 ||Ö =
loˇÕkg
 ||Ö->
exp‹ãd
 ||Ö =
buûtöpkg
)

83 
p
->
exp‹ãd
 = 1;

84 
suffix
 = "";

85 if(!
p
->
dúe˘
)

86 
suffix
 = " // indirect";

87 
	`B¥öt
(
bout
, "\timp‹à%†\"%Z\"%s\n", 
p
->
«me
,Ö->
∑th
, 
suffix
);

88 
	}
}

91 
ªexp‹tdï
(
Node
 *
n
);

93 
	$ªexp‹tdïli°
(
NodeLi°
 *
Œ
)

95 ; 
Œ
 ;Œˆl->
√xt
)

96 
	`ªexp‹tdï
(
Œ
->
n
);

97 
	}
}

100 
	$ªexp‹tdï
(
Node
 *
n
)

102 
Ty≥
 *
t
;

104 if(!
n
)

108 
n
->
›
) {

109 
ONAME
:

110 
n
->
˛ass
&~
PHEAP
) {

111 
PFUNC
:

113 if(!
n
->
ty≥
 ||Ç->ty≥->
thi°u∂e
 > 0)

116 
PEXTERN
:

117 i‡(
n
->
sym
 &&Ç->sym->
pkg
 !
loˇÕkg
 &&Ç->sym->pkg !
buûtöpkg
)

118 
exp‹éi°
 = 
	`li°
”xp‹éi°, 
n
);

123 
OLITERAL
:

124 
t
 = 
n
->
ty≥
;

125 if(
t
 !
ty≥s
[
n
->
ty≥
->
ëy≥
] &&Å !
idólboﬁ
 &&Å !
idól°rög
) {

126 if(
i•å
[
t
->
ëy≥
])

127 
t
 =Å->
ty≥
;

128 i‡(
t
 &&Å->
sym
 &&Å->sym->
def
 &&Å->sym->
pkg
 !
loˇÕkg
 &&Å->sym->pkg !
buûtöpkg
) {

130 
exp‹éi°
 = 
	`li°
”xp‹éi°, 
t
->
sym
->
def
);

134 
OTYPE
:

135 i‡(
n
->
sym
 &&Ç->sym->
pkg
 !
loˇÕkg
 &&Ç->sym->pkg !
buûtöpkg
)

136 
exp‹éi°
 = 
	`li°
”xp‹éi°, 
n
);

140 
OCONV
:

141 
OCONVIFACE
:

142 
OCONVNOP
:

143 
ODOTTYPE
:

144 
OSTRUCTLIT
:

145 
OPTRLIT
:

146 
t
 = 
n
->
ty≥
;

147 if(!
t
->
sym
 &&Å->
ty≥
)

148 
t
 =Å->
ty≥
;

149 i‡(
t
 &&Å->
sym
 &&Å->sym->
def
 &&Å->sym->
pkg
 !
loˇÕkg
 &&Å->sym->pkg !
buûtöpkg
) {

151 
exp‹éi°
 = 
	`li°
”xp‹éi°, 
t
->
sym
->
def
);

156 
	`ªexp‹tdï
(
n
->
À·
);

157 
	`ªexp‹tdï
(
n
->
right
);

158 
	`ªexp‹tdïli°
(
n
->
li°
);

159 
	`ªexp‹tdïli°
(
n
->
æi°
);

160 
	`ªexp‹tdïli°
(
n
->
nöô
);

161 
	`ªexp‹tdï
(
n
->
¡e°
);

162 
	`ªexp‹tdï
(
n
->
nö¸
);

163 
	`ªexp‹tdïli°
(
n
->
nbody
);

164 
	`ªexp‹tdïli°
(
n
->
√l£
);

165 
	}
}

169 
	$dum≥xp‹tc⁄°
(
Sym
 *
s
)

171 
Node
 *
n
;

172 
Ty≥
 *
t
;

174 
n
 = 
s
->
def
;

175 
	`ty≥check
(&
n
, 
Erv
);

176 if(
n
 =
N
 ||Ç->
›
 !
OLITERAL
)

177 
	`Áèl
("dum≥xp‹tc⁄°: oc⁄°Çû: %S", 
s
);

179 
t
 = 
n
->
ty≥
;

180 
	`dum≥xp‹ây≥
(
t
);

182 if(
t
 !
T
 && !
	`isidól
(t))

183 
	`B¥öt
(
bout
, "\tc⁄° %#S %#T = %#V\n", 
s
, 
t
, &
n
->
vÆ
);

185 
	`B¥öt
(
bout
, "\tc⁄° %#S = %#V\n", 
s
, &
n
->
vÆ
);

186 
	}
}

189 
	$dum≥xp‹tv¨
(
Sym
 *
s
)

191 
Node
 *
n
;

192 
Ty≥
 *
t
;

194 
n
 = 
s
->
def
;

195 
	`ty≥check
(&
n
, 
Erv
|
EˇŒ
);

196 if(
n
 =
N
 ||Ç->
ty≥
 =
T
) {

197 
	`yyîr‹
("v¨übÀÉxp‹ãd buànŸ deföed: %S", 
s
);

201 
t
 = 
n
->
ty≥
;

202 
	`dum≥xp‹ây≥
(
t
);

204 if(
t
->
ëy≥
 =
TFUNC
 && 
n
->
˛ass
 =
PFUNC
) {

205 i‡(
n
->
öl
) {

208 if(
debug
['l'] < 2)

209 
	`ty≥checköl
(
n
);

210 
	`B¥öt
(
bout
, "\tfun¯%#S%#hT { %#H }\n", 
s
, 
t
, 
n
->
öl
);

211 
	`ªexp‹tdïli°
(
n
->
öl
);

213 
	`B¥öt
(
bout
, "\tfun¯%#S%#hT\n", 
s
, 
t
);

215 
	`B¥öt
(
bout
, "\tv¨ %#S %#T\n", 
s
, 
t
);

216 
	}
}

219 
	$mëhcmp
(c⁄° *
va
, c⁄° *
vb
)

221 
Ty≥
 *
a
, *
b
;

223 
a
 = *(
Ty≥
**)
va
;

224 
b
 = *(
Ty≥
**)
vb
;

225  
	`°rcmp
(
a
->
sym
->
«me
, 
b
->sym->name);

226 
	}
}

229 
	$dum≥xp‹ây≥
(
Ty≥
 *
t
)

231 
Ty≥
 *
f
;

232 
Ty≥
 **
m
;

233 
i
, 
n
;

235 if(
t
 =
T
)

237 if(
t
->
¥öãd
 ||Å =
ty≥s
[t->
ëy≥
] ||Å =
byãty≥
 ||Å =
ru√ty≥
 ||Å =
îr‹ty≥
)

239 
t
->
¥öãd
 = 1;

241 if(
t
->
sym
 !
S
 &&Å->
ëy≥
 !
TFIELD
)

242 
	`dumµkg
(
t
->
sym
->
pkg
);

244 
	`dum≥xp‹ây≥
(
t
->
ty≥
);

245 
	`dum≥xp‹ây≥
(
t
->
down
);

247 i‡(
t
->
sym
 =
S
 ||Å->
ëy≥
 =
TFIELD
)

250 
n
 = 0;

251 
f
=
t
->
mëhod
; f!=
T
; f=f->
down
) {

252 
	`dum≥xp‹ây≥
(
f
);

253 
n
++;

256 
m
 = 
	`mÆ
(
n
* m[0]);

257 
i
 = 0;

258 
f
=
t
->
mëhod
; f!=
T
; f=f->
down
)

259 
m
[
i
++] = 
f
;

260 
	`qs‹t
(
m
, 
n
,  m[0], 
mëhcmp
);

262 
	`B¥öt
(
bout
, "\ây≥ %#S %#lT\n", 
t
->
sym
,Å);

263 
i
=0; i<
n
; i++) {

264 
f
 = 
m
[
i
];

265 i‡(
f
->
ty≥
->
¬ame
 && f->ty≥->¬ame->
öl
) {

268 if(
debug
['l'] < 2)

269 
	`ty≥checköl
(
f
->
ty≥
->
¬ame
);

270 
	`B¥öt
(
bout
, "\tfun¯(%#TË%#hhS%#hT { %#H }\n", 
	`gëthisx
(
f
->
ty≥
)->ty≥, f->
sym
, f->ty≥, f->ty≥->
¬ame
->
öl
);

271 
	`ªexp‹tdïli°
(
f
->
ty≥
->
¬ame
->
öl
);

273 
	`B¥öt
(
bout
, "\tfun¯(%#TË%#hhS%#hT\n", 
	`gëthisx
(
f
->
ty≥
)->ty≥, f->
sym
, f->type);

275 
	}
}

278 
	$dumpsym
(
Sym
 *
s
)

280 if(
s
->
Êags
 & 
SymExp‹ãd
)

282 
s
->
Êags
 |
SymExp‹ãd
;

284 if(
s
->
def
 =
N
) {

285 
	`yyîr‹
("unknow¿exp‹àsymbﬁ: %S", 
s
);

289 
	`dumµkg
(
s
->
pkg
);

291 
s
->
def
->
›
) {

293 
	`yyîr‹
("u√x≥˘edÉxp‹àsymbﬁ: %O %S", 
s
->
def
->
›
, s);

296 
OLITERAL
:

297 
	`dum≥xp‹tc⁄°
(
s
);

300 
OTYPE
:

301 if(
s
->
def
->
ty≥
->
ëy≥
 =
TFORW
)

302 
	`yyîr‹
("exp‹ào‡öcom∂ëêty≥ %S", 
s
);

304 
	`dum≥xp‹ây≥
(
s
->
def
->
ty≥
);

307 
ONAME
:

308 
	`dum≥xp‹tv¨
(
s
);

311 
	}
}

314 
	$dum≥xp‹t
()

316 
NodeLi°
 *
l
;

317 
öt32
 
i
, 
 o
;

318 
Pkg
 *
p
;

320 
 o
 = 
löío
;

322 
	`B¥öt
(
bout
, "\n$$ //Éxp‹ts\¿Öackagê%s", 
loˇÕkg
->
«me
);

323 if(
ß„mode
)

324 
	`B¥öt
(
bout
, " safe");

325 
	`B¥öt
(
bout
, "\n");

327 
i
=0; i<
	`√Àm
(
phash
); i++)

328 
p
=
phash
[
i
];Ö;Öı->
lök
)

329 if(
p
->
dúe˘
)

330 
	`dumµkg
(
p
);

332 
l
=
exp‹éi°
;Ü;Üˆ->
√xt
) {

333 
löío
 = 
l
->
n
->lineno;

334 
	`dumpsym
(
l
->
n
->
sym
);

337 
	`B¥öt
(
bout
, "\n$$ //ÜocalÅypes\n\n$$\n");

339 
löío
 = 
 o
;

340 
	}
}

349 
Sym
*

350 
	$imp‹tsym
(
Sym
 *
s
, 
›
)

352 if(
s
->
def
 !
N
 && s->def->
›
 != op)

353 
	`ªde˛¨e
(
s
, "during import");

356 if(
s
->
def
 =
N
) {

357 if(
	`exp‹äame
(
s
->
«me
Ë|| 
	`öô«me
(s->name))

358 
s
->
Êags
 |
SymExp‹t
;

360 
s
->
Êags
 |
SymPackage
;

362  
s
;

363 
	}
}

368 
Ty≥
*

369 
	$pkgty≥
(
Sym
 *
s
)

371 
Ty≥
 *
t
;

373 
	`imp‹tsym
(
s
, 
OTYPE
);

374 if(
s
->
def
 =
N
 || s->def->
›
 !
OTYPE
) {

375 
t
 = 
	`typ
(
TFORW
);

376 
t
->
sym
 = 
s
;

377 
s
->
def
 = 
	`ty≥nod
(
t
);

379 if(
s
->
def
->
ty≥
 =
T
)

380 
	`yyîr‹
("pkgty≥ %S", 
s
);

381  
s
->
def
->
ty≥
;

382 
	}
}

385 
	$imp‹timp‹t
(
Sym
 *
s
, 
Sålô
 *
z
)

390 
Pkg
 *
p
;

392 
p
 = 
	`mkpkg
(
z
);

393 if(
p
->
«me
 =
nû
) {

394 
p
->
«me
 = 
s
->name;

395 
	`pkglookup
(
s
->
«me
, 
nû
)->
≈kg
++;

396 } if(
	`°rcmp
(
p
->
«me
, 
s
->name) != 0)

397 
	`yyîr‹
("c⁄Êi˘ögÇame†%†™d %†f‹Öackagê\"%Z\"", 
p
->
«me
, 
s
->«me,Ö->
∑th
);

399 if(!
öˇ¬edimp‹t
 && 
myimp‹ç©h
 !
nû
 && 
	`°rcmp
(
z
->
s
, myimportpath) == 0) {

400 
	`yyîr‹
("imp‹à\"%Z\":Öackagêdïíd†⁄ \"%Z\" (imp‹àcy˛e)", 
imp‹çkg
->
∑th
, 
z
);

401 
	`îr‹exô
();

403 
	}
}

406 
	$imp‹tc⁄°
(
Sym
 *
s
, 
Ty≥
 *
t
, 
Node
 *
n
)

408 
Node
 *
n1
;

410 
	`imp‹tsym
(
s
, 
OLITERAL
);

411 
	`c⁄vlô
(&
n
, 
t
);

413 if(
s
->
def
 !
N
)

416 if(
n
->
›
 !
OLITERAL
) {

417 
	`yyîr‹
("expression must beá constant");

421 if(
n
->
sym
 !
S
) {

422 
n1
 = 
	`nod
(
OXXX
, 
N
, N);

423 *
n1
 = *
n
;

424 
n
 = 
n1
;

426 
n
->
‹ig
 = 
	`√w«me
(
s
);

427 
n
->
sym
 = 
s
;

428 
	`de˛¨e
(
n
, 
PEXTERN
);

430 if(
debug
['E'])

431 
	`¥öt
("imp‹àc⁄° %S\n", 
s
);

432 
	}
}

435 
	$imp‹tv¨
(
Sym
 *
s
, 
Ty≥
 *
t
)

437 
Node
 *
n
;

439 
	`imp‹tsym
(
s
, 
ONAME
);

440 if(
s
->
def
 !
N
 && s->def->
›
 =
ONAME
) {

441 if(
	`eqty≥
(
t
, 
s
->
def
->
ty≥
))

443 
	`yyîr‹
("öc⁄si°íàdeföôi⁄ f‹ v¨ %S durög imp‹t\n\t%T\n\t%T", 
s
, s->
def
->
ty≥
, 
t
);

445 
n
 = 
	`√w«me
(
s
);

446 
n
->
ty≥
 = 
t
;

447 
	`de˛¨e
(
n
, 
PEXTERN
);

449 if(
debug
['E'])

450 
	`¥öt
("imp‹àv¨ %S %lT\n", 
s
, 
t
);

451 
	}
}

454 
	$imp‹ây≥
(
Ty≥
 *
±
, Ty≥ *
t
)

456 
Node
 *
n
;

461 if(
öˇ¬edimp‹t
 &&

462 
	`°rcmp
(
imp‹çkg
->
«me
, "unsafe") == 0 &&

463 
	`°rcmp
(
±
->
nod
->
sym
->
«me
, "Pointer") == 0) {

464 
t
 = 
ty≥s
[
TUNSAFEPTR
];

467 if(
±
->
ëy≥
 =
TFORW
) {

468 
n
 = 
±
->
nod
;

469 
	`c›yty≥
(
±
->
nod
, 
t
);

470 
±
->
nod
 = 
n
;

471 
±
->
sym
->
œ°löío
 = 
	`∑r£æöe
();

472 
	`de˛¨e
(
n
, 
PEXTERN
);

473 
	`checkwidth
(
±
);

474 } if(!
	`eqty≥
(
±
->
‹ig
, 
t
))

475 
	`yyîr‹
("öc⁄si°íàdeföôi⁄ f‹Åy≥ %S durög imp‹t\n\t%lT\n\t%lT", 
±
->
sym
,Öt, 
t
);

477 if(
debug
['E'])

478 
	`¥öt
("imp‹àty≥ %T %lT\n", 
±
, 
t
);

479 
	}
}

	@fmt.c

5 
	~<u.h
>

6 
	~<libc.h
>

7 
	~"go.h
"

8 
	~"›«mes.h
"

52 
	mFEº
,

53 
	mFDbg
,

54 
	mFExp
,

55 
	mFTy≥Id
,

57 
	gfmtmode
;

58 
	gfmçkgpfx
;

85 
	$£tfmode
(*
Êags
)

87 
fm
;

89 
fm
 = 
fmtmode
;

90 if(*
Êags
 & 
FmtSign
)

91 
fmtmode
 = 
FDbg
;

92 if(*
Êags
 & 
FmtSh¨p
)

93 
fmtmode
 = 
FExp
;

94 if(*
Êags
 & 
FmtLe·
)

95 
fmtmode
 = 
FTy≥Id
;

97 *
Êags
 &~(
FmtSh¨p
|
FmtLe·
|
FmtSign
);

98  
fm
;

99 
	}
}

103 
	$Lc⁄v
(
Fmt
 *
Â
)

107 
Hi°
* 
ö˛
;

108 
öt32
 
idñ
;

109 
Hi°
* 
löe
;

110 
öt32
 
ldñ
;

111 } 
a
[
HISTSZ
];

112 
öt32
 
 o
, 
d
;

113 
i
, 
n
;

114 
Hi°
 *
h
;

116 
 o
 = 
	`va_¨g
(
Â
->
¨gs
, 
öt32
);

118 
n
 = 0;

119 
h
=
hi°
; h!=
H
; h=h->
lök
) {

120 if(
h
->
off£t
 < 0)

122 if(
 o
 < 
h
->
löe
)

124 if(
h
->
«me
) {

125 if(
h
->
off£t
 > 0) {

127 if(
n
 > 0 &&Ç < 
HISTSZ
) {

128 
a
[
n
-1].
löe
 = 
h
;

129 
a
[
n
-1].
ldñ
 = 
h
->
löe
 - h->
off£t
 + 1;

133 if(
n
 < 
HISTSZ
) {

134 
a
[
n
].
ö˛
 = 
h
;

135 
a
[
n
].
idñ
 = 
h
->
löe
;

136 
a
[
n
].
löe
 = 0;

138 
n
++;

142 
n
--;

143 if(
n
 > 0 &&Ç < 
HISTSZ
) {

144 
d
 = 
h
->
löe
 - 
a
[
n
].
ö˛
->line;

145 
a
[
n
-1].
ldñ
 +
d
;

146 
a
[
n
-1].
idñ
 +
d
;

150 if(
n
 > 
HISTSZ
)

151 
n
 = 
HISTSZ
;

153 
i
=
n
-1; i>=0; i--) {

154 if(
i
 !
n
-1) {

155 if(
Â
->
Êags
 & ~(
FmtWidth
|
FmtPªc
))

157 
	`fmçröt
(
Â
, " ");

159 if(
debug
['L'] || (
Â
->
Êags
&
FmtL⁄g
))

160 
	`fmçröt
(
Â
, "%s/", 
∑th«me
);

161 if(
a
[
i
].
löe
)

162 
	`fmçröt
(
Â
, "%s:%d[%s:%d]",

163 
a
[
i
].
löe
->
«me
, 
 o
-a[i].
ldñ
+1,

164 
a
[
i
].
ö˛
->
«me
, 
 o
-a[i].
idñ
+1);

166 
	`fmçröt
(
Â
, "%s:%d",

167 
a
[
i
].
ö˛
->
«me
, 
 o
-a[i].
idñ
+1);

168 
 o
 = 
a
[
i
].
ö˛
->
löe
 - 1;

170 if(
n
 == 0)

171 
	`fmçröt
(
Â
, "<epoch>");

174 
	}
}

177 
	ggo›«mes
[] =

179 [
OADDR
] = "&",

180 [
OADD
] = "+",

181 [
OADDSTR
] = "+",

182 [
OANDAND
] = "&&",

183 [
OANDNOT
] = "&^",

184 [
OAND
] = "&",

185 [
OAPPEND
] = "append",

186 [
OAS
] = "=",

187 [
OAS2
] = "=",

188 [
OBREAK
] = "break",

189 [
OCALL
] = "function call",

190 [
OCAP
] = "cap",

191 [
OCASE
] = "case",

192 [
OCLOSE
] = "close",

193 [
OCOMPLEX
] = "complex",

194 [
OCOM
] = "^",

195 [
OCONTINUE
] = "continue",

196 [
OCOPY
] = "copy",

197 [
ODEC
] = "--",

198 [
ODELETE
] = "delete",

199 [
ODEFER
] = "defer",

200 [
ODIV
] = "/",

201 [
OEQ
] = "==",

202 [
OFALL
] = "fallthrough",

203 [
OFOR
] = "for",

204 [
OGE
] = ">=",

205 [
OGOTO
] = "goto",

206 [
OGT
] = ">",

207 [
OIF
] = "if",

208 [
OIMAG
] = "imag",

209 [
OINC
] = "++",

210 [
OIND
] = "*",

211 [
OLEN
] = "len",

212 [
OLE
] = "<=",

213 [
OLSH
] = "<<",

214 [
OLT
] = "<",

215 [
OMAKE
] = "make",

216 [
OMINUS
] = "-",

217 [
OMOD
] = "%",

218 [
OMUL
] = "*",

219 [
ONEW
] = "new",

220 [
ONE
] = "!=",

221 [
ONOT
] = "!",

222 [
OOROR
] = "||",

223 [
OOR
] = "|",

224 [
OPANIC
] = "panic",

225 [
OPLUS
] = "+",

226 [
OPRINTN
] = "println",

227 [
OPRINT
] = "print",

228 [
ORANGE
] = "range",

229 [
OREAL
] = "real",

230 [
ORECV
] = "<-",

231 [
ORETURN
] = "return",

232 [
ORSH
] = ">>",

233 [
OSELECT
] = "select",

234 [
OSEND
] = "<-",

235 [
OSUB
] = "-",

236 [
OSWITCH
] = "switch",

237 [
OXOR
] = "^",

242 
	$Oc⁄v
(
Fmt
 *
Â
)

244 
o
;

246 
o
 = 
	`va_¨g
(
Â
->
¨gs
, );

247 if((
Â
->
Êags
 & 
FmtSh¨p
Ë|| 
fmtmode
 !
FDbg
)

248 if(
o
 >0 && o < 
	`√Àm
(
go›«mes
Ë&& go›«mes[o] !
nû
)

249  
	`fmt°r˝y
(
Â
, 
go›«mes
[
o
]);

251 if(
o
 >0 && o < 
	`√Àm
(
›«mes
Ë&& o≤ames[o] !
nû
)

252  
	`fmt°r˝y
(
Â
, 
›«mes
[
o
]);

254  
	`fmçröt
(
Â
, "O-%d", 
o
);

255 
	}
}

257 c⁄° * 
	g˛as¢ames
[] = {

269 
	$Jc⁄v
(
Fmt
 *
Â
)

271 
Node
 *
n
;

272 *
s
;

273 
c
;

275 
n
 = 
	`va_¨g
(
Â
->
¨gs
, 
Node
*);

277 
c
 = 
Â
->
Êags
&
FmtSh‹t
;

279 if(!
c
 && 
n
->
uŒm™
 != 0)

280 
	`fmçröt
(
Â
, " u(%d)", 
n
->
uŒm™
);

282 if(!
c
 && 
n
->
addabÀ
 != 0)

283 
	`fmçröt
(
Â
, "á(%d)", 
n
->
addabÀ
);

285 if(!
c
 && 
n
->
v¨gí
 != 0)

286 
	`fmçröt
(
Â
, " g(%d)", 
n
->
v¨gí
);

288 if(
n
->
löío
 != 0)

289 
	`fmçröt
(
Â
, "Ü(%d)", 
n
->
löío
);

291 if(!
c
 && 
n
->
xoff£t
 !
BADWIDTH
)

292 
	`fmçröt
(
Â
, " x(%Œd%+d)", 
n
->
xoff£t
,Ç->
°kdñè
);

294 if(
n
->
˛ass
 != 0) {

295 
s
 = "";

296 if(
n
->
˛ass
 & 
PHEAP
Ë
s
 = ",heap";

297 if((
n
->
˛ass
 & ~
PHEAP
Ë< 
	`√Àm
(
˛as¢ames
))

298 
	`fmçröt
(
Â
, " cœss(%s%s)", 
˛as¢ames
[
n
->
˛ass
&~
PHEAP
], 
s
);

300 
	`fmçröt
(
Â
, " cœss(%d?%s)", 
n
->
˛ass
&~
PHEAP
, 
s
);

303 if(
n
->
cﬁas
 != 0)

304 
	`fmçröt
(
Â
, " cﬁas(%d)", 
n
->
cﬁas
);

306 if(
n
->
funcdïth
 != 0)

307 
	`fmçröt
(
Â
, " f(%d)", 
n
->
funcdïth
);

309 
n
->
esc
) {

310 
EscUnknown
:

312 
EscHóp
:

313 
	`fmçröt
(
Â
, "Ésc(h)");

315 
EscSc›e
:

316 
	`fmçröt
(
Â
, "Ésc(s)");

318 
EscN⁄e
:

319 
	`fmçröt
(
Â
, "Ésc(no)");

321 
EscNevî
:

322 if(!
c
)

323 
	`fmçröt
(
Â
, "Ésc(N)");

326 
	`fmçröt
(
Â
, "Ésc(%d)", 
n
->
esc
);

330 if(
n
->
es˛o›dïth
)

331 
	`fmçröt
(
Â
, "Üd(%d)", 
n
->
es˛o›dïth
);

333 if(!
c
 && 
n
->
ty≥check
 != 0)

334 
	`fmçröt
(
Â
, "Åc(%d)", 
n
->
ty≥check
);

336 if(!
c
 && 
n
->
dod©a
 != 0)

337 
	`fmçröt
(
Â
, " dd(%d)", 
n
->
dod©a
);

339 if(
n
->
isddd
 != 0)

340 
	`fmçröt
(
Â
, " isddd(%d)", 
n
->
isddd
);

342 if(
n
->
im∂icô
 != 0)

343 
	`fmçröt
(
Â
, " im∂icô(%d)", 
n
->
im∂icô
);

345 if(
n
->
embedded
 != 0)

346 
	`fmçröt
(
Â
, "Émbedded(%d)", 
n
->
embedded
);

348 if(!
c
 && 
n
->
u£d
 != 0)

349 
	`fmçröt
(
Â
, " u£d(%d)", 
n
->
u£d
);

351 
	}
}

355 
	$Vc⁄v
(
Fmt
 *
Â
)

357 
VÆ
 *
v
;

358 
vl⁄g
 
x
;

360 
v
 = 
	`va_¨g
(
Â
->
¨gs
, 
VÆ
*);

362 
v
->
˘y≥
) {

363 
CTINT
:

364  
	`fmçröt
(
Â
, "%B", 
v
->
u
.
xvÆ
);

365 
CTRUNE
:

366 
x
 = 
	`mpgëfix
(
v
->
u
.
xvÆ
);

367 if(' ' <
x
 && x < 0x80 && x != '\\' && x != '\'')

368  
	`fmçröt
(
Â
, "'%c'", ()
x
);

369 if(0 <
x
 && x < (1<<16))

370  
	`fmçröt
(
Â
, "'\\u%04ux'", ()
x
);

371 if(0 <
x
 && x <
Ru√max
)

372  
	`fmçröt
(
Â
, "'\\U%08Œux'", 
x
);

373  
	`fmçröt
(
Â
, "('\\x00' + %B)", 
v
->
u
.
xvÆ
);

374 
CTFLT
:

375 if((
Â
->
Êags
 & 
FmtSh¨p
Ë|| 
fmtmode
 =
FExp
)

376  
	`fmçröt
(
Â
, "%F", 
v
->
u
.
fvÆ
);

377  
	`fmçröt
(
Â
, "%#F", 
v
->
u
.
fvÆ
);

378 
CTCPLX
:

379 if((
Â
->
Êags
 & 
FmtSh¨p
Ë|| 
fmtmode
 =
FExp
)

380  
	`fmçröt
(
Â
, "(%F+%F)", &
v
->
u
.
cvÆ
->
ªÆ
, &v->u.cvÆ->
imag
);

381  
	`fmçröt
(
Â
, "(%#F + %#Fi)", &
v
->
u
.
cvÆ
->
ªÆ
, &v->u.cvÆ->
imag
);

382 
CTSTR
:

383  
	`fmçröt
(
Â
, "\"%Z\"", 
v
->
u
.
svÆ
);

384 
CTBOOL
:

385 if–
v
->
u
.
bvÆ
)

386  
	`fmt°r˝y
(
Â
, "true");

387  
	`fmt°r˝y
(
Â
, "false");

388 
CTNIL
:

389  
	`fmt°r˝y
(
Â
, "nil");

391  
	`fmçröt
(
Â
, "<%d>", 
v
->
˘y≥
);

392 
	}
}

396 
	$Zc⁄v
(
Fmt
 *
Â
)

398 
Ru√
 
r
;

399 
Sålô
 *
•
;

400 *
s
, *
£
;

401 
n
;

403 
•
 = 
	`va_¨g
(
Â
->
¨gs
, 
Sålô
*);

404 if(
•
 =
nû
)

405  
	`fmt°r˝y
(
Â
, "<nil>");

407 
s
 = 
•
->s;

408 
£
 = 
s
 + 
•
->
Àn
;

409 
s
 < 
£
) {

410 
n
 = 
	`ch¨t‹u√
(&
r
, 
s
);

411 
s
 +
n
;

412 
r
) {

413 
Ru√îr‹
:

414 if(
n
 == 1) {

415 
	`fmçröt
(
Â
, "\\x%02x", (
uch¨
)*(
s
-1));

420 if(
r
 < ' ') {

421 
	`fmçröt
(
Â
, "\\x%02x", 
r
);

424 
	`fmåu√
(
Â
, 
r
);

427 
	`fmt°r˝y
(
Â
, "\\t");

430 
	`fmt°r˝y
(
Â
, "\\n");

434 
	`fmåu√
(
Â
, '\\');

435 
	`fmåu√
(
Â
, 
r
);

440 
	}
}

453 
	gë«mes
[] =

455 [
TINT
] = "INT",

456 [
TUINT
] = "UINT",

457 [
TINT8
] = "INT8",

458 [
TUINT8
] = "UINT8",

459 [
TINT16
] = "INT16",

460 [
TUINT16
] = "UINT16",

461 [
TINT32
] = "INT32",

462 [
TUINT32
] = "UINT32",

463 [
TINT64
] = "INT64",

464 [
TUINT64
] = "UINT64",

465 [
TUINTPTR
] = "UINTPTR",

466 [
TFLOAT32
] = "FLOAT32",

467 [
TFLOAT64
] = "FLOAT64",

468 [
TCOMPLEX64
] = "COMPLEX64",

469 [
TCOMPLEX128
] = "COMPLEX128",

470 [
TBOOL
] = "BOOL",

471 [
TPTR32
] = "PTR32",

472 [
TPTR64
] = "PTR64",

473 [
TFUNC
] = "FUNC",

474 [
TARRAY
] = "ARRAY",

475 [
TSTRUCT
] = "STRUCT",

476 [
TCHAN
] = "CHAN",

477 [
TMAP
] = "MAP",

478 [
TINTER
] = "INTER",

479 [
TFORW
] = "FORW",

480 [
TFIELD
] = "FIELD",

481 [
TSTRING
] = "STRING",

482 [
TANY
] = "ANY",

487 
	$Ec⁄v
(
Fmt
 *
Â
)

489 
ë
;

491 
ë
 = 
	`va_¨g
(
Â
->
¨gs
, );

492 if(
ë
 >0 &&Éà< 
	`√Àm
(
ë«mes
Ë&&Éäames[ë] !
nû
)

493  
	`fmt°r˝y
(
Â
, 
ë«mes
[
ë
]);

494  
	`fmçröt
(
Â
, "E-%d", 
ë
);

495 
	}
}

499 
	$symfmt
(
Fmt
 *
Â
, 
Sym
 *
s
)

501 *
p
;

503 if(
s
->
pkg
 && !(
Â
->
Êags
&
FmtSh‹t
)) {

504 
fmtmode
) {

505 
FEº
:

506 if(
s
->
pkg
 =
loˇÕkg
)

507  
	`fmt°r˝y
(
Â
, 
s
->
«me
);

509 if(
s
->
pkg
->
«me
 && 
	`pkglookup
(s->pkg->«me, 
nû
)->
≈kg
 > 1)

510  
	`fmçröt
(
Â
, "\"%Z\".%s", 
s
->
pkg
->
∑th
, s->
«me
);

511  
	`fmçröt
(
Â
, "%s.%s", 
s
->
pkg
->
«me
, s->name);

512 
FDbg
:

513  
	`fmçröt
(
Â
, "%s.%s", 
s
->
pkg
->
«me
, s->name);

514 
FTy≥Id
:

515 if(
Â
->
Êags
&
FmtUnsig√d
)

516  
	`fmçröt
(
Â
, "%s.%s", 
s
->
pkg
->
«me
, s->name);

517  
	`fmçröt
(
Â
, "%s.%s", 
s
->
pkg
->
¥efix
, s->
«me
);

518 
FExp
:

519 if(
s
->
pkg
 !
buûtöpkg
)

520  
	`fmçröt
(
Â
, "@\"%Z\".%s", 
s
->
pkg
->
∑th
, s->
«me
);

524 if(
Â
->
Êags
&
FmtByã
) {

526 
p
 = 
	`ut‰ru√
(
s
->
«me
, '.');

527 if(
p
)

528 
p
++;

530 
p
 = 
s
->
«me
;

533 if((
fmtmode
 =
FExp
 && !
	`exp‹äame
(
p
)Ë|| fmtmodê=
FDbg
)

534  
	`fmçröt
(
Â
, "@\"%Z\".%s", 
s
->
pkg
->
∑th
, 
p
);

536  
	`fmt°r˝y
(
Â
, 
p
);

539  
	`fmt°r˝y
(
Â
, 
s
->
«me
);

540 
	}
}

543 
	gbasi˙ames
[] =

545 [
TINT
] = "int",

546 [
TUINT
] = "uint",

547 [
TINT8
] = "int8",

548 [
TUINT8
] = "uint8",

549 [
TINT16
] = "int16",

550 [
TUINT16
] = "uint16",

551 [
TINT32
] = "int32",

552 [
TUINT32
] = "uint32",

553 [
TINT64
] = "int64",

554 [
TUINT64
] = "uint64",

555 [
TUINTPTR
] = "uintptr",

556 [
TFLOAT32
] = "float32",

557 [
TFLOAT64
] = "float64",

558 [
TCOMPLEX64
] = "complex64",

559 [
TCOMPLEX128
] = "complex128",

560 [
TBOOL
] = "bool",

561 [
TANY
] = "any",

562 [
TSTRING
] = "string",

563 [
TNIL
] = "nil",

564 [
TIDEAL
] = "ideal",

565 [
TBLANK
] = "blank",

569 
	$ty≥fmt
(
Fmt
 *
Â
, 
Ty≥
 *
t
)

571 
Ty≥
 *
t1
;

572 
Sym
 *
s
;

574 if(
t
 =
T
)

575  
	`fmt°r˝y
(
Â
, "<T>");

577 i‡(
t
 =
byãty≥
 ||Å =
ru√ty≥
) {

579 if(
fmtmode
 !
FTy≥Id
)

580  
	`fmçröt
(
Â
, "%hS", 
t
->
sym
);

581 
t
 = 
ty≥s
[t->
ëy≥
];

584 if(
t
 =
îr‹ty≥
)

585  
	`fmt°r˝y
(
Â
, "error");

588 if(!(
Â
->
Êags
&
FmtL⁄g
Ë&& 
t
->
sym
 &&Å->
ëy≥
 !
TFIELD
 &&Å !
ty≥s
[t->etype]) {

589 
fmtmode
) {

590 
FTy≥Id
:

591 if(
Â
->
Êags
&
FmtSh‹t
)

592  
	`fmçröt
(
Â
, "%hS", 
t
->
sym
);

593 if(
Â
->
Êags
&
FmtUnsig√d
)

594  
	`fmçröt
(
Â
, "%uS", 
t
->
sym
);

596 
FExp
:

597 if(
t
->
sym
->
pkg
 =
loˇÕkg
 &&Å->
v¨gí
)

598  
	`fmçröt
(
Â
, "%S¬∑%d", 
t
->
sym
,Å->
v¨gí
);

601  
	`fmçröt
(
Â
, "%S", 
t
->
sym
);

604 if(
t
->
ëy≥
 < 
	`√Àm
(
basi˙ames
Ë&& basi˙ames[t->ëy≥] !
nû
) {

605 if(
fmtmode
 =
FEº
 && (
t
 =
idólboﬁ
 ||Å =
idól°rög
))

606 
	`fmt°r˝y
(
Â
, "ideal ");

607  
	`fmt°r˝y
(
Â
, 
basi˙ames
[
t
->
ëy≥
]);

610 if(
fmtmode
 =
FDbg
)

611 
	`fmçröt
(
Â
, "%E-", 
t
->
ëy≥
);

613 
t
->
ëy≥
) {

614 
TPTR32
:

615 
TPTR64
:

616 if(
fmtmode
 =
FTy≥Id
 && (
Â
->
Êags
&
FmtSh‹t
))

617  
	`fmçröt
(
Â
, "*%hT", 
t
->
ty≥
);

618  
	`fmçröt
(
Â
, "*%T", 
t
->
ty≥
);

620 
TARRAY
:

621 if(
t
->
bound
 >= 0)

622  
	`fmçröt
(
Â
, "[%d]%T", ()
t
->
bound
,Å->
ty≥
);

623 if(
t
->
bound
 == -100)

624  
	`fmçröt
(
Â
, "[...]%T", 
t
->
ty≥
);

625  
	`fmçröt
(
Â
, "[]%T", 
t
->
ty≥
);

627 
TCHAN
:

628 
t
->
ch™
) {

629 
Cªcv
:

630  
	`fmçröt
(
Â
, "<-ch™ %T", 
t
->
ty≥
);

631 
C£nd
:

632  
	`fmçröt
(
Â
, "ch™<- %T", 
t
->
ty≥
);

635 if(
t
->
ty≥
 !
T
 &&Å->ty≥->
ëy≥
 =
TCHAN
 &&Å->ty≥->
sym
 =
S
 &&Å->ty≥->
ch™
 =
Cªcv
)

636  
	`fmçröt
(
Â
, "ch™ (%T)", 
t
->
ty≥
);

637  
	`fmçröt
(
Â
, "ch™ %T", 
t
->
ty≥
);

639 
TMAP
:

640  
	`fmçröt
(
Â
, "m≠[%T]%T", 
t
->
down
,Å->
ty≥
);

642 
TINTER
:

643 
	`fmt°r˝y
(
Â
, "interface {");

644 
t1
=
t
->
ty≥
;Å1!=
T
;Å1Ò1->
down
)

645 if(
	`exp‹äame
(
t1
->
sym
->
«me
)) {

646 if(
t1
->
down
)

647 
	`fmçröt
(
Â
, " %hS%hT;", 
t1
->
sym
,Å1->
ty≥
);

649 
	`fmçröt
(
Â
, " %hS%hT ", 
t1
->
sym
,Å1->
ty≥
);

652 if(
t1
->
down
)

653 
	`fmçröt
(
Â
, " %uS%hT;", 
t1
->
sym
,Å1->
ty≥
);

655 
	`fmçröt
(
Â
, " %uS%hT ", 
t1
->
sym
,Å1->
ty≥
);

657 
	`fmt°r˝y
(
Â
, "}");

660 
TFUNC
:

661 if(
Â
->
Êags
 & 
FmtSh‹t
) {

662 
	`fmçröt
(
Â
, "%T", 
	`gëö¨gx
(
t
));

664 if(
t
->
thi°u∂e
)

665 
	`fmçröt
(
Â
, "mëhod%T func%T", 
	`gëthisx
(
t
), 
	`gëö¨gx
(t));

667 
	`fmçröt
(
Â
, "func%T", 
	`gëö¨gx
(
t
));

669 
t
->
ouâu∂e
) {

673 if(
fmtmode
 !
FExp
) {

674 
	`fmçröt
(
Â
, " %T", 
	`gëouèrgx
(
t
)->
ty≥
->type);

678 
	`fmçröt
(
Â
, " %T", 
	`gëouèrgx
(
t
));

683 
TSTRUCT
:

684 if(
t
->
fu«rg
) {

685 
	`fmt°r˝y
(
Â
, "(");

686 if(
fmtmode
 =
FTy≥Id
 || fmtmodê=
FEº
) {

687 
t1
=
t
->
ty≥
;Å1!=
T
;Å1Ò1->
down
)

688 if(
t1
->
down
)

689 
	`fmçröt
(
Â
, "%hT, ", 
t1
);

691 
	`fmçröt
(
Â
, "%hT", 
t1
);

693 
t1
=
t
->
ty≥
;Å1!=
T
;Å1Ò1->
down
)

694 if(
t1
->
down
)

695 
	`fmçröt
(
Â
, "%T, ", 
t1
);

697 
	`fmçröt
(
Â
, "%T", 
t1
);

699 
	`fmt°r˝y
(
Â
, ")");

701 
	`fmt°r˝y
(
Â
, "struct {");

702 
t1
=
t
->
ty≥
;Å1!=
T
;Å1Ò1->
down
)

703 if(
t1
->
down
)

704 
	`fmçröt
(
Â
, " %lT;", 
t1
);

706 
	`fmçröt
(
Â
, " %lT ", 
t1
);

707 
	`fmt°r˝y
(
Â
, "}");

711 
TFIELD
:

712 if(!(
Â
->
Êags
&
FmtSh‹t
)) {

713 
s
 = 
t
->
sym
;

715 i‡(
t
->
¬ame
 && (
fmtmode
 =
FEº
 || fmtmodê=
FExp
))

716 
s
 = 
t
->
¬ame
->
‹ig
->
sym
;

718 if(
s
 !
S
 && !
t
->
embedded
) {

719 if(
Â
->
Êags
&
FmtL⁄g
)

720 
	`fmçröt
(
Â
, "%hhS ", 
s
);

722 
	`fmçröt
(
Â
, "%S ", 
s
);

723 } if(
fmtmode
 =
FExp
) {

729 
	`fmt°r˝y
(
Â
, "? ");

733 if(
t
->
isddd
)

734 
	`fmçröt
(
Â
, "...%T", 
t
->
ty≥
->type);

736 
	`fmçröt
(
Â
, "%T", 
t
->
ty≥
);

738 if(!(
Â
->
Êags
&
FmtSh‹t
Ë&& 
t
->
nŸe
)

739 
	`fmçröt
(
Â
, " \"%Z\"", 
t
->
nŸe
);

742 
TFORW
:

743 if(
t
->
sym
)

744  
	`fmçröt
(
Â
, "undeföed %S", 
t
->
sym
);

745  
	`fmt°r˝y
(
Â
, "undefined");

747 
TUNSAFEPTR
:

748 if(
fmtmode
 =
FExp
)

749  
	`fmçröt
(
Â
, "@\"unsafe\".Pointer");

750  
	`fmçröt
(
Â
, "unsafe.Pointer");

753 if(
fmtmode
 =
FExp
)

754 
	`Áèl
("missög %E ca£ durögÉxp‹t", 
t
->
ëy≥
);

756  
	`fmçröt
(
Â
, "%E <%S> %T", 
t
->
ëy≥
,Å->
sym
,Å->
ty≥
);

757 
	}
}

761 
	$°mtwôhöô
(
›
)

763 
›
) {

764 
OIF
:

765 
OFOR
:

766 
OSWITCH
:

770 
	}
}

773 
	$°mtfmt
(
Fmt
 *
f
, 
Node
 *
n
)

775 
com∂exöô
, 
sim∂eöô
, 
exåablock
;

783 
sim∂eöô
 = 
n
->
nöô
 && !n->nöô->
√xt
 && !n->nöô->n->nöô && 
	`°mtwôhöô
“->
›
);

785 
com∂exöô
 = 
n
->
nöô
 && !
sim∂eöô
 && (
fmtmode
 !
FEº
);

787 
exåablock
 = 
com∂exöô
 && 
	`°mtwôhöô
(
n
->
›
);

789 if(
exåablock
)

790 
	`fmt°r˝y
(
f
, "{");

792 if(
com∂exöô
)

793 
	`fmçröt
(
f
, " %H; ", 
n
->
nöô
);

795 
n
->
›
){

796 
ODCL
:

797 
	`fmçröt
(
f
, "v¨ %S %T", 
n
->
À·
->
sym
,Ç->À·->
ty≥
);

800 
ODCLFIELD
:

801 if(
n
->
À·
)

802 
	`fmçröt
(
f
, "%N %N", 
n
->
À·
,Ç->
right
);

804 
	`fmçröt
(
f
, "%N", 
n
->
right
);

807 
OAS
:

808 if(
n
->
cﬁas
 && !
com∂exöô
)

809 
	`fmçröt
(
f
, "%N :%N", 
n
->
À·
,Ç->
right
);

811 
	`fmçröt
(
f
, "%N = %N", 
n
->
À·
,Ç->
right
);

814 
OASOP
:

815 
	`fmçröt
(
f
, "%N %#O%N", 
n
->
À·
,Ç->
ëy≥
,Ç->
right
);

818 
OAS2
:

819 if(
n
->
cﬁas
 && !
com∂exöô
) {

820 
	`fmçröt
(
f
, "%,H :%,H", 
n
->
li°
,Ç->
æi°
);

824 
OAS2DOTTYPE
:

825 
OAS2FUNC
:

826 
OAS2MAPR
:

827 
OAS2RECV
:

828 
	`fmçröt
(
f
, "%,H = %,H", 
n
->
li°
,Ç->
æi°
);

831 
ORETURN
:

832 
	`fmçröt
(
f
, "ªtu∫ %,H", 
n
->
li°
);

835 
OPROC
:

836 
	`fmçröt
(
f
, "gÿ%N", 
n
->
À·
);

839 
ODEFER
:

840 
	`fmçröt
(
f
, "de„∏%N", 
n
->
À·
);

843 
OIF
:

844 if(
sim∂eöô
)

845 
	`fmçröt
(
f
, "i‡%N; %N { %H }", 
n
->
nöô
->n,Ç->
¡e°
,Ç->
nbody
);

847 
	`fmçröt
(
f
, "i‡%N { %H }", 
n
->
¡e°
,Ç->
nbody
);

848 if(
n
->
√l£
)

849 
	`fmçröt
(
f
, "Él£ { %H }", 
n
->
√l£
);

852 
OFOR
:

853 if(
fmtmode
 =
FEº
) {

854 
	`fmt°r˝y
(
f
, "forÜoop");

858 
	`fmt°r˝y
(
f
, "for");

859 if(
sim∂eöô
)

860 
	`fmçröt
(
f
, " %N;", 
n
->
nöô
->n);

861 if(
n
->
nö¸
)

862 
	`fmt°r˝y
(
f
, " ;");

864 if(
n
->
¡e°
)

865 
	`fmçröt
(
f
, " %N", 
n
->
¡e°
);

867 if(
n
->
nö¸
)

868 
	`fmçröt
(
f
, "; %N", 
n
->
nö¸
);

869 if(
sim∂eöô
)

870 
	`fmt°r˝y
(
f
, ";");

873 
	`fmçröt
(
f
, " { %H }", 
n
->
nbody
);

876 
ORANGE
:

877 if(
fmtmode
 =
FEº
) {

878 
	`fmt°r˝y
(
f
, "forÜoop");

882 
	`fmçröt
(
f
, "f‹ %,H =Ñ™gê%N { %H }", 
n
->
li°
,Ç->
right
,Ç->
nbody
);

885 
OSELECT
:

886 
OSWITCH
:

887 if(
fmtmode
 =
FEº
) {

888 
	`fmçröt
(
f
, "%O sèãmít", 
n
->
›
);

892 
	`fmçröt
(
f
, "%#O", 
n
->
›
);

893 if(
sim∂eöô
)

894 
	`fmçröt
(
f
, " %N;", 
n
->
nöô
->n);

895 if(
n
->
¡e°
)

896 
	`fmçröt
(
f
, "%N", 
n
->
¡e°
);

898 
	`fmçröt
(
f
, " { %H }", 
n
->
li°
);

901 
OCASE
:

902 
OXCASE
:

903 if(
n
->
li°
)

904 
	`fmçröt
(
f
, "ˇ£ %,H: %H", 
n
->
li°
,Ç->
nbody
);

906 
	`fmçröt
(
f
, "deÁu…: %H", 
n
->
nbody
);

909 
OBREAK
:

910 
OCONTINUE
:

911 
OGOTO
:

912 
OFALL
:

913 
OXFALL
:

914 if(
n
->
À·
)

915 
	`fmçröt
(
f
, "%#O %N", 
n
->
›
,Ç->
À·
);

917 
	`fmçröt
(
f
, "%#O", 
n
->
›
);

920 
OEMPTY
:

923 
OLABEL
:

924 
	`fmçröt
(
f
, "%N: ", 
n
->
À·
);

929 if(
exåablock
)

930 
	`fmt°r˝y
(
f
, "}");

933 
	}
}

936 
	g›¥ec
[] = {

937 [
OAPPEND
] = 8,

938 [
OARRAYBYTESTR
] = 8,

939 [
OARRAYLIT
] = 8,

940 [
OARRAYRUNESTR
] = 8,

941 [
OCALLFUNC
] = 8,

942 [
OCALLINTER
] = 8,

943 [
OCALLMETH
] = 8,

944 [
OCALL
] = 8,

945 [
OCAP
] = 8,

946 [
OCLOSE
] = 8,

947 [
OCONVIFACE
] = 8,

948 [
OCONVNOP
] = 8,

949 [
OCONV
] = 8,

950 [
OCOPY
] = 8,

951 [
ODELETE
] = 8,

952 [
OLEN
] = 8,

953 [
OLITERAL
] = 8,

954 [
OMAKESLICE
] = 8,

955 [
OMAKE
] = 8,

956 [
OMAPLIT
] = 8,

957 [
ONAME
] = 8,

958 [
ONEW
] = 8,

959 [
ONONAME
] = 8,

960 [
OPACK
] = 8,

961 [
OPANIC
] = 8,

962 [
OPAREN
] = 8,

963 [
OPRINTN
] = 8,

964 [
OPRINT
] = 8,

965 [
ORECV
] = 8,

966 [
ORUNESTR
] = 8,

967 [
OSTRARRAYBYTE
] = 8,

968 [
OSTRARRAYRUNE
] = 8,

969 [
OSTRUCTLIT
] = 8,

970 [
OTARRAY
] = 8,

971 [
OTCHAN
] = 8,

972 [
OTFUNC
] = 8,

973 [
OTINTER
] = 8,

974 [
OTMAP
] = 8,

975 [
OTPAREN
] = 8,

976 [
OTSTRUCT
] = 8,

978 [
OINDEXMAP
] = 8,

979 [
OINDEX
] = 8,

980 [
OSLICE
] = 8,

981 [
OSLICESTR
] = 8,

982 [
OSLICEARR
] = 8,

983 [
ODOTINTER
] = 8,

984 [
ODOTMETH
] = 8,

985 [
ODOTPTR
] = 8,

986 [
ODOTTYPE2
] = 8,

987 [
ODOTTYPE
] = 8,

988 [
ODOT
] = 8,

989 [
OXDOT
] = 8,

991 [
OPLUS
] = 7,

992 [
ONOT
] = 7,

993 [
OCOM
] = 7,

994 [
OMINUS
] = 7,

995 [
OADDR
] = 7,

996 [
OIND
] = 7,

998 [
OMUL
] = 6,

999 [
ODIV
] = 6,

1000 [
OMOD
] = 6,

1001 [
OLSH
] = 6,

1002 [
ORSH
] = 6,

1003 [
OAND
] = 6,

1004 [
OANDNOT
] = 6,

1006 [
OADD
] = 5,

1007 [
OSUB
] = 5,

1008 [
OOR
] = 5,

1009 [
OXOR
] = 5,

1011 [
OEQ
] = 4,

1012 [
OLT
] = 4,

1013 [
OLE
] = 4,

1014 [
OGE
] = 4,

1015 [
OGT
] = 4,

1016 [
ONE
] = 4,

1017 [
OCMPSTR
] = 4,

1018 [
OCMPIFACE
] = 4,

1020 [
OSEND
] = 3,

1021 [
OANDAND
] = 2,

1022 [
OOROR
] = 1,

1025 [
OAS
] = -1,

1026 [
OAS2
] = -1,

1027 [
OAS2DOTTYPE
] = -1,

1028 [
OAS2FUNC
] = -1,

1029 [
OAS2MAPR
] = -1,

1030 [
OAS2RECV
] = -1,

1031 [
OASOP
] = -1,

1032 [
OBREAK
] = -1,

1033 [
OCASE
] = -1,

1034 [
OCONTINUE
] = -1,

1035 [
ODCL
] = -1,

1036 [
ODCLFIELD
] = -1,

1037 [
ODEFER
] = -1,

1038 [
OEMPTY
] = -1,

1039 [
OFALL
] = -1,

1040 [
OFOR
] = -1,

1041 [
OIF
] = -1,

1042 [
OLABEL
] = -1,

1043 [
OPROC
] = -1,

1044 [
ORANGE
] = -1,

1045 [
ORETURN
] = -1,

1046 [
OSELECT
] = -1,

1047 [
OSWITCH
] = -1,

1048 [
OXCASE
] = -1,

1049 [
OXFALL
] = -1,

1051 [
OEND
] = 0

1055 
	$ex¥fmt
(
Fmt
 *
f
, 
Node
 *
n
, 
¥ec
)

1057 
≈ªc
;

1058 
NodeLi°
 *
l
;

1059 
Ty≥
 *
t
;

1061 
n
 &&Ç->
im∂icô
 && (n->
›
 =
OIND
 ||Ç->› =
OADDR
))

1062 
n
 =Ç->
À·
;

1064 if(
n
 =
N
)

1065  
	`fmt°r˝y
(
f
, "<N>");

1067 
≈ªc
 = 
›¥ec
[
n
->
›
];

1068 if(
n
->
›
 =
OTYPE
 &&Ç->
sym
 !
S
)

1069 
≈ªc
 = 8;

1071 if(
¥ec
 > 
≈ªc
)

1072  
	`fmçröt
(
f
, "(%N)", 
n
);

1074 
n
->
›
) {

1075 
OPAREN
:

1076  
	`fmçröt
(
f
, "(%N)", 
n
->
À·
);

1078 
ODDDARG
:

1079  
	`fmçröt
(
f
, "...árgument");

1081 
OREGISTER
:

1082  
	`fmçröt
(
f
, "%R", 
n
->
vÆ
.
u
.
ªg
);

1084 
OLITERAL
:

1085 if(
fmtmode
 =
FEº
 && 
n
->
sym
 !
S
)

1086  
	`fmçröt
(
f
, "%S", 
n
->
sym
);

1087 if(
n
->
vÆ
.
˘y≥
 =
CTNIL
)

1088 
n
 =Ç->
‹ig
;

1089 if(
n
->
ty≥
 !
ty≥s
[n->ty≥->
ëy≥
] &&Ç->ty≥ !
idólboﬁ
 &&Ç->ty≥ !
idól°rög
) {

1092 if(
i•å
[
n
->
ty≥
->
ëy≥
] || (n->ty≥->ëy≥ =
TCHAN
 &&Ç->ty≥->
ch™
 =
Cªcv
))

1093  
	`fmçröt
(
f
, "(%T)(%V)", 
n
->
ty≥
, &n->
vÆ
);

1095  
	`fmçröt
(
f
, "%T(%V)", 
n
->
ty≥
, &n->
vÆ
);

1097  
	`fmçröt
(
f
, "%V", &
n
->
vÆ
);

1099 
ONAME
:

1103 if(
fmtmode
 =
FExp
 && 
n
->
À·
 &&Ç->À·->
›
 =
OTYPE
 &&Ç->
right
 &&Ç->right->› =
ONAME
) {

1104 if(
i•å
[
n
->
À·
->
ty≥
->
ëy≥
])

1105  
	`fmçröt
(
f
, "(%T).%hhS", 
n
->
À·
->
ty≥
,Ç->
right
->
sym
);

1107  
	`fmçröt
(
f
, "%T.%hhS", 
n
->
À·
->
ty≥
,Ç->
right
->
sym
);

1110 
OPACK
:

1111 
ONONAME
:

1112  
	`fmçröt
(
f
, "%S", 
n
->
sym
);

1114 
OTYPE
:

1115 if(
n
->
ty≥
 =
T
 &&Ç->
sym
 !
S
)

1116  
	`fmçröt
(
f
, "%S", 
n
->
sym
);

1117  
	`fmçröt
(
f
, "%T", 
n
->
ty≥
);

1119 
OTARRAY
:

1120 if(
n
->
À·
)

1121  
	`fmçröt
(
f
, "[]%N", 
n
->
À·
);

1122  
	`fmçröt
(
f
, "[]%N", 
n
->
right
);

1124 
OTPAREN
:

1125  
	`fmçröt
(
f
, "(%N)", 
n
->
À·
);

1127 
OTMAP
:

1128  
	`fmçröt
(
f
, "m≠[%N]%N", 
n
->
À·
,Ç->
right
);

1130 
OTCHAN
:

1131 
n
->
ëy≥
) {

1132 
Cªcv
:

1133  
	`fmçröt
(
f
, "<-ch™ %N", 
n
->
À·
);

1134 
C£nd
:

1135  
	`fmçröt
(
f
, "ch™<- %N", 
n
->
À·
);

1137 if(
n
->
À·
 !
N
 &&Ç->À·->
›
 =
TCHAN
 &&Ç->À·->
sym
 =
S
 &&Ç->À·->
ëy≥
 =
Cªcv
)

1138  
	`fmçröt
(
f
, "ch™ (%N)", 
n
->
À·
);

1140  
	`fmçröt
(
f
, "ch™ %N", 
n
->
À·
);

1143 
OTSTRUCT
:

1144  
	`fmçröt
(
f
, "<struct>");

1146 
OTINTER
:

1147  
	`fmçröt
(
f
, "<inter>");

1149 
OTFUNC
:

1150  
	`fmçröt
(
f
, "<func>");

1152 
OCLOSURE
:

1153 if(
fmtmode
 =
FEº
)

1154  
	`fmt°r˝y
(
f
, "funcÜiteral");

1155  
	`fmçröt
(
f
, "%T { %H }", 
n
->
ty≥
,Ç->
nbody
);

1157 
OCOMPLIT
:

1158 if(
fmtmode
 =
FEº
)

1159  
	`fmt°r˝y
(
f
, "compositeÜiteral");

1160  
	`fmçröt
(
f
, "%N{ %,H }", 
n
->
right
,Ç->
li°
);

1162 
OPTRLIT
:

1163 if(
fmtmode
 =
FExp
 && 
n
->
À·
->
im∂icô
)

1164  
	`fmçröt
(
f
, "%N", 
n
->
À·
);

1165  
	`fmçröt
(
f
, "&%N", 
n
->
À·
);

1167 
OSTRUCTLIT
:

1168 if(
fmtmode
 =
FExp
) {

1169 if(
n
->
im∂icô
)

1170 
	`fmt°r˝y
(
f
, "{");

1172 
	`fmçröt
(
f
, "%T{", 
n
->
ty≥
);

1173 
l
=
n
->
li°
;Ü;Üˆ->
√xt
) {

1176 if(
l
->
n
->
À·
->
ty≥
->
embedded
) {

1177 
t
 = 
l
->
n
->
À·
->
ty≥
->type;

1178 if(
t
->
sym
 =
S
)

1179 
t
 =Å->
ty≥
;

1180 
	`fmçröt
(
f
, " %T:%N", 
t
, 
l
->
n
->
right
);

1182 
	`fmçröt
(
f
, " %hhS:%N", 
l
->
n
->
À·
->
sym
,Ü->n->
right
);

1184 if(
l
->
√xt
)

1185 
	`fmt°r˝y
(
f
, ",");

1187 
	`fmt°r˝y
(
f
, " ");

1189  
	`fmt°r˝y
(
f
, "}");

1193 
OARRAYLIT
:

1194 
OMAPLIT
:

1195 if(
fmtmode
 =
FEº
)

1196  
	`fmçröt
(
f
, "%TÜôîÆ", 
n
->
ty≥
);

1197 if(
fmtmode
 =
FExp
 && 
n
->
im∂icô
)

1198  
	`fmçröt
(
f
, "{ %,H }", 
n
->
li°
);

1199  
	`fmçröt
(
f
, "%T{ %,H }", 
n
->
ty≥
,Ç->
li°
);

1201 
OKEY
:

1202 if(
n
->
À·
 &&Ç->
right
)

1203  
	`fmçröt
(
f
, "%N:%N", 
n
->
À·
,Ç->
right
);

1204 if(!
n
->
À·
 &&Ç->
right
)

1205  
	`fmçröt
(
f
, ":%N", 
n
->
right
);

1206 if(
n
->
À·
 && !n->
right
)

1207  
	`fmçröt
(
f
, "%N:", 
n
->
À·
);

1208  
	`fmt°r˝y
(
f
, ":");

1210 
OXDOT
:

1211 
ODOT
:

1212 
ODOTPTR
:

1213 
ODOTINTER
:

1214 
ODOTMETH
:

1215 
	`ex¥fmt
(
f
, 
n
->
À·
, 
≈ªc
);

1216 if(
n
->
right
 =
N
 ||Ç->right->
sym
 =
S
)

1217 
	`fmt°r˝y
(
f
, ".<nil>");

1218  
	`fmçröt
(
f
, ".%hhS", 
n
->
right
->
sym
);

1220 
ODOTTYPE
:

1221 
ODOTTYPE2
:

1222 
	`ex¥fmt
(
f
, 
n
->
À·
, 
≈ªc
);

1223 if(
n
->
right
 !
N
)

1224  
	`fmçröt
(
f
, ".(%N)", 
n
->
right
);

1225  
	`fmçröt
(
f
, ".(%T)", 
n
->
ty≥
);

1227 
OINDEX
:

1228 
OINDEXMAP
:

1229 
OSLICE
:

1230 
OSLICESTR
:

1231 
OSLICEARR
:

1232 
	`ex¥fmt
(
f
, 
n
->
À·
, 
≈ªc
);

1233  
	`fmçröt
(
f
, "[%N]", 
n
->
right
);

1235 
OCOPY
:

1236 
OCOMPLEX
:

1237  
	`fmçröt
(
f
, "%#O(%N, %N)", 
n
->
›
,Ç->
À·
,Ç->
right
);

1239 
OCONV
:

1240 
OCONVIFACE
:

1241 
OCONVNOP
:

1242 
OARRAYBYTESTR
:

1243 
OARRAYRUNESTR
:

1244 
OSTRARRAYBYTE
:

1245 
OSTRARRAYRUNE
:

1246 
ORUNESTR
:

1247 if(
n
->
ty≥
 =
T
 ||Ç->ty≥->
sym
 =
S
)

1248  
	`fmçröt
(
f
, "(%T)(%N)", 
n
->
ty≥
,Ç->
À·
);

1249 if(
n
->
À·
)

1250  
	`fmçröt
(
f
, "%T(%N)", 
n
->
ty≥
,Ç->
À·
);

1251  
	`fmçröt
(
f
, "%T(%,H)", 
n
->
ty≥
,Ç->
li°
);

1253 
OREAL
:

1254 
OIMAG
:

1255 
OAPPEND
:

1256 
OCAP
:

1257 
OCLOSE
:

1258 
ODELETE
:

1259 
OLEN
:

1260 
OMAKE
:

1261 
ONEW
:

1262 
OPANIC
:

1263 
OPRINT
:

1264 
OPRINTN
:

1265 if(
n
->
À·
)

1266  
	`fmçröt
(
f
, "%#O(%N)", 
n
->
›
,Ç->
À·
);

1267 if(
n
->
isddd
)

1268  
	`fmçröt
(
f
, "%#O(%,H...)", 
n
->
›
,Ç->
li°
);

1269  
	`fmçröt
(
f
, "%#O(%,H)", 
n
->
›
,Ç->
li°
);

1271 
OCALL
:

1272 
OCALLFUNC
:

1273 
OCALLINTER
:

1274 
OCALLMETH
:

1275 
	`ex¥fmt
(
f
, 
n
->
À·
, 
≈ªc
);

1276 if(
n
->
isddd
)

1277  
	`fmçröt
(
f
, "(%,H...)", 
n
->
li°
);

1278  
	`fmçröt
(
f
, "(%,H)", 
n
->
li°
);

1280 
OMAKEMAP
:

1281 
OMAKECHAN
:

1282 
OMAKESLICE
:

1283 if(
n
->
li°
)

1284  
	`fmçröt
(
f
, "make(%T, %,H)", 
n
->
ty≥
,Ç->
li°
);

1285 if(
n
->
right
)

1286  
	`fmçröt
(
f
, "make(%T, %N, %N)", 
n
->
ty≥
,Ç->
À·
,Ç->
right
);

1287 if(
n
->
À·
)

1288  
	`fmçröt
(
f
, "make(%T, %N)", 
n
->
ty≥
,Ç->
À·
);

1289  
	`fmçröt
(
f
, "make(%T)", 
n
->
ty≥
);

1292 
OPLUS
:

1293 
OMINUS
:

1294 
OADDR
:

1295 
OCOM
:

1296 
OIND
:

1297 
ONOT
:

1298 
ORECV
:

1299 if(
n
->
À·
->
›
 ==Ç->op)

1300 
	`fmçröt
(
f
, "%#O ", 
n
->
›
);

1302 
	`fmçröt
(
f
, "%#O", 
n
->
›
);

1303  
	`ex¥fmt
(
f
, 
n
->
À·
, 
≈ªc
+1);

1306 
OADD
:

1307 
OADDSTR
:

1308 
OAND
:

1309 
OANDAND
:

1310 
OANDNOT
:

1311 
ODIV
:

1312 
OEQ
:

1313 
OGE
:

1314 
OGT
:

1315 
OLE
:

1316 
OLT
:

1317 
OLSH
:

1318 
OMOD
:

1319 
OMUL
:

1320 
ONE
:

1321 
OOR
:

1322 
OOROR
:

1323 
ORSH
:

1324 
OSEND
:

1325 
OSUB
:

1326 
OXOR
:

1327 
	`ex¥fmt
(
f
, 
n
->
À·
, 
≈ªc
);

1328 
	`fmçröt
(
f
, " %#O ", 
n
->
›
);

1329 
	`ex¥fmt
(
f
, 
n
->
right
, 
≈ªc
+1);

1332 
OCMPSTR
:

1333 
OCMPIFACE
:

1334 
	`ex¥fmt
(
f
, 
n
->
À·
, 
≈ªc
);

1335 
	`fmçröt
(
f
, " %#O ", 
n
->
ëy≥
);

1336 
	`ex¥fmt
(
f
, 
n
->
right
, 
≈ªc
+1);

1340  
	`fmçröt
(
f
, "<nodê%O>", 
n
->
›
);

1341 
	}
}

1344 
	$nodefmt
(
Fmt
 *
f
, 
Node
 *
n
)

1346 
Ty≥
 *
t
;

1348 
t
 = 
n
->
ty≥
;

1353 if((
fmtmode
 !
FExp
 || 
n
->
›
 !
OLITERAL
Ë&&Ç->
‹ig
 !
N
)

1354 
n
 =Ç->
‹ig
;

1356 if(
f
->
Êags
&
FmtL⁄g
 && 
t
 !
T
) {

1357 if(
t
->
ëy≥
 =
TNIL
)

1358  
	`fmçröt
(
f
, "nil");

1360  
	`fmçröt
(
f
, "%N (ty≥ %T)", 
n
, 
t
);

1365 if(
›¥ec
[
n
->
›
] < 0)

1366  
	`°mtfmt
(
f
, 
n
);

1368  
	`ex¥fmt
(
f
, 
n
, 0);

1369 
	}
}

1371 
	gdumpdïth
;

1374 
	$ödít
(
Fmt
 *
Â
)

1376 
i
;

1378 
	`fmt°r˝y
(
Â
, "\n");

1379 
i
 = 0; i < 
dumpdïth
; ++i)

1380 
	`fmt°r˝y
(
Â
, ". ");

1381 
	}
}

1384 
	$nodedump
(
Fmt
 *
Â
, 
Node
 *
n
)

1386 
ªcur
;

1388 if(
n
 =
N
)

1391 
ªcur
 = !(
Â
->
Êags
&
FmtSh‹t
);

1393 if(
ªcur
) {

1394 
	`ödít
(
Â
);

1395 if(
dumpdïth
 > 10)

1396  
	`fmt°r˝y
(
Â
, "...");

1398 if(
n
->
nöô
 !
nû
) {

1399 
	`fmçröt
(
Â
, "%O-öô%H", 
n
->
›
,Ç->
nöô
);

1400 
	`ödít
(
Â
);

1406 
n
->
›
) {

1408 
	`fmçröt
(
Â
, "%O%J", 
n
->
›
,Ç);

1410 
OREGISTER
:

1411 
	`fmçröt
(
Â
, "%O-%R%J", 
n
->
›
,Ç->
vÆ
.
u
.
ªg
,Ç);

1413 
OLITERAL
:

1414 
	`fmçröt
(
Â
, "%O-%V%J", 
n
->
›
, &n->
vÆ
,Ç);

1416 
ONAME
:

1417 
ONONAME
:

1418 if(
n
->
sym
 !
S
)

1419 
	`fmçröt
(
Â
, "%O-%S%J", 
n
->
›
,Ç->
sym
,Ç);

1421 
	`fmçröt
(
Â
, "%O%J", 
n
->
›
,Ç);

1423 
OASOP
:

1424 
	`fmçröt
(
Â
, "%O-%O%J", 
n
->
›
,Ç->
ëy≥
,Ç);

1426 
OTYPE
:

1427 
	`fmçröt
(
Â
, "%O %S%JÅy≥=%T", 
n
->
›
,Ç->
sym
,Ç,Ç->
ty≥
);

1428 if(
ªcur
 && 
n
->
ty≥
 =
T
 &&Ç->
¡y≥
) {

1429 
	`ödít
(
Â
);

1430 
	`fmçröt
(
Â
, "%O-¡y≥%N", 
n
->
›
,Ç->
¡y≥
);

1435 if(
n
->
sym
 !
S
 &&Ç->
›
 !
ONAME
)

1436 
	`fmçröt
(
Â
, " %S G%d", 
n
->
sym
,Ç->
v¨gí
);

1438 if(
n
->
ty≥
 !
T
)

1439 
	`fmçröt
(
Â
, " %T", 
n
->
ty≥
);

1441 if(
ªcur
) {

1442 if(
n
->
À·
)

1443 
	`fmçröt
(
Â
, "%N", 
n
->
À·
);

1444 if(
n
->
right
)

1445 
	`fmçröt
(
Â
, "%N", 
n
->
right
);

1446 if(
n
->
li°
) {

1447 
	`ödít
(
Â
);

1448 
	`fmçröt
(
Â
, "%O-li°%H", 
n
->
›
,Ç->
li°
);

1450 if(
n
->
æi°
) {

1451 
	`ödít
(
Â
);

1452 
	`fmçröt
(
Â
, "%O-æi°%H", 
n
->
›
,Ç->
æi°
);

1454 if(
n
->
¡e°
) {

1455 
	`ödít
(
Â
);

1456 
	`fmçröt
(
Â
, "%O-ã°%N", 
n
->
›
,Ç->
¡e°
);

1458 if(
n
->
nbody
) {

1459 
	`ödít
(
Â
);

1460 
	`fmçröt
(
Â
, "%O-body%H", 
n
->
›
,Ç->
nbody
);

1462 if(
n
->
√l£
) {

1463 
	`ödít
(
Â
);

1464 
	`fmçröt
(
Â
, "%O-ñ£%H", 
n
->
›
,Ç->
√l£
);

1466 if(
n
->
nö¸
) {

1467 
	`ödít
(
Â
);

1468 
	`fmçröt
(
Â
, "%O-ö¸%N", 
n
->
›
,Ç->
nö¸
);

1473 
	}
}

1478 
	$Sc⁄v
(
Fmt
 *
Â
)

1480 
Sym
 *
s
;

1481 
r
, 
sm
;

1482 
sf
;

1484 
s
 = 
	`va_¨g
(
Â
->
¨gs
, 
Sym
*);

1485 if(
s
 =
S
)

1486  
	`fmt°r˝y
(
Â
, "<S>");

1488 if(
s
->
«me
 && s->name[0] == '_' && s->name[1] == '\0')

1489  
	`fmt°r˝y
(
Â
, "_");

1491 
sf
 = 
Â
->
Êags
;

1492 
sm
 = 
	`£tfmode
(&
Â
->
Êags
);

1493 
r
 = 
	`symfmt
(
Â
, 
s
);

1494 
Â
->
Êags
 = 
sf
;

1495 
fmtmode
 = 
sm
;

1496  
r
;

1497 
	}
}

1504 
	$Tc⁄v
(
Fmt
 *
Â
)

1506 
Ty≥
 *
t
;

1507 
r
, 
sm
;

1508 
sf
;

1510 
t
 = 
	`va_¨g
(
Â
->
¨gs
, 
Ty≥
*);

1511 if(
t
 =
T
)

1512  
	`fmt°r˝y
(
Â
, "<T>");

1514 if(
t
->
åecur
 > 4)

1515  
	`fmt°r˝y
(
Â
, "<...>");

1517 
t
->
åecur
++;

1518 
sf
 = 
Â
->
Êags
;

1519 
sm
 = 
	`£tfmode
(&
Â
->
Êags
);

1521 if(
fmtmode
 =
FTy≥Id
 && (
sf
&
FmtUnsig√d
))

1522 
fmçkgpfx
++;

1523 if(
fmçkgpfx
)

1524 
Â
->
Êags
 |
FmtUnsig√d
;

1526 
r
 = 
	`ty≥fmt
(
Â
, 
t
);

1528 if(
fmtmode
 =
FTy≥Id
 && (
sf
&
FmtUnsig√d
))

1529 
fmçkgpfx
--;

1531 
Â
->
Êags
 = 
sf
;

1532 
fmtmode
 = 
sm
;

1533 
t
->
åecur
--;

1534  
r
;

1535 
	}
}

1541 
	$Nc⁄v
(
Fmt
 *
Â
)

1543 
Node
 *
n
;

1544 
r
, 
sm
;

1545 
sf
;

1547 
n
 = 
	`va_¨g
(
Â
->
¨gs
, 
Node
*);

1548 if(
n
 =
N
)

1549  
	`fmt°r˝y
(
Â
, "<N>");

1550 
sf
 = 
Â
->
Êags
;

1551 
sm
 = 
	`£tfmode
(&
Â
->
Êags
);

1553 
r
 = -1;

1554 
fmtmode
) {

1555 
FEº
:

1556 
FExp
:

1557 
r
 = 
	`nodefmt
(
Â
, 
n
);

1559 
FDbg
:

1560 
dumpdïth
++;

1561 
r
 = 
	`nodedump
(
Â
, 
n
);

1562 
dumpdïth
--;

1565 
	`Áèl
("unhandled %%N mode");

1568 
Â
->
Êags
 = 
sf
;

1569 
fmtmode
 = 
sm
;

1570  
r
;

1571 
	}
}

1576 
	$Hc⁄v
(
Fmt
 *
Â
)

1578 
NodeLi°
 *
l
;

1579 
r
, 
sm
;

1580 
sf
;

1581 *
£p
;

1583 
l
 = 
	`va_¨g
(
Â
->
¨gs
, 
NodeLi°
*);

1585 if(
l
 =
nû
 && 
fmtmode
 =
FDbg
)

1586  
	`fmt°r˝y
(
Â
, "<nil>");

1588 
sf
 = 
Â
->
Êags
;

1589 
sm
 = 
	`£tfmode
(&
Â
->
Êags
);

1590 
r
 = 0;

1591 
£p
 = "; ";

1592 if(
fmtmode
 =
FDbg
)

1593 
£p
 = "\n";

1594 if(
Â
->
Êags
 & 
FmtComma
)

1595 
£p
 = ", ";

1597 ;
l
;Üˆ->
√xt
) {

1598 
r
 +
	`fmçröt
(
Â
, "%N", 
l
->
n
);

1599 if(
l
->
√xt
)

1600 
r
 +
	`fmt°r˝y
(
Â
, 
£p
);

1603 
Â
->
Êags
 = 
sf
;

1604 
fmtmode
 = 
sm
;

1605  
r
;

1606 
	}
}

1609 
	$fmtö°Ælgo
()

1611 
fmtmode
 = 
FEº
;

1612 
	`fmtö°Æl
('E', 
Ec⁄v
);

1613 
	`fmtö°Æl
('J', 
Jc⁄v
);

1614 
	`fmtö°Æl
('H', 
Hc⁄v
);

1615 
	`fmtö°Æl
('L', 
Lc⁄v
);

1616 
	`fmtö°Æl
('N', 
Nc⁄v
);

1617 
	`fmtö°Æl
('O', 
Oc⁄v
);

1618 
	`fmtö°Æl
('S', 
Sc⁄v
);

1619 
	`fmtö°Æl
('T', 
Tc⁄v
);

1620 
	`fmtö°Æl
('V', 
Vc⁄v
);

1621 
	`fmtö°Æl
('Z', 
Zc⁄v
);

1624 
	`fmtö°Æl
('B', 
Bc⁄v
);

1625 
	`fmtö°Æl
('F', 
Fc⁄v
);

1627 
	}
}

1630 
	$dum∂i°
(*
s
, 
NodeLi°
 *
l
)

1632 
	`¥öt
("%s\n%+H\n", 
s
, 
l
);

1633 
	}
}

1636 
	$dump
(*
s
, 
Node
 *
n
)

1638 
	`¥öt
("%†[%p]\n%+N\n", 
s
, 
n
,Ç);

1639 
	}
}

	@gen.c

10 
	~<u.h
>

11 
	~<libc.h
>

12 
	~"go.h
"

14 
cgí_d˛
(
Node
 *
n
);

15 
cgí_¥oc
(
Node
 *
n
, 
¥oc
);

16 
checkgŸo
(
Node
*, Node*);

18 
Labñ
 *
	gœbñli°
;

19 
Labñ
 *
	gœ°œbñ
;

21 
Node
*

22 
	$sysfunc
(*
«me
)

24 
Node
 *
n
;

26 
n
 = 
	`√w«me
(
	`pkglookup
(
«me
, 
ru¡imïkg
));

27 
n
->
˛ass
 = 
PFUNC
;

28  
n
;

29 
	}
}

37 
	$addªsˇ≥s
(
Node
 *
n
)

39 
buf
[100];

40 
Node
 *
ﬁd‚
;

42 
n
->
›
) {

48 
ONAME
:

49 if(
n
 =
nodÂ
)

54 if(
n
->
˛ass
 =
PAUTO
 &&Ç->
esc
 =
EscNevî
)

57 if(
debug
['N'] && 
n
->
esc
 !
EscUnknown
)

58 
	`Áèl
("wôhouàesˇ≥á«lysis, o∆y PAUTO'†should havêesc: %N", 
n
);

60 
n
->
˛ass
) {

61 
PPARAMREF
:

62 
	`addªsˇ≥s
(
n
->
de‚
);

64 
PPARAM
:

65 
PPARAMOUT
:

73 
n
->
°ack∑øm
 = 
	`nod
(
OPARAM
,Ç, 
N
);

74 
n
->
°ack∑øm
->
ty≥
 =Ç->type;

75 
n
->
°ack∑øm
->
addabÀ
 = 1;

76 if(
n
->
xoff£t
 =
BADWIDTH
)

77 
	`Áèl
("addrescapes beforeÖaramássignment");

78 
n
->
°ack∑øm
->
xoff£t
 =Ç->xoffset;

81 
PAUTO
:

82 
n
->
˛ass
 |
PHEAP
;

83 
n
->
addabÀ
 = 0;

84 
n
->
uŒm™
 = 2;

85 
n
->
xoff£t
 = 0;

88 
ﬁd‚
 = 
cur‚
;

89 
cur‚
 = 
n
->curfn;

90 
n
->
hó∑ddr
 = 
	`ãmp
(
	`±πo
“->
ty≥
));

91 
	`¢¥öt
(
buf
,  buf, "&%S", 
n
->
sym
);

92 
n
->
hó∑ddr
->
sym
 = 
	`lookup
(
buf
);

93 
n
->
hó∑ddr
->
‹ig
->
sym
 =Ç->heapaddr->sym;

94 if(!
debug
['N'])

95 
n
->
esc
 = 
EscHóp
;

96 if(
debug
['m'])

97 
	`¥öt
("%L: movedÅÿhóp: %N\n", 
n
->
löío
,Ç);

98 
cur‚
 = 
ﬁd‚
;

103 
OIND
:

104 
ODOTPTR
:

107 
ODOT
:

108 
OINDEX
:

114 if(!
	`is¶i˚
(
n
->
À·
->
ty≥
))

115 
	`addªsˇ≥s
(
n
->
À·
);

118 
	}
}

121 
	$˛óæabñs
()

123 
Labñ
 *
l
;

125 
l
=
œbñli°
;Ü!=
L
;Üˆ->
lök
)

126 
l
->
sym
->
œbñ
 = 
L
;

128 
œbñli°
 = 
L
;

129 
œ°œbñ
 = 
L
;

130 
	}
}

132 
Labñ
*

133 
	$√wœb
(
Node
 *
n
)

135 
Sym
 *
s
;

136 
Labñ
 *
œb
;

138 
s
 = 
n
->
À·
->
sym
;

139 if((
œb
 = 
s
->
œbñ
Ë=
L
) {

140 
œb
 = 
	`mÆ
((*lab));

141 if(
œ°œbñ
 =
nû
)

142 
œbñli°
 = 
œb
;

144 
œ°œbñ
->
lök
 = 
œb
;

145 
œ°œbñ
 = 
œb
;

146 
œb
->
sym
 = 
s
;

147 
s
->
œbñ
 = 
œb
;

150 if(
n
->
›
 =
OLABEL
) {

151 if(
œb
->
def
 !
N
)

152 
	`yyîr‹
("œbñ %SáÃódy deföedáà%L", 
s
, 
œb
->
def
->
löío
);

154 
œb
->
def
 = 
n
;

156 
œb
->
u£
 = 
	`li°
÷ab->u£, 
n
);

158  
œb
;

159 
	}
}

162 
	$checkœbñs
()

164 
Labñ
 *
œb
;

165 
NodeLi°
 *
l
;

167 
œb
=
œbñli°
;Üab!=
L
;Üabˆab->
lök
) {

168 if(
œb
->
def
 =
N
) {

169 
l
=
œb
->
u£
;Ü;Üˆ->
√xt
)

170 
	`yyîr‹l
(
l
->
n
->
löío
, "œbñ %SÇŸ deföed", 
œb
->
sym
);

173 if(
œb
->
u£
 =
nû
 && !œb->
u£d
) {

174 
	`yyîr‹l
(
œb
->
def
->
löío
, "œbñ %S deföedándÇŸ u£d",Üab->
sym
);

177 if(
œb
->
gŸ›c
 !
P
)

178 
	`Áèl
("œbñ %SÇevîÑesﬁved", 
œb
->
sym
);

179 
l
=
œb
->
u£
;Ü;Üˆ->
√xt
)

180 
	`checkgŸo
(
l
->
n
, 
œb
->
def
);

182 
	}
}

185 
	$checkgŸo
(
Node
 *
‰om
, Nodê*
to
)

187 
nf
, 
¡
;

188 
Sym
 *
block
, *
d˛
, *
fs
, *
ts
;

189 
 o
;

191 if(
‰om
->
sym
 =
to
->sym)

194 
nf
 = 0;

195 
fs
=
‰om
->
sym
; fs; fs=fs->
lök
)

196 
nf
++;

197 
¡
 = 0;

198 
fs
=
to
->
sym
; fs; fs=fs->
lök
)

199 
¡
++;

200 
fs
 = 
‰om
->
sym
;

201 ; 
nf
 > 
¡
;Çf--)

202 
fs
 = fs->
lök
;

203 if(
fs
 !
to
->
sym
) {

204 
 o
 = 
löío
;

205 
	`£éöío
(
‰om
);

210 
block
 = 
S
;

211 
d˛
 = 
S
;

212 
ts
 = 
to
->
sym
;

213 ; 
¡
 > 
nf
;Çt--) {

214 if(
ts
->
pkg
 =
nû
)

215 
block
 = 
ts
;

217 
d˛
 = 
ts
;

218 
ts
 =Ås->
lök
;

220 
ts
 !
fs
) {

221 if(
ts
->
pkg
 =
nû
)

222 
block
 = 
ts
;

224 
d˛
 = 
ts
;

225 
ts
 =Ås->
lök
;

226 
fs
 = fs->
lök
;

229 if(
block
)

230 
	`yyîr‹
("gŸÿ%S jump†ötÿblock sèπögáà%L", 
‰om
->
À·
->
sym
, 
block
->
œ°löío
);

232 
	`yyîr‹
("gŸÿ%S jump†ovî de˛¨©i⁄ o‡%Sáà%L", 
‰om
->
À·
->
sym
, 
d˛
, d˛->
œ°löío
);

233 
löío
 = 
 o
;

235 
	}
}

237 
Labñ
*

238 
	$°méabñ
(
Node
 *
n
)

240 
Labñ
 *
œb
;

242 if(
n
->
sym
 !
S
)

243 if((
œb
 = 
n
->
sym
->
œbñ
Ë!
L
)

244 if(
œb
->
def
 !
N
)

245 if(
œb
->
def
->
de‚
 =
n
)

246  
œb
;

247  
L
;

248 
	}
}

254 
	$gíli°
(
NodeLi°
 *
l
)

256 ; 
l
;Üˆ->
√xt
)

257 
	`gí
(
l
->
n
);

258 
	}
}

261 
	$gí
(
Node
 *
n
)

263 
öt32
 
 o
;

264 
Prog
 *
sc⁄tö
, *
sbªak
;

265 
Prog
 *
p1
, *
p2
, *
p3
;

266 
Labñ
 *
œb
;

267 
öt32
 
wa§egÆloc
;

269 
 o
 = 
	`£éöío
(
n
);

270 
wa§egÆloc
 = 
	`™yªgÆloc
();

272 if(
n
 =
N
)

273 
ªt
;

275 if(
n
->
nöô
)

276 
	`gíli°
(
n
->
nöô
);

278 
	`£éöío
(
n
);

280 
n
->
›
) {

282 
	`Áèl
("gí: unknow¿› %N", 
n
);

285 
OCASE
:

286 
OFALL
:

287 
OXCASE
:

288 
OXFALL
:

289 
ODCLCONST
:

290 
ODCLFUNC
:

291 
ODCLTYPE
:

294 
OEMPTY
:

297 
OBLOCK
:

298 
	`gíli°
(
n
->
li°
);

301 
OLABEL
:

302 
œb
 = 
	`√wœb
(
n
);

305 
p1
=
œb
->
gŸ›c
;Ö1;Ö1=
p2
) {

306 
p2
 = 
	`u≈©ch
(
p1
);

307 
	`∑tch
(
p1
, 
pc
);

309 
œb
->
gŸ›c
 = 
P
;

310 if(
œb
->
œbñpc
 =
P
)

311 
œb
->
œbñpc
 = 
pc
;

313 if(
n
->
de‚
) {

314 
n
->
de‚
->
›
) {

315 
OFOR
:

316 
OSWITCH
:

317 
OSELECT
:

319 
n
->
de‚
->
sym
 = 
œb
->sym;

324 
OGOTO
:

332 
œb
 = 
	`√wœb
(
n
);

333 if(
œb
->
œbñpc
 !
P
)

334 
	`gjmp
(
œb
->
œbñpc
);

336 
œb
->
gŸ›c
 = 
	`gjmp
(lab->gotopc);

339 
OBREAK
:

340 if(
n
->
À·
 !
N
) {

341 
œb
 = 
n
->
À·
->
sym
->
œbñ
;

342 if(
œb
 =
L
) {

343 
	`yyîr‹
("bªakÜabñÇŸ deföed: %S", 
n
->
À·
->
sym
);

346 
œb
->
u£d
 = 1;

347 if(
œb
->
bªakpc
 =
P
) {

348 
	`yyîr‹
("övÆid bªakÜabñ %S", 
n
->
À·
->
sym
);

351 
	`gjmp
(
œb
->
bªakpc
);

354 if(
bªakpc
 =
P
) {

355 
	`yyîr‹
("break isÇot ináÜoop");

358 
	`gjmp
(
bªakpc
);

361 
OCONTINUE
:

362 if(
n
->
À·
 !
N
) {

363 
œb
 = 
n
->
À·
->
sym
->
œbñ
;

364 if(
œb
 =
L
) {

365 
	`yyîr‹
("c⁄töuêœbñÇŸ deföed: %S", 
n
->
À·
->
sym
);

368 
œb
->
u£d
 = 1;

369 if(
œb
->
c⁄töpc
 =
P
) {

370 
	`yyîr‹
("övÆid c⁄töuêœbñ %S", 
n
->
À·
->
sym
);

373 
	`gjmp
(
œb
->
c⁄töpc
);

376 if(
c⁄töpc
 =
P
) {

377 
	`yyîr‹
("continue isÇot ináÜoop");

380 
	`gjmp
(
c⁄töpc
);

383 
OFOR
:

384 
sbªak
 = 
bªakpc
;

385 
p1
 = 
	`gjmp
(
P
);

386 
bªakpc
 = 
	`gjmp
(
P
);

387 
sc⁄tö
 = 
c⁄töpc
;

388 
c⁄töpc
 = 
pc
;

391 if((
œb
 = 
	`°méabñ
(
n
)Ë!
L
) {

392 
œb
->
bªakpc
 = breakpc;

393 
œb
->
c⁄töpc
 = continpc;

395 
	`gí
(
n
->
nö¸
);

396 
	`∑tch
(
p1
, 
pc
);

397 
	`bgí
(
n
->
¡e°
, 0, 
bªakpc
);

398 
	`gíli°
(
n
->
nbody
);

399 
	`gjmp
(
c⁄töpc
);

400 
	`∑tch
(
bªakpc
, 
pc
);

401 
c⁄töpc
 = 
sc⁄tö
;

402 
bªakpc
 = 
sbªak
;

403 if(
œb
) {

404 
œb
->
bªakpc
 = 
P
;

405 
œb
->
c⁄töpc
 = 
P
;

409 
OIF
:

410 
p1
 = 
	`gjmp
(
P
);

411 
p2
 = 
	`gjmp
(
P
);

412 
	`∑tch
(
p1
, 
pc
);

413 
	`bgí
(
n
->
¡e°
, 0, 
p2
);

414 
	`gíli°
(
n
->
nbody
);

415 
p3
 = 
	`gjmp
(
P
);

416 
	`∑tch
(
p2
, 
pc
);

417 
	`gíli°
(
n
->
√l£
);

418 
	`∑tch
(
p3
, 
pc
);

421 
OSWITCH
:

422 
sbªak
 = 
bªakpc
;

423 
p1
 = 
	`gjmp
(
P
);

424 
bªakpc
 = 
	`gjmp
(
P
);

427 if((
œb
 = 
	`°méabñ
(
n
)Ë!
L
)

428 
œb
->
bªakpc
 = breakpc;

430 
	`∑tch
(
p1
, 
pc
);

431 
	`gíli°
(
n
->
nbody
);

432 
	`∑tch
(
bªakpc
, 
pc
);

433 
bªakpc
 = 
sbªak
;

434 if(
œb
 !
L
)

435 
œb
->
bªakpc
 = 
P
;

438 
OSELECT
:

439 
sbªak
 = 
bªakpc
;

440 
p1
 = 
	`gjmp
(
P
);

441 
bªakpc
 = 
	`gjmp
(
P
);

444 if((
œb
 = 
	`°méabñ
(
n
)Ë!
L
)

445 
œb
->
bªakpc
 = breakpc;

447 
	`∑tch
(
p1
, 
pc
);

448 
	`gíli°
(
n
->
nbody
);

449 
	`∑tch
(
bªakpc
, 
pc
);

450 
bªakpc
 = 
sbªak
;

451 if(
œb
 !
L
)

452 
œb
->
bªakpc
 = 
P
;

455 
OASOP
:

456 
	`cgí_as›
(
n
);

459 
ODCL
:

460 
	`cgí_d˛
(
n
->
À·
);

463 
OAS
:

464 if(
	`gí_as_öô
(
n
))

466 
	`cgí_as
(
n
->
À·
,Ç->
right
);

469 
OCALLMETH
:

470 
	`cgí_ˇŒmëh
(
n
, 0);

473 
OCALLINTER
:

474 
	`cgí_ˇŒöãr
(
n
, 
N
, 0);

477 
OCALLFUNC
:

478 
	`cgí_ˇŒ
(
n
, 0);

481 
OPROC
:

482 
	`cgí_¥oc
(
n
, 1);

485 
ODEFER
:

486 
	`cgí_¥oc
(
n
, 2);

489 
ORETURN
:

490 
	`cgí_ªt
(
n
);

494 
ªt
:

495 if(
	`™yªgÆloc
(Ë!
wa§egÆloc
) {

496 
	`dump
("node", 
n
);

497 
	`Áèl
("registersÜeftállocated");

500 
löío
 = 
 o
;

501 
	}
}

510 
	$cgí_ˇŒmëh
(
Node
 *
n
, 
¥oc
)

512 
Node
 *
l
;

517 
l
 = 
n
->
À·
;

518 if(
l
->
›
 !
ODOTMETH
)

519 
	`Áèl
("cgen_callmeth:Çot dotmethod: %N");

521 
n
->
›
 = 
OCALLFUNC
;

522 
n
->
À·
 =Ç->À·->
right
;

523 
n
->
À·
->
ty≥
 = 
l
->type;

525 if(
n
->
À·
->
›
 =
ONAME
)

526 
n
->
À·
->
˛ass
 = 
PFUNC
;

527 
	`cgí_ˇŒ
(
n
, 
¥oc
);

528 
	}
}

534 
	$cgí_¥oc
(
Node
 *
n
, 
¥oc
)

536 
n
->
À·
->
›
) {

538 
	`Áèl
("cgí_¥oc: unknow¿ˇŒ %O", 
n
->
À·
->
›
);

540 
OCALLMETH
:

541 
	`cgí_ˇŒmëh
(
n
->
À·
, 
¥oc
);

544 
OCALLINTER
:

545 
	`cgí_ˇŒöãr
(
n
->
À·
, 
N
, 
¥oc
);

548 
OCALLFUNC
:

549 
	`cgí_ˇŒ
(
n
->
À·
, 
¥oc
);

553 
	}
}

562 
	$cgí_d˛
(
Node
 *
n
)

564 if(
debug
['g'])

565 
	`dump
("\ncgí-d˛", 
n
);

566 if(
n
->
›
 !
ONAME
) {

567 
	`dump
("cgí_d˛", 
n
);

568 
	`Áèl
("cgen_dcl");

570 if(!(
n
->
˛ass
 & 
PHEAP
))

572 if(
n
->
Æloc
 =
nû
)

573 
n
->
Æloc
 = 
	`ˇŒ√w
“->
ty≥
);

574 
	`cgí_as
(
n
->
hó∑ddr
,Ç->
Æloc
);

575 
	}
}

581 
	$cgí_disˇrd
(
Node
 *
ƒ
)

583 
Node
 
tmp
;

585 if(
ƒ
 =
N
)

588 
ƒ
->
›
) {

589 
ONAME
:

590 if(!(
ƒ
->
˛ass
 & 
PHEAP
Ë&&Çr->˛as†!
PEXTERN
 &&Çr->˛as†!
PFUNC
 &&Çr->˛as†!
PPARAMREF
)

591 
	`gu£d
(
ƒ
);

595 
OADD
:

596 
OAND
:

597 
ODIV
:

598 
OEQ
:

599 
OGE
:

600 
OGT
:

601 
OLE
:

602 
OLSH
:

603 
OLT
:

604 
OMOD
:

605 
OMUL
:

606 
ONE
:

607 
OOR
:

608 
ORSH
:

609 
OSUB
:

610 
OXOR
:

611 
	`cgí_disˇrd
(
ƒ
->
À·
);

612 
	`cgí_disˇrd
(
ƒ
->
right
);

616 
OCAP
:

617 
OCOM
:

618 
OLEN
:

619 
OMINUS
:

620 
ONOT
:

621 
OPLUS
:

622 
	`cgí_disˇrd
(
ƒ
->
À·
);

627 
	`ãm≤ame
(&
tmp
, 
ƒ
->
ty≥
);

628 
	`cgí_as
(&
tmp
, 
ƒ
);

629 
	`gu£d
(&
tmp
);

631 
	}
}

639 
	$cgí_as
(
Node
 *
∆
, Nodê*
ƒ
)

641 
Node
 
nc
;

642 
Ty≥
 *
é
;

643 
iszî
;

645 if(
debug
['g']) {

646 
	`dump
("cgí_as", 
∆
);

647 
	`dump
("cgí_a†", 
ƒ
);

650 
ƒ
 !
N
 &&Çr->
›
 =
OCONVNOP
)

651 
ƒ
 =Çr->
À·
;

653 if(
∆
 =
N
 || 
	`isbœnk
(nl)) {

654 
	`cgí_disˇrd
(
ƒ
);

658 
iszî
 = 0;

659 if(
ƒ
 =
N
 || 
	`i¢û
(nr)) {

661 if(
ƒ
 =
N
) {

662 if(
∆
->
˛ass
 =
PEXTERN
)

664 if(
∆
->
˛ass
 & 
PHEAP
)

668 
é
 = 
∆
->
ty≥
;

669 if(
é
 =
T
)

671 if(
	`isÁt
(
é
)) {

672 
	`˛órÁt
(
∆
);

673 
ªt
;

677 
iszî
 = 1;

678 
ƒ
 = &
nc
;

679 
	`mem£t
(
ƒ
, 0, (*nr));

680 
simty≥
[
é
->
ëy≥
]) {

682 
	`Áèl
("cgí_as:Å»%T", 
é
);

685 
TINT8
:

686 
TUINT8
:

687 
TINT16
:

688 
TUINT16
:

689 
TINT32
:

690 
TUINT32
:

691 
TINT64
:

692 
TUINT64
:

693 
ƒ
->
vÆ
.
u
.
xvÆ
 = 
	`mÆ
((*nr->val.u.xval));

694 
	`mpmovecfix
(
ƒ
->
vÆ
.
u
.
xvÆ
, 0);

695 
ƒ
->
vÆ
.
˘y≥
 = 
CTINT
;

698 
TFLOAT32
:

699 
TFLOAT64
:

700 
ƒ
->
vÆ
.
u
.
fvÆ
 = 
	`mÆ
((*nr->val.u.fval));

701 
	`mpmovecÊt
(
ƒ
->
vÆ
.
u
.
fvÆ
, 0.0);

702 
ƒ
->
vÆ
.
˘y≥
 = 
CTFLT
;

705 
TBOOL
:

706 
ƒ
->
vÆ
.
u
.
bvÆ
 = 0;

707 
ƒ
->
vÆ
.
˘y≥
 = 
CTBOOL
;

710 
TPTR32
:

711 
TPTR64
:

712 
ƒ
->
vÆ
.
˘y≥
 = 
CTNIL
;

715 
TCOMPLEX64
:

716 
TCOMPLEX128
:

717 
ƒ
->
vÆ
.
u
.
cvÆ
 = 
	`mÆ
((*nr->val.u.cval));

718 
	`mpmovecÊt
(&
ƒ
->
vÆ
.
u
.
cvÆ
->
ªÆ
, 0.0);

719 
	`mpmovecÊt
(&
ƒ
->
vÆ
.
u
.
cvÆ
->
imag
, 0.0);

722 
ƒ
->
›
 = 
OLITERAL
;

723 
ƒ
->
ty≥
 = 
é
;

724 
ƒ
->
addabÀ
 = 1;

725 
	`uŒm™ˇlc
(
ƒ
);

728 
é
 = 
∆
->
ty≥
;

729 if(
é
 =
T
)

732 
	`cgí
(
ƒ
, 
∆
);

733 if(
iszî
 && 
∆
->
addabÀ
)

734 
	`gu£d
(
∆
);

736 
ªt
:

738 
	}
}

746 
	$dŸoff£t
(
Node
 *
n
, *
ﬂry
, Nodê**
¬
)

748 
i
;

750 
n
->
›
) {

751 
ODOT
:

752 if(
n
->
xoff£t
 =
BADWIDTH
) {

753 
	`dump
("bad width i¿dŸoff£t", 
n
);

754 
	`Áèl
("bad width in dotoffset");

756 
i
 = 
	`dŸoff£t
(
n
->
À·
, 
ﬂry
, 
¬
);

757 if(
i
 > 0) {

758 if(
ﬂry
[
i
-1] >= 0)

759 
ﬂry
[
i
-1] +
n
->
xoff£t
;

761 
ﬂry
[
i
-1] -
n
->
xoff£t
;

764 if(
i
 < 10)

765 
ﬂry
[
i
++] = 
n
->
xoff£t
;

768 
ODOTPTR
:

769 if(
n
->
xoff£t
 =
BADWIDTH
) {

770 
	`dump
("bad width i¿dŸoff£t", 
n
);

771 
	`Áèl
("bad width in dotoffset");

773 
i
 = 
	`dŸoff£t
(
n
->
À·
, 
ﬂry
, 
¬
);

774 if(
i
 < 10)

775 
ﬂry
[
i
++] = -(
n
->
xoff£t
+1);

779 *
¬
 = 
n
;

782 if(
i
 >= 10)

783 *
¬
 = 
N
;

784  
i
;

785 
	}
}

791 
	$ãm≤ame
(
Node
 *
¬
, 
Ty≥
 *
t
)

793 
Node
 *
n
;

794 
Sym
 *
s
;

796 if(
cur‚
 =
N
)

797 
	`Áèl
("no curfn forÅempname");

799 if(
t
 =
T
) {

800 
	`yyîr‹
("tempname called withÇilÅype");

801 
t
 = 
ty≥s
[
TINT32
];

806 
	`¢¥öt
(
«mebuf
, “amebuf), "autŸmp_%.4d", 
°©uniqgí
);

807 
°©uniqgí
++;

808 
s
 = 
	`lookup
(
«mebuf
);

809 
n
 = 
	`nod
(
ONAME
, 
N
, N);

810 
n
->
sym
 = 
s
;

811 
s
->
def
 = 
n
;

812 
n
->
ty≥
 = 
t
;

813 
n
->
˛ass
 = 
PAUTO
;

814 
n
->
addabÀ
 = 1;

815 
n
->
uŒm™
 = 1;

816 
n
->
esc
 = 
EscNevî
;

817 
n
->
cur‚
 = curfn;

818 
cur‚
->
d˛
 = 
	`li°
(cur‚->d˛, 
n
);

820 
	`dowidth
(
t
);

821 
n
->
xoff£t
 = 0;

822 *
¬
 = *
n
;

823 
	}
}

825 
Node
*

826 
	$ãmp
(
Ty≥
 *
t
)

828 
Node
 *
n
;

830 
n
 = 
	`nod
(
OXXX
, 
N
, N);

831 
	`ãm≤ame
(
n
, 
t
);

832 
n
->
sym
->
def
->
u£d
 = 1;

833  
n
;

834 
	}
}

	@go.h

5 
	~<bio.h
>

7 #unde‡
OAPPEND


10 #unde‡
isbœnk


11 
	#isbœnk
 
goisbœnk


	)

13 #i‚def 
EXTERN


14 
	#EXTERN
 

	)

17 #unde‡
BUFSIZ


23 
	#YYMAXDEPTH
 500

	)

27 
NHUNK
 = 50000,

28 
BUFSIZ
 = 8192,

29 
NSYMB
 = 500,

30 
NHASH
 = 1024,

31 
STRINGSZ
 = 200,

32 
MAXALIGN
 = 7,

33 
UINF
 = 100,

34 
HISTSZ
 = 10,

36 
PRIME1
 = 3,

38 
AUNK
 = 100,

42 
AMEM
 = 0,

43 
AMEM0
,

44 
AMEM8
,

45 
AMEM16
,

46 
AMEM32
,

47 
AMEM64
,

48 
AMEM128
,

49 
ANOEQ
,

50 
ANOEQ0
,

51 
ANOEQ8
,

52 
ANOEQ16
,

53 
ANOEQ32
,

54 
ANOEQ64
,

55 
ANOEQ128
,

56 
ASTRING
,

57 
AINTER
,

58 
ANILINTER
,

59 
ASLICE
,

60 
AFLOAT32
,

61 
AFLOAT64
,

62 
ACPLX64
,

63 
ACPLX128
,

65 
BADWIDTH
 = -1000000000,

68 
vl⁄g
 
MAXWIDTH
;

75 
Sålô
 
	tSålô
;

76 
	sSålô


78 
öt32
 
	mÀn
;

79 
	ms
[3];

84 
	mMpsˇÀ
 = 29,

85 
	mMµªc
 = 16,

86 
	mM≤‹m
 = 
Mµªc
 - 1,

87 
	mMpba£
 = 1L << 
MpsˇÀ
,

88 
	mMpsign
 = 
Mpba£
 >> 1,

89 
	mMpmask
 = 
Mpba£
 - 1,

90 
	mMpdebug
 = 0,

93 
Mpöt
 
	tMpöt
;

94 
	sMpöt


96 
	ma
[
Mµªc
];

97 
uch¨
 
	m√g
;

98 
uch¨
 
	movf
;

101 
MpÊt
 
	tMpÊt
;

102 
	sMpÊt


104 
Mpöt
 
	mvÆ
;

105 
	mexp
;

108 
Mp˝lx
 
	tMp˝lx
;

109 
	sMp˝lx


111 
MpÊt
 
	mªÆ
;

112 
MpÊt
 
	mimag
;

115 
VÆ
 
	tVÆ
;

116 
	sVÆ


118 
	m˘y≥
;

121 
	mªg
;

122 
	mbvÆ
;

123 
Mpöt
* 
	mxvÆ
;

124 
MpÊt
* 
	mfvÆ
;

125 
Mp˝lx
* 
	mcvÆ
;

126 
Sålô
* 
	msvÆ
;

127 } 
	mu
;

130 
Pkg
 
	tPkg
;

131 
Sym
 
	tSym
;

132 
Node
 
	tNode
;

133 
NodeLi°
 
	tNodeLi°
;

134 
Ty≥
 
	tTy≥
;

135 
Labñ
 
	tLabñ
;

137 
	sTy≥


139 
uch¨
 
	mëy≥
;

140 
uch¨
 
	mch™
;

141 
uch¨
 
	måecur
;

142 
uch¨
 
	m¥öãd
;

143 
uch¨
 
	membedded
;

144 
uch¨
 
	msiggí
;

145 
uch¨
 
	mfu«rg
;

146 
uch¨
 
	mc›y™y
;

147 
uch¨
 
	mloˇl
;

148 
uch¨
 
	mde„rwidth
;

149 
uch¨
 
	mbroke
;

150 
uch¨
 
	misddd
;

151 
uch¨
 
	mÆign
;

153 
Node
* 
	mnod
;

154 
Ty≥
* 
	m‹ig
;

155 
	mlöío
;

158 
uch¨
 
	mthi°u∂e
;

159 
uch¨
 
	mouâu∂e
;

160 
uch¨
 
	mötu∂e
;

161 
uch¨
 
	mouäamed
;

163 
Ty≥
* 
	mmëhod
;

164 
Ty≥
* 
	mxmëhod
;

166 
Sym
* 
	msym
;

167 
öt32
 
	mv¨gí
;

169 
Node
* 
	m¬ame
;

170 
vl⁄g
 
	m¨gwid
;

173 
Ty≥
* 
	mty≥
;

174 
vl⁄g
 
	mwidth
;

177 
Ty≥
* 
	mdown
;

178 
Sålô
* 
	mnŸe
;

181 
öt32
 
	mbound
;

183 
öt32
 
	mm≠löío
;

184 
öt32
 
	membedlöío
;

187 
NodeLi°
 *
	mc›yto
;

189 
	#T
 ((
Ty≥
*)0)

	)

191 
InôE¡ry
 
	tInôE¡ry
;

192 
InôPœn
 
	tInôPœn
;

194 
	sInôE¡ry


196 
vl⁄g
 
	mxoff£t
;

197 
Node
 *
	mkey
;

198 
Node
 *
	mex¥
;

201 
	sInôPœn


203 
vl⁄g
 
	mlô
;

204 
vl⁄g
 
	mzîo
;

205 
vl⁄g
 
	mex¥
;

207 
InôE¡ry
 *
	me
;

208 
	mÀn
;

209 
	mˇp
;

214 
	mEscUnknown
,

215 
	mEscHóp
,

216 
	mEscSc›e
,

217 
	mEscN⁄e
,

218 
	mEscNevî
,

221 
	sNode


225 
Node
* 
	mÀ·
;

226 
Node
* 
	mright
;

227 
Node
* 
	m¡e°
;

228 
Node
* 
	mnö¸
;

229 
NodeLi°
* 
	mnöô
;

230 
NodeLi°
* 
	mnbody
;

231 
NodeLi°
* 
	m√l£
;

232 
NodeLi°
* 
	mli°
;

233 
NodeLi°
* 
	mæi°
;

235 
uch¨
 
	m›
;

236 
uch¨
 
	muŒm™
;

237 
uch¨
 
	maddabÀ
;

238 
uch¨
 
	måecur
;

239 
uch¨
 
	mëy≥
;

240 
uch¨
 
	m˛ass
;

241 
uch¨
 
	mmëhod
;

242 
uch¨
 
	membedded
;

243 
uch¨
 
	mcﬁas
;

244 
uch¨
 
	mdüg
;

245 
uch¨
 
	mesc
;

246 
uch¨
 
	mfuncdïth
;

247 
uch¨
 
	mbuûtö
;

248 
uch¨
 
	mwÆkdef
;

249 
uch¨
 
	mty≥check
;

250 
uch¨
 
	mloˇl
;

251 
uch¨
 
	mdod©a
;

252 
uch¨
 
	möô‹dî
;

253 
uch¨
 
	mu£d
;

254 
uch¨
 
	misddd
;

255 
uch¨
 
	mªad⁄ly
;

256 
uch¨
 
	mim∂icô
;

257 
uch¨
 
	maddπakí
;

258 
uch¨
 
	mdupok
;

261 
Ty≥
* 
	mty≥
;

262 
Ty≥
* 
	mªÆty≥
;

263 
Node
* 
	m‹ig
;

266 
Node
* 
	m¬ame
;

267 
Node
* 
	msh‹äame
;

268 
NodeLi°
* 
	míãr
;

269 
NodeLi°
* 
	mexô
;

270 
NodeLi°
* 
	mcv¨s
;

271 
NodeLi°
* 
	md˛
;

272 
NodeLi°
* 
	möl
;

275 
VÆ
 
	mvÆ
;

278 
Node
* 
	m¡y≥
;

279 
Node
* 
	mde‚
;

280 
Node
* 
	m∑ck
;

281 
Node
* 
	mcur‚
;

282 
Ty≥
* 
	m∑ømÊd
;

285 
Node
* 
	mhó∑ddr
;

286 
Node
* 
	m°ack∑øm
;

287 
Node
* 
	mÆloc
;

290 
Node
* 
	mouãr
;

291 
Node
* 
	m˛osuª
;

294 
Node
* 
	mölv¨
;

297 
Pkg
* 
	mpkg
;

300 
InôPœn
* 
	möô∂™
;

303 
NodeLi°
* 
	mescÊow§c
;

304 
	mes˛o›dïth
;

306 
Sym
* 
	msym
;

307 
öt32
 
	mv¨gí
;

308 
öt32
 
	mlöío
;

309 
öt32
 
	mídlöío
;

310 
vl⁄g
 
	mxoff£t
;

311 
öt32
 
	m°kdñè
;

312 
öt32
 
	mo°k
;

313 
öt32
 
	miŸa
;

314 
uöt32
 
	mwÆkgí
;

316 
	#N
 ((
Node
*)0)

	)

332 
EXTERN
 
uöt32
 
	gwÆkgí
;

334 
	sNodeLi°


336 
Node
* 
	mn
;

337 
NodeLi°
* 
	m√xt
;

338 
NodeLi°
* 
	míd
;

343 
	mSymExp‹t
 = 1<<0,

344 
	mSymPackage
 = 1<<1,

345 
	mSymExp‹ãd
 = 1<<2,

346 
	mSymUniq
 = 1<<3,

347 
	mSymSiggí
 = 1<<4,

350 
	sSym


352 
ush‹t
 
	mÀxiˇl
;

353 
uch¨
 
	mÊags
;

354 
uch¨
 
	msym
;

355 
Sym
* 
	mlök
;

356 
öt32
 
	m≈kg
;

359 
Pkg
* 
	mpkg
;

360 * 
	m«me
;

361 
Node
* 
	mdef
;

362 
Labñ
* 
	mœbñ
;

363 
öt32
 
	mblock
;

364 
öt32
 
	mœ°löío
;

366 
	#S
 ((
Sym
*)0)

	)

368 
EXTERN
 
Sym
* 
	gd˛°ack
;

370 
	sPkg


372 * 
	m«me
;

373 
Sålô
* 
	m∑th
;

374 
Sym
* 
	m∑thsym
;

375 * 
	m¥efix
;

376 
Pkg
* 
	mlök
;

377 
	mexp‹ãd
;

378 
	mdúe˘
;

381 
Iãr
 
	tIãr
;

382 
	sIãr


384 
	md⁄e
;

385 
Ty≥
* 
	mtfunc
;

386 
Ty≥
* 
	mt
;

387 
Node
** 
	m™
;

388 
Node
* 
	mn
;

391 
Hi°
 
	tHi°
;

392 
	sHi°


394 
Hi°
* 
	mlök
;

395 * 
	m«me
;

396 
öt32
 
	mlöe
;

397 
öt32
 
	moff£t
;

399 
	#H
 ((
Hi°
*)0)

	)

403 
	mOXXX
,

406 
	mONAME
,

407 
	mONONAME
,

408 
	mOTYPE
,

409 
	mOPACK
,

410 
	mOLITERAL
,

413 
	mOADD
, 
	mOSUB
, 
	mOOR
, 
	mOXOR
, 
	mOADDSTR
,

414 
	mOADDR
,

415 
	mOANDAND
,

416 
	mOAPPEND
,

417 
	mOARRAYBYTESTR
, 
	mOARRAYRUNESTR
,

418 
	mOSTRARRAYBYTE
, 
	mOSTRARRAYRUNE
,

419 
	mOAS
, 
	mOAS2
, 
	mOAS2FUNC
, 
	mOAS2RECV
, 
	mOAS2MAPR
, 
	mOAS2DOTTYPE
,

420 
	mOASOP
,

421 
	mOBAD
,

422 
	mOCALL
, 
	mOCALLFUNC
, 
	mOCALLMETH
, 
	mOCALLINTER
,

423 
	mOCAP
,

424 
	mOCLOSE
,

425 
	mOCLOSURE
,

426 
	mOCMPIFACE
, 
	mOCMPSTR
,

427 
	mOCOMPLIT
, 
	mOMAPLIT
, 
	mOSTRUCTLIT
, 
	mOARRAYLIT
, 
	mOPTRLIT
,

428 
	mOCONV
, 
	mOCONVIFACE
, 
	mOCONVNOP
,

429 
	mOCOPY
,

430 
	mODCL
, 
	mODCLFUNC
, 
	mODCLFIELD
, 
	mODCLCONST
, 
	mODCLTYPE
,

431 
	mODELETE
,

432 
	mODOT
, 
	mODOTPTR
, 
	mODOTMETH
, 
	mODOTINTER
, 
	mOXDOT
,

433 
	mODOTTYPE
,

434 
	mODOTTYPE2
,

435 
	mOEQ
, 
	mONE
, 
	mOLT
, 
	mOLE
, 
	mOGE
, 
	mOGT
,

436 
	mOIND
,

437 
	mOINDEX
, 
	mOINDEXMAP
,

438 
	mOKEY
, 
	mOPARAM
,

439 
	mOLEN
,

440 
	mOMAKE
, 
	mOMAKECHAN
, 
	mOMAKEMAP
, 
	mOMAKESLICE
,

441 
	mOHMUL
, 
	mORRC
, 
	mOLRC
,

442 
	mOMUL
, 
	mODIV
, 
	mOMOD
, 
	mOLSH
, 
	mORSH
, 
	mOAND
, 
	mOANDNOT
,

443 
	mONEW
,

444 
	mONOT
, 
	mOCOM
, 
	mOPLUS
, 
	mOMINUS
,

445 
	mOOROR
,

446 
	mOPANIC
, 
	mOPRINT
, 
	mOPRINTN
,

447 
	mOPAREN
,

448 
	mOSEND
,

449 
	mOSLICE
, 
	mOSLICEARR
, 
	mOSLICESTR
,

450 
	mORECOVER
,

451 
	mORECV
,

452 
	mORUNESTR
,

453 
	mOSELRECV
,

454 
	mOSELRECV2
,

455 
	mOIOTA
,

456 
	mOREAL
, 
	mOIMAG
, 
	mOCOMPLEX
,

459 
	mOBLOCK
,

460 
	mOBREAK
,

461 
	mOCASE
, 
	mOXCASE
,

462 
	mOCONTINUE
,

463 
	mODEFER
,

464 
	mOEMPTY
,

465 
	mOFALL
, 
	mOXFALL
,

466 
	mOFOR
,

467 
	mOGOTO
,

468 
	mOIF
,

469 
	mOLABEL
,

470 
	mOPROC
,

471 
	mORANGE
,

472 
	mORETURN
,

473 
	mOSELECT
,

474 
	mOSWITCH
,

475 
	mOTYPESW
,

478 
	mOTCHAN
,

479 
	mOTMAP
,

480 
	mOTSTRUCT
,

481 
	mOTINTER
,

482 
	mOTFUNC
,

483 
	mOTARRAY
,

484 
	mOTPAREN
,

487 
	mODDD
,

488 
	mODDDARG
,

489 
	mOINLCALL
,

490 
	mOITAB
,

493 
	mOCMP
, 
	mODEC
, 
	mOEXTEND
, 
	mOINC
, 
	mOREGISTER
, 
	mOINDREG
,

495 
	mOEND
,

499 
	mTxxx
,

501 
	mTINT8
, 
	mTUINT8
,

502 
	mTINT16
, 
	mTUINT16
,

503 
	mTINT32
, 
	mTUINT32
,

504 
	mTINT64
, 
	mTUINT64
,

505 
	mTINT
, 
	mTUINT
, 
	mTUINTPTR
,

507 
	mTCOMPLEX64
,

508 
	mTCOMPLEX128
,

510 
	mTFLOAT32
,

511 
	mTFLOAT64
,

513 
	mTBOOL
,

515 
	mTPTR32
, 
	mTPTR64
,

517 
	mTFUNC
,

518 
	mTARRAY
,

519 
	mT_ﬁd_DARRAY
,

520 
	mTSTRUCT
,

521 
	mTCHAN
,

522 
	mTMAP
,

523 
	mTINTER
,

524 
	mTFORW
,

525 
	mTFIELD
,

526 
	mTANY
,

527 
	mTSTRING
,

528 
	mTUNSAFEPTR
,

531 
	mTIDEAL
,

532 
	mTNIL
,

533 
	mTBLANK
,

536 
	mTFUNCARGS
,

537 
	mTCHANARGS
,

538 
	mTINTERMETH
,

540 
	mNTYPE
,

544 
	mCTxxx
,

546 
	mCTINT
,

547 
	mCTRUNE
,

548 
	mCTFLT
,

549 
	mCTCPLX
,

550 
	mCTSTR
,

551 
	mCTBOOL
,

552 
	mCTNIL
,

559 
	mCxxx
,

560 
	mCªcv
 = 1<<0,

561 
	mC£nd
 = 1<<1,

562 
	mCbŸh
 = 
Cªcv
 | 
C£nd
,

567 
	mPxxx
,

569 
	mPEXTERN
,

570 
	mPAUTO
,

571 
	mPPARAM
,

572 
	mPPARAMOUT
,

573 
	mPPARAMREF
,

574 
	mPFUNC
,

576 
	mPHEAP
 = 1<<7,

581 
	mEt›
 = 1<<1,

582 
	mErv
 = 1<<2,

583 
	mEty≥
 = 1<<3,

584 
	mEˇŒ
 = 1<<4,

585 
	mE‚°ru˘
 = 1<<5,

586 
	mEiŸa
 = 1<<6,

587 
	mEasgn
 = 1<<7,

588 
	mEödú
 = 1<<8,

589 
	mEaddr
 = 1<<9,

590 
	mE¥oc
 = 1<<10,

591 
	mEcom∂ô
 = 1<<11,

594 
	#BITS
 5

	)

595 
	#NVAR
 (
BITS
*(
uöt32
)*8)

	)

597 
Bôs
 
	tBôs
;

598 
	sBôs


600 
uöt32
 
	mb
[
BITS
];

603 
EXTERN
 
Bôs
 
	gzbôs
;

605 
V¨
 
	tV¨
;

606 
	sV¨


608 
vl⁄g
 
	moff£t
;

609 
Sym
* 
	mgŸy≥
;

610 
Node
* 
	mnode
;

611 
	mwidth
;

612 
	m«me
;

613 
	mëy≥
;

614 
	maddr
;

617 
EXTERN
 
V¨
 
	gv¨
[
NVAR
];

619 
Ty≥def
 
	tTy≥def
;

620 
	sTy≥def


622 * 
	m«me
;

623 
	mëy≥
;

624 
	mßmós
;

627 
Ty≥def
 
ty≥defs
[];

629 
Sig
 
	tSig
;

630 
	sSig


632 * 
	m«me
;

633 
Pkg
* 
	mpkg
;

634 
Sym
* 
	misym
;

635 
Sym
* 
	mtsym
;

636 
Ty≥
* 
	mty≥
;

637 
Ty≥
* 
	mmty≥
;

638 
öt32
 
	moff£t
;

639 
Sig
* 
	mlök
;

642 
Io
 
	tIo
;

643 
	sIo


645 * 
	möfûe
;

646 
Biobuf
* 
	mbö
;

647 
öt32
 
	mûöío
;

648 
	m∆£mi
;

649 
	meo‚l
;

650 
	m≥ekc
;

651 
	m≥ekc1
;

652 * 
	m˝
;

653 
	mimp‹tß„
;

656 
Dli°
 
	tDli°
;

657 
	sDli°


659 
Ty≥
* 
	mfõld
;

662 
Idú
 
	tIdú
;

663 
	sIdú


665 
Idú
* 
	mlök
;

666 * 
	mdú
;

673 
Magic
 
	tMagic
;

674 
	sMagic


676 
	mw
;

677 
	ms
;

678 
	mbad
;

681 
öt64
 
	msd
;

682 
öt64
 
	msm
;

685 
uöt64
 
	mud
;

686 
uöt64
 
	mum
;

687 
	mua
;

690 
Prog
 
	tProg
;

691 #¥agm®
öcom∂ëe
 
Prog


693 
	sLabñ


695 
uch¨
 
	mu£d
;

696 
Sym
* 
	msym
;

697 
Node
* 
	mdef
;

698 
NodeLi°
* 
	mu£
;

699 
Labñ
* 
	mlök
;

702 
Prog
* 
	mgŸ›c
;

703 
Prog
* 
	mœbñpc
;

704 
Prog
* 
	mbªakpc
;

705 
Prog
* 
	mc⁄töpc
;

707 
	#L
 ((
Labñ
*)0)

	)

720 
EXTERN
 
	gAºay_¨øy
;

721 
EXTERN
 
	gAºay_√l
;

722 
EXTERN
 
	gAºay_ˇp
;

723 
EXTERN
 
	gsizeof_Aºay
;

736 
EXTERN
 
	gsizeof_Såög
;

738 
EXTERN
 
Dli°
 
	gdŸli°
[10];

740 
EXTERN
 
Io
 
	gcurio
;

741 
EXTERN
 
Io
 
	gpushedio
;

742 
EXTERN
 
öt32
 
	gÀxlöío
;

743 
EXTERN
 
öt32
 
	glöío
;

744 
EXTERN
 
öt32
 
	g¥evlöío
;

745 
EXTERN
 * 
	g∑th«me
;

746 
EXTERN
 
Hi°
* 
	ghi°
;

747 
EXTERN
 
Hi°
* 
	gehi°
;

749 
EXTERN
 * 
	göfûe
;

750 
EXTERN
 * 
	goutfûe
;

751 
EXTERN
 
Biobuf
* 
	gbout
;

752 
EXTERN
 
	g√º‹s
;

753 
EXTERN
 
	gnßvedîr‹s
;

754 
EXTERN
 
	gnsy¡axîr‹s
;

755 
EXTERN
 
	gß„mode
;

756 
EXTERN
 
	g«mebuf
[
NSYMB
];

757 
EXTERN
 
	gÀxbuf
[
NSYMB
];

758 
EXTERN
 
	glôbuf
[
NSYMB
];

759 
EXTERN
 
	gdebug
[256];

760 
EXTERN
 
Sym
* 
	ghash
[
NHASH
];

761 
EXTERN
 
Sym
* 
	gimp‹tmy«me
;

762 
EXTERN
 
Pkg
* 
	gloˇÕkg
;

763 
EXTERN
 
Pkg
* 
	gimp‹çkg
;

764 
EXTERN
 
Pkg
* 
	g°ru˘pkg
;

765 
EXTERN
 
Pkg
* 
	gbuûtöpkg
;

766 
EXTERN
 
Pkg
* 
	ggo°rögpkg
;

767 
EXTERN
 
Pkg
* 
	gru¡imïkg
;

768 
EXTERN
 
Pkg
* 
	g°rögpkg
;

769 
EXTERN
 
Pkg
* 
	gty≥pkg
;

770 
EXTERN
 
Pkg
* 
	gwókty≥pkg
;

771 
EXTERN
 
Pkg
* 
	gunß„pkg
;

772 
EXTERN
 
Pkg
* 
	gphash
[128];

773 
EXTERN
 
	gçå
;

774 * 
ru¡imeimp‹t
;

775 * 
unß„imp‹t
;

776 
EXTERN
 * 
	gmyimp‹ç©h
;

777 
EXTERN
 
Idú
* 
	gidús
;

778 
EXTERN
 * 
	gloˇlimp‹t
;

780 
EXTERN
 
Ty≥
* 
	gty≥s
[
NTYPE
];

781 
EXTERN
 
Ty≥
* 
	gidól°rög
;

782 
EXTERN
 
Ty≥
* 
	gidólboﬁ
;

783 
EXTERN
 
Ty≥
* 
	gbyãty≥
;

784 
EXTERN
 
Ty≥
* 
	gru√ty≥
;

785 
EXTERN
 
Ty≥
* 
	gîr‹ty≥
;

786 
EXTERN
 
uch¨
 
	gsimty≥
[
NTYPE
];

787 
EXTERN
 
uch¨
 
	gi•å
[
NTYPE
];

788 
EXTERN
 
uch¨
 
	gisf‹w
[
NTYPE
];

789 
EXTERN
 
uch¨
 
	gisöt
[
NTYPE
];

790 
EXTERN
 
uch¨
 
	gisÊﬂt
[
NTYPE
];

791 
EXTERN
 
uch¨
 
	giscom∂ex
[
NTYPE
];

792 
EXTERN
 
uch¨
 
	gissig√d
[
NTYPE
];

793 
EXTERN
 
uch¨
 
	gissim∂e
[
NTYPE
];

795 
EXTERN
 
uch¨
 
	gokf‹eq
[
NTYPE
];

796 
EXTERN
 
uch¨
 
	gokf‹add
[
NTYPE
];

797 
EXTERN
 
uch¨
 
	gokf‹™d
[
NTYPE
];

798 
EXTERN
 
uch¨
 
	gokf‹n⁄e
[
NTYPE
];

799 
EXTERN
 
uch¨
 
	gokf‹cmp
[
NTYPE
];

800 
EXTERN
 
uch¨
 
	gokf‹boﬁ
[
NTYPE
];

801 
EXTERN
 
uch¨
 
	gokf‹ˇp
[
NTYPE
];

802 
EXTERN
 
uch¨
 
	gokf‹Àn
[
NTYPE
];

803 
EXTERN
 
uch¨
 
	gokf‹¨ôh
[
NTYPE
];

804 
EXTERN
 
uch¨
 
	gokf‹c⁄°
[
NTYPE
];

805 
EXTERN
 
uch¨
* 
	gokf‹
[
OEND
];

806 
EXTERN
 
uch¨
 
	giscmp
[
OEND
];

808 
EXTERN
 
Mpöt
* 
	gmöötvÆ
[
NTYPE
];

809 
EXTERN
 
Mpöt
* 
	gmaxötvÆ
[
NTYPE
];

810 
EXTERN
 
MpÊt
* 
	gmöÊtvÆ
[
NTYPE
];

811 
EXTERN
 
MpÊt
* 
	gmaxÊtvÆ
[
NTYPE
];

813 
EXTERN
 
NodeLi°
* 
	gxt›
;

814 
EXTERN
 
NodeLi°
* 
	gexã∫d˛
;

815 
EXTERN
 
NodeLi°
* 
	g˛osuªs
;

816 
EXTERN
 
NodeLi°
* 
	gexp‹éi°
;

817 
EXTERN
 
NodeLi°
* 
	gimp‹éi°
;

818 
EXTERN
 
	gd˛c⁄ãxt
;

819 
EXTERN
 
	göˇ¬edimp‹t
;

820 
EXTERN
 
	g°©uniqgí
;

821 
EXTERN
 
	glo›hack
;

823 
EXTERN
 
öt32
 
	giŸa
;

824 
EXTERN
 
NodeLi°
* 
	gœ°c⁄°
;

825 
EXTERN
 
Node
* 
	gœ°ty≥
;

826 
EXTERN
 
öt32
 
	gmax¨g
;

827 
EXTERN
 
öt32
 
	g°ksize
;

828 
EXTERN
 
öt32
 
	gblockgí
;

829 
EXTERN
 
öt32
 
	gblock
;

830 
EXTERN
 
	ghasde„r
;

832 
EXTERN
 
Node
* 
	gcur‚
;

834 
EXTERN
 
	gwidth±r
;

836 
EXTERN
 
Node
* 
	gty≥sw
;

837 
EXTERN
 
Node
* 
	gnbœnk
;

839 
thech¨
;

840 * 
the°rög
;

842 
EXTERN
 * 
	ghunk
;

843 
EXTERN
 
öt32
 
	gnhunk
;

844 
EXTERN
 
öt32
 
	gthunk
;

846 
EXTERN
 
	gfuncdïth
;

847 
EXTERN
 
	gty≥checkok
;

848 
EXTERN
 
	gcompûög_ru¡ime
;

853 
yy∑r£
();

858 
¨gsize
(
Ty≥
 *
t
);

859 
checkwidth
(
Ty≥
 *
t
);

860 
de„rcheckwidth
();

861 
dowidth
(
Ty≥
 *
t
);

862 
ªsumecheckwidth
();

863 
uöt32
 
∫d
(uöt32 
o
, uöt32 
r
);

864 
ty≥öô
();

869 
Qc⁄v
(
Fmt
 *
Â
);

870 
Bôs
 
b™d
(Bô†
a
, Bô†
b
);

871 
b™y
(
Bôs
 *
a
);

872 
beq
(
Bôs
 
a
, Bô†
b
);

873 
bôno
(
öt32
 
b
);

874 
Bôs
 
blsh
(
uöt
 
n
);

875 
Bôs
 
bnŸ
(Bô†
a
);

876 
bnum
(
Bôs
 
a
);

877 
Bôs
 
b‹
(Bô†
a
, Bô†
b
);

878 
b£t
(
Bôs
 
a
, 
uöt
 
n
);

883 
Node
* 
˛osuªbody
(
NodeLi°
 *
body
);

884 
˛osuªhdr
(
Node
 *
¡y≥
);

885 
ty≥check˛osuª
(
Node
 *
func
, 
t›
);

886 
Node
* 
wÆk˛osuª
(Nodê*
func
, 
NodeLi°
 **
öô
);

887 
wÆkˇŒ˛osuª
(
Node
 *
n
, 
NodeLi°
 **
öô
);

892 
cmp¶ô
(
Node
 *
l
, Nodê*
r
);

893 
c⁄°ty≥
(
Node
 *
n
);

894 
c⁄vc⁄°
(
Node
 *
c⁄
, 
Ty≥
 *
t
, 
VÆ
 *
vÆ
);

895 
c⁄vlô
(
Node
 **
≈
, 
Ty≥
 *
t
);

896 
c⁄vlô1
(
Node
 **
≈
, 
Ty≥
 *
t
, 
ex∂icô
);

897 
deÁu…lô
(
Node
 **
≈
, 
Ty≥
 *
t
);

898 
deÁu…lô2
(
Node
 **
Õ
, Nodê**
Ω
, 
f‹˚
);

899 
evc⁄°
(
Node
 *
n
);

900 
isc⁄°
(
Node
 *
n
, 
˘
);

901 
Node
* 
nod˝lxlô
(
VÆ
 
r
, VÆ 
i
);

902 
Node
* 
nodlô
(
VÆ
 
v
);

903 
n⁄√gc⁄°
(
Node
 *
n
);

904 
ovîÊow
(
VÆ
 
v
, 
Ty≥
 *
t
);

905 
smÆlötc⁄°
(
Node
 *
n
);

906 
VÆ
 
toöt
(VÆ 
v
);

907 
MpÊt
* 
åuncÊéô
(MpÊà*
ﬁdv
, 
Ty≥
 *
t
);

912 
com∂exadd
(
›
, 
Node
 *
∆
, Nodê*
ƒ
, Nodê*
ªs
);

913 
com∂exboﬁ
(
›
, 
Node
 *
∆
, Nodê*
ƒ
, 
åue
, 
Prog
 *
to
);

914 
com∂exgí
(
Node
 *
n
, Nodê*
ªs
);

915 
com∂exmöus
(
Node
 *
∆
, Nodê*
ªs
);

916 
com∂exmove
(
Node
 *
f
, Nodê*
t
);

917 
com∂exmul
(
Node
 *
∆
, Nodê*
ƒ
, Nodê*
ªs
);

918 
com∂ex›
(
Node
 *
n
, Nodê*
ªs
);

919 
nodfc⁄°
(
Node
 *
n
, 
Ty≥
 *
t
, 
MpÊt
* 
fvÆ
);

924 
addmëhod
(
Sym
 *
sf
, 
Ty≥
 *
t
, 
loˇl
);

925 
addv¨
(
Node
 *
n
, 
Ty≥
 *
t
, 
˘xt
);

926 
NodeLi°
* 
check¨gli°
(NodeLi° *
Æl
, 
öput
);

927 
Node
* 
cﬁas
(
NodeLi°
 *
À·
, NodeLi° *
right
);

928 
cﬁasde‚
(
NodeLi°
 *
À·
, 
Node
 *
de‚
);

929 
NodeLi°
* 
c⁄°ôî
(NodeLi° *
vl
, 
Node
 *
t
, NodeLi° *
˛
);

930 
Node
* 
d˛«me
(
Sym
 *
s
);

931 
de˛¨e
(
Node
 *
n
, 
˘xt
);

932 
dumpd˛
(*
°
);

933 
Node
* 
embedded
(
Sym
 *
s
);

934 
Node
* 
Ákëhis
();

935 
funcbody
(
Node
 *
n
);

936 
funccompûe
(
Node
 *
n
, 
is˛osuª
);

937 
funchdr
(
Node
 *
n
);

938 
Ty≥
* 
fun˘y≥
(
Node
 *
this
, 
NodeLi°
 *
ö
, NodeLi° *
out
);

939 
iÁ˚d˛
(
Node
 *
n
);

940 
isiÁ˚mëhod
(
Ty≥
 *
f
);

941 
m¨kd˛
();

942 
Node
* 
mëhod«me
(Nodê*
n
, 
Ty≥
 *
t
);

943 
Node
* 
mëhod«me1
(Nodê*
n
, Nodê*
t
);

944 
Sym
* 
mëhodsym
(Sym *
nsym
, 
Ty≥
 *
t0
, 
iÁ˚
);

945 
Node
* 
√w«me
(
Sym
 *
s
);

946 
Node
* 
ﬁd«me
(
Sym
 *
s
);

947 
p›d˛
();

948 
p›tod˛
();

949 
ªde˛¨e
(
Sym
 *
s
, *
whîe
);

950 
ã°d˛°ack
();

951 
Ty≥
* 
toöãrÁ˚
(
NodeLi°
 *
l
);

952 
Ty≥
* 
to°ru˘
(
NodeLi°
 *
l
);

953 
Node
* 
ty≥d˛0
(
Sym
 *
s
);

954 
Node
* 
ty≥d˛1
(Nodê*
n
, Nodê*
t
, 
loˇl
);

955 
Node
* 
ty≥nod
(
Ty≥
 *
t
);

956 
NodeLi°
* 
v¨ôî
(NodeLi° *
vl
, 
Node
 *
t
, NodeLi° *
ñ
);

961 
esˇ≥s
(
NodeLi°
*);

966 
aut€xp‹t
(
Node
 *
n
, 
˘xt
);

967 
dum≥xp‹t
();

968 
exp‹äame
(*
s
);

969 
exp‹tsym
(
Node
 *
n
);

970 
imp‹tc⁄°
(
Sym
 *
s
, 
Ty≥
 *
t
, 
Node
 *
n
);

971 
imp‹timp‹t
(
Sym
 *
s
, 
Sålô
 *
z
);

972 
Sym
* 
imp‹tsym
(Sym *
s
, 
›
);

973 
imp‹ây≥
(
Ty≥
 *
±
, Ty≥ *
t
);

974 
imp‹tv¨
(
Sym
 *
s
, 
Ty≥
 *
t
);

975 
Ty≥
* 
pkgty≥
(
Sym
 *
s
);

980 
fmtö°Ælgo
();

981 
dump
(*
s
, 
Node
 *
n
);

982 
dum∂i°
(*
s
, 
NodeLi°
 *
l
);

987 
addªsˇ≥s
(
Node
 *
n
);

988 
cgí_as
(
Node
 *
∆
, Nodê*
ƒ
);

989 
cgí_ˇŒmëh
(
Node
 *
n
, 
¥oc
);

990 
˛óæabñs
();

991 
checkœbñs
();

992 
dŸoff£t
(
Node
 *
n
, *
ﬂry
, Nodê**
¬
);

993 
gí
(
Node
 *
n
);

994 
gíli°
(
NodeLi°
 *
l
);

995 
Node
* 
sysfunc
(*
«me
);

996 
ãm≤ame
(
Node
 *
n
, 
Ty≥
 *
t
);

997 
Node
* 
ãmp
(
Ty≥
*);

1002 
‚öô
(
NodeLi°
 *
n
);

1003 
Sym
* 
ª«meöô
();

1008 
ˇnöl
(
Node
 *
‚
);

1009 
ölˇŒs
(
Node
 *
‚
);

1010 
ty≥checköl
(
Node
 *
‚
);

1015 
ˇ¬edimp‹ts
(*
fûe
, *
˝
);

1016 
imp‹tfûe
(
VÆ
 *
f
, 
löe
);

1017 * 
Àx«me
(
Àx
);

1018 * 
exp°rög
();

1019 
mk∑ckage
(* 
pkg«me
);

1020 
unimp‹tfûe
();

1021 
öt32
 
yyÀx
();

1022 
wödows
;

1023 
yyœ°
;

1024 
yy¥ev
;

1029 
Bc⁄v
(
Fmt
 *
Â
);

1030 
Fc⁄v
(
Fmt
 *
Â
);

1031 
m∑ddcfix
(
Mpöt
 *
a
, 
vl⁄g
 
c
);

1032 
m∑ddcÊt
(
MpÊt
 *
a
, 
c
);

1033 
m∑tofix
(
Mpöt
 *
a
, *
as
);

1034 
m∑toÊt
(
MpÊt
 *
a
, *
as
);

1035 
mpcmpfixc
(
Mpöt
 *
b
, 
vl⁄g
 
c
);

1036 
mpcmpfixfix
(
Mpöt
 *
a
, Mpöà*
b
);

1037 
mpcmpfixÊt
(
Mpöt
 *
a
, 
MpÊt
 *
b
);

1038 
mpcmpÊtc
(
MpÊt
 *
b
, 
c
);

1039 
mpcmpÊtfix
(
MpÊt
 *
a
, 
Mpöt
 *
b
);

1040 
mpcmpÊtÊt
(
MpÊt
 *
a
, MpÊà*
b
);

1041 
mpcomfix
(
Mpöt
 *
a
);

1042 
mpdivfixfix
(
Mpöt
 *
a
, Mpöà*
b
);

1043 
mpmodfixfix
(
Mpöt
 *
a
, Mpöà*
b
);

1044 
mpmovefixfix
(
Mpöt
 *
a
, Mpöà*
b
);

1045 
mpmovefixÊt
(
MpÊt
 *
a
, 
Mpöt
 *
b
);

1046 
mpmoveÊtfix
(
Mpöt
 *
a
, 
MpÊt
 *
b
);

1047 
mpmoveÊtÊt
(
MpÊt
 *
a
, MpÊà*
b
);

1048 
mpmulcfix
(
Mpöt
 *
a
, 
vl⁄g
 
c
);

1049 
mpmulcÊt
(
MpÊt
 *
a
, 
c
);

1050 
mpsubfixfix
(
Mpöt
 *
a
, Mpöà*
b
);

1051 
mpsubÊtÊt
(
MpÊt
 *
a
, MpÊà*
b
);

1056 
m∑ddfixfix
(
Mpöt
 *
a
, Mpöà*
b
, );

1057 
m∑ndfixfix
(
Mpöt
 *
a
, Mpöà*
b
);

1058 
m∑ndnŸfixfix
(
Mpöt
 *
a
, Mpöà*
b
);

1059 
mpdiv‰a˘
(
Mpöt
 *
a
, Mpöà*
b
);

1060 
mpdivmodfixfix
(
Mpöt
 *
q
, Mpöà*
r
, Mpöà*
n
, Mpöà*
d
);

1061 
vl⁄g
 
mpgëfix
(
Mpöt
 *
a
);

1062 
m∂shfixfix
(
Mpöt
 *
a
, Mpöà*
b
);

1063 
mpmovecfix
(
Mpöt
 *
a
, 
vl⁄g
 
c
);

1064 
mpmulfixfix
(
Mpöt
 *
a
, Mpöà*
b
);

1065 
mpmul‰a˘
(
Mpöt
 *
a
, Mpöà*
b
);

1066 
m≤egfix
(
Mpöt
 *
a
);

1067 
mp‹fixfix
(
Mpöt
 *
a
, Mpöà*
b
);

1068 
m¥shfixfix
(
Mpöt
 *
a
, Mpöà*
b
);

1069 
mpshi·fix
(
Mpöt
 *
a
, 
s
);

1070 
m±e°fix
(
Mpöt
 *
a
);

1071 
mpx‹fixfix
(
Mpöt
 *
a
, Mpöà*
b
);

1076 
m∑ddÊtÊt
(
MpÊt
 *
a
, MpÊà*
b
);

1077 
mpdivÊtÊt
(
MpÊt
 *
a
, MpÊà*
b
);

1078 
mpgëÊt
(
MpÊt
 *
a
);

1079 
mpmovecÊt
(
MpÊt
 *
a
, 
c
);

1080 
mpmulÊtÊt
(
MpÊt
 *
a
, MpÊà*
b
);

1081 
m≤egÊt
(
MpÊt
 *
a
);

1082 
m≤‹m
(
MpÊt
 *
a
);

1083 
m±e°Êt
(
MpÊt
 *
a
);

1084 
sigfig
(
MpÊt
 *
a
);

1089 
Bpuäame
(
Biobuf
 *
b
, 
Sym
 *
s
);

1090 
duöt16
(
Sym
 *
s
, 
off
, 
uöt16
 
v
);

1091 
duöt32
(
Sym
 *
s
, 
off
, 
uöt32
 
v
);

1092 
duöt64
(
Sym
 *
s
, 
off
, 
uöt64
 
v
);

1093 
duöt8
(
Sym
 *
s
, 
off
, 
uöt8
 
v
);

1094 
duöçå
(
Sym
 *
s
, 
off
, 
uöt64
 
v
);

1095 
d¢ame
(
Sym
 *
s
, 
off
, *
d©
, 
nd©
);

1096 
dumpobj
();

1097 
õìdtod
(
uöt64
 *
õì
, 
«tive
);

1098 
Sym
* 
°rögsym
(*, );

1103 
‹dî
(
Node
 *
‚
);

1108 
ty≥checkønge
(
Node
 *
n
);

1109 
wÆkønge
(
Node
 *
n
);

1114 
dum±y≥°ru˘s
();

1115 
Ty≥
* 
mëhodfunc
(Ty≥ *
f
, Type*);

1116 
Node
* 
ty≥«me
(
Ty≥
 *
t
);

1117 
Sym
* 
ty≥sym
(
Ty≥
 *
t
);

1118 
Sym
* 
ty≥sym¥efix
(*
¥efix
, 
Ty≥
 *
t
);

1119 
ha•oöãrs
(
Ty≥
 *
t
);

1124 
ty≥check£À˘
(
Node
 *
£l
);

1125 
wÆk£À˘
(
Node
 *
£l
);

1130 
™ylô
(, 
Node
 *
n
, Nodê*
v¨
, 
NodeLi°
 **
öô
);

1131 
gí_as_öô
(
Node
 *
n
);

1132 
NodeLi°
* 
öôfix
(NodeLi° *
l
);

1133 
ﬂ¶ô
(
Node
 *
n
, 
NodeLi°
 **
öô
);

1134 
°©addr
(
Node
 *
«m
, Nodê*
n
);

1139 
Node
* 
adddŸ
(Nodê*
n
);

1140 
adddŸ1
(
Sym
 *
s
, 
Ty≥
 *
t
, 
d
, Ty≥ **
ßve
, 
ign‹eˇ£
);

1141 
addöô
(
Node
**, 
NodeLi°
*);

1142 
Ty≥
* 
aödex
(
Node
 *
b
, Ty≥ *
t
);

1143 
Ægty≥
(
Ty≥
 *
t
);

1144 
Ægty≥1
(
Ty≥
 *
t
, Ty≥ **
bad
);

1145 
¨gty≥
(
Node
 *
⁄
, 
Ty≥
 *
t
);

1146 
Node
* 
assignc⁄v
(Nodê*
n
, 
Ty≥
 *
t
, *
c⁄ãxt
);

1147 
assign›
(
Ty≥
 *
§c
, Ty≥ *
d°
, **
why
);

1148 
badty≥
(
o
, 
Ty≥
 *
é
, Ty≥ *
å
);

1149 
brcom
(
a
);

1150 
bºev
(
a
);

1151 
NodeLi°
* 
c⁄ˇt
(NodeLi° *
a
, NodeLi° *
b
);

1152 
c⁄vît›
(
Ty≥
 *
§c
, Ty≥ *
d°
, **
why
);

1153 
Node
* 
c›yex¥
(Node*, 
Ty≥
*, 
NodeLi°
**);

1154 
cou¡
(
NodeLi°
 *
l
);

1155 
˝lxsubty≥
(
ë
);

1156 
eqty≥
(
Ty≥
 *
t1
, Ty≥ *
t2
);

1157 
eqty≥n⁄ame
(
Ty≥
 *
t1
, Ty≥ *
t2
);

1158 
îr‹exô
();

1159 
ex∑ndmëh
(
Ty≥
 *
t
);

1160 
Áèl
(*
fmt
, ...);

1161 
Êushîr‹s
();

1162 
‰ame
(
c⁄ãxt
);

1163 
Ty≥
* 
funcfú°
(
Iãr
 *
s
, Ty≥ *
t
);

1164 
Ty≥
* 
fun˙ext
(
Iãr
 *
s
);

1165 
gíwøµî
(
Ty≥
 *
rcvr
, Ty≥ *
mëhod
, 
Sym
 *
√w«m
, 
iÁ˚
);

1166 
gíhash
(
Sym
 *
sym
, 
Ty≥
 *
t
);

1167 
gíeq
(
Sym
 *
sym
, 
Ty≥
 *
t
);

1168 
Ty≥
** 
gëö¨g
(Ty≥ *
t
);

1169 
Ty≥
* 
gëö¨gx
(Ty≥ *
t
);

1170 
Ty≥
** 
gëouèrg
(Ty≥ *
t
);

1171 
Ty≥
* 
gëouèrgx
(Ty≥ *
t
);

1172 
Ty≥
** 
gëthis
(Ty≥ *
t
);

1173 
Ty≥
* 
gëthisx
(Ty≥ *
t
);

1174 
im∂emíts
(
Ty≥
 *
t
, Ty≥ *
iÁ˚
, Ty≥ **
missög
, Ty≥ **
have
, *
±r
);

1175 
imp‹tdŸ
(
Pkg
 *
›kg
, 
Node
 *
∑ck
);

1176 
is64
(
Ty≥
 *
t
);

1177 
isbadimp‹t
(
Sålô
 *
s
);

1178 
isbœnk
(
Node
 *
n
);

1179 
isbœnksym
(
Sym
 *
s
);

1180 
isfixed¨øy
(
Ty≥
 *
t
);

1181 
isidól
(
Ty≥
 *
t
);

1182 
isöãr
(
Ty≥
 *
t
);

1183 
i¢û
(
Node
 *
n
);

1184 
i¢ûöãr
(
Ty≥
 *
t
);

1185 
i•åto
(
Ty≥
 *
t
, 
ë
);

1186 
is¶i˚
(
Ty≥
 *
t
);

1187 
i°y≥
(
Ty≥
 *
t
, 
ë
);

1188 
löehi°
(*
fûe
, 
öt32
 
off
, 
ªœtive
);

1189 
NodeLi°
* 
li°
(NodeLi° *
l
, 
Node
 *
n
);

1190 
NodeLi°
* 
li°1
(
Node
 *
n
);

1191 
li°s‹t
(
NodeLi°
**, (*
f
)(
Node
*, Node*));

1192 
Node
* 
	`li°°mt
(
NodeLi°
 *
l
);

1193 
NodeLi°
* 
	`li°åìc›y
(NodeLi° *
l
);

1194 
Sym
* 
	`lookup
(*
«me
);

1195 * 
	`mÆ
(
öt32
 
n
);

1196 
Ty≥
* 
	`m≠ty≥
(Ty≥ *
key
, Ty≥ *
vÆ
);

1197 
Ty≥
* 
	`mëhty≥
(Ty≥ *
t
, 
mu°«me
);

1198 
Pkg
* 
	`mkpkg
(
Sålô
 *
∑th
);

1199 
Sym
* 
	`ngŸy≥
(
Node
 *
n
);

1200 
	`noc⁄v
(
Ty≥
 *
t1
, Ty≥ *
t2
);

1201 
Node
* 
	`nod
(
›
, Nodê*
∆e·
, Nodê*
ƒight
);

1202 
Node
* 
	`nodboﬁ
(
b
);

1203 
	`nodc⁄°
(
Node
 *
n
, 
Ty≥
 *
t
, 
öt64
 
v
);

1204 
Node
* 
	`nodötc⁄°
(
öt64
 
v
);

1205 
Node
* 
	`nodÊtc⁄°
(
MpÊt
 *
v
);

1206 
Node
* 
	`nodnû
();

1207 
	`∑r£æöe
();

1208 
Sym
* 
	`pkglookup
(*
«me
, 
Pkg
 *
pkg
);

1209 
	`powtwo
(
Node
 *
n
);

1210 
Ty≥
* 
	`±πo
(Ty≥ *
t
);

1211 * 
	`ªmÆ
(*
p
, 
öt32
 
⁄
, i¡32 
n
);

1212 
Sym
* 
	`ª°ri˘lookup
(*
«me
, 
Pkg
 *
pkg
);

1213 
Node
* 
	`ß„ex¥
(Nodê*
n
, 
NodeLi°
 **
öô
);

1214 
	`ßvìº‹s
();

1215 
Node
* 
	`chó≥x¥
(Nodê*
n
, 
NodeLi°
 **
öô
);

1216 
Node
* 
	`loˇÀx¥
(Nodê*
n
, 
Ty≥
 *
t
, 
NodeLi°
 **
öô
);

1217 
öt32
 
	`£éöío
(
Node
 *
n
);

1218 
	`£tmax¨g
(
Ty≥
 *
t
);

1219 
Ty≥
* 
	`shÆlow
(Ty≥ *
t
);

1220 
	`simsimty≥
(
Ty≥
 *
t
);

1221 
	`smagic
(
Magic
 *
m
);

1222 
Ty≥
* 
	`s‹töãr
(Ty≥ *
t
);

1223 
uöt32
 
	`°röghash
(*
p
);

1224 
Sålô
* 
	`°æô
(*
s
);

1225 
	`°ru˘cou¡
(
Ty≥
 *
t
);

1226 
Ty≥
* 
	`°ru˘fú°
(
Iãr
 *
s
, Ty≥ **
¬
);

1227 
Ty≥
* 
	`°ru˘√xt
(
Iãr
 *
s
);

1228 
Node
* 
	`sy¶ook
(*
«me
, 
c›y
);

1229 
Ty≥
* 
	`tounsig√d
(Ty≥ *
t
);

1230 
Node
* 
	`åìc›y
(Nodê*
n
);

1231 
Ty≥
* 
	`typ
(
ë
);

1232 
uöt32
 
	`ty≥hash
(
Ty≥
 *
t
);

1233 
	`uŒm™ˇlc
(
Node
 *
n
);

1234 
	`umagic
(
Magic
 *
m
);

1235 
	`w¨n
(*
fmt
, ...);

1236 
	`w¨∆
(
löe
, *
fmt
, ...);

1237 
	`yyîr‹
(*
fmt
, ...);

1238 
	`yyîr‹l
(
löe
, *
fmt
, ...);

1243 
	`ty≥checkswôch
(
Node
 *
n
);

1244 
	`wÆkswôch
(
Node
 *
sw
);

1249 
	`i¶vÆue
(
Node
 *
n
);

1250 
Node
* 
	`ty≥check
(Nodê**
≈
, 
t›
);

1251 
	`ty≥checkli°
(
NodeLi°
 *
l
, 
t›
);

1252 
Node
* 
	`ty≥checkdef
(Nodê*
n
);

1253 
	`c›yty≥
(
Node
 *
n
, 
Ty≥
 *
t
);

1254 
	`queuemëhod
(
Node
 *
n
);

1259 
	`isunß„buûtö
(
Node
 *
n
);

1260 
Node
* 
	`unß„nmagic
(Nodê*
n
);

1265 
Node
* 
	`ˇŒ√w
(
Ty≥
 *
t
);

1266 
Node
* 
	`ch™‚
(*
«me
, 
n
, 
Ty≥
 *
t
);

1267 
Node
* 
	`mkˇŒ
(*
«me
, 
Ty≥
 *
t
, 
NodeLi°
 **
öô
, ...);

1268 
Node
* 
	`mkˇŒ1
(Nodê*
‚
, 
Ty≥
 *
t
, 
NodeLi°
 **
öô
, ...);

1269 
	`vm©ch1
(
Node
 *
l
, Nodê*
r
);

1270 
	`wÆk
(
Node
 *
‚
);

1271 
	`wÆkex¥
(
Node
 **
≈
, 
NodeLi°
 **
öô
);

1272 
	`wÆkex¥li°
(
NodeLi°
 *
l
, NodeLi° **
öô
);

1273 
	`wÆkex¥li°ß„
(
NodeLi°
 *
l
, NodeLi° **
öô
);

1274 
	`wÆk°mt
(
Node
 **
≈
);

1275 
	`wÆk°méi°
(
NodeLi°
 *
l
);

1276 
Node
* 
	`c⁄v
(Node*, 
Ty≥
*);

1281 
	#P
 ((
Prog
*)0)

	)

1283 
Pli°
 
	tPli°
;

1284 
	sPli°


1286 
Node
* 
«me
;

1287 
Prog
* 
fú°pc
;

1288 
ªcur
;

1289 
Pli°
* 
lök
;

1292 
EXTERN
 
Pli°
* 
∂i°
;

1293 
EXTERN
 
Pli°
* 
∂a°
;

1295 
EXTERN
 
Prog
* 
c⁄töpc
;

1296 
EXTERN
 
Prog
* 
bªakpc
;

1297 
EXTERN
 
Prog
* 
pc
;

1298 
EXTERN
 
Prog
* 
fú°pc
;

1299 
EXTERN
 
Prog
* 
ªçc
;

1301 
EXTERN
 
Node
* 
nodÂ
;

1303 
	`™yªgÆloc
();

1304 
	`bëy≥öô
();

1305 
	`bgí
(
Node
 *
n
, 
åue
, 
Prog
 *
to
);

1306 
	`cgí
(
Node
*, Node*);

1307 
	`cgí_as›
(
Node
 *
n
);

1308 
	`cgí_ˇŒ
(
Node
 *
n
, 
¥oc
);

1309 
	`cgí_ˇŒöãr
(
Node
 *
n
, Nodê*
ªs
, 
¥oc
);

1310 
	`cgí_ªt
(
Node
 *
n
);

1311 
	`˛órÁt
(
Node
 *
n
);

1312 
	`compûe
(
Node
*);

1313 
	`def‰ame
(
Prog
*);

1314 
	`dgo°rög±r
(
Sym
*, 
off
, *
°r
);

1315 
	`dgo°æô±r
(
Sym
*, 
off
, 
Sålô
*);

1316 
	`d°rög±r
(
Sym
 *
s
, 
off
, *
°r
);

1317 
	`dsym±r
(
Sym
 *
s
, 
off
, Sym *
x
, 
xoff
);

1318 
	`duötxx
(
Sym
 *
s
, 
off
, 
uöt64
 
v
, 
wid
);

1319 
	`dumpd©a
();

1320 
	`dumpfuncs
();

1321 
	`fixautou£d
(
Prog
*);

1322 
	`gd©a
(
Node
*, Node*, );

1323 
	`gd©acom∂ex
(
Node
*, 
Mp˝lx
*);

1324 
	`gd©a°rög
(
Node
*, 
Sålô
*);

1325 
	`gíembedåamp
(
Ty≥
*, Ty≥*, 
Sym
*, 
iÁ˚
);

1326 
	`gglob od
(
Node
 *
«m
, 
öt32
 
width
);

1327 
	`ggloblsym
(
Sym
 *
s
, 
öt32
 
width
, 
dupok
);

1328 
Prog
* 
	`gjmp
(Prog*);

1329 
	`gu£d
(
Node
*);

1330 
	`isÁt
(
Ty≥
*);

1331 
	`m¨kautou£d
(
Prog
*);

1332 
Pli°
* 
	`√w∂i°
();

1333 
Node
* 
	`nod¨g
(
Ty≥
*, );

1334 
	`n›out
(
Prog
*);

1335 
	`∑tch
(
Prog
*, Prog*);

1336 
Prog
* 
	`u≈©ch
(Prog*);

1337 
	`zfûe
(
Biobuf
 *
b
, *
p
, 
n
);

1338 
	`zhi°
(
Biobuf
 *
b
, 
löe
, 
vl⁄g
 
off£t
);

1339 
	`z«me
(
Biobuf
 *
b
, 
Sym
 *
s
, 
t
);

1341 #¥agm®
v¨¨gck
 
ty≥
 "A" 

1342 #¥agm®
v¨¨gck
 
ty≥
 "B" 
Mpöt
*

1343 #¥agm®
v¨¨gck
 
ty≥
 "D" 
Addr
*

1344 #¥agm®
v¨¨gck
 
ty≥
 "lD" 
Addr
*

1345 #¥agm®
v¨¨gck
 
ty≥
 "E" 

1346 #¥agm®
v¨¨gck
 
ty≥
 "E" 
uöt


1347 #¥agm®
v¨¨gck
 
ty≥
 "F" 
MpÊt
*

1348 #¥agm®
v¨¨gck
 
ty≥
 "H" 
NodeLi°
*

1349 #¥agm®
v¨¨gck
 
ty≥
 "J" 
Node
*

1350 #¥agm®
v¨¨gck
 
ty≥
 "lL" 

1351 #¥agm®
v¨¨gck
 
ty≥
 "lL" 
uöt


1352 #¥agm®
v¨¨gck
 
ty≥
 "L" 

1353 #¥agm®
v¨¨gck
 
ty≥
 "L" 
uöt


1354 #¥agm®
v¨¨gck
 
ty≥
 "N" 
Node
*

1355 #¥agm®
v¨¨gck
 
ty≥
 "lN" 
Node
*

1356 #¥agm®
v¨¨gck
 
ty≥
 "O" 
uöt


1357 #¥agm®
v¨¨gck
 
ty≥
 "P" 
Prog
*

1358 #¥agm®
v¨¨gck
 
ty≥
 "Q" 
Bôs


1359 #¥agm®
v¨¨gck
 
ty≥
 "R" 

1360 #¥agm®
v¨¨gck
 
ty≥
 "S" 
Sym
*

1361 #¥agm®
v¨¨gck
 
ty≥
 "lS" 
Sym
*

1362 #¥agm®
v¨¨gck
 
ty≥
 "T" 
Ty≥
*

1363 #¥agm®
v¨¨gck
 
ty≥
 "lT" 
Ty≥
*

1364 #¥agm®
v¨¨gck
 
ty≥
 "V" 
VÆ
*

1365 #¥agm®
v¨¨gck
 
ty≥
 "Y" *

1366 #¥agm®
v¨¨gck
 
ty≥
 "Z" 
Sålô
*

	@go.y

21 
	~<u.h
>

22 
	~<°dio.h
>

23 
	~<libc.h
>

24 
	~"go.h
"

26 
fixlbø˚
();

29 
Node
* 
node
;

30 
NodeLi°
* 
li°
;

31 
Ty≥
* 
ty≥
;

32 
Sym
* 
sym
;

33 
VÆ
 
vÆ
;

34 
i
;

39 %
tokí
 <
vÆ
> 
LLITERAL


40 %
tokí
 <
i
> 
LASOP


41 %
tokí
 <
sym
> 
LBREAK
 
LCASE
 
LCHAN
 
LCOLAS
 
LCONST
 
LCONTINUE
 
LDDD


42 %
tokí
 <
sym
> 
LDEFAULT
 
LDEFER
 
LELSE
 
LFALL
 
LFOR
 
LFUNC
 
LGO
 
LGOTO


43 %
tokí
 <
sym
> 
LIF
 
LIMPORT
 
LINTERFACE
 
LMAP
 
LNAME


44 %
tokí
 <
sym
> 
LPACKAGE
 
LRANGE
 
LRETURN
 
LSELECT
 
LSTRUCT
 
LSWITCH


45 %
tokí
 <
sym
> 
LTYPE
 
LVAR


47 %
tokí
 
LANDAND
 
LANDNOT
 
LBODY
 
LCOMM
 
LDEC
 
LEQ
 
LGE
 
LGT


48 %
tokí
 
LIGNORE
 
LINC
 
LLE
 
LLSH
 
LLT
 
LNE
 
LOROR
 
LRSH


50 %
ty≥
 <
i
> 
lbø˚
 
imp‹t_hîe


51 %
ty≥
 <
sym
> sym 
∑ck«me


52 %
ty≥
 <
vÆ
> 
ﬁôîÆ


54 %
ty≥
 <
node
> 
°mt
 
¡y≥


55 %
ty≥
 <
node
> 
¨g_ty≥


56 %
ty≥
 <
node
> 
ˇ£block


57 %
ty≥
 <
node
> 
compound_°mt
 
dŸ«me
 
embed
 
ex¥
 
com∂ôex¥


58 %
ty≥
 <
node
> 
ex¥_‹_ty≥


59 %
ty≥
 <
node
> 
‚d˛
 
hiddí_‚d˛
 
‚lôîÆ


60 %
ty≥
 <
node
> 
f‹_body
 
f‹_hódî
 
f‹_°mt
 
if_hódî
 
if_°mt
 
n⁄_d˛_°mt


61 %
ty≥
 <
node
> 
öãrÁ˚d˛
 
keyvÆ
 
œbñ«me
 
«me


62 %
ty≥
 <
node
> 
«me_‹_ty≥
 
n⁄_ex¥_ty≥


63 %
ty≥
 <
node
> 
√w_«me
 
d˛_«me
 
€x¥
 
ty≥d˛«me


64 %
ty≥
 <
node
> 
⁄ew_«me


65 %
ty≥
 <
node
> 
osim∂e_°mt
 
≥x¥
 
≥x¥_no_∑ªn


66 %
ty≥
 <
node
> 
p£udoˇŒ
 
ønge_°mt
 
£À˘_°mt


67 %
ty≥
 <
node
> 
sim∂e_°mt


68 %
ty≥
 <
node
> 
swôch_°mt
 
uex¥


69 %
ty≥
 <
node
> 
x‚d˛
 
ty≥d˛
 
°¨t_com∂ô


71 %
ty≥
 <
li°
> 
xd˛
 
‚body
 
‚ªs
 
lo›_body
 
d˛_«me_li°


72 %
ty≥
 <
li°
> 
√w_«me_li°
 
ex¥_li°
 
keyvÆ_li°
 
bø˚d_keyvÆ_li°
 
ex¥_‹_ty≥_li°
 
xd˛_li°


73 %
ty≥
 <
li°
> 
€x¥_li°
 
ˇ£block_li°
 
°mt_li°
 
ﬂrg_ty≥_li°_ocomma
 
¨g_ty≥_li°


74 %
ty≥
 <
li°
> 
öãrÁ˚d˛_li°
 
v¨d˛
 
v¨d˛_li°
 
°ru˘d˛
 
°ru˘d˛_li°


75 %
ty≥
 <
li°
> 
comm⁄_d˛
 
c⁄°d˛
 
c⁄°d˛1
 
c⁄°d˛_li°
 
ty≥d˛_li°


77 %
ty≥
 <
node
> 
c⁄vty≥
 
com±y≥
 
dŸdŸdŸ


78 %
ty≥
 <
node
> 
öd˛
 
öãrÁ˚ty≥
 
°ru˘ty≥
 
±πy≥


79 %
ty≥
 <
node
> 
ªcvch™ty≥
 
n⁄_ªcvch™ty≥
 
Ÿhîty≥
 
‚ªt_ty≥
 
‚ty≥


81 %
ty≥
 <
sym
> 
hiddí_imp‹tsym
 
hiddí_pkg_imp‹tsym


83 %
ty≥
 <
node
> 
hiddí_c⁄°™t
 
hiddí_lôîÆ
 
hiddí_fu«rg


84 %
ty≥
 <
node
> 
hiddí_öãrÁ˚d˛
 
hiddí_°ru˘d˛


86 %
ty≥
 <
li°
> 
hiddí_fuƒes


87 %
ty≥
 <
li°
> 
ohiddí_fuƒes


88 %
ty≥
 <
li°
> 
hiddí_fu«rg_li°
 
ohiddí_fu«rg_li°


89 %
ty≥
 <
li°
> 
hiddí_öãrÁ˚d˛_li°
 
ohiddí_öãrÁ˚d˛_li°


90 %
ty≥
 <
li°
> 
hiddí_°ru˘d˛_li°
 
ohiddí_°ru˘d˛_li°


92 %
ty≥
 <ty≥> 
hiddí_ty≥
 
hiddí_ty≥_misc
 
hiddí_pkgty≥


93 %
ty≥
 <ty≥> 
hiddí_ty≥_func


94 %
ty≥
 <ty≥> 
hiddí_ty≥_ªcv_ch™
 
hiddí_ty≥_n⁄_ªcv_ch™


96 %
À·
 
LCOMM


98 %
À·
 
LOROR


99 %
À·
 
LANDAND


100 %
À·
 
LEQ
 
LNE
 
LLE
 
LGE
 
LLT
 
LGT


101 %
À·
 '+' '-' '|' '^'

102 %
À·
 '*' '/' '%' '&' 
LLSH
 
LRSH
 
LANDNOT


111 %
À·
 
NŸPackage


112 %
À·
 
LPACKAGE


114 %
À·
 
NŸP¨í


115 %
À·
 '('

117 %
À·
 ')'

118 %
À·
 
Pª„rToRightP¨í


120 %
îr‹
-
vîbo£


122 %% /* 
	$yy∑r£
 */ 
	`yyÀx
()

123 
fûe
:

124 
lﬂdsys


125 
∑ckage


126 
imp‹ts


127 
xd˛_li°


129 
xt›
 = 
	`c⁄ˇt
(xt›, 
$4
);

132 
∑ckage
:

133 %
¥ec
 
NŸPackage


135 
¥evlöío
 = 
löío
;

136 
	`yyîr‹
("package statement must be first");

137 
	`Êushîr‹s
();

138 
	`mk∑ckage
("main");

140 | 
LPACKAGE
 
sym
 ';'

142 
	`mk∑ckage
(
$2
->
«me
);

150 
lﬂdsys
:

152 
imp‹çkg
 = 
ru¡imïkg
;

154 if(
debug
['A'])

155 
	`ˇ¬edimp‹ts
("runtime.builtin", "packageÑuntime\n\n$$\n\n");

157 
	`ˇ¬edimp‹ts
("ru¡ime.buûtö", 
ru¡imeimp‹t
);

158 
curio
.
imp‹tß„
 = 1;

160 
imp‹t_∑ckage


161 
imp‹t_thîe


163 
imp‹çkg
 = 
nû
;

166 
imp‹ts
:

167 | 
imp‹ts
 
imp‹t
 ';'

169 
imp‹t
:

170 
LIMPORT
 
imp‹t_°mt


171 | 
LIMPORT
 '(' 
imp‹t_°mt_li°
 
o£mi
 ')'

172 | 
LIMPORT
 '(' ')'

174 
imp‹t_°mt
:

175 
imp‹t_hîe
 
imp‹t_∑ckage
 
imp‹t_thîe


177 
Pkg
 *
ùkg
;

178 
Sym
 *
my
;

179 
Node
 *
∑ck
;

181 
ùkg
 = 
imp‹çkg
;

182 
my
 = 
imp‹tmy«me
;

183 
imp‹çkg
 = 
nû
;

184 
imp‹tmy«me
 = 
S
;

186 if(
my
 =
nû
)

187 
my
 = 
	`lookup
(
ùkg
->
«me
);

189 
∑ck
 = 
	`nod
(
OPACK
, 
N
, N);

190 
∑ck
->
sym
 = 
my
;

191 
∑ck
->
pkg
 = 
ùkg
;

192 
∑ck
->
löío
 = 
$1
;

194 if(
my
->
«me
[0] == '.') {

195 
	`imp‹tdŸ
(
ùkg
, 
∑ck
);

198 if(
my
->
«me
[0] == '_' && my->name[1] == '\0')

200 if(
my
->
def
) {

201 
löío
 = 
$1
;

202 
	`ªde˛¨e
(
my
, "as importedÖackageÇame");

204 
my
->
def
 = 
∑ck
;

205 
my
->
œ°löío
 = 
$1
;

206 
my
->
block
 = 1;

208 | 
imp‹t_hîe
 
imp‹t_thîe


214 if(
√º‹s
 == 0)

215 
	`Áèl
("phaseÉrror in import");

218 
imp‹t_°mt_li°
:

219 
imp‹t_°mt


220 | 
imp‹t_°mt_li°
 ';' 
imp‹t_°mt


222 
imp‹t_hîe
:

223 
LLITERAL


226 
$$
 = 
	`∑r£æöe
();

227 
imp‹tmy«me
 = 
S
;

228 
	`imp‹tfûe
(&
$1
, 
$$
);

230 | 
sym
 
LLITERAL


233 
$$
 = 
	`∑r£æöe
();

234 
imp‹tmy«me
 = 
$1
;

235 
	`imp‹tfûe
(&
$2
, 
$$
);

237 | '.' 
LLITERAL


240 
$$
 = 
	`∑r£æöe
();

241 
imp‹tmy«me
 = 
	`lookup
(".");

242 
	`imp‹tfûe
(&
$2
, 
$$
);

245 
imp‹t_∑ckage
:

246 
LPACKAGE
 
LNAME
 
imp‹t_ß„ty
 ';'

248 if(
imp‹çkg
->
«me
 =
nû
) {

249 
imp‹çkg
->
«me
 = 
$2
->name;

250 
	`pkglookup
(
$2
->
«me
, 
nû
)->
≈kg
++;

251 } if(
	`°rcmp
(
imp‹çkg
->
«me
, 
$2
->name) != 0)

252 
	`yyîr‹
("c⁄Êi˘ögÇame†%†™d %†f‹Öackagê\"%Z\"", 
imp‹çkg
->
«me
, 
$2
->«me, imp‹çkg->
∑th
);

253 
imp‹çkg
->
dúe˘
 = 1;

255 if(
ß„mode
 && !
curio
.
imp‹tß„
)

256 
	`yyîr‹
("ˇ¬Ÿ imp‹àunß„Öackagê\"%Z\"", 
imp‹çkg
->
∑th
);

259 
imp‹t_ß„ty
:

260 | 
LNAME


262 if(
	`°rcmp
(
$1
->
«me
, "safe") == 0)

263 
curio
.
imp‹tß„
 = 1;

266 
imp‹t_thîe
:

268 
	`de„rcheckwidth
();

270 
hiddí_imp‹t_li°
 '$' '$'

272 
	`ªsumecheckwidth
();

273 
	`unimp‹tfûe
();

279 
xd˛
:

281 
	`yyîr‹
("emptyÅop-level declaration");

282 
$$
 = 
nû
;

284 | 
comm⁄_d˛


285 | 
x‚d˛


287 
$$
 = 
	`li°1
(
$1
);

289 | 
n⁄_d˛_°mt


291 
	`yyîr‹
("non-declaration statement outside function body");

292 
$$
 = 
nû
;

294 | 
îr‹


296 
$$
 = 
nû
;

299 
comm⁄_d˛
:

300 
LVAR
 
v¨d˛


302 
$$
 = 
$2
;

304 | 
LVAR
 '(' 
v¨d˛_li°
 
o£mi
 ')'

306 
$$
 = 
$3
;

308 | 
LVAR
 '(' ')'

310 
$$
 = 
nû
;

312 | 
lc⁄°
 
c⁄°d˛


314 
$$
 = 
$2
;

315 
iŸa
 = -100000;

316 
œ°c⁄°
 = 
nû
;

318 | 
lc⁄°
 '(' 
c⁄°d˛
 
o£mi
 ')'

320 
$$
 = 
$3
;

321 
iŸa
 = -100000;

322 
œ°c⁄°
 = 
nû
;

324 | 
lc⁄°
 '(' 
c⁄°d˛
 ';' 
c⁄°d˛_li°
 
o£mi
 ')'

326 
$$
 = 
	`c⁄ˇt
(
$3
, 
$5
);

327 
iŸa
 = -100000;

328 
œ°c⁄°
 = 
nû
;

330 | 
lc⁄°
 '(' ')'

332 
$$
 = 
nû
;

333 
iŸa
 = -100000;

335 | 
LTYPE
 
ty≥d˛


337 
$$
 = 
	`li°1
(
$2
);

339 | 
LTYPE
 '(' 
ty≥d˛_li°
 
o£mi
 ')'

341 
$$
 = 
$3
;

343 | 
LTYPE
 '(' ')'

345 
$$
 = 
nû
;

348 
lc⁄°
:

349 
LCONST


351 
iŸa
 = 0;

354 
v¨d˛
:

355 
d˛_«me_li°
 
¡y≥


357 
$$
 = 
	`v¨ôî
(
$1
, 
$2
, 
nû
);

359 | 
d˛_«me_li°
 
¡y≥
 '=' 
ex¥_li°


361 
$$
 = 
	`v¨ôî
(
$1
, 
$2
, 
$4
);

363 | 
d˛_«me_li°
 '=' 
ex¥_li°


365 
$$
 = 
	`v¨ôî
(
$1
, 
nû
, 
$3
);

368 
c⁄°d˛
:

369 
d˛_«me_li°
 
¡y≥
 '=' 
ex¥_li°


371 
$$
 = 
	`c⁄°ôî
(
$1
, 
$2
, 
$4
);

373 | 
d˛_«me_li°
 '=' 
ex¥_li°


375 
$$
 = 
	`c⁄°ôî
(
$1
, 
N
, 
$3
);

378 
c⁄°d˛1
:

379 
c⁄°d˛


380 | 
d˛_«me_li°
 
¡y≥


382 
$$
 = 
	`c⁄°ôî
(
$1
, 
$2
, 
nû
);

384 | 
d˛_«me_li°


386 
$$
 = 
	`c⁄°ôî
(
$1
, 
N
, 
nû
);

389 
ty≥d˛«me
:

390 
sym


395 
$$
 = 
	`ty≥d˛0
(
$1
);

398 
ty≥d˛
:

399 
ty≥d˛«me
 
¡y≥


401 
$$
 = 
	`ty≥d˛1
(
$1
, 
$2
, 1);

404 
sim∂e_°mt
:

405 
ex¥


407 
$$
 = 
$1
;

409 | 
ex¥
 
LASOP
Éxpr

411 
$$
 = 
	`nod
(
OASOP
, 
$1
, 
$3
);

412 
$$
->
ëy≥
 = 
$2
;

414 | 
ex¥_li°
 '='Éxpr_list

416 if(
$1
->
√xt
 =
nû
 && 
$3
->next ==Çil) {

418 
$$
 = 
	`nod
(
OAS
, 
$1
->
n
, 
$3
->n);

422 
$$
 = 
	`nod
(
OAS2
, 
N
, N);

423 
$$
->
li°
 = 
$1
;

424 
$$
->
æi°
 = 
$3
;

426 | 
ex¥_li°
 
LCOLAS
Éxpr_list

428 if(
$3
->
n
->
›
 =
OTYPESW
) {

429 
$$
 = 
	`nod
(
OTYPESW
, 
N
, 
$3
->
n
->
right
);

430 if(
$3
->
√xt
 !
nû
)

431 
	`yyîr‹
("expr.(type) must beálone inÜist");

432 if(
$1
->
√xt
 !
nû
)

433 
	`yyîr‹
("¨gumíàcou¡ mism©ch: %d = %d", 
	`cou¡
(
$1
), 1);

434 if((
$1
->
n
->
›
 !
ONAME
 && $1->n->› !
OTYPE
 && $1->n->› !
ONONAME
Ë|| 
	`isbœnk
($1->n))

435 
	`yyîr‹
("övÆid v¨übÀÇamê%N i¿ty≥ swôch", 
$1
->
n
);

437 
$$
->
À·
 = 
	`d˛«me
(
$1
->
n
->
sym
);

440 
$$
 = 
	`cﬁas
(
$1
, 
$3
);

442 | 
ex¥
 
LINC


444 
$$
 = 
	`nod
(
OASOP
, 
$1
, 
	`nodötc⁄°
(1));

445 
$$
->
ëy≥
 = 
OADD
;

447 | 
ex¥
 
LDEC


449 
$$
 = 
	`nod
(
OASOP
, 
$1
, 
	`nodötc⁄°
(1));

450 
$$
->
ëy≥
 = 
OSUB
;

454 
LCASE
 
ex¥_‹_ty≥_li°
 ':'

456 
Node
 *
n
, *
¬
;

461 
	`m¨kd˛
();

462 
$$
 = 
	`nod
(
OXCASE
, 
N
, N);

463 
$$
->
li°
 = 
$2
;

464 if(
ty≥sw
 !
N
 &&Åy≥sw->
right
 !N && (
n
Òy≥sw->right->
À·
) != N) {

466 
¬
 = 
	`√w«me
(
n
->
sym
);

467 
	`de˛¨e
(
¬
, 
d˛c⁄ãxt
);

468 
$$
->
¬ame
 = 
¬
;

471 
¬
->
de‚
 = 
ty≥sw
->
right
;

474 | 
LCASE
 
ex¥_‹_ty≥_li°
 '=' 
ex¥
 ':'

476 
Node
 *
n
;

481 
	`m¨kd˛
();

482 
$$
 = 
	`nod
(
OXCASE
, 
N
, N);

483 if(
$2
->
√xt
 =
nû
)

484 
n
 = 
	`nod
(
OAS
, 
$2
->n, 
$4
);

486 
n
 = 
	`nod
(
OAS2
, 
N
, N);

487 
n
->
li°
 = 
$2
;

488 
n
->
æi°
 = 
	`li°1
(
$4
);

490 
$$
->
li°
 = 
	`li°1
(
n
);

492 | 
LCASE
 
ex¥_‹_ty≥_li°
 
LCOLAS
 
ex¥
 ':'

497 
	`m¨kd˛
();

498 
$$
 = 
	`nod
(
OXCASE
, 
N
, N);

499 
$$
->
li°
 = 
	`li°1
(
	`cﬁas
(
$2
,Üi°1(
$4
)));

501 | 
LDEFAULT
 ':'

503 
Node
 *
n
, *
¬
;

505 
	`m¨kd˛
();

506 
$$
 = 
	`nod
(
OXCASE
, 
N
, N);

507 if(
ty≥sw
 !
N
 &&Åy≥sw->
right
 !N && (
n
Òy≥sw->right->
À·
) != N) {

509 
¬
 = 
	`√w«me
(
n
->
sym
);

510 
	`de˛¨e
(
¬
, 
d˛c⁄ãxt
);

511 
$$
->
¬ame
 = 
¬
;

514 
¬
->
de‚
 = 
ty≥sw
->
right
;

518 
compound_°mt
:

521 
	`m¨kd˛
();

523 
°mt_li°
 '}'

525 
$$
 = 
	`li°°mt
(
$3
);

526 
	`p›d˛
();

529 
ˇ£block
:

538 
yyœ°
 = 
yych¨
;

540 
°mt_li°


542 
œ°
;

551 
œ°
 = 
yy¥ev
;

553 if(
œ°
 > 0 &&Üa° !';' && 
yych¨
 != '}')

554 
	`yyîr‹
("missing statementáfterÜabel");

555 
$$
 = 
$1
;

556 
$$
->
nbody
 = 
$3
;

557 
	`p›d˛
();

560 
ˇ£block_li°
:

562 
$$
 = 
nû
;

564 | 
ˇ£block_li°
 
ˇ£block


566 
$$
 = 
	`li°
(
$1
, 
$2
);

569 
lo›_body
:

570 
LBODY


572 
	`m¨kd˛
();

574 
°mt_li°
 '}'

576 
$$
 = 
$3
;

577 
	`p›d˛
();

580 
ønge_°mt
:

581 
ex¥_li°
 '=' 
LRANGE
 
ex¥


583 
$$
 = 
	`nod
(
ORANGE
, 
N
, 
$4
);

584 
$$
->
li°
 = 
$1
;

585 
$$
->
ëy≥
 = 0;

587 | 
ex¥_li°
 
LCOLAS
 
LRANGE
 
ex¥


589 
$$
 = 
	`nod
(
ORANGE
, 
N
, 
$4
);

590 
$$
->
li°
 = 
$1
;

591 
$$
->
cﬁas
 = 1;

592 
	`cﬁasde‚
(
$1
, 
$$
);

595 
f‹_hódî
:

596 
osim∂e_°mt
 ';' osimple_stmt ';' osimple_stmt

599 if(
$5
 !
N
 && $5->
cﬁas
 != 0)

600 
	`yyîr‹
("cannot declare inÅhe for-increment");

601 
$$
 = 
	`nod
(
OFOR
, 
N
, N);

602 if(
$1
 !
N
)

603 
$$
->
nöô
 = 
	`li°1
(
$1
);

604 
$$
->
¡e°
 = 
$3
;

605 
$$
->
nö¸
 = 
$5
;

607 | 
osim∂e_°mt


610 
$$
 = 
	`nod
(
OFOR
, 
N
, N);

611 
$$
->
¡e°
 = 
$1
;

613 | 
ønge_°mt


615 
f‹_body
:

616 
f‹_hódî
 
lo›_body


618 
$$
 = 
$1
;

619 
$$
->
nbody
 = 
	`c⁄ˇt
($$->nbody, 
$2
);

622 
f‹_°mt
:

623 
LFOR


625 
	`m¨kd˛
();

627 
f‹_body


629 
$$
 = 
$3
;

630 
	`p›d˛
();

633 
if_hódî
:

634 
osim∂e_°mt


637 
$$
 = 
	`nod
(
OIF
, 
N
, N);

638 
$$
->
¡e°
 = 
$1
;

640 | 
osim∂e_°mt
 ';' osimple_stmt

643 
$$
 = 
	`nod
(
OIF
, 
N
, N);

644 if(
$1
 !
N
)

645 
$$
->
nöô
 = 
	`li°1
(
$1
);

646 
$$
->
¡e°
 = 
$3
;

650 
if_°mt
:

651 
LIF


653 
	`m¨kd˛
();

655 
if_hódî


657 if(
$3
->
¡e°
 =
N
)

658 
	`yyîr‹
("missing condition in if statement");

660 
lo›_body


662 
$3
->
nbody
 = 
$5
;

666 
	`p›d˛
();

667 
$$
 = 
$3
;

668 if(
$7
 !
N
)

669 
$$
->
√l£
 = 
	`li°1
(
$7
);

674 
$$
 = 
N
;

676 | 
LELSE
 
if_°mt


678 
$$
 = 
$2
;

680 | 
LELSE
 
compound_°mt


682 
$$
 = 
$2
;

685 
swôch_°mt
:

686 
LSWITCH


688 
	`m¨kd˛
();

690 
if_hódî


692 
Node
 *
n
;

693 
n
 = 
$3
->
¡e°
;

694 if(
n
 !
N
 &&Ç->
›
 !
OTYPESW
)

695 
n
 = 
N
;

696 
ty≥sw
 = 
	`nod
(
OXXX
,Åy≥sw, 
n
);

698 
LBODY
 
ˇ£block_li°
 '}'

700 
$$
 = 
$3
;

701 
$$
->
›
 = 
OSWITCH
;

702 
$$
->
li°
 = 
$6
;

703 
ty≥sw
 =Åy≥sw->
À·
;

704 
	`p›d˛
();

707 
£À˘_°mt
:

708 
LSELECT


710 
ty≥sw
 = 
	`nod
(
OXXX
,Åy≥sw, 
N
);

712 
LBODY
 
ˇ£block_li°
 '}'

714 
$$
 = 
	`nod
(
OSELECT
, 
N
, N);

715 
$$
->
löío
 = 
ty≥sw
->lineno;

716 
$$
->
li°
 = 
$4
;

717 
ty≥sw
 =Åy≥sw->
À·
;

723 
ex¥
:

724 
uex¥


725 | 
ex¥
 
LOROR
Éxpr

727 
$$
 = 
	`nod
(
OOROR
, 
$1
, 
$3
);

729 | 
ex¥
 
LANDAND
Éxpr

731 
$$
 = 
	`nod
(
OANDAND
, 
$1
, 
$3
);

733 | 
ex¥
 
LEQ
Éxpr

735 
$$
 = 
	`nod
(
OEQ
, 
$1
, 
$3
);

737 | 
ex¥
 
LNE
Éxpr

739 
$$
 = 
	`nod
(
ONE
, 
$1
, 
$3
);

741 | 
ex¥
 
LLT
Éxpr

743 
$$
 = 
	`nod
(
OLT
, 
$1
, 
$3
);

745 | 
ex¥
 
LLE
Éxpr

747 
$$
 = 
	`nod
(
OLE
, 
$1
, 
$3
);

749 | 
ex¥
 
LGE
Éxpr

751 
$$
 = 
	`nod
(
OGE
, 
$1
, 
$3
);

753 | 
ex¥
 
LGT
Éxpr

755 
$$
 = 
	`nod
(
OGT
, 
$1
, 
$3
);

757 | 
ex¥
 '+'Éxpr

759 
$$
 = 
	`nod
(
OADD
, 
$1
, 
$3
);

761 | 
ex¥
 '-'Éxpr

763 
$$
 = 
	`nod
(
OSUB
, 
$1
, 
$3
);

765 | 
ex¥
 '|'Éxpr

767 
$$
 = 
	`nod
(
OOR
, 
$1
, 
$3
);

769 | 
ex¥
 '^'Éxpr

771 
$$
 = 
	`nod
(
OXOR
, 
$1
, 
$3
);

773 | 
ex¥
 '*'Éxpr

775 
$$
 = 
	`nod
(
OMUL
, 
$1
, 
$3
);

777 | 
ex¥
 '/'Éxpr

779 
$$
 = 
	`nod
(
ODIV
, 
$1
, 
$3
);

781 | 
ex¥
 '%'Éxpr

783 
$$
 = 
	`nod
(
OMOD
, 
$1
, 
$3
);

785 | 
ex¥
 '&'Éxpr

787 
$$
 = 
	`nod
(
OAND
, 
$1
, 
$3
);

789 | 
ex¥
 
LANDNOT
Éxpr

791 
$$
 = 
	`nod
(
OANDNOT
, 
$1
, 
$3
);

793 | 
ex¥
 
LLSH
Éxpr

795 
$$
 = 
	`nod
(
OLSH
, 
$1
, 
$3
);

797 | 
ex¥
 
LRSH
Éxpr

799 
$$
 = 
	`nod
(
ORSH
, 
$1
, 
$3
);

802 | 
ex¥
 
LCOMM
Éxpr

804 
$$
 = 
	`nod
(
OSEND
, 
$1
, 
$3
);

807 
uex¥
:

808 
≥x¥


809 | '*' 
uex¥


811 
$$
 = 
	`nod
(
OIND
, 
$2
, 
N
);

813 | '&' 
uex¥


815 if(
$2
->
›
 =
OCOMPLIT
) {

817 
$$
 = 
$2
;

818 
$$
->
right
 = 
	`nod
(
OIND
, $$->right, 
N
);

819 
$$
->
right
->
im∂icô
 = 1;

821 
$$
 = 
	`nod
(
OADDR
, 
$2
, 
N
);

824 | '+' 
uex¥


826 
$$
 = 
	`nod
(
OPLUS
, 
$2
, 
N
);

828 | '-' 
uex¥


830 
$$
 = 
	`nod
(
OMINUS
, 
$2
, 
N
);

832 | '!' 
uex¥


834 
$$
 = 
	`nod
(
ONOT
, 
$2
, 
N
);

836 | '~' 
uex¥


838 
	`yyîr‹
("the bitwise complement operator is ^");

839 
$$
 = 
	`nod
(
OCOM
, 
$2
, 
N
);

841 | '^' 
uex¥


843 
$$
 = 
	`nod
(
OCOM
, 
$2
, 
N
);

845 | 
LCOMM
 
uex¥


847 
$$
 = 
	`nod
(
ORECV
, 
$2
, 
N
);

854 
p£udoˇŒ
:

855 
≥x¥
 '(' ')'

857 
$$
 = 
	`nod
(
OCALL
, 
$1
, 
N
);

859 | 
≥x¥
 '(' 
ex¥_‹_ty≥_li°
 
ocomma
 ')'

861 
$$
 = 
	`nod
(
OCALL
, 
$1
, 
N
);

862 
$$
->
li°
 = 
$3
;

864 | 
≥x¥
 '(' 
ex¥_‹_ty≥_li°
 
LDDD
 
ocomma
 ')'

866 
$$
 = 
	`nod
(
OCALL
, 
$1
, 
N
);

867 
$$
->
li°
 = 
$3
;

868 
$$
->
isddd
 = 1;

871 
≥x¥_no_∑ªn
:

872 
LLITERAL


874 
$$
 = 
	`nodlô
(
$1
);

876 | 
«me


877 | 
≥x¥
 '.' 
sym


879 if(
$1
->
›
 =
OPACK
) {

880 
Sym
 *
s
;

881 
s
 = 
	`ª°ri˘lookup
(
$3
->
«me
, 
$1
->
pkg
);

882 
$1
->
u£d
 = 1;

883 
$$
 = 
	`ﬁd«me
(
s
);

886 
$$
 = 
	`nod
(
OXDOT
, 
$1
, 
	`√w«me
(
$3
));

888 | 
≥x¥
 '.' '(' 
ex¥_‹_ty≥
 ')'

890 
$$
 = 
	`nod
(
ODOTTYPE
, 
$1
, 
$4
);

892 | 
≥x¥
 '.' '(' 
LTYPE
 ')'

894 
$$
 = 
	`nod
(
OTYPESW
, 
N
, 
$1
);

896 | 
≥x¥
 '[' 
ex¥
 ']'

898 
$$
 = 
	`nod
(
OINDEX
, 
$1
, 
$3
);

900 | 
≥x¥
 '[' 
€x¥
 ':' oexpr ']'

902 
$$
 = 
	`nod
(
OSLICE
, 
$1
,Çod(
OKEY
, 
$3
, 
$5
));

904 | 
p£udoˇŒ


905 | 
c⁄vty≥
 '(' 
ex¥
 ')'

908 
$$
 = 
	`nod
(
OCALL
, 
$1
, 
N
);

909 
$$
->
li°
 = 
	`li°1
(
$3
);

911 | 
com±y≥
 
lbø˚
 
°¨t_com∂ô
 
bø˚d_keyvÆ_li°
 '}'

913 
$$
 = 
$3
;

914 
$$
->
right
 = 
$1
;

915 
$$
->
li°
 = 
$4
;

916 
	`fixlbø˚
(
$2
);

918 | 
≥x¥_no_∑ªn
 '{' 
°¨t_com∂ô
 
bø˚d_keyvÆ_li°
 '}'

920 
$$
 = 
$3
;

921 
$$
->
right
 = 
$1
;

922 
$$
->
li°
 = 
$4
;

924 | '(' 
ex¥_‹_ty≥
 ')' '{' 
°¨t_com∂ô
 
bø˚d_keyvÆ_li°
 '}'

926 
	`yyîr‹
("cannotÖarenthesizeÅype in compositeÜiteral");

927 
$$
 = 
$5
;

928 
$$
->
right
 = 
$2
;

929 
$$
->
li°
 = 
$6
;

931 | 
‚lôîÆ


933 
°¨t_com∂ô
:

937 
$$
 = 
	`nod
(
OCOMPLIT
, 
N
, N);

940 
keyvÆ
:

941 
ex¥
 ':' 
com∂ôex¥


943 
$$
 = 
	`nod
(
OKEY
, 
$1
, 
$3
);

946 
com∂ôex¥
:

947 
ex¥


948 | '{' 
°¨t_com∂ô
 
bø˚d_keyvÆ_li°
 '}'

950 
$$
 = 
$2
;

951 
$$
->
li°
 = 
$3
;

954 
≥x¥
:

955 
≥x¥_no_∑ªn


956 | '(' 
ex¥_‹_ty≥
 ')'

958 
$$
 = 
$2
;

963 
$$
->
›
) {

964 
ONAME
:

965 
ONONAME
:

966 
OPACK
:

967 
OTYPE
:

968 
OLITERAL
:

969 
$$
 = 
	`nod
(
OPAREN
, $$, 
N
);

973 
ex¥_‹_ty≥
:

974 
ex¥


975 | 
n⁄_ex¥_ty≥
 %
¥ec
 
Pª„rToRightP¨í


977 
«me_‹_ty≥
:

978 
¡y≥


980 
lbø˚
:

981 
LBODY


983 
$$
 = 
LBODY
;

987 
$$
 = '{';

995 
√w_«me
:

996 
sym


998 if(
$1
 =
S
)

999 
$$
 = 
N
;

1001 
$$
 = 
	`√w«me
(
$1
);

1004 
d˛_«me
:

1005 
sym


1007 
$$
 = 
	`d˛«me
(
$1
);

1010 
⁄ew_«me
:

1012 
$$
 = 
N
;

1014 | 
√w_«me


1016 
sym
:

1017 
LNAME


1019 
$$
 = 
$1
;

1021 if(
imp‹çkg
 !
nû
 && !
	`exp‹äame
(
$1
->
«me
))

1022 
$$
 = 
	`pkglookup
(
$1
->
«me
, 
buûtöpkg
);

1024 | 
hiddí_imp‹tsym


1027 
$$
 = 
S
;

1030 
hiddí_imp‹tsym
:

1031 '@' 
LLITERAL
 '.' 
LNAME


1033 if(
$2
.
u
.
svÆ
->
Àn
 == 0)

1034 
$$
 = 
	`pkglookup
(
$4
->
«me
, 
imp‹çkg
);

1036 
$$
 = 
	`pkglookup
(
$4
->
«me
, 
	`mkpkg
(
$2
.
u
.
svÆ
));

1039 
«me
:

1040 
sym
 %
¥ec
 
NŸP¨í


1042 
$$
 = 
	`ﬁd«me
(
$1
);

1043 if(
$$
->
∑ck
 !
N
)

1044 
$$
->
∑ck
->
u£d
 = 1;

1047 
œbñ«me
:

1048 
√w_«me


1059 
dŸdŸdŸ
:

1060 
LDDD


1062 
	`yyîr‹
("finalárgument in variadic function missingÅype");

1063 
$$
 = 
	`nod
(
ODDD
, 
	`ty≥nod
(
	`typ
(
TINTER
)), 
N
);

1065 | 
LDDD
 
¡y≥


1067 
$$
 = 
	`nod
(
ODDD
, 
$2
, 
N
);

1070 
¡y≥
:

1071 
ªcvch™ty≥


1072 | 
‚ty≥


1073 | 
Ÿhîty≥


1074 | 
±πy≥


1075 | 
dŸ«me


1076 | '(' 
¡y≥
 ')'

1078 
$$
 = 
	`nod
(
OTPAREN
, 
$2
, 
N
);

1081 
n⁄_ex¥_ty≥
:

1082 
ªcvch™ty≥


1083 | 
‚ty≥


1084 | 
Ÿhîty≥


1085 | '*' 
n⁄_ex¥_ty≥


1087 
$$
 = 
	`nod
(
OIND
, 
$2
, 
N
);

1090 
n⁄_ªcvch™ty≥
:

1091 
‚ty≥


1092 | 
Ÿhîty≥


1093 | 
±πy≥


1094 | 
dŸ«me


1095 | '(' 
¡y≥
 ')'

1097 
$$
 = 
	`nod
(
OTPAREN
, 
$2
, 
N
);

1100 
c⁄vty≥
:

1101 
‚ty≥


1102 | 
Ÿhîty≥


1104 
com±y≥
:

1105 
Ÿhîty≥


1107 
‚ªt_ty≥
:

1108 
ªcvch™ty≥


1109 | 
‚ty≥


1110 | 
Ÿhîty≥


1111 | 
±πy≥


1112 | 
dŸ«me


1114 
dŸ«me
:

1115 
«me


1116 | 
«me
 '.' 
sym


1118 if(
$1
->
›
 =
OPACK
) {

1119 
Sym
 *
s
;

1120 
s
 = 
	`ª°ri˘lookup
(
$3
->
«me
, 
$1
->
pkg
);

1121 
$1
->
u£d
 = 1;

1122 
$$
 = 
	`ﬁd«me
(
s
);

1125 
$$
 = 
	`nod
(
OXDOT
, 
$1
, 
	`√w«me
(
$3
));

1128 
Ÿhîty≥
:

1129 '[' 
€x¥
 ']' 
¡y≥


1131 
$$
 = 
	`nod
(
OTARRAY
, 
$2
, 
$4
);

1133 | '[' 
LDDD
 ']' 
¡y≥


1136 
$$
 = 
	`nod
(
OTARRAY
,Çod(
ODDD
, 
N
, N), 
$4
);

1138 | 
LCHAN
 
n⁄_ªcvch™ty≥


1140 
$$
 = 
	`nod
(
OTCHAN
, 
$2
, 
N
);

1141 
$$
->
ëy≥
 = 
CbŸh
;

1143 | 
LCHAN
 
LCOMM
 
¡y≥


1145 
$$
 = 
	`nod
(
OTCHAN
, 
$3
, 
N
);

1146 
$$
->
ëy≥
 = 
C£nd
;

1148 | 
LMAP
 '[' 
¡y≥
 ']'Çtype

1150 
$$
 = 
	`nod
(
OTMAP
, 
$3
, 
$5
);

1152 | 
°ru˘ty≥


1153 | 
öãrÁ˚ty≥


1155 
±πy≥
:

1156 '*' 
¡y≥


1158 
$$
 = 
	`nod
(
OIND
, 
$2
, 
N
);

1161 
ªcvch™ty≥
:

1162 
LCOMM
 
LCHAN
 
¡y≥


1164 
$$
 = 
	`nod
(
OTCHAN
, 
$3
, 
N
);

1165 
$$
->
ëy≥
 = 
Cªcv
;

1168 
°ru˘ty≥
:

1169 
LSTRUCT
 
lbø˚
 
°ru˘d˛_li°
 
o£mi
 '}'

1171 
$$
 = 
	`nod
(
OTSTRUCT
, 
N
, N);

1172 
$$
->
li°
 = 
$3
;

1173 
	`fixlbø˚
(
$2
);

1175 | 
LSTRUCT
 
lbø˚
 '}'

1177 
$$
 = 
	`nod
(
OTSTRUCT
, 
N
, N);

1178 
	`fixlbø˚
(
$2
);

1181 
öãrÁ˚ty≥
:

1182 
LINTERFACE
 
lbø˚
 
öãrÁ˚d˛_li°
 
o£mi
 '}'

1184 
$$
 = 
	`nod
(
OTINTER
, 
N
, N);

1185 
$$
->
li°
 = 
$3
;

1186 
	`fixlbø˚
(
$2
);

1188 | 
LINTERFACE
 
lbø˚
 '}'

1190 
$$
 = 
	`nod
(
OTINTER
, 
N
, N);

1191 
	`fixlbø˚
(
$2
);

1198 
x‚d˛
:

1199 
LFUNC
 
‚d˛
 
‚body


1201 
$$
 = 
$2
;

1202 if(
$$
 =
N
)

1204 
$$
->
nbody
 = 
$3
;

1205 
$$
->
ídlöío
 = 
löío
;

1206 
	`funcbody
(
$$
);

1209 
‚d˛
:

1210 
sym
 '(' 
ﬂrg_ty≥_li°_ocomma
 ')' 
‚ªs


1212 
Node
 *
t
;

1214 
$$
 = 
N
;

1215 
$3
 = 
	`check¨gli°
($3, 1);

1217 if(
	`°rcmp
(
$1
->
«me
, "init") == 0) {

1218 
$1
 = 
	`ª«meöô
();

1219 if(
$3
 !
nû
 || 
$5
 !=Çil)

1220 
	`yyîr‹
("func init must haveÇoárgumentsándÇoÑeturn values");

1222 if(
	`°rcmp
(
loˇÕkg
->
«me
, "maö"Ë=0 && såcmp(
$1
->name, "main") == 0) {

1223 if(
$3
 !
nû
 || 
$5
 !=Çil)

1224 
	`yyîr‹
("func main must haveÇoárgumentsándÇoÑeturn values");

1227 
t
 = 
	`nod
(
OTFUNC
, 
N
, N);

1228 
t
->
li°
 = 
$3
;

1229 
t
->
æi°
 = 
$5
;

1231 
$$
 = 
	`nod
(
ODCLFUNC
, 
N
, N);

1232 
$$
->
¬ame
 = 
	`√w«me
(
$1
);

1233 
$$
->
¬ame
->
de‚
 = $$;

1234 
$$
->
¬ame
->
¡y≥
 = 
t
;

1235 
	`de˛¨e
(
$$
->
¬ame
, 
PFUNC
);

1237 
	`funchdr
(
$$
);

1239 | '(' 
ﬂrg_ty≥_li°_ocomma
 ')' 
sym
 '(' o¨g_ty≥_li°_ocomm®')' 
‚ªs


1241 
Node
 *
rcvr
, *
t
;

1243 
$$
 = 
N
;

1244 
$2
 = 
	`check¨gli°
($2, 0);

1245 
$6
 = 
	`check¨gli°
($6, 1);

1247 if(
$2
 =
nû
) {

1248 
	`yyîr‹
("method hasÇoÑeceiver");

1251 if(
$2
->
√xt
 !
nû
) {

1252 
	`yyîr‹
("method has multipleÑeceivers");

1255 
rcvr
 = 
$2
->
n
;

1256 if(
rcvr
->
›
 !
ODCLFIELD
) {

1257 
	`yyîr‹
("badÑeceiver in method");

1260 if(
rcvr
->
right
->
›
 =
OTPAREN
 || (rcvr->right->› =
OIND
 &&Ñcvr->right->
À·
->op == OTPAREN))

1261 
	`yyîr‹
("cannotÖarenthesizeÑeceiverÅype");

1263 
t
 = 
	`nod
(
OTFUNC
, 
rcvr
, 
N
);

1264 
t
->
li°
 = 
$6
;

1265 
t
->
æi°
 = 
$8
;

1267 
$$
 = 
	`nod
(
ODCLFUNC
, 
N
, N);

1268 
$$
->
sh‹äame
 = 
	`√w«me
(
$4
);

1269 
$$
->
¬ame
 = 
	`mëhod«me1
($$->
sh‹äame
, 
rcvr
->
right
);

1270 
$$
->
¬ame
->
de‚
 = $$;

1271 
$$
->
¬ame
->
¡y≥
 = 
t
;

1272 
	`de˛¨e
(
$$
->
¬ame
, 
PFUNC
);

1274 
	`funchdr
(
$$
);

1277 
hiddí_‚d˛
:

1278 
hiddí_pkg_imp‹tsym
 '(' 
ohiddí_fu«rg_li°
 ')' 
ohiddí_fuƒes


1280 
Sym
 *
s
;

1281 
Ty≥
 *
t
;

1283 
$$
 = 
N
;

1285 
s
 = 
$1
;

1286 
t
 = 
	`fun˘y≥
(
N
, 
$3
, 
$5
);

1288 
	`imp‹tsym
(
s
, 
ONAME
);

1289 if(
s
->
def
 !
N
 && s->def->
›
 =
ONAME
) {

1290 if(
	`eqty≥
(
t
, 
s
->
def
->
ty≥
))

1292 
	`yyîr‹
("öc⁄si°íàdeföôi⁄ f‹ fun¯%S durög imp‹t\n\t%T\n\t%T", 
s
, s->
def
->
ty≥
, 
t
);

1295 
$$
 = 
	`√w«me
(
s
);

1296 
$$
->
ty≥
 = 
t
;

1297 
	`de˛¨e
(
$$
, 
PFUNC
);

1299 
	`funchdr
(
$$
);

1301 | '(' 
hiddí_fu«rg_li°
 ')' 
sym
 '(' 
ohiddí_fu«rg_li°
 ')' 
ohiddí_fuƒes


1303 
$$
 = 
	`mëhod«me1
(
	`√w«me
(
$4
), 
$2
->
n
->
right
);

1304 
$$
->
ty≥
 = 
	`fun˘y≥
(
$2
->
n
, 
$6
, 
$8
);

1306 
	`checkwidth
(
$$
->
ty≥
);

1307 
	`addmëhod
(
$4
, 
$$
->
ty≥
, 0);

1308 
	`funchdr
(
$$
);

1314 
$$
->
ty≥
->
¬ame
 = $$;

1317 
‚ty≥
:

1318 
LFUNC
 '(' 
ﬂrg_ty≥_li°_ocomma
 ')' 
‚ªs


1320 
$3
 = 
	`check¨gli°
($3, 1);

1321 
$$
 = 
	`nod
(
OTFUNC
, 
N
, N);

1322 
$$
->
li°
 = 
$3
;

1323 
$$
->
æi°
 = 
$5
;

1326 
‚body
:

1328 
$$
 = 
nû
;

1330 | '{' 
°mt_li°
 '}'

1332 
$$
 = 
$2
;

1333 if(
$$
 =
nû
)

1334 
$$
 = 
	`li°1
(
	`nod
(
OEMPTY
, 
N
, N));

1337 
‚ªs
:

1338 %
¥ec
 
NŸP¨í


1340 
$$
 = 
nû
;

1342 | 
‚ªt_ty≥


1344 
$$
 = 
	`li°1
(
	`nod
(
ODCLFIELD
, 
N
, 
$1
));

1346 | '(' 
ﬂrg_ty≥_li°_ocomma
 ')'

1348 
$2
 = 
	`check¨gli°
($2, 0);

1349 
$$
 = 
$2
;

1352 
‚lôd˛
:

1353 
‚ty≥


1355 
	`˛osuªhdr
(
$1
);

1358 
‚lôîÆ
:

1359 
‚lôd˛
 
lbø˚
 
°mt_li°
 '}'

1361 
$$
 = 
	`˛osuªbody
(
$3
);

1362 
	`fixlbø˚
(
$2
);

1364 | 
‚lôd˛
 
îr‹


1366 
$$
 = 
	`˛osuªbody
(
nû
);

1375 
xd˛_li°
:

1377 
$$
 = 
nû
;

1379 | 
xd˛_li°
 
xd˛
 ';'

1381 
$$
 = 
	`c⁄ˇt
(
$1
, 
$2
);

1382 if(
nsy¡axîr‹s
 == 0)

1383 
	`ã°d˛°ack
();

1386 
v¨d˛_li°
:

1387 
v¨d˛


1388 | 
v¨d˛_li°
 ';' 
v¨d˛


1390 
$$
 = 
	`c⁄ˇt
(
$1
, 
$3
);

1393 
c⁄°d˛_li°
:

1394 
c⁄°d˛1


1395 | 
c⁄°d˛_li°
 ';' 
c⁄°d˛1


1397 
$$
 = 
	`c⁄ˇt
(
$1
, 
$3
);

1400 
ty≥d˛_li°
:

1401 
ty≥d˛


1403 
$$
 = 
	`li°1
(
$1
);

1405 | 
ty≥d˛_li°
 ';' 
ty≥d˛


1407 
$$
 = 
	`li°
(
$1
, 
$3
);

1410 
°ru˘d˛_li°
:

1411 
°ru˘d˛


1412 | 
°ru˘d˛_li°
 ';' 
°ru˘d˛


1414 
$$
 = 
	`c⁄ˇt
(
$1
, 
$3
);

1417 
öãrÁ˚d˛_li°
:

1418 
öãrÁ˚d˛


1420 
$$
 = 
	`li°1
(
$1
);

1422 | 
öãrÁ˚d˛_li°
 ';' 
öãrÁ˚d˛


1424 
$$
 = 
	`li°
(
$1
, 
$3
);

1427 
°ru˘d˛
:

1428 
√w_«me_li°
 
¡y≥
 
ﬁôîÆ


1430 
NodeLi°
 *
l
;

1432 
Node
 *
n
;

1433 
l
 = 
$1
;

1434 if(
l
 !
nû
 &&Ü->
√xt
 =nû &&Ü->
n
 ==Çil) {

1436 
n
 = 
$2
;

1437 if(
n
->
›
 =
OIND
)

1438 
n
 =Ç->
À·
;

1439 
n
 = 
	`embedded
“->
sym
);

1440 
n
->
right
 = 
$2
;

1441 
n
->
vÆ
 = 
$3
;

1442 
$$
 = 
	`li°1
(
n
);

1446 
l
=
$1
;Ü;Üˆ->
√xt
) {

1447 
l
->
n
 = 
	`nod
(
ODCLFIELD
,Ü->n, 
$2
);

1448 
l
->
n
->
vÆ
 = 
$3
;

1451 | 
embed
 
ﬁôîÆ


1453 
$1
->
vÆ
 = 
$2
;

1454 
$$
 = 
	`li°1
(
$1
);

1456 | '(' 
embed
 ')' 
ﬁôîÆ


1458 
$2
->
vÆ
 = 
$4
;

1459 
$$
 = 
	`li°1
(
$2
);

1460 
	`yyîr‹
("cannotÖarenthesizeÉmbeddedÅype");

1462 | '*' 
embed
 
ﬁôîÆ


1464 
$2
->
right
 = 
	`nod
(
OIND
, $2->right, 
N
);

1465 
$2
->
vÆ
 = 
$3
;

1466 
$$
 = 
	`li°1
(
$2
);

1468 | '(' '*' 
embed
 ')' 
ﬁôîÆ


1470 
$3
->
right
 = 
	`nod
(
OIND
, $3->right, 
N
);

1471 
$3
->
vÆ
 = 
$5
;

1472 
$$
 = 
	`li°1
(
$3
);

1473 
	`yyîr‹
("cannotÖarenthesizeÉmbeddedÅype");

1475 | '*' '(' 
embed
 ')' 
ﬁôîÆ


1477 
$3
->
right
 = 
	`nod
(
OIND
, $3->right, 
N
);

1478 
$3
->
vÆ
 = 
$5
;

1479 
$$
 = 
	`li°1
(
$3
);

1480 
	`yyîr‹
("cannotÖarenthesizeÉmbeddedÅype");

1483 
∑ck«me
:

1484 
LNAME


1486 
Node
 *
n
;

1488 
$$
 = 
$1
;

1489 
n
 = 
	`ﬁd«me
(
$1
);

1490 if(
n
->
∑ck
 !
N
)

1491 
n
->
∑ck
->
u£d
 = 1;

1493 | 
LNAME
 '.' 
sym


1495 
Pkg
 *
pkg
;

1497 if(
$1
->
def
 =
N
 || $1->def->
›
 !
OPACK
) {

1498 
	`yyîr‹
("%S i†nŸáÖackage", 
$1
);

1499 
pkg
 = 
loˇÕkg
;

1501 
$1
->
def
->
u£d
 = 1;

1502 
pkg
 = 
$1
->
def
->pkg;

1504 
$$
 = 
	`ª°ri˘lookup
(
$3
->
«me
, 
pkg
);

1507 
embed
:

1508 
∑ck«me


1510 
$$
 = 
	`embedded
(
$1
);

1513 
öãrÁ˚d˛
:

1514 
√w_«me
 
öd˛


1516 
$$
 = 
	`nod
(
ODCLFIELD
, 
$1
, 
$2
);

1517 
	`iÁ˚d˛
(
$$
);

1519 | 
∑ck«me


1521 
$$
 = 
	`nod
(
ODCLFIELD
, 
N
, 
	`ﬁd«me
(
$1
));

1523 | '(' 
∑ck«me
 ')'

1525 
$$
 = 
	`nod
(
ODCLFIELD
, 
N
, 
	`ﬁd«me
(
$2
));

1526 
	`yyîr‹
("cannotÖarenthesizeÉmbeddedÅype");

1529 
öd˛
:

1530 '(' 
ﬂrg_ty≥_li°_ocomma
 ')' 
‚ªs


1533 
$2
 = 
	`check¨gli°
($2, 1);

1534 
$$
 = 
	`nod
(
OTFUNC
, 
	`Ákëhis
(), 
N
);

1535 
$$
->
li°
 = 
$2
;

1536 
$$
->
æi°
 = 
$4
;

1542 
¨g_ty≥
:

1543 
«me_‹_ty≥


1544 | 
sym
 
«me_‹_ty≥


1546 
$$
 = 
	`nod
(
ONONAME
, 
N
, N);

1547 
$$
->
sym
 = 
$1
;

1548 
$$
 = 
	`nod
(
OKEY
, $$, 
$2
);

1550 | 
sym
 
dŸdŸdŸ


1552 
$$
 = 
	`nod
(
ONONAME
, 
N
, N);

1553 
$$
->
sym
 = 
$1
;

1554 
$$
 = 
	`nod
(
OKEY
, $$, 
$2
);

1556 | 
dŸdŸdŸ


1558 
¨g_ty≥_li°
:

1559 
¨g_ty≥


1561 
$$
 = 
	`li°1
(
$1
);

1563 | 
¨g_ty≥_li°
 ',' 
¨g_ty≥


1565 
$$
 = 
	`li°
(
$1
, 
$3
);

1568 
ﬂrg_ty≥_li°_ocomma
:

1570 
$$
 = 
nû
;

1572 | 
¨g_ty≥_li°
 
ocomma


1574 
$$
 = 
$1
;

1580 
°mt
:

1582 
$$
 = 
N
;

1584 | 
compound_°mt


1585 | 
comm⁄_d˛


1587 
$$
 = 
	`li°°mt
(
$1
);

1589 | 
n⁄_d˛_°mt


1590 | 
îr‹


1592 
$$
 = 
N
;

1595 
n⁄_d˛_°mt
:

1596 
sim∂e_°mt


1597 | 
f‹_°mt


1598 | 
swôch_°mt


1599 | 
£À˘_°mt


1600 | 
if_°mt


1601 | 
œbñ«me
 ':'

1603 
$1
 = 
	`nod
(
OLABEL
, $1, 
N
);

1604 
$1
->
sym
 = 
d˛°ack
;

1606 
°mt


1608 
NodeLi°
 *
l
;

1610 
$1
->
de‚
 = 
$4
;

1611 
l
 = 
	`li°1
(
$1
);

1612 if(
$4
)

1613 
l
 = 
	`li°
÷, 
$4
);

1614 
$$
 = 
	`li°°mt
(
l
);

1616 | 
LFALL


1619 
$$
 = 
	`nod
(
OXFALL
, 
N
, N);

1621 | 
LBREAK
 
⁄ew_«me


1623 
$$
 = 
	`nod
(
OBREAK
, 
$2
, 
N
);

1625 | 
LCONTINUE
 
⁄ew_«me


1627 
$$
 = 
	`nod
(
OCONTINUE
, 
$2
, 
N
);

1629 | 
LGO
 
p£udoˇŒ


1631 
$$
 = 
	`nod
(
OPROC
, 
$2
, 
N
);

1633 | 
LDEFER
 
p£udoˇŒ


1635 
$$
 = 
	`nod
(
ODEFER
, 
$2
, 
N
);

1637 | 
LGOTO
 
√w_«me


1639 
$$
 = 
	`nod
(
OGOTO
, 
$2
, 
N
);

1640 
$$
->
sym
 = 
d˛°ack
;

1642 | 
LRETURN
 
€x¥_li°


1644 
$$
 = 
	`nod
(
ORETURN
, 
N
, N);

1645 
$$
->
li°
 = 
$2
;

1646 if(
$$
->
li°
 =
nû
 && 
cur‚
 !
N
) {

1647 
NodeLi°
 *
l
;

1649 
l
=
cur‚
->
d˛
;Ü;Üˆ->
√xt
) {

1650 if(
l
->
n
->
˛ass
 =
PPARAM
)

1652 if(
l
->
n
->
˛ass
 !
PPARAMOUT
)

1654 if(
l
->
n
->
sym
->
def
 !=Ü->n)

1655 
	`yyîr‹
("%†i†shadowed durögÑëu∫", 
l
->
n
->
sym
->
«me
);

1660 
°mt_li°
:

1661 
°mt


1663 
$$
 = 
nû
;

1664 if(
$1
 !
N
)

1665 
$$
 = 
	`li°1
(
$1
);

1667 | 
°mt_li°
 ';' 
°mt


1669 
$$
 = 
$1
;

1670 if(
$3
 !
N
)

1671 
$$
 = 
	`li°
($$, 
$3
);

1674 
√w_«me_li°
:

1675 
√w_«me


1677 
$$
 = 
	`li°1
(
$1
);

1679 | 
√w_«me_li°
 ',' 
√w_«me


1681 
$$
 = 
	`li°
(
$1
, 
$3
);

1684 
d˛_«me_li°
:

1685 
d˛_«me


1687 
$$
 = 
	`li°1
(
$1
);

1689 | 
d˛_«me_li°
 ',' 
d˛_«me


1691 
$$
 = 
	`li°
(
$1
, 
$3
);

1694 
ex¥_li°
:

1695 
ex¥


1697 
$$
 = 
	`li°1
(
$1
);

1699 | 
ex¥_li°
 ',' 
ex¥


1701 
$$
 = 
	`li°
(
$1
, 
$3
);

1704 
ex¥_‹_ty≥_li°
:

1705 
ex¥_‹_ty≥


1707 
$$
 = 
	`li°1
(
$1
);

1709 | 
ex¥_‹_ty≥_li°
 ',' 
ex¥_‹_ty≥


1711 
$$
 = 
	`li°
(
$1
, 
$3
);

1717 
keyvÆ_li°
:

1718 
keyvÆ


1720 
$$
 = 
	`li°1
(
$1
);

1722 | 
com∂ôex¥


1724 
$$
 = 
	`li°1
(
$1
);

1726 | 
keyvÆ_li°
 ',' 
keyvÆ


1728 
$$
 = 
	`li°
(
$1
, 
$3
);

1730 | 
keyvÆ_li°
 ',' 
com∂ôex¥


1732 
$$
 = 
	`li°
(
$1
, 
$3
);

1735 
bø˚d_keyvÆ_li°
:

1737 
$$
 = 
nû
;

1739 | 
keyvÆ_li°
 
ocomma


1741 
$$
 = 
$1
;

1747 
o£mi
:

1750 
ocomma
:

1753 
€x¥
:

1755 
$$
 = 
N
;

1757 | 
ex¥


1759 
€x¥_li°
:

1761 
$$
 = 
nû
;

1763 | 
ex¥_li°


1765 
osim∂e_°mt
:

1767 
$$
 = 
N
;

1769 | 
sim∂e_°mt


1771 
ohiddí_fu«rg_li°
:

1773 
$$
 = 
nû
;

1775 | 
hiddí_fu«rg_li°


1777 
ohiddí_°ru˘d˛_li°
:

1779 
$$
 = 
nû
;

1781 | 
hiddí_°ru˘d˛_li°


1783 
ohiddí_öãrÁ˚d˛_li°
:

1785 
$$
 = 
nû
;

1787 | 
hiddí_öãrÁ˚d˛_li°


1789 
ﬁôîÆ
:

1791 
$$
.
˘y≥
 = 
CTxxx
;

1793 | 
LLITERAL


1798 
hiddí_imp‹t
:

1799 
LIMPORT
 
LNAME
 
LLITERAL
 ';'

1801 
	`imp‹timp‹t
(
$2
, 
$3
.
u
.
svÆ
);

1803 | 
LVAR
 
hiddí_pkg_imp‹tsym
 
hiddí_ty≥
 ';'

1805 
	`imp‹tv¨
(
$2
, 
$3
);

1807 | 
LCONST
 
hiddí_pkg_imp‹tsym
 '=' 
hiddí_c⁄°™t
 ';'

1809 
	`imp‹tc⁄°
(
$2
, 
ty≥s
[
TIDEAL
], 
$4
);

1811 | 
LCONST
 
hiddí_pkg_imp‹tsym
 
hiddí_ty≥
 '=' 
hiddí_c⁄°™t
 ';'

1813 
	`imp‹tc⁄°
(
$2
, 
$3
, 
$5
);

1815 | 
LTYPE
 
hiddí_pkgty≥
 
hiddí_ty≥
 ';'

1817 
	`imp‹ây≥
(
$2
, 
$3
);

1819 | 
LFUNC
 
hiddí_‚d˛
 
‚body
 ';'

1821 if(
$2
 =
N
)

1824 
$2
->
öl
 = 
$3
;

1826 
	`funcbody
(
$2
);

1827 
imp‹éi°
 = 
	`li°
(imp‹éi°, 
$2
);

1829 if(
debug
['E']) {

1830 
	`¥öt
("imp‹à[%Z] fun¯%lN \n", 
imp‹çkg
->
∑th
, 
$2
);

1831 if(
debug
['l'] > 2 && 
$2
->
öl
)

1832 
	`¥öt
("ö»body:%+H\n", 
$2
->
öl
);

1836 
hiddí_pkg_imp‹tsym
:

1837 
hiddí_imp‹tsym


1839 
$$
 = 
$1
;

1840 
°ru˘pkg
 = 
$$
->
pkg
;

1843 
hiddí_pkgty≥
:

1844 
hiddí_pkg_imp‹tsym


1846 
$$
 = 
	`pkgty≥
(
$1
);

1847 
	`imp‹tsym
(
$1
, 
OTYPE
);

1854 
hiddí_ty≥
:

1855 
hiddí_ty≥_misc


1856 | 
hiddí_ty≥_ªcv_ch™


1857 | 
hiddí_ty≥_func


1859 
hiddí_ty≥_n⁄_ªcv_ch™
:

1860 
hiddí_ty≥_misc


1861 | 
hiddí_ty≥_func


1863 
hiddí_ty≥_misc
:

1864 
hiddí_imp‹tsym


1866 
$$
 = 
	`pkgty≥
(
$1
);

1868 | 
LNAME


1871 
$1
 = 
	`pkglookup
($1->
«me
, 
buûtöpkg
);

1872 if(
$1
->
def
 =
N
 || $1->def->
›
 !
OTYPE
) {

1873 
	`yyîr‹
("%†i†nŸáÅy≥", 
$1
->
«me
);

1874 
$$
 = 
T
;

1876 
$$
 = 
$1
->
def
->
ty≥
;

1878 | '[' ']' 
hiddí_ty≥


1880 
$$
 = 
	`aödex
(
N
, 
$3
);

1882 | '[' 
LLITERAL
 ']' 
hiddí_ty≥


1884 
$$
 = 
	`aödex
(
	`nodlô
(
$2
), 
$4
);

1886 | 
LMAP
 '[' 
hiddí_ty≥
 ']' hidden_type

1888 
$$
 = 
	`m≠ty≥
(
$3
, 
$5
);

1890 | 
LSTRUCT
 '{' 
ohiddí_°ru˘d˛_li°
 '}'

1892 
$$
 = 
	`to°ru˘
(
$3
);

1894 | 
LINTERFACE
 '{' 
ohiddí_öãrÁ˚d˛_li°
 '}'

1896 
$$
 = 
	`toöãrÁ˚
(
$3
);

1898 | '*' 
hiddí_ty≥


1900 
$$
 = 
	`±πo
(
$2
);

1902 | 
LCHAN
 
hiddí_ty≥_n⁄_ªcv_ch™


1904 
$$
 = 
	`typ
(
TCHAN
);

1905 
$$
->
ty≥
 = 
$2
;

1906 
$$
->
ch™
 = 
CbŸh
;

1908 | 
LCHAN
 '(' 
hiddí_ty≥_ªcv_ch™
 ')'

1910 
$$
 = 
	`typ
(
TCHAN
);

1911 
$$
->
ty≥
 = 
$3
;

1912 
$$
->
ch™
 = 
CbŸh
;

1914 | 
LCHAN
 
LCOMM
 
hiddí_ty≥


1916 
$$
 = 
	`typ
(
TCHAN
);

1917 
$$
->
ty≥
 = 
$3
;

1918 
$$
->
ch™
 = 
C£nd
;

1921 
hiddí_ty≥_ªcv_ch™
:

1922 
LCOMM
 
LCHAN
 
hiddí_ty≥


1924 
$$
 = 
	`typ
(
TCHAN
);

1925 
$$
->
ty≥
 = 
$3
;

1926 
$$
->
ch™
 = 
Cªcv
;

1929 
hiddí_ty≥_func
:

1930 
LFUNC
 '(' 
ohiddí_fu«rg_li°
 ')' 
ohiddí_fuƒes


1932 
$$
 = 
	`fun˘y≥
(
nû
, 
$3
, 
$5
);

1935 
hiddí_fu«rg
:

1936 
sym
 
hiddí_ty≥
 
ﬁôîÆ


1938 
$$
 = 
	`nod
(
ODCLFIELD
, 
N
, 
	`ty≥nod
(
$2
));

1939 if(
$1
)

1940 
$$
->
À·
 = 
	`√w«me
(
$1
);

1941 
$$
->
vÆ
 = 
$3
;

1943 | 
sym
 
LDDD
 
hiddí_ty≥
 
ﬁôîÆ


1945 
Ty≥
 *
t
;

1947 
t
 = 
	`typ
(
TARRAY
);

1948 
t
->
bound
 = -1;

1949 
t
->
ty≥
 = 
$3
;

1951 
$$
 = 
	`nod
(
ODCLFIELD
, 
N
, 
	`ty≥nod
(
t
));

1952 if(
$1
)

1953 
$$
->
À·
 = 
	`√w«me
(
$1
);

1954 
$$
->
isddd
 = 1;

1955 
$$
->
vÆ
 = 
$4
;

1958 
hiddí_°ru˘d˛
:

1959 
sym
 
hiddí_ty≥
 
ﬁôîÆ


1961 
Sym
 *
s
;

1963 if(
$1
 !
S
) {

1964 
$$
 = 
	`nod
(
ODCLFIELD
, 
	`√w«me
(
$1
), 
	`ty≥nod
(
$2
));

1965 
$$
->
vÆ
 = 
$3
;

1967 
s
 = 
$2
->
sym
;

1968 if(
s
 =
S
 && 
i•å
[
$2
->
ëy≥
])

1969 
s
 = 
$2
->
ty≥
->
sym
;

1970 
$$
 = 
	`embedded
(
s
);

1971 
$$
->
right
 = 
	`ty≥nod
(
$2
);

1972 
$$
->
vÆ
 = 
$3
;

1976 
hiddí_öãrÁ˚d˛
:

1977 
sym
 '(' 
ohiddí_fu«rg_li°
 ')' 
ohiddí_fuƒes


1979 
$$
 = 
	`nod
(
ODCLFIELD
, 
	`√w«me
(
$1
), 
	`ty≥nod
(
	`fun˘y≥
(
	`Ákëhis
(), 
$3
, 
$5
)));

1981 | 
hiddí_ty≥


1983 
$$
 = 
	`nod
(
ODCLFIELD
, 
N
, 
	`ty≥nod
(
$1
));

1986 
ohiddí_fuƒes
:

1988 
$$
 = 
nû
;

1990 | 
hiddí_fuƒes


1992 
hiddí_fuƒes
:

1993 '(' 
ohiddí_fu«rg_li°
 ')'

1995 
$$
 = 
$2
;

1997 | 
hiddí_ty≥


1999 
$$
 = 
	`li°1
(
	`nod
(
ODCLFIELD
, 
N
, 
	`ty≥nod
(
$1
)));

2006 
hiddí_lôîÆ
:

2007 
LLITERAL


2009 
$$
 = 
	`nodlô
(
$1
);

2011 | '-' 
LLITERAL


2013 
$$
 = 
	`nodlô
(
$2
);

2014 
$$
->
vÆ
.
˘y≥
){

2015 
CTINT
:

2016 
CTRUNE
:

2017 
	`m≤egfix
(
$$
->
vÆ
.
u
.
xvÆ
);

2019 
CTFLT
:

2020 
	`m≤egÊt
(
$$
->
vÆ
.
u
.
fvÆ
);

2023 
	`yyîr‹
("badÇegated constant");

2026 | 
sym


2028 
$$
 = 
	`ﬁd«me
(
	`pkglookup
(
$1
->
«me
, 
buûtöpkg
));

2029 if(
$$
->
›
 !
OLITERAL
)

2030 
	`yyîr‹
("bad c⁄°™à%S", 
$$
->
sym
);

2033 
hiddí_c⁄°™t
:

2034 
hiddí_lôîÆ


2035 | '(' 
hiddí_lôîÆ
 '+' hidden_literal ')'

2037 if(
$2
->
vÆ
.
˘y≥
 =
CTRUNE
 && 
$4
->vÆ.˘y≥ =
CTINT
) {

2038 
$$
 = 
$2
;

2039 
	`m∑ddfixfix
(
$2
->
vÆ
.
u
.
xvÆ
, 
$4
->val.u.xval, 0);

2042 
$$
 = 
	`nod˝lxlô
(
$2
->
vÆ
, 
$4
->val);

2045 
hiddí_imp‹t_li°
:

2046 | 
hiddí_imp‹t_li°
 
hiddí_imp‹t


2048 
hiddí_fu«rg_li°
:

2049 
hiddí_fu«rg


2051 
$$
 = 
	`li°1
(
$1
);

2053 | 
hiddí_fu«rg_li°
 ',' 
hiddí_fu«rg


2055 
$$
 = 
	`li°
(
$1
, 
$3
);

2058 
hiddí_°ru˘d˛_li°
:

2059 
hiddí_°ru˘d˛


2061 
$$
 = 
	`li°1
(
$1
);

2063 | 
hiddí_°ru˘d˛_li°
 ';' 
hiddí_°ru˘d˛


2065 
$$
 = 
	`li°
(
$1
, 
$3
);

2068 
hiddí_öãrÁ˚d˛_li°
:

2069 
hiddí_öãrÁ˚d˛


2071 
$$
 = 
	`li°1
(
$1
);

2073 | 
hiddí_öãrÁ˚d˛_li°
 ';' 
hiddí_öãrÁ˚d˛


2075 
$$
 = 
	`li°
(
$1
, 
$3
);

2078 
	}
%%

2081 
	$fixlbø˚
(
lbr
)

2086 if(
lbr
 =
LBODY
)

2087 
lo›hack
 = 1;

2088 
	}
}

	@init.c

5 
	~<u.h
>

6 
	~<libc.h
>

7 
	~"go.h
"

16 
Sym
*

17 
	$ª«meöô
()

19 
öôgí
;

21 
	`¢¥öt
(
«mebuf
, “amebuf), "öô¬∑%d", ++
öôgí
);

22  
	`lookup
(
«mebuf
);

23 
	}
}

44 
	$™yöô
(
NodeLi°
 *
n
)

46 
uöt32
 
h
;

47 
Sym
 *
s
;

48 
NodeLi°
 *
l
;

51 
l
=
n
;Ü;Üˆ->
√xt
) {

52 
l
->
n
->
›
) {

53 
ODCLFUNC
:

54 
ODCLCONST
:

55 
ODCLTYPE
:

56 
OEMPTY
:

64 if(
	`°rcmp
(
loˇÕkg
->
«me
, "main") == 0)

68 
	`¢¥öt
(
«mebuf
, (namebuf), "init¬∑1");

69 
s
 = 
	`lookup
(
«mebuf
);

70 if(
s
->
def
 !
N
)

74 
h
=0; h<
NHASH
; h++)

75 
s
 = 
hash
[
h
]; s !
S
; s = s->
lök
) {

76 if(
s
->
«me
[0] !'i' || 
	`°rcmp
(s->name, "init") != 0)

78 if(
s
->
def
 =
N
)

85 
	}
}

88 
	$‚öô
(
NodeLi°
 *
n
)

90 
i
;

91 
Node
 *
g©ev¨
;

92 
Node
 *
a
, *
b
, *
‚
;

93 
NodeLi°
 *
r
;

94 
uöt32
 
h
;

95 
Sym
 *
s
, *
öôsym
;

97 if(
debug
['A']) {

102 
n
 = 
	`öôfix
(n);

103 if(!
	`™yöô
(
n
))

106 
r
 = 
nû
;

109 
	`¢¥öt
(
«mebuf
, (namebuf), "initdone¬∑");

110 
g©ev¨
 = 
	`√w«me
(
	`lookup
(
«mebuf
));

111 
	`addv¨
(
g©ev¨
, 
ty≥s
[
TUINT8
], 
PEXTERN
);

114 
max¨g
 = 0;

115 
	`¢¥öt
(
«mebuf
, (namebuf), "init");

117 
‚
 = 
	`nod
(
ODCLFUNC
, 
N
, N);

118 
öôsym
 = 
	`lookup
(
«mebuf
);

119 
‚
->
¬ame
 = 
	`√w«me
(
öôsym
);

120 
‚
->
¬ame
->
de‚
 = fn;

121 
‚
->
¬ame
->
¡y≥
 = 
	`nod
(
OTFUNC
, 
N
, N);

122 
	`de˛¨e
(
‚
->
¬ame
, 
PFUNC
);

123 
	`funchdr
(
‚
);

126 
a
 = 
	`nod
(
OIF
, 
N
, N);

127 
a
->
¡e°
 = 
	`nod
(
ONE
, 
g©ev¨
, 
	`nodötc⁄°
(0));

128 
r
 = 
	`li°
‘, 
a
);

131 
b
 = 
	`nod
(
OIF
, 
N
, N);

132 
b
->
¡e°
 = 
	`nod
(
OEQ
, 
g©ev¨
, 
	`nodötc⁄°
(2));

133 
b
->
nbody
 = 
	`li°1
(
	`nod
(
ORETURN
, 
N
, N));

134 
a
->
nbody
 = 
	`li°1
(
b
);

137 
b
 = 
	`sy¶ook
("throwinit", 0);

138 
b
 = 
	`nod
(
OCALL
, b, 
N
);

139 
a
->
nbody
 = 
	`li°
◊->nbody, 
b
);

142 
a
 = 
	`nod
(
OAS
, 
g©ev¨
, 
	`nodötc⁄°
(1));

143 
r
 = 
	`li°
‘, 
a
);

146 
h
=0; h<
NHASH
; h++)

147 
s
 = 
hash
[
h
]; s !
S
; s = s->
lök
) {

148 if(
s
->
«me
[0] !'i' || 
	`°rcmp
(s->name, "init") != 0)

150 if(
s
->
def
 =
N
)

152 if(
s
 =
öôsym
)

156 
a
 = 
	`nod
(
OCALL
, 
s
->
def
, 
N
);

157 
r
 = 
	`li°
‘, 
a
);

161 
r
 = 
	`c⁄ˇt
‘, 
n
);

165 
i
=1;; i++) {

166 
	`¢¥öt
(
«mebuf
, “amebuf), "öô¬∑%d", 
i
);

167 
s
 = 
	`lookup
(
«mebuf
);

168 if(
s
->
def
 =
N
)

170 
a
 = 
	`nod
(
OCALL
, 
s
->
def
, 
N
);

171 
r
 = 
	`li°
‘, 
a
);

175 
a
 = 
	`nod
(
OAS
, 
g©ev¨
, 
	`nodötc⁄°
(2));

176 
r
 = 
	`li°
‘, 
a
);

179 
a
 = 
	`nod
(
ORETURN
, 
N
, N);

180 
r
 = 
	`li°
‘, 
a
);

181 
	`exp‹tsym
(
‚
->
¬ame
);

183 
‚
->
nbody
 = 
r
;

184 
	`funcbody
(
‚
);

186 
cur‚
 = 
‚
;

187 
	`ty≥check
(&
‚
, 
Et›
);

188 
	`ty≥checkli°
(
r
, 
Et›
);

189 
cur‚
 = 
nû
;

190 
	`funccompûe
(
‚
, 0);

191 
	}
}

	@inl.c

29 
	~<u.h
>

30 
	~<libc.h
>

31 
	~"go.h
"

34 
Node
* 
ölc›y
(Nodê*
n
);

35 
NodeLi°
* 
ölc›yli°
(NodeLi° *
Œ
);

36 
ishaúy
(
Node
 *
n
, *
budgë
);

37 
ishaúyli°
(
NodeLi°
 *
Œ
, *
budgë
);

40 
ö odñi°
(
NodeLi°
 *
l
);

41 
ö ode
(
Node
 **
≈
);

42 
mkölˇŒ
(
Node
 **
≈
, Nodê*
‚
);

43 
Node
* 
ölv¨
(Nodê*
n
);

44 
Node
* 
ªtv¨
(
Ty≥
 *
n
, 
i
);

45 
Node
* 
√wœbñ
();

46 
Node
* 
ölsub°
(Nodê*
n
);

47 
NodeLi°
* 
ölsub°li°
(NodeLi° *
l
);

49 
£éno
(
Node
*, );

52 
Node
 *
	göl‚
;

53 
Node
 *
	göÃëœbñ
;

54 
NodeLi°
 *
	göÃëv¨s
;

58 
Pkg
*

59 
	$‚pkg
(
Node
 *
‚
)

61 
Ty≥
 *
rcvr
;

63 if(
‚
->
ty≥
->
thi°u∂e
) {

65 
rcvr
 = 
	`gëthisx
(
‚
->
ty≥
)->type->type;

66 if(
i•å
[
rcvr
->
ëy≥
])

67 
rcvr
 =Ñcvr->
ty≥
;

68 if(!
rcvr
->
sym
)

69 
	`Áèl
("ª˚ivî wôhÇÿsym: [%S] %lN (%T)", 
‚
->
sym
, fn, 
rcvr
);

70  
rcvr
->
sym
->
pkg
;

73  
‚
->
sym
->
pkg
;

74 
	}
}

79 
	$ty≥checköl
(
Node
 *
‚
)

81 
Node
 *
ßve‚
;

82 
Pkg
 *
pkg
;

83 
ßve_ß„mode
, 
 o
;

85 if(
‚
->
ty≥check
)

88 
 o
 = 
	`£éöío
(
‚
);

90 i‡(
debug
['m']>2)

91 
	`¥öt
("ty≥check imp‹à[%S] %lN { %#H }\n", 
‚
->
sym
, fn, fn->
öl
);

96 
pkg
 = 
	`‚pkg
(
‚
);

97 i‡(
pkg
 =
loˇÕkg
 ||Ökg =
nû
)

98 
	`Áèl
("ty≥checkö»⁄Üoˇ»fun˘i⁄ %lN", 
‚
);

100 
ßve_ß„mode
 = 
ß„mode
;

101 
ß„mode
 = 0;

103 
ßve‚
 = 
cur‚
;

104 
cur‚
 = 
‚
;

105 
	`ty≥checkli°
(
‚
->
öl
, 
Et›
);

106 
‚
->
ty≥check
 = 1;

107 
cur‚
 = 
ßve‚
;

109 
ß„mode
 = 
ßve_ß„mode
;

111 
löío
 = 
 o
;

112 
	}
}

119 
	$ˇnöl
(
Node
 *
‚
)

121 
Node
 *
ßve‚
;

122 
Ty≥
 *
t
;

123 
budgë
;

125 if(
‚
->
›
 !
ODCLFUNC
)

126 
	`Áèl
("ˇnö»%N", 
‚
);

127 if(!
‚
->
¬ame
)

128 
	`Áèl
("ˇnö»nÿ¬amê%+N", 
‚
);

131 if(
‚
->
nbody
 =
nû
)

135 
t
=
‚
->
ty≥
->ty≥->
down
->down->type;Å;Å=t->down)

136 if(
t
->
isddd
)

139 
budgë
 = 40;

140 if(
	`ishaúyli°
(
‚
->
nbody
, &
budgë
))

143 
ßve‚
 = 
cur‚
;

144 
cur‚
 = 
‚
;

146 
‚
->
¬ame
->
öl
 = fn->
nbody
;

147 
‚
->
nbody
 = 
	`ölc›yli°
(‚->
¬ame
->
öl
);

149 
‚
->
ty≥check
 = 1;

153 
‚
->
ty≥
->
¬ame
 = fn->nname;

155 if(
debug
['m'] > 1)

156 
	`¥öt
("%L: c™ i∆öê%#Nás: %#T { %#H }\n", 
‚
->
löío
, fn->
¬ame
, fn->
ty≥
, fn->¬ame->
öl
);

157 if(
debug
['m'])

158 
	`¥öt
("%L: c™ i∆öê%N\n", 
‚
->
löío
, fn->
¬ame
);

160 
cur‚
 = 
ßve‚
;

161 
	}
}

165 
	$ishaúyli°
(
NodeLi°
 *
Œ
, * 
budgë
)

167 ;
Œ
;Œˆl->
√xt
)

168 if(
	`ishaúy
(
Œ
->
n
, 
budgë
))

171 
	}
}

174 
	$ishaúy
(
Node
 *
n
, *
budgë
)

176 if(!
n
)

180 
n
->
›
) {

181 
OCALL
:

182 
OCALLFUNC
:

183 
OCALLINTER
:

184 
OCALLMETH
:

185 
OPANIC
:

186 
ORECOVER
:

187 if(
debug
['l'] < 4)

191 
OCLOSURE
:

192 
ORANGE
:

193 
OFOR
:

194 
OSELECT
:

195 
OSWITCH
:

196 
OPROC
:

197 
ODEFER
:

198 
ODCL
:

199 
ODCLTYPE
:

200 
ODCLCONST
:

204 
OAS
:

208 if(
n
->
right
 =
N
)

213 (*
budgë
)--;

215  *
budgë
 < 0 ||

216 
	`ishaúy
(
n
->
À·
, 
budgë
) ||

217 
	`ishaúy
(
n
->
right
, 
budgë
) ||

218 
	`ishaúyli°
(
n
->
li°
, 
budgë
) ||

219 
	`ishaúyli°
(
n
->
æi°
, 
budgë
) ||

220 
	`ishaúyli°
(
n
->
nöô
, 
budgë
) ||

221 
	`ishaúy
(
n
->
¡e°
, 
budgë
) ||

222 
	`ishaúy
(
n
->
nö¸
, 
budgë
) ||

223 
	`ishaúyli°
(
n
->
nbody
, 
budgë
) ||

224 
	`ishaúyli°
(
n
->
√l£
, 
budgë
);

225 
	}
}

230 
NodeLi°
*

231 
	$ölc›yli°
(
NodeLi°
 *
Œ
)

233 
NodeLi°
 *
l
;

235 
l
 = 
nû
;

236 ; 
Œ
;Ülˆl->
√xt
)

237 
l
 = 
	`li°
÷, 
	`ölc›y
(
Œ
->
n
));

238  
l
;

239 
	}
}

241 
Node
*

242 
	$ölc›y
(
Node
 *
n
)

244 
Node
 *
m
;

246 if(
n
 =
N
)

247  
N
;

249 
n
->
›
) {

250 
ONAME
:

251 
OTYPE
:

252 
OLITERAL
:

253  
n
;

256 
m
 = 
	`nod
(
OXXX
, 
N
, N);

257 *
m
 = *
n
;

258 
m
->
öl
 = 
nû
;

259 
m
->
À·
 = 
	`ölc›y
(
n
->left);

260 
m
->
right
 = 
	`ölc›y
(
n
->right);

261 
m
->
li°
 = 
	`ölc›yli°
(
n
->list);

262 
m
->
æi°
 = 
	`ölc›yli°
(
n
->rlist);

263 
m
->
nöô
 = 
	`ölc›yli°
(
n
->ninit);

264 
m
->
¡e°
 = 
	`ölc›y
(
n
->ntest);

265 
m
->
nö¸
 = 
	`ölc›y
(
n
->nincr);

266 
m
->
nbody
 = 
	`ölc›yli°
(
n
->nbody);

267 
m
->
√l£
 = 
	`ölc›yli°
(
n
->nelse);

269  
m
;

270 
	}
}

276 
	$ölˇŒs
(
Node
 *
‚
)

278 
Node
 *
ßve‚
;

280 
ßve‚
 = 
cur‚
;

281 
cur‚
 = 
‚
;

282 
	`ö ode
(&
‚
);

283 if(
‚
 !
cur‚
)

284 
	`Áèl
("inlnodeÑeplaced curfn");

285 
cur‚
 = 
ßve‚
;

286 
	}
}

290 
	$ölc⁄v2°mt
(
Node
 *
n
)

292 
n
->
›
 = 
OBLOCK
;

294 
n
->
li°
 =Ç->
nbody
;

295 
n
->
nbody
 = 
nû
;

296 
n
->
æi°
 = 
nû
;

297 
	}
}

301 
	$ölc⁄v2ex¥
(
Node
 **
≈
)

303 
Node
 *
n
, *
r
;

304 
n
 = *
≈
;

305 
r
 = 
n
->
æi°
->n;

306 
	`addöô
(&
r
, 
	`c⁄ˇt
(
n
->
nöô
,Ç->
nbody
));

307 *
≈
 = 
r
;

308 
	}
}

315 
NodeLi°
*

316 
	$ölc⁄v2li°
(
Node
 *
n
)

318 
NodeLi°
 *
l
;

320 if(
n
->
›
 !
OINLCALL
 ||Ç->
æi°
 =
nû
)

321 
	`Áèl
("ölc⁄v2li° %+N\n", 
n
);

323 
l
 = 
n
->
æi°
;

324 
	`addöô
(&
l
->
n
, 
	`c⁄ˇt
“->
nöô
,Ç->
nbody
));

325  
l
;

326 
	}
}

329 
	$ö odñi°
(
NodeLi°
 *
l
)

331 ; 
l
;Üˆ->
√xt
)

332 
	`ö ode
(&
l
->
n
);

333 
	}
}

347 
	$ö ode
(
Node
 **
≈
)

349 
Node
 *
n
;

350 
NodeLi°
 *
l
;

351 
 o
;

353 if(*
≈
 =
nû
)

356 
n
 = *
≈
;

358 
n
->
›
) {

359 
ODEFER
:

360 
OPROC
:

362 
n
->
À·
->
›
) {

363 
OCALLFUNC
:

364 
OCALLMETH
:

365 
n
->
À·
->
ëy≥
 =Ç->
›
;

368 
OCLOSURE
:

374 
 o
 = 
	`£éöío
(
n
);

376 
	`ö odñi°
(
n
->
nöô
);

377 
l
=
n
->
nöô
;Ü;Üˆ->
√xt
)

378 if(
l
->
n
->
›
 =
OINLCALL
)

379 
	`ölc⁄v2°mt
(
l
->
n
);

381 
	`ö ode
(&
n
->
À·
);

382 if(
n
->
À·
 &&Ç->À·->
›
 =
OINLCALL
)

383 
	`ölc⁄v2ex¥
(&
n
->
À·
);

385 
	`ö ode
(&
n
->
right
);

386 if(
n
->
right
 &&Ç->right->
›
 =
OINLCALL
)

387 
	`ölc⁄v2ex¥
(&
n
->
right
);

389 
	`ö odñi°
(
n
->
li°
);

390 
n
->
›
) {

391 
OBLOCK
:

392 
l
=
n
->
li°
;Ü;Üˆ->
√xt
)

393 if(
l
->
n
->
›
 =
OINLCALL
)

394 
	`ölc⁄v2°mt
(
l
->
n
);

397 
ORETURN
:

398 
OCALLFUNC
:

399 
OCALLMETH
:

400 
OCALLINTER
:

403 if(
	`cou¡
(
n
->
li°
Ë=1 &&Ç->li°->n->
›
 =
OINLCALL
 && cou¡“->li°->n->
æi°
) > 1) {

404 
n
->
li°
 = 
	`ölc⁄v2li°
(n->list->n);

410 
l
=
n
->
li°
;Ü;Üˆ->
√xt
)

411 if(
l
->
n
->
›
 =
OINLCALL
)

412 
	`ölc⁄v2ex¥
(&
l
->
n
);

415 
	`ö odñi°
(
n
->
æi°
);

416 
n
->
›
) {

417 
OAS2FUNC
:

418 if(
n
->
æi°
->n->
›
 =
OINLCALL
) {

419 
n
->
æi°
 = 
	`ölc⁄v2li°
(n->rlist->n);

420 
n
->
›
 = 
OAS2
;

421 
n
->
ty≥check
 = 0;

422 
	`ty≥check
(
≈
, 
Et›
);

428 
l
=
n
->
æi°
;Ü;Üˆ->
√xt
)

429 if(
l
->
n
->
›
 =
OINLCALL
)

430 
	`ölc⁄v2ex¥
(&
l
->
n
);

434 
	`ö ode
(&
n
->
¡e°
);

435 if(
n
->
¡e°
 &&Ç->¡e°->
›
 =
OINLCALL
)

436 
	`ölc⁄v2ex¥
(&
n
->
¡e°
);

438 
	`ö ode
(&
n
->
nö¸
);

439 if(
n
->
nö¸
 &&Ç->nö¸->
›
 =
OINLCALL
)

440 
	`ölc⁄v2°mt
(
n
->
nö¸
);

442 
	`ö odñi°
(
n
->
nbody
);

443 
l
=
n
->
nbody
;Ü;Üˆ->
√xt
)

444 if(
l
->
n
->
›
 =
OINLCALL
)

445 
	`ölc⁄v2°mt
(
l
->
n
);

447 
	`ö odñi°
(
n
->
√l£
);

448 
l
=
n
->
√l£
;Ü;Üˆ->
√xt
)

449 if(
l
->
n
->
›
 =
OINLCALL
)

450 
	`ölc⁄v2°mt
(
l
->
n
);

455 
n
->
›
) {

456 
OCALLFUNC
:

457 
OCALLMETH
:

458 i‡(
n
->
ëy≥
 =
OPROC
 ||Ç->ëy≥ =
ODEFER
)

462 
n
->
›
) {

463 
OCALLFUNC
:

464 if(
debug
['m']>3)

465 
	`¥öt
("%L:ˇŒÅÿfun¯%+N\n", 
n
->
löío
,Ç->
À·
);

466 if(
n
->
À·
->
öl
)

467 
	`mkölˇŒ
(
≈
, 
n
->
À·
);

468 if(
n
->
À·
->
›
 =
ONAME
 &&Ç->À·->À· &&Ç->À·->À·->› =
OTYPE
 &&Ç->À·->
right
 &&Ç->left->right->op == ONAME)

469 if(
n
->
À·
->
sym
->
def
)

470 
	`mkölˇŒ
(
≈
, 
n
->
À·
->
sym
->
def
);

473 
OCALLMETH
:

474 if(
debug
['m']>3)

475 
	`¥öt
("%L:ˇŒÅÿmëh %lN\n", 
n
->
löío
,Ç->
À·
->
right
);

477 if(
n
->
À·
->
ty≥
 =
T
)

478 
	`Áèl
("nÿfun˘i⁄Åy≥ f‹ [%p] %+N\n", 
n
->
À·
,Ç->left);

480 if(
n
->
À·
->
ty≥
->
¬ame
 =
N
)

481 
	`Áèl
("nÿfun˘i⁄ deföôi⁄ f‹ [%p] %+T\n", 
n
->
À·
->
ty≥
,Ç->left->type);

483 
	`mkölˇŒ
(
≈
, 
n
->
À·
->
ty≥
->
¬ame
);

488 
löío
 = 
 o
;

489 
	}
}

491 
mkölˇŒ1
(
Node
 **
≈
, Nodê*
‚
);

494 
	$mkölˇŒ
(
Node
 **
≈
, Nodê*
‚
)

496 
ßve_ß„mode
;

497 
Pkg
 *
pkg
;

499 
ßve_ß„mode
 = 
ß„mode
;

503 
pkg
 = 
	`‚pkg
(
‚
);

504 if(
pkg
 !
loˇÕkg
 &&Ökg !
nû
)

505 
ß„mode
 = 0;

506 
	`mkölˇŒ1
(
≈
, 
‚
);

507 
ß„mode
 = 
ßve_ß„mode
;

508 
	}
}

510 
Node
*

511 
	$tölv¨
(
Ty≥
 *
t
)

513 if(
t
->
¬ame
 && !
	`isbœnk
(t->nname)) {

514 if(!
t
->
¬ame
->
ölv¨
)

515 
	`Áèl
("missög i∆v¨ f‹ %N\n", 
t
->
¬ame
);

516  
t
->
¬ame
->
ölv¨
;

518 
	`ty≥check
(&
nbœnk
, 
Erv
 | 
Easgn
);

519  
nbœnk
;

520 
	}
}

527 
	$mkölˇŒ1
(
Node
 **
≈
, Nodê*
‚
)

529 
i
;

530 
Node
 *
n
, *
ˇŒ
, *
ßveöl‚
, *
as
, *
m
;

531 
NodeLi°
 *
d˛
, *
Œ
, *
nöô
, *
body
;

532 
Ty≥
 *
t
;

534 i‡(
‚
->
öl
 =
nû
)

537 i‡(
‚
 =
cur‚
 || fn->
de‚
 == curfn)

540 if(
debug
['l']<2)

541 
	`ty≥checköl
(
‚
);

543 
n
 = *
≈
;

546 if(
debug
['m']>1)

547 
	`¥öt
("%L: i∆öög cÆ»tÿ%S %#T { %#H }\n", 
n
->
löío
, 
‚
->
sym
, fn->
ty≥
, fn->
öl
);

548 if(
debug
['m'])

549 
	`¥öt
("%L: i∆öög cÆ»tÿ%N\n", 
n
->
löío
, 
‚
);

551 if(
debug
['m']>2)

552 
	`¥öt
("%L: Bef‹êölöög: %+N\n", 
n
->
löío
,Ç);

554 
ßveöl‚
 = 
öl‚
;

555 
öl‚
 = 
‚
;

557 
nöô
 = 
n
->ninit;

559 i‡(
‚
->
de‚
)

560 
d˛
 = 
‚
->
de‚
->dcl;

562 
d˛
 = 
‚
->dcl;

564 
öÃëv¨s
 = 
nû
;

565 
i
 = 0;

567 
Œ
 = 
d˛
;Ül;Ülˆl->
√xt
)

568 if(
Œ
->
n
->
›
 =
ONAME
) {

569 
Œ
->
n
->
ölv¨
 = 
	`ölv¨
(ll->n);

570 
nöô
 = 
	`li°
“öô, 
	`nod
(
ODCL
, 
Œ
->
n
->
ölv¨
, 
N
));

571 i‡(
Œ
->
n
->
˛ass
 =
PPARAMOUT
)

572 
öÃëv¨s
 = 
	`li°
(öÃëv¨s, 
Œ
->
n
->
ölv¨
);

576 if(
öÃëv¨s
 =
nû
 && 
‚
->
ty≥
->
ouâu∂e
 > 0)

577 
t
 = 
	`gëouèrgx
(
‚
->
ty≥
)->ty≥;Å;Å =Å->
down
) {

578 
m
 = 
	`ªtv¨
(
t
, 
i
++);

579 
nöô
 = 
	`li°
“öô, 
	`nod
(
ODCL
, 
m
, 
N
));

580 
öÃëv¨s
 = 
	`li°
(öÃëv¨s, 
m
);

584 
as
 = 
N
;

585 if(
‚
->
ty≥
->
thi°u∂e
) {

586 
t
 = 
	`gëthisx
(
‚
->
ty≥
)->type;

587 if(
t
 !
T
 &&Å->
¬ame
 !
N
 && !
	`isbœnk
—->¬ameË&& !t->¬ame->
ölv¨
)

588 
	`Áèl
("missög i∆v¨ f‹ %N\n", 
t
->
¬ame
);

590 if(
n
->
À·
->
›
 =
ODOTMETH
) {

591 if(!
n
->
À·
->left)

592 
	`Áèl
("mëhod cÆ»wôhouàª˚ivî: %+N", 
n
);

593 if(
t
 =
T
)

594 
	`Áèl
("mëhod cÆ»unknow¿ª˚ivîÅy≥: %+N", 
n
);

595 
as
 = 
	`nod
(
OAS
, 
	`tölv¨
(
t
), 
n
->
À·
->left);

597 if(!
n
->
li°
)

598 
	`Áèl
("n⁄-mëhod cÆ»tÿmëhod wôhouàfú°árg: %+N", 
n
);

599 if(
t
 !
T
)

600 
as
 = 
	`nod
(
OAS
, 
	`tölv¨
(
t
), 
n
->
li°
->n);

603 if(
as
 !
N
) {

604 
	`ty≥check
(&
as
, 
Et›
);

605 
nöô
 = 
	`li°
“öô, 
as
);

609 
as
 = 
	`nod
(
OAS2
, 
N
, N);

610 if(
‚
->
ty≥
->
ötu∂e
 > 1 && 
n
->
li°
 && !n->li°->
√xt
) {

613 
as
->
æi°
 = 
n
->
li°
;

614 
t
 = 
	`gëö¨gx
(
‚
->
ty≥
)->ty≥;Å;ÅÒ->
down
)

615 
as
->
li°
 = 
	`li°
◊s->li°, 
	`tölv¨
(
t
));

617 
Œ
 = 
n
->
li°
;

618 if(
‚
->
ty≥
->
thi°u∂e
 && 
n
->
À·
->
›
 !
ODOTMETH
)

619 
Œ
ˆl->
√xt
;

621 
t
 = 
	`gëö¨gx
(
‚
->
ty≥
)->ty≥;Å && 
Œ
;ÅÒ->
down
) {

622 
as
->
li°
 = 
	`li°
◊s->li°, 
	`tölv¨
(
t
));

623 
as
->
æi°
 = 
	`li°
◊s->æi°, 
Œ
->
n
);

624 
Œ
ˆl->
√xt
;

626 if(
Œ
 || 
t
)

627 
	`Áèl
("¨g cou¡ mism©ch: %#T v†%,H\n", 
	`gëö¨gx
(
‚
->
ty≥
), 
n
->
li°
);

630 i‡(
as
->
æi°
) {

631 
	`ty≥check
(&
as
, 
Et›
);

632 
nöô
 = 
	`li°
“öô, 
as
);

636 
Œ
 = 
öÃëv¨s
;Ül;Ülˆl->
√xt
) {

637 
as
 = 
	`nod
(
OAS
, 
Œ
->
n
, 
N
);

638 
	`ty≥check
(&
as
, 
Et›
);

639 
nöô
 = 
	`li°
“öô, 
as
);

642 
öÃëœbñ
 = 
	`√wœbñ
();

643 
body
 = 
	`ölsub°li°
(
‚
->
öl
);

645 
body
 = 
	`li°
(body, 
	`nod
(
OGOTO
, 
öÃëœbñ
, 
N
));

646 
body
 = 
	`li°
(body, 
	`nod
(
OLABEL
, 
öÃëœbñ
, 
N
));

648 
	`ty≥checkli°
(
body
, 
Et›
);

650 
ˇŒ
 = 
	`nod
(
OINLCALL
, 
N
, N);

651 
ˇŒ
->
nöô
 =Çinit;

652 
ˇŒ
->
nbody
 = 
body
;

653 
ˇŒ
->
æi°
 = 
öÃëv¨s
;

654 
ˇŒ
->
ty≥
 = 
n
->type;

655 
ˇŒ
->
ty≥check
 = 1;

657 
	`£éno
(
ˇŒ
, 
n
->
löío
);

659 *
≈
 = 
ˇŒ
;

661 
öl‚
 = 
ßveöl‚
;

667 if(
debug
['l'] >= 5) {

668 
body
 = 
‚
->
öl
;

669 
‚
->
öl
 = 
nû
;

670 
	`ö odñi°
(
ˇŒ
->
nbody
);

671 
Œ
=
ˇŒ
->
nbody
;Ül;Ülˆl->
√xt
)

672 if(
Œ
->
n
->
›
 =
OINLCALL
)

673 
	`ölc⁄v2°mt
(
Œ
->
n
);

674 
‚
->
öl
 = 
body
;

677 if(
debug
['m']>2)

678 
	`¥öt
("%L: A·î i∆öög %+N\n\n", 
n
->
löío
, *
≈
);

680 
	}
}

685 
Node
*

686 
	$ölv¨
(
Node
 *
v¨
)

688 
Node
 *
n
;

690 if(
debug
['m']>3)

691 
	`¥öt
("ölv¨ %+N\n", 
v¨
);

693 
n
 = 
	`√w«me
(
v¨
->
sym
);

694 
n
->
ty≥
 = 
v¨
->type;

695 
n
->
˛ass
 = 
PAUTO
;

696 
n
->
u£d
 = 1;

697 
n
->
cur‚
 = curfn;

698 
cur‚
->
d˛
 = 
	`li°
(cur‚->d˛, 
n
);

699  
n
;

700 
	}
}

703 
Node
*

704 
	$ªtv¨
(
Ty≥
 *
t
, 
i
)

706 
Node
 *
n
;

708 
	`¢¥öt
(
«mebuf
, “amebuf), ".r%d", 
i
);

709 
n
 = 
	`√w«me
(
	`lookup
(
«mebuf
));

710 
n
->
ty≥
 = 
t
->type;

711 
n
->
˛ass
 = 
PAUTO
;

712 
n
->
u£d
 = 1;

713 
n
->
cur‚
 = curfn;

714 
cur‚
->
d˛
 = 
	`li°
(cur‚->d˛, 
n
);

715  
n
;

716 
	}
}

718 
Node
*

719 
	$√wœbñ
()

721 
Node
 *
n
;

722 
œbñ
;

724 
œbñ
++;

725 
	`¢¥öt
(
«mebuf
, “amebuf), ".öÃë%.6d", 
œbñ
);

726 
n
 = 
	`√w«me
(
	`lookup
(
«mebuf
));

727 
n
->
ëy≥
 = 1;

728  
n
;

729 
	}
}

735 
NodeLi°
*

736 
	$ölsub°li°
(
NodeLi°
 *
Œ
)

738 
NodeLi°
 *
l
;

740 
l
 = 
nû
;

741 ; 
Œ
;Ülˆl->
√xt
)

742 
l
 = 
	`li°
÷, 
	`ölsub°
(
Œ
->
n
));

743  
l
;

744 
	}
}

746 
Node
*

747 
	$ölsub°
(
Node
 *
n
)

749 
Node
 *
m
, *
as
;

750 
NodeLi°
 *
Œ
;

752 if(
n
 =
N
)

753  
N
;

755 
n
->
›
) {

756 
ONAME
:

757 if(
n
->
ölv¨
) {

758 i‡(
debug
['m']>2)

759 
	`¥öt
 ("sub°ôutögÇamê%+N -> %+N\n", 
n
,Ç->
ölv¨
);

760  
n
->
ölv¨
;

762 i‡(
debug
['m']>2)

763 
	`¥öt
 ("nŸ sub°ôutögÇamê%+N\n", 
n
);

764  
n
;

766 
OLITERAL
:

767 
OTYPE
:

768  
n
;

770 
ORETURN
:

774 
m
 = 
	`nod
(
OGOTO
, 
öÃëœbñ
, 
N
);

775 
m
->
nöô
 = 
	`ölsub°li°
(
n
->ninit);

777 if(
öÃëv¨s
 && 
n
->
li°
) {

778 
as
 = 
	`nod
(
OAS2
, 
N
, N);

780 
Œ
=
öÃëv¨s
;Ül;Ülˆl->
√xt
)

781 
as
->
li°
 = 
	`li°
◊s->li°, 
Œ
->
n
);

782 
as
->
æi°
 = 
	`ölsub°li°
(
n
->
li°
);

783 
	`ty≥check
(&
as
, 
Et›
);

784 
m
->
nöô
 = 
	`li°
(m->nöô, 
as
);

787 
	`ty≥checkli°
(
m
->
nöô
, 
Et›
);

788 
	`ty≥check
(&
m
, 
Et›
);

790  
m
;

794 
m
 = 
	`nod
(
OXXX
, 
N
, N);

795 *
m
 = *
n
;

796 
m
->
nöô
 = 
nû
;

798 if(
n
->
›
 =
OCLOSURE
)

799 
	`Áèl
("ˇ¬Ÿ i∆öêfun˘i⁄ c⁄èöög closuª: %+N", 
n
);

801 
m
->
À·
 = 
	`ölsub°
(
n
->left);

802 
m
->
right
 = 
	`ölsub°
(
n
->right);

803 
m
->
li°
 = 
	`ölsub°li°
(
n
->list);

804 
m
->
æi°
 = 
	`ölsub°li°
(
n
->rlist);

805 
m
->
nöô
 = 
	`c⁄ˇt
(m->nöô, 
	`ölsub°li°
(
n
->ninit));

806 
m
->
¡e°
 = 
	`ölsub°
(
n
->ntest);

807 
m
->
nö¸
 = 
	`ölsub°
(
n
->nincr);

808 
m
->
nbody
 = 
	`ölsub°li°
(
n
->nbody);

809 
m
->
√l£
 = 
	`ölsub°li°
(
n
->nelse);

811  
m
;

812 
	}
}

816 
	$£énﬁi°
(
NodeLi°
 *
Œ
, 
 o
)

818 ;
Œ
;Œˆl->
√xt
)

819 
	`£éno
(
Œ
->
n
, 
 o
);

820 
	}
}

823 
	$£éno
(
Node
 *
n
, 
 o
)

825 if(!
n
)

829 if(
n
->
›
 !
ONAME
 ||Ç->
löío
 == 0)

830 
n
->
löío
 = 
 o
;

832 
	`£éno
(
n
->
À·
, 
 o
);

833 
	`£éno
(
n
->
right
, 
 o
);

834 
	`£énﬁi°
(
n
->
li°
, 
 o
);

835 
	`£énﬁi°
(
n
->
æi°
, 
 o
);

836 
	`£énﬁi°
(
n
->
nöô
, 
 o
);

837 
	`£éno
(
n
->
¡e°
, 
 o
);

838 
	`£éno
(
n
->
nö¸
, 
 o
);

839 
	`£énﬁi°
(
n
->
nbody
, 
 o
);

840 
	`£énﬁi°
(
n
->
√l£
, 
 o
);

841 
	}
}

	@lex.c

5 
	~<u.h
>

6 
	~<libc.h
>

7 
	~"go.h
"

8 
	~"y.èb.h
"

9 
	~<¨.h
>

11 #unde‡
gëc


12 #unde‡
ungëc


13 
	#gëc
 
ccgëc


	)

14 
	#ungëc
 
ccungëc


	)

16 
yych¨
;

17 
	gwödows
;

18 
	gyy¥ev
;

19 
	gyyœ°
;

21 
Àxöô
();

22 
Àxöô1
();

23 
Àxföi
();

24 
yytöô
();

25 
gëc
();

26 
ungëc
();

27 
öt32
 
gër
();

28 
escch¨
(, *, 
vl⁄g
*);

29 
addidú
(*);

30 
gëlöïøgma
();

31 *
	ggoos
, *
	ggﬂrch
, *
	gg‹oŸ
;

37 *
	m«me
;

38 *
	mvÆ
;

39 } 
	gex≥r
[] = {

41 {
nû
,Çil},

45 
	$addexp
(*
s
)

47 
i
;

49 
i
=0; 
ex≥r
[i].
«me
 !
nû
; i++) {

50 if(
	`°rcmp
(
ex≥r
[
i
].
«me
, 
s
) == 0) {

51 *
ex≥r
[
i
].
vÆ
 = 1;

56 
	`¥öt
("unknow¿ex≥rimíà%s\n", 
s
);

57 
	`exôs
("unknownÉxperiment");

58 
	}
}

61 
	$£ãxp
()

63 *
f
[20];

64 
i
, 
nf
;

67 
nf
 = 
	`gëfõlds
(
GOEXPERIMENT
, 
f
, 
	`√Àm
(f), 1, ",");

68 
i
=0; i<
nf
; i++)

69 
	`addexp
(
f
[
i
]);

70 
	}
}

73 
	$exp°rög
()

75 
i
;

76 
buf
[512];

78 
	`°r˝y
(
buf
, "X");

79 
i
=0; 
ex≥r
[i].
«me
 !
nû
; i++)

80 if(*
ex≥r
[
i
].
vÆ
)

81 
	`£¥öt
(
buf
+
	`°æí
(buf), buf+ buf, ",%s", 
ex≥r
[
i
].
«me
);

82 if(
	`°æí
(
buf
) == 1)

83 
	`°r˝y
(
buf
, "X,none");

84 
buf
[1] = ':';

85  
buf
;

86 
	}
}

91 
	$yy_isdigô
(
c
)

93  
c
 >0 && c <0xFF && 
	`isdigô
(c);

94 
	}
}

97 
	$yy_is•a˚
(
c
)

99  
c
 >0 && c <0xFF && 
	`is•a˚
(c);

100 
	}
}

103 
	$yy_ißÕha
(
c
)

105  
c
 >0 && c <0xFF && 
	`ißÕha
(c);

106 
	}
}

109 
	$yy_iß um
(
c
)

111  
c
 >0 && c <0xFF && 
	`iß um
(c);

112 
	}
}

115 #unde‡
isdigô


116 #unde‡
is•a˚


117 #unde‡
ißÕha


118 #unde‡
iß um


119 
	#isdigô
 
u£_yy_isdigô_ö°ód_of_isdigô


	)

120 
	#is•a˚
 
u£_yy_is•a˚_ö°ód_of_is•a˚


	)

121 
	#ißÕha
 
u£_yy_ißÕha_ö°ód_of_ißÕha


	)

122 
	#iß um
 
u£_yy_iß um_ö°ód_of_iß um


	)

124 
	#DBG
 if(!
debug
['x']){}
¥öt


	)

127 
	mEOF
 = -1,

131 
	$ußge
()

133 
	`¥öt
("gc: ußge: %cg [Êags] fûe.go...\n", 
thech¨
);

134 
	`¥öt
("flags:\n");

151 
	`¥öt
(" -D PATH interpretÜocal importsÑelativeÅoÅhis importÖath\n");

152 
	`¥öt
(" -I DIR search forÖackages in DIR\n");

153 
	`¥öt
(" -L show fullÖath in file:lineÖrints\n");

154 
	`¥öt
(" -N disable optimizations\n");

155 
	`¥öt
(" -SÖrintÅheássemblyÜanguage\n");

156 
	`¥öt
(" -VÖrintÅhe compiler version\n");

157 
	`¥öt
(" -WÖrintÅheÖarseÅreeáfterÅyping\n");

158 
	`¥öt
(" -dÖrint declarations\n");

159 
	`¥öt
(" -eÇoÜimit onÇumber ofÉrrorsÖrinted\n");

160 
	`¥öt
(" -fÖrint stack frame structure\n");

161 
	`¥öt
(" -hÖanic onánÉrror\n");

162 
	`¥öt
(" -l disable inlining\n");

163 
	`¥öt
(" -mÖrint optimization decisions\n");

164 
	`¥öt
(" -o file specify output file\n");

165 
	`¥öt
(" -pássumed importÖath forÅhis code\n");

166 
	`¥öt
(" -u disableÖackage unsafe\n");

167 
	`¥öt
(" -wÖrintÅype checking details\n");

168 
	`¥öt
(" -xÖrintÜexÅokens\n");

169 
	`exôs
("usage");

170 
	}
}

173 
	$Áu…
(
s
)

175 
	`USED
(
s
);

181 if(
nßvedîr‹s
 + 
√º‹s
 > 0)

182 
	`îr‹exô
();

183 
	`Áèl
("fault");

184 
	}
}

187 
	$maö
(
¨gc
, *
¨gv
[])

189 
i
, 
c
;

190 
NodeLi°
 *
l
, *
b©ch
;

191 *
p
;

193 #ifdef 
SIGBUS


194 
	`sig«l
(
SIGBUS
, 
Áu…
);

195 
	`sig«l
(
SIGSEGV
, 
Áu…
);

198 
loˇÕkg
 = 
	`mkpkg
(
	`°æô
(""));

199 
loˇÕkg
->
¥efix
 = "\"\"";

201 
buûtöpkg
 = 
	`mkpkg
(
	`°æô
("go.builtin"));

203 
go°rögpkg
 = 
	`mkpkg
(
	`°æô
("go.string"));

204 
go°rögpkg
->
«me
 = "go.string";

205 
go°rögpkg
->
¥efix
 = "go.string";

207 
ru¡imïkg
 = 
	`mkpkg
(
	`°æô
("runtime"));

208 
ru¡imïkg
->
«me
 = "runtime";

210 
ty≥pkg
 = 
	`mkpkg
(
	`°æô
("type"));

211 
ty≥pkg
->
«me
 = "type";

213 
wókty≥pkg
 = 
	`mkpkg
(
	`°æô
("weak.type"));

214 
wókty≥pkg
->
«me
 = "weak.type";

215 
wókty≥pkg
->
¥efix
 = "weak.type";

217 
unß„pkg
 = 
	`mkpkg
(
	`°æô
("unsafe"));

218 
unß„pkg
->
«me
 = "unsafe";

220 
g‹oŸ
 = 
	`gëg‹oŸ
();

221 
goos
 = 
	`gëgoos
();

222 
gﬂrch
 = 
the°rög
;

224 
	`£ãxp
();

226 
outfûe
 = 
nû
;

227 
ARGBEGIN
 {

229 
c
 = 
	`ARGC
();

230 if(
c
 >0 && c < (
debug
))

231 
debug
[
c
]++;

235 
outfûe
 = 
	`EARGF
(
	`ußge
());

239 
myimp‹ç©h
 = 
	`EARGF
(
	`ußge
());

243 
ß„mode
 = 1;

247 
loˇlimp‹t
 = 
	`EARGF
(
	`ußge
());

251 
	`addidú
(
	`EARGF
(
	`ußge
()));

255 
p
 = 
	`exp°rög
();

256 if(
	`°rcmp
(
p
, "X:none") == 0)

257 
p
 = "";

258 
	`¥öt
("%cg vîsi⁄ %s%s%s\n", 
thech¨
, 
	`gëgovîsi⁄
(), *
p
 ? " " : "",Ö);

259 
	`exôs
(0);

260 } 
ARGEND


266 if(
debug
['l'] <= 1)

267 
debug
['l'] = 1 - debug['l'];

269 if(
¨gc
 < 1)

270 
	`ußge
();

273 
compûög_ru¡ime
 = 
debug
['+'];

275 
∑th«me
 = 
	`mÆ
(1000);

276 if(
	`gëwd
(
∑th«me
, 999) == 0)

277 
	`°r˝y
(
∑th«me
, "/???");

279 if(
	`yy_ißÕha
(
∑th«me
[0]) &&Öathname[1] == ':') {

281 
wödows
 = 1;

284 
p
=
∑th«me
; *p;Ö++)

285 if(*
p
 == '\\')

286 *
p
 = '/';

289 
	`fmtö°Ælgo
();

290 
	`bëy≥öô
();

291 if(
width±r
 == 0)

292 
	`Áèl
("betypeinit failed");

294 
	`Àxöô
();

295 
	`ty≥öô
();

296 
	`Àxöô1
();

297 
	`yytöô
();

299 
blockgí
 = 1;

300 
d˛c⁄ãxt
 = 
PEXTERN
;

301 
√º‹s
 = 0;

302 
Àxlöío
 = 1;

304 
i
=0; i<
¨gc
; i++) {

305 
öfûe
 = 
¨gv
[
i
];

306 
	`löehi°
(
öfûe
, 0, 0);

308 
curio
.
öfûe
 = infile;

309 
curio
.
bö
 = 
	`B›í
(
öfûe
, 
OREAD
);

310 if(
curio
.
bö
 =
nû
) {

311 
	`¥öt
("›í %s: %r\n", 
öfûe
);

312 
	`îr‹exô
();

314 
curio
.
≥ekc
 = 0;

315 
curio
.
≥ekc1
 = 0;

316 
curio
.
∆£mi
 = 0;

318 
block
 = 1;

319 
iŸa
 = -1000000;

321 
	`yy∑r£
();

322 if(
nsy¡axîr‹s
 != 0)

323 
	`îr‹exô
();

325 
	`löehi°
(
nû
, 0, 0);

326 if(
curio
.
bö
 !
nû
)

327 
	`Bãrm
(
curio
.
bö
);

329 
	`ã°d˛°ack
();

330 
	`mk∑ckage
(
loˇÕkg
->
«me
);

331 
	`Àxföi
();

333 
ty≥checkok
 = 1;

334 if(
debug
['f'])

335 
	`‰ame
(1);

341 
	`de„rcheckwidth
();

342 
l
=
xt›
;Ü;Üˆ->
√xt
)

343 if(
l
->
n
->
›
 !
ODCL
 &&Ü->n->› !
OAS
)

344 
	`ty≥check
(&
l
->
n
, 
Et›
);

348 
l
=
xt›
;Ü;Üˆ->
√xt
)

349 if(
l
->
n
->
›
 =
ODCL
 ||Ü->n->› =
OAS
)

350 
	`ty≥check
(&
l
->
n
, 
Et›
);

351 
	`ªsumecheckwidth
();

354 
l
=
xt›
;Ü;Üˆ->
√xt
) {

355 if(
l
->
n
->
›
 =
ODCLFUNC
 ||Ü->n->› =
OCLOSURE
) {

356 
cur‚
 = 
l
->
n
;

357 
	`ßvìº‹s
();

358 
	`ty≥checkli°
(
l
->
n
->
nbody
, 
Et›
);

359 if(
√º‹s
 != 0)

360 
l
->
n
->
nbody
 = 
nû
;

364 
cur‚
 = 
nû
;

366 if(
nßvedîr‹s
+
√º‹s
)

367 
	`îr‹exô
();

370 i‡(
debug
['l'] > 1) {

373 
l
=
imp‹éi°
;Ü;Üˆ->
√xt
)

374 i‡(
l
->
n
->
öl
) {

375 
	`ßvìº‹s
();

376 
	`ty≥checköl
(
l
->
n
);

379 if(
nßvedîr‹s
+
√º‹s
)

380 
	`îr‹exô
();

383 i‡(
debug
['l']) {

385 
l
=
xt›
;Ü;Üˆ->
√xt
)

386 if(
l
->
n
->
›
 =
ODCLFUNC
)

387 
	`ˇnöl
(
l
->
n
);

390 
l
=
xt›
;Ü;Üˆ->
√xt
)

391 if(
l
->
n
->
›
 =
ODCLFUNC
)

392 
	`ölˇŒs
(
l
->
n
);

396 if(!
debug
['N'])

397 
	`esˇ≥s
(
xt›
);

400 
l
=
xt›
;Ü;Üˆ->
√xt
)

401 if(
l
->
n
->
›
 =
ODCLFUNC
)

402 
	`funccompûe
(
l
->
n
, 0);

404 if(
nßvedîr‹s
+
√º‹s
 == 0)

405 
	`‚öô
(
xt›
);

409 
˛osuªs
) {

410 
b©ch
 = 
˛osuªs
;

411 
˛osuªs
 = 
nû
;

412 if(
debug
['l'])

413 
l
=
b©ch
;Ü;Üˆ->
√xt
)

414 
	`ölˇŒs
(
l
->
n
);

415 if(!
debug
['N'])

416 
	`esˇ≥s
(
b©ch
);

417 
l
=
b©ch
;Ü;Üˆ->
√xt
)

418 
	`funccompûe
(
l
->
n
, 1);

422 
l
=
exã∫d˛
;Ü;Üˆ->
√xt
)

423 if(
l
->
n
->
›
 =
ONAME
)

424 
	`ty≥check
(&
l
->
n
, 
Erv
);

426 if(
√º‹s
+
nßvedîr‹s
)

427 
	`îr‹exô
();

429 
	`dumpobj
();

431 if(
√º‹s
+
nßvedîr‹s
)

432 
	`îr‹exô
();

434 
	`Êushîr‹s
();

435 
	`exôs
(0);

437 
	}
}

440 
	$ßvìº‹s
()

442 
nßvedîr‹s
 +
√º‹s
;

443 
√º‹s
 = 0;

444 
	}
}

450 
	#HEADER_IO
(
cmd
, 
f
, 
h
Ë
	`cmd
(f, h.
«me
, (h.name)) != (h.name)\

451 || 
	`cmd
(
f
, 
h
.
d©e
, (h.date)) != (h.date)\

452 || 
	`cmd
(
f
, 
h
.
uid
, (h.uid)) != (h.uid)\

453 || 
	`cmd
(
f
, 
h
.
gid
, (h.gid)) != (h.gid)\

454 || 
	`cmd
(
f
, 
h
.
mode
, (h.mode)) != (h.mode)\

455 || 
	`cmd
(
f
, 
h
.
size
, (h.size)) != (h.size)\

456 || 
	`cmd
(
f
, 
h
.
fmag
, (h.fmag)Ë!(h.fmag)

	)

459 
	$¨size
(
Biobuf
 *
b
, *
«me
)

461 
¨_hdr
 
a
;

463 i‡(
	`HEADER_IO
(
Bªad
, 
b
, 
a
))

466 if(
	`°∫cmp
(
a
.
«me
,Çame, 
	`°æí
(name)) != 0)

469  
	`©oi
(
a
.
size
);

470 
	}
}

473 
	$skùt›kgdef
(
Biobuf
 *
b
)

475 *
p
;

476 
sz
;

479 if((
p
 = 
	`Brdlöe
(
b
, '\n')Ë=
nû
)

481 if(
	`Blöñí
(
b
) != 8)

483 if(
	`memcmp
(
p
, "!<arch>\n", 8) != 0)

486 
sz
 = 
	`¨size
(
b
, "__.SYMDEF");

487 if(
sz
 < 0)

489 
	`B£ek
(
b
, 
sz
, 1);

491 
sz
 = 
	`¨size
(
b
, "__.PKGDEF");

492 if(
sz
 <= 0)

495 
	}
}

498 
	$addidú
(* 
dú
)

500 
Idú
** 
µ
;

502 if(
dú
 =
nû
)

505 
µ
 = &
idús
; *µ !
nû
;Ö∞&(*µ)->
lök
)

507 *
µ
 = 
	`mÆ
((
Idú
));

508 (*
µ
)->
lök
 = 
nû
;

509 (*
µ
)->
dú
 = dir;

510 
	}
}

514 
	$i¶oˇ ame
(
Sålô
 *
«me
)

516 if(
«me
->
Àn
 >1 &&Çame->
s
[0] == '/')

518 if(
wödows
 && 
«me
->
Àn
 >= 3 &&

519 
	`yy_ißÕha
(
«me
->
s
[0]) &&Çame->s[1] == ':' &&Çame->s[2] == '/')

521 if(
«me
->
Àn
 >2 && 
	`°∫cmp
“ame->
s
, "./", 2) == 0)

523 if(
«me
->
Àn
 =1 && 
	`°∫cmp
“ame->
s
, ".", 1) == 0)

525 if(
«me
->
Àn
 >3 && 
	`°∫cmp
“ame->
s
, "../", 3) == 0)

527 if(
«me
->
Àn
 =2 && 
	`°∫cmp
“ame->
s
, "..", 2) == 0)

530 
	}
}

533 
	$födpkg
(
Sålô
 *
«me
)

535 
Idú
 *
p
;

536 *
q
;

538 if(
	`i¶oˇ ame
(
«me
)) {

539 if(
ß„mode
)

544 
	`¢¥öt
(
«mebuf
, “amebuf), "%Z.a", 
«me
);

545 if(
	`ac˚ss
(
«mebuf
, 0) >= 0)

547 
	`¢¥öt
(
«mebuf
, “amebuf), "%Z.%c", 
«me
, 
thech¨
);

548 if(
	`ac˚ss
(
«mebuf
, 0) >= 0)

556 
q
 = 
	`mÆ
(
«me
->
Àn
+1);

557 
	`memmove
(
q
, 
«me
->
s
,Çame->
Àn
);

558 
q
[
«me
->
Àn
] = '\0';

559 
	`˛ó¬ame
(
q
);

560 if(
	`°æí
(
q
Ë!
«me
->
Àn
 || 
	`memcmp
(q,Çame->
s
,Çame->len) != 0) {

561 
	`yyîr‹
("n⁄-ˇn⁄iˇ»imp‹à∑th %Z (should bê%s)", 
«me
, 
q
);

565 
p
 = 
idús
;Ö !
nû
;Ö =Ö->
lök
) {

566 
	`¢¥öt
(
«mebuf
, “amebuf), "%s/%Z.a", 
p
->
dú
, 
«me
);

567 if(
	`ac˚ss
(
«mebuf
, 0) >= 0)

569 
	`¢¥öt
(
«mebuf
, “amebuf), "%s/%Z.%c", 
p
->
dú
, 
«me
, 
thech¨
);

570 if(
	`ac˚ss
(
«mebuf
, 0) >= 0)

573 if(
g‹oŸ
 !
nû
) {

574 
	`¢¥öt
(
«mebuf
, “amebuf), "%s/pkg/%s_%s/%Z.a", 
g‹oŸ
, 
goos
, 
gﬂrch
, 
«me
);

575 if(
	`ac˚ss
(
«mebuf
, 0) >= 0)

577 
	`¢¥öt
(
«mebuf
, “amebuf), "%s/pkg/%s_%s/%Z.%c", 
g‹oŸ
, 
goos
, 
gﬂrch
, 
«me
, 
thech¨
);

578 if(
	`ac˚ss
(
«mebuf
, 0) >= 0)

582 
	}
}

585 
	$Ákeimp‹t
()

587 
imp‹çkg
 = 
	`mkpkg
(
	`°æô
("fake"));

588 
	`ˇ¬edimp‹ts
("fake.6", "$$\n");

589 
	}
}

592 
	$imp‹tfûe
(
VÆ
 *
f
, 
löe
)

594 
Biobuf
 *
imp
;

595 *
fûe
, *
p
, *
q
;

596 
öt32
 
c
;

597 
Àn
;

598 
Sålô
 *
∑th
;

599 *
˛ónbuf
, *
¥efix
;

601 
	`USED
(
löe
);

605 if(
f
->
˘y≥
 !
CTSTR
) {

606 
	`yyîr‹
("import statementÇotá string");

607 
	`Ákeimp‹t
();

611 if(
f
->
u
.
svÆ
->
Àn
 == 0) {

612 
	`yyîr‹
("importÖath isÉmpty");

613 
	`Ákeimp‹t
();

617 if(
	`isbadimp‹t
(
f
->
u
.
svÆ
)) {

618 
	`Ákeimp‹t
();

626 if(
	`°rcmp
(
f
->
u
.
svÆ
->
s
, "main") == 0) {

627 
	`yyîr‹
("cannot import \"main\"");

628 
	`îr‹exô
();

631 if(
myimp‹ç©h
 !
nû
 && 
	`°rcmp
(
f
->
u
.
svÆ
->
s
, myimportpath) == 0) {

632 
	`yyîr‹
("imp‹à\"%Z\" whûêcompûögÅh©Öackagê(imp‹àcy˛e)", 
f
->
u
.
svÆ
);

633 
	`îr‹exô
();

636 if(
	`°rcmp
(
f
->
u
.
svÆ
->
s
, "unsafe") == 0) {

637 if(
ß„mode
) {

638 
	`yyîr‹
("cannot importÖackage unsafe");

639 
	`îr‹exô
();

641 
imp‹çkg
 = 
	`mkpkg
(
f
->
u
.
svÆ
);

642 
	`ˇ¬edimp‹ts
("unß„.6", 
unß„imp‹t
);

646 
∑th
 = 
f
->
u
.
svÆ
;

647 if(
	`i¶oˇ ame
(
∑th
)) {

648 if(
∑th
->
s
[0] == '/') {

649 
	`yyîr‹
("importÖath cannot beábsoluteÖath");

650 
	`Ákeimp‹t
();

653 
¥efix
 = 
∑th«me
;

654 if(
loˇlimp‹t
 !
nû
)

655 
¥efix
 = 
loˇlimp‹t
;

656 
˛ónbuf
 = 
	`mÆ
(
	`°æí
(
¥efix
Ë+ såÀn(
∑th
->
s
) + 2);

657 
	`°r˝y
(
˛ónbuf
, 
¥efix
);

658 
	`°rˇt
(
˛ónbuf
, "/");

659 
	`°rˇt
(
˛ónbuf
, 
∑th
->
s
);

660 
	`˛ó¬ame
(
˛ónbuf
);

661 
∑th
 = 
	`°æô
(
˛ónbuf
);

664 if(!
	`födpkg
(
∑th
)) {

665 
	`yyîr‹
("ˇn'àföd imp‹t: \"%Z\"", 
f
->
u
.
svÆ
);

666 
	`îr‹exô
();

668 
imp‹çkg
 = 
	`mkpkg
(
∑th
);

670 
imp
 = 
	`B›í
(
«mebuf
, 
OREAD
);

671 if(
imp
 =
nû
) {

672 
	`yyîr‹
("ˇn'à›í imp‹t: \"%Z\": %r", 
f
->
u
.
svÆ
);

673 
	`îr‹exô
();

675 
fûe
 = 
	`°rdup
(
«mebuf
);

677 
Àn
 = 
	`°æí
(
«mebuf
);

678 if(
Àn
 > 2 && 
«mebuf
[len-2] == '.' &&Çamebuf[len-1] == 'a') {

679 if(!
	`skùt›kgdef
(
imp
)) {

680 
	`yyîr‹
("imp‹à%s:ÇŸáÖackagêfûe", 
fûe
);

681 
	`îr‹exô
();

686 
p
 = 
	`Brd°r
(
imp
, '\n', 1);

687 if(
	`°rcmp
(
p
, "emptyárchive") != 0) {

688 if(
	`°∫cmp
(
p
, "go object ", 10) != 0) {

689 
	`yyîr‹
("imp‹à%s:ÇŸá gÿobje˘ fûe", 
fûe
);

690 
	`îr‹exô
();

692 
q
 = 
	`sm¥öt
("%†%†%†%s", 
	`gëgoos
(), 
the°rög
, 
	`gëgovîsi⁄
(), 
	`exp°rög
());

693 if(
	`°rcmp
(
p
+10, 
q
) != 0) {

694 
	`yyîr‹
("imp‹à%s: obje˘ i†[%s]Éx≥˘ed [%s]", 
fûe
, 
p
+10, 
q
);

695 
	`îr‹exô
();

697 
	`‰ì
(
q
);

702 
	`löehi°
(
fûe
 + 
Àn
 - 
∑th
->len - 2, -1, 1);

708 
pushedio
 = 
curio
;

709 
curio
.
bö
 = 
imp
;

710 
curio
.
≥ekc
 = 0;

711 
curio
.
≥ekc1
 = 0;

712 
curio
.
öfûe
 = 
fûe
;

713 
curio
.
∆£mi
 = 0;

714 
ty≥checkok
 = 1;

717 
c
 = 
	`gëc
();

718 if(
c
 =
EOF
)

720 if(
c
 != '$')

722 
c
 = 
	`gëc
();

723 if(
c
 =
EOF
)

725 if(
c
 != '$')

729 
	`yyîr‹
("nÿimp‹àö \"%Z\"", 
f
->
u
.
svÆ
);

730 
	`unimp‹tfûe
();

731 
	}
}

734 
	$unimp‹tfûe
()

736 if(
curio
.
bö
 !
nû
) {

737 
	`Bãrm
(
curio
.
bö
);

738 
curio
.
bö
 = 
nû
;

740 
Àxlöío
--;

742 
curio
 = 
pushedio
;

743 
pushedio
.
bö
 = 
nû
;

744 
öˇ¬edimp‹t
 = 0;

745 
ty≥checkok
 = 0;

746 
	}
}

749 
	$ˇ¬edimp‹ts
(*
fûe
, *
˝
)

751 
Àxlöío
++;

753 
pushedio
 = 
curio
;

754 
curio
.
bö
 = 
nû
;

755 
curio
.
≥ekc
 = 0;

756 
curio
.
≥ekc1
 = 0;

757 
curio
.
öfûe
 = 
fûe
;

758 
curio
.
˝
 = cp;

759 
curio
.
∆£mi
 = 0;

760 
curio
.
imp‹tß„
 = 0;

762 
ty≥checkok
 = 1;

763 
öˇ¬edimp‹t
 = 1;

764 
	}
}

767 
	$is‰og
(
c
)

770 if(
c
 < 0)

772 if(
c
 < ' ') {

773 if(
c
 == '\n' || c== '\r' || c == '\t')

777 if(0x7‡<
c
 && c <= 0xa0)

780 
	}
}

782 
Lo›hack
 
	tLo›hack
;

783 
	sLo›hack
 {

784 
	mv
;

785 
Lo›hack
 *
	m√xt
;

788 
öt32


789 
	$_yyÀx
()

791 
c
, 
c1
, 
˛í
, 
escÊag
, 
n˝
;

792 
vl⁄g
 
v
;

793 *
˝
, *
ï
;

794 
Ru√
 
ru√
;

795 
Sym
 *
s
;

796 
Lo›hack
 *
l°k
;

797 
Lo›hack
 *
h
;

799 
¥evlöío
 = 
löío
;

801 
l0
:

802 
c
 = 
	`gëc
();

803 if(
	`yy_is•a˚
(
c
)) {

804 if(
c
 ='\n' && 
curio
.
∆£mi
) {

805 
	`ungëc
(
c
);

806 
	`DBG
("lex: implicit semi\n");

809 
l0
;

812 
löío
 = 
Àxlöío
;

814 if(
c
 >
Ru√£lf
) {

816 
˝
 = 
Àxbuf
;

817 
ï
 = 
Àxbuf
+Üexbuf;

818 
èÕh
;

821 if(
	`yy_ißÕha
(
c
)) {

822 
˝
 = 
Àxbuf
;

823 
ï
 = 
Àxbuf
+Üexbuf;

824 
èÕh
;

827 if(
	`yy_isdigô
(
c
))

828 
äum
;

830 
c
) {

831 
EOF
:

832 
löío
 = 
¥evlöío
;

833 
	`ungëc
(
EOF
);

837 
˝
 = 
Àxbuf
;

838 
ï
 = 
Àxbuf
+Üexbuf;

839 
èÕh
;

842 
c1
 = 
	`gëc
();

843 if(
	`yy_isdigô
(
c1
)) {

844 
˝
 = 
Àxbuf
;

845 
ï
 = 
Àxbuf
+Üexbuf;

846 *
˝
++ = 
c
;

847 
c
 = 
c1
;

848 
ˇ£dŸ
;

850 if(
c1
 == '.') {

851 
c1
 = 
	`gëc
();

852 if(
c1
 == '.') {

853 
c
 = 
LDDD
;

854 
lx
;

856 
	`ungëc
(
c1
);

857 
c1
 = '.';

863 
	`°r˝y
(
Àxbuf
, "\"<string>\"");

864 
˝
 = 
	`mÆ
(8);

865 
˛í
 = (
öt32
);

866 
n˝
 = 8;

869 if(
˛í
+
UTFmax
 > 
n˝
) {

870 
˝
 = 
	`ªmÆ
(˝, 
n˝
,Çcp);

871 
n˝
 +=Çcp;

873 if(
	`escch¨
('"', &
escÊag
, &
v
))

875 if(
v
 < 
Ru√£lf
 || 
escÊag
) {

876 
˝
[
˛í
++] = 
v
;

878 
ru√
 = 
v
;

879 
c
 = 
	`ru√Àn
(
ru√
);

880 
	`ru√toch¨
(
˝
+
˛í
, &
ru√
);

881 
˛í
 +
c
;

884 
°æô
;

888 
	`°r˝y
(
Àxbuf
, "`<string>`");

889 
˝
 = 
	`mÆ
(8);

890 
˛í
 = (
öt32
);

891 
n˝
 = 8;

894 if(
˛í
+
UTFmax
 > 
n˝
) {

895 
˝
 = 
	`ªmÆ
(˝, 
n˝
,Çcp);

896 
n˝
 +=Çcp;

898 
c
 = 
	`gër
();

899 if(
c
 == '\r')

901 if(
c
 =
EOF
) {

902 
	`yyîr‹
("eof in string");

905 if(
c
 == '`')

907 
ru√
 = 
c
;

908 
˛í
 +
	`ru√toch¨
(
˝
+˛í, &
ru√
);

911 
°æô
:

912 *(
öt32
*)
˝
 = 
˛í
-(int32);

914 
˝
[
˛í
++] = 0;

915 } 
˛í
 & 
MAXALIGN
);

916 
yylvÆ
.
vÆ
.
u
.
svÆ
 = (
Sålô
*)
˝
;

917 
yylvÆ
.
vÆ
.
˘y≥
 = 
CTSTR
;

918 
	`DBG
("lex: stringÜiteral\n");

919 
	`°r˝y
(
lôbuf
, "stringÜiteral");

920  
LLITERAL
;

924 if(
	`escch¨
('\'', &
escÊag
, &
v
)) {

925 
	`yyîr‹
("empty characterÜiteral or unescaped ' in characterÜiteral");

926 
v
 = '\'';

928 if(!
	`escch¨
('\'', &
escÊag
, &
v
)) {

929 
	`yyîr‹
("missing '");

930 
	`ungëc
(
v
);

932 
yylvÆ
.
vÆ
.
u
.
xvÆ
 = 
	`mÆ
((*yylval.val.u.xval));

933 
	`mpmovecfix
(
yylvÆ
.
vÆ
.
u
.
xvÆ
, 
v
);

934 
yylvÆ
.
vÆ
.
˘y≥
 = 
CTRUNE
;

935 
	`DBG
("lex: codepointÜiteral\n");

936 
	`°r˝y
(
lôbuf
, "stringÜiteral");

937  
LLITERAL
;

940 
c1
 = 
	`gëc
();

941 if(
c1
 == '*') {

942 
∆
;

944 
∆
 = 0;

946 
c
 = 
	`gër
();

947 if(
c
 == '\n')

948 
∆
 = 1;

949 
c
 == '*') {

950 
c
 = 
	`gër
();

951 if(
c
 == '/') {

952 if(
∆
)

953 
	`ungëc
('\n');

954 
l0
;

956 if(
c
 == '\n')

957 
∆
 = 1;

959 if(
c
 =
EOF
) {

960 
	`yyîr‹
("eof in comment");

961 
	`îr‹exô
();

965 if(
c1
 == '/') {

966 
c
 = 
	`gëlöïøgma
();

968 if(
c
 ='\n' || c =
EOF
) {

969 
	`ungëc
(
c
);

970 
l0
;

972 
c
 = 
	`gër
();

975 if(
c1
 == '=') {

976 
c
 = 
ODIV
;

977 
as›
;

982 
c1
 = 
	`gëc
();

983 if(
c1
 == '=') {

984 
c
 = 
LCOLAS
;

985 
lx
;

990 
c1
 = 
	`gëc
();

991 if(
c1
 == '=') {

992 
c
 = 
OMUL
;

993 
as›
;

998 
c1
 = 
	`gëc
();

999 if(
c1
 == '=') {

1000 
c
 = 
OMOD
;

1001 
as›
;

1006 
c1
 = 
	`gëc
();

1007 if(
c1
 == '+') {

1008 
c
 = 
LINC
;

1009 
lx
;

1011 if(
c1
 == '=') {

1012 
c
 = 
OADD
;

1013 
as›
;

1018 
c1
 = 
	`gëc
();

1019 if(
c1
 == '-') {

1020 
c
 = 
LDEC
;

1021 
lx
;

1023 if(
c1
 == '=') {

1024 
c
 = 
OSUB
;

1025 
as›
;

1030 
c1
 = 
	`gëc
();

1031 if(
c1
 == '>') {

1032 
c
 = 
LRSH
;

1033 
c1
 = 
	`gëc
();

1034 if(
c1
 == '=') {

1035 
c
 = 
ORSH
;

1036 
as›
;

1040 if(
c1
 == '=') {

1041 
c
 = 
LGE
;

1042 
lx
;

1044 
c
 = 
LGT
;

1048 
c1
 = 
	`gëc
();

1049 if(
c1
 == '<') {

1050 
c
 = 
LLSH
;

1051 
c1
 = 
	`gëc
();

1052 if(
c1
 == '=') {

1053 
c
 = 
OLSH
;

1054 
as›
;

1058 if(
c1
 == '=') {

1059 
c
 = 
LLE
;

1060 
lx
;

1062 if(
c1
 == '-') {

1063 
c
 = 
LCOMM
;

1064 
lx
;

1066 
c
 = 
LLT
;

1070 
c1
 = 
	`gëc
();

1071 if(
c1
 == '=') {

1072 
c
 = 
LEQ
;

1073 
lx
;

1078 
c1
 = 
	`gëc
();

1079 if(
c1
 == '=') {

1080 
c
 = 
LNE
;

1081 
lx
;

1086 
c1
 = 
	`gëc
();

1087 if(
c1
 == '&') {

1088 
c
 = 
LANDAND
;

1089 
lx
;

1091 if(
c1
 == '^') {

1092 
c
 = 
LANDNOT
;

1093 
c1
 = 
	`gëc
();

1094 if(
c1
 == '=') {

1095 
c
 = 
OANDNOT
;

1096 
as›
;

1100 if(
c1
 == '=') {

1101 
c
 = 
OAND
;

1102 
as›
;

1107 
c1
 = 
	`gëc
();

1108 if(
c1
 == '|') {

1109 
c
 = 
LOROR
;

1110 
lx
;

1112 if(
c1
 == '=') {

1113 
c
 = 
OOR
;

1114 
as›
;

1119 
c1
 = 
	`gëc
();

1120 if(
c1
 == '=') {

1121 
c
 = 
OXOR
;

1122 
as›
;

1146 if(
lo›hack
 || 
l°k
 !
nû
) {

1147 
h
 = 
	`mÆloc
( *h);

1148 
h
->
v
 = 
lo›hack
;

1149 
h
->
√xt
 = 
l°k
;

1150 
l°k
 = 
h
;

1151 
lo›hack
 = 0;

1153 
lx
;

1156 if(
l°k
 !
nû
) {

1157 
h
 = 
l°k
;

1158 
lo›hack
 = 
h
->
v
;

1159 
l°k
 = 
h
->
√xt
;

1160 
	`‰ì
(
h
);

1162 
lx
;

1164 if(
lo›hack
 == 1) {

1165 
	`DBG
("%LÜex: LBODY\n", 
Àxlöío
);

1166 
lo›hack
 = 0;

1167  
LBODY
;

1169 
lx
;

1172 
lx
;

1174 
	`ungëc
(
c1
);

1176 
lx
:

1177 if(
c
 > 0xff)

1178 
	`DBG
("%LÜex: TOKEN %s\n", 
Àxlöío
, 
	`Àx«me
(
c
));

1180 
	`DBG
("%LÜex: TOKEN '%c'\n", 
Àxlöío
, 
c
);

1181 if(
	`is‰og
(
c
)) {

1182 
	`yyîr‹
("ûÀgÆ ch¨a˘î 0x%ux", 
c
);

1183 
l0
;

1185 if(
imp‹çkg
 =
nû
 && (
c
 == '#' || c == '$' || c == '?' || c == '@' || c == '\\')) {

1186 
	`yyîr‹
("%s: u√x≥˘ed %c", "sy¡axÉº‹", 
c
);

1187 
l0
;

1189  
c
;

1191 
as›
:

1192 
yylvÆ
.
i
 = 
c
;

1193 
	`DBG
("Àx: TOKEN ASOP %c\n", 
c
);

1194  
LASOP
;

1196 
èÕh
:

1202 if(
˝
+10 >
ï
) {

1203 
	`yyîr‹
("identifierÅooÜong");

1204 
	`îr‹exô
();

1206 if(
c
 >
Ru√£lf
) {

1207 
	`ungëc
(
c
);

1208 
ru√
 = 
	`gër
();

1210 if(!
	`ißÕh¨u√
(
ru√
Ë&& !
	`isdigôru√
‘u√Ë&& (
imp‹çkg
 =
nû
 ||Ñune != 0xb7))

1211 
	`yyîr‹
("övÆid idítifõ∏ch¨a˘î 0x%ux", 
ru√
);

1212 
˝
 +
	`ru√toch¨
(˝, &
ru√
);

1213 } if(!
	`yy_iß um
(
c
) && c != '_')

1216 *
˝
++ = 
c
;

1217 
c
 = 
	`gëc
();

1219 *
˝
 = 0;

1220 
	`ungëc
(
c
);

1222 
s
 = 
	`lookup
(
Àxbuf
);

1223 
s
->
Àxiˇl
) {

1224 
LIGNORE
:

1225 
l0
;

1227 
LFOR
:

1228 
LIF
:

1229 
LSWITCH
:

1230 
LSELECT
:

1231 
lo›hack
 = 1;

1235 
	`DBG
("Àx: %S %s\n", 
s
, 
	`Àx«me
(s->
Àxiˇl
));

1236 
yylvÆ
.
sym
 = 
s
;

1237  
s
->
Àxiˇl
;

1239 
äum
:

1240 
˝
 = 
Àxbuf
;

1241 
ï
 = 
Àxbuf
+Üexbuf;

1242 if(
c
 != '0') {

1244 if(
˝
+10 >
ï
) {

1245 
	`yyîr‹
("identifierÅooÜong");

1246 
	`îr‹exô
();

1248 *
˝
++ = 
c
;

1249 
c
 = 
	`gëc
();

1250 if(
	`yy_isdigô
(
c
))

1252 
dc
;

1255 *
˝
++ = 
c
;

1256 
c
 = 
	`gëc
();

1257 if(
c
 == 'x' || c == 'X') {

1259 if(
˝
+10 >
ï
) {

1260 
	`yyîr‹
("identifierÅooÜong");

1261 
	`îr‹exô
();

1263 *
˝
++ = 
c
;

1264 
c
 = 
	`gëc
();

1265 if(
	`yy_isdigô
(
c
))

1267 if(
c
 >= 'a' && c <= 'f')

1269 if(
c
 >= 'A' && c <= 'F')

1271 if(
˝
 =
Àxbuf
+2)

1272 
	`yyîr‹
("malformed hex constant");

1273 
ncu
;

1277 if(
c
 == 'p')

1278 
ˇ£p
;

1280 
c1
 = 0;

1282 if(
˝
+10 >
ï
) {

1283 
	`yyîr‹
("identifierÅooÜong");

1284 
	`îr‹exô
();

1286 if(!
	`yy_isdigô
(
c
))

1288 if(
c
 < '0' || c > '7')

1289 
c1
 = 1;

1290 *
˝
++ = 
c
;

1291 
c
 = 
	`gëc
();

1293 if(
c
 == '.')

1294 
ˇ£dŸ
;

1295 if(
c
 == 'e' || c == 'E')

1296 
ˇ£e
;

1297 if(
c
 == 'i')

1298 
ˇ£i
;

1299 if(
c1
)

1300 
	`yyîr‹
("malformed octal constant");

1301 
ncu
;

1303 
dc
:

1304 if(
c
 == '.')

1305 
ˇ£dŸ
;

1306 if(
c
 == 'e' || c == 'E')

1307 
ˇ£e
;

1308 if(
c
 == 'p' || c == 'P')

1309 
ˇ£p
;

1310 if(
c
 == 'i')

1311 
ˇ£i
;

1313 
ncu
:

1314 *
˝
 = 0;

1315 
	`ungëc
(
c
);

1317 
yylvÆ
.
vÆ
.
u
.
xvÆ
 = 
	`mÆ
((*yylval.val.u.xval));

1318 
	`m∑tofix
(
yylvÆ
.
vÆ
.
u
.
xvÆ
, 
Àxbuf
);

1319 if(
yylvÆ
.
vÆ
.
u
.
xvÆ
->
ovf
) {

1320 
	`yyîr‹
("overflow in constant");

1321 
	`mpmovecfix
(
yylvÆ
.
vÆ
.
u
.
xvÆ
, 0);

1323 
yylvÆ
.
vÆ
.
˘y≥
 = 
CTINT
;

1324 
	`DBG
("lex: integerÜiteral\n");

1325 
	`°r˝y
(
lôbuf
, "literal ");

1326 
	`°rˇt
(
lôbuf
, 
Àxbuf
);

1327  
LLITERAL
;

1329 
ˇ£dŸ
:

1331 if(
˝
+10 >
ï
) {

1332 
	`yyîr‹
("identifierÅooÜong");

1333 
	`îr‹exô
();

1335 *
˝
++ = 
c
;

1336 
c
 = 
	`gëc
();

1337 if(!
	`yy_isdigô
(
c
))

1340 if(
c
 == 'i')

1341 
ˇ£i
;

1342 if(
c
 != 'e' && c != 'E')

1343 
ˇ£out
;

1345 
ˇ£e
:

1346 *
˝
++ = 'e';

1347 
c
 = 
	`gëc
();

1348 if(
c
 == '+' || c == '-') {

1349 *
˝
++ = 
c
;

1350 
c
 = 
	`gëc
();

1352 if(!
	`yy_isdigô
(
c
))

1353 
	`yyîr‹
("malformed fp constantÉxponent");

1354 
	`yy_isdigô
(
c
)) {

1355 if(
˝
+10 >
ï
) {

1356 
	`yyîr‹
("identifierÅooÜong");

1357 
	`îr‹exô
();

1359 *
˝
++ = 
c
;

1360 
c
 = 
	`gëc
();

1362 if(
c
 == 'i')

1363 
ˇ£i
;

1364 
ˇ£out
;

1366 
ˇ£p
:

1367 *
˝
++ = 'p';

1368 
c
 = 
	`gëc
();

1369 if(
c
 == '+' || c == '-') {

1370 *
˝
++ = 
c
;

1371 
c
 = 
	`gëc
();

1373 if(!
	`yy_isdigô
(
c
))

1374 
	`yyîr‹
("malformed fp constantÉxponent");

1375 
	`yy_isdigô
(
c
)) {

1376 if(
˝
+10 >
ï
) {

1377 
	`yyîr‹
("identifierÅooÜong");

1378 
	`îr‹exô
();

1380 *
˝
++ = 
c
;

1381 
c
 = 
	`gëc
();

1383 if(
c
 == 'i')

1384 
ˇ£i
;

1385 
ˇ£out
;

1387 
ˇ£i
:

1389 *
˝
 = 0;

1390 
yylvÆ
.
vÆ
.
u
.
cvÆ
 = 
	`mÆ
((*yylval.val.u.cval));

1391 
	`mpmovecÊt
(&
yylvÆ
.
vÆ
.
u
.
cvÆ
->
ªÆ
, 0.0);

1392 
	`m∑toÊt
(&
yylvÆ
.
vÆ
.
u
.
cvÆ
->
imag
, 
Àxbuf
);

1393 if(
yylvÆ
.
vÆ
.
u
.
cvÆ
->
imag
.vÆ.
ovf
) {

1394 
	`yyîr‹
("overflow in imaginary constant");

1395 
	`mpmovecÊt
(&
yylvÆ
.
vÆ
.
u
.
cvÆ
->
ªÆ
, 0.0);

1397 
yylvÆ
.
vÆ
.
˘y≥
 = 
CTCPLX
;

1398 
	`DBG
("lex: imaginaryÜiteral\n");

1399 
	`°r˝y
(
lôbuf
, "literal ");

1400 
	`°rˇt
(
lôbuf
, 
Àxbuf
);

1401  
LLITERAL
;

1403 
ˇ£out
:

1404 *
˝
 = 0;

1405 
	`ungëc
(
c
);

1407 
yylvÆ
.
vÆ
.
u
.
fvÆ
 = 
	`mÆ
((*yylval.val.u.fval));

1408 
	`m∑toÊt
(
yylvÆ
.
vÆ
.
u
.
fvÆ
, 
Àxbuf
);

1409 if(
yylvÆ
.
vÆ
.
u
.
fvÆ
->vÆ.
ovf
) {

1410 
	`yyîr‹
("overflow in float constant");

1411 
	`mpmovecÊt
(
yylvÆ
.
vÆ
.
u
.
fvÆ
, 0.0);

1413 
yylvÆ
.
vÆ
.
˘y≥
 = 
CTFLT
;

1414 
	`DBG
("lex: floatingÜiteral\n");

1415 
	`°r˝y
(
lôbuf
, "literal ");

1416 
	`°rˇt
(
lôbuf
, 
Àxbuf
);

1417  
LLITERAL
;

1418 
	}
}

1427 
	$gëlöïøgma
()

1429 
i
, 
c
, 
n
;

1430 *
˝
, *
ï
, *
löï
;

1431 
Hi°
 *
h
;

1433 
i
=0; i<5; i++) {

1434 
c
 = 
	`gër
();

1435 if(
c
 !"löê"[
i
])

1436 
out
;

1439 
˝
 = 
Àxbuf
;

1440 
ï
 = 
Àxbuf
+(lexbuf)-5;

1441 
löï
 = 
nû
;

1443 
c
 = 
	`gër
();

1444 if(
c
 =
EOF
)

1445 
out
;

1446 if(
c
 == '\n')

1448 if(
c
 == ' ')

1450 if(
c
 == ':')

1451 
löï
 = 
˝
;

1452 if(
˝
 < 
ï
)

1453 *
˝
++ = 
c
;

1455 *
˝
 = 0;

1457 if(
löï
 =
nû
 ||Üöï >
ï
)

1458 
out
;

1459 *
löï
++ = '\0';

1460 
n
 = 0;

1461 
˝
=
löï
; *cp; cp++) {

1462 if(*
˝
 < '0' || *cp > '9')

1463 
out
;

1464 
n
 =Ç*10 + *
˝
 - '0';

1465 if(
n
 > 1e8) {

1466 
	`yyîr‹
("lineÇumber out ofÑange");

1467 
	`îr‹exô
();

1470 if(
n
 <= 0)

1471 
out
;

1474 
h
=
hi°
; h!=
H
; h=h->
lök
) {

1475 if(
h
->
«me
 !
nû
 && 
	`°rcmp
(h->«me, 
Àxbuf
) == 0) {

1476 
	`löehi°
(
h
->
«me
, 
n
, 0);

1477 
out
;

1480 
	`löehi°
(
	`°rdup
(
Àxbuf
), 
n
, 0);

1482 
out
:

1483  
c
;

1484 
	}
}

1486 
öt32


1487 
	$yyÀx
()

1489 
lx
;

1491 
lx
 = 
	`_yyÀx
();

1493 if(
curio
.
∆£mi
 && 
lx
 =
EOF
) {

1496 
lx
 = ';';

1499 
lx
) {

1500 
LNAME
:

1501 
LLITERAL
:

1502 
LBREAK
:

1503 
LCONTINUE
:

1504 
LFALL
:

1505 
LRETURN
:

1506 
LINC
:

1507 
LDEC
:

1511 
curio
.
∆£mi
 = 1;

1514 
curio
.
∆£mi
 = 0;

1519 
yy¥ev
 = 
yyœ°
;

1520 
yyœ°
 = 
lx
;

1521  
lx
;

1522 
	}
}

1525 
	$gëc
()

1527 
c
;

1529 
c
 = 
curio
.
≥ekc
;

1530 if(
c
 != 0) {

1531 
curio
.
≥ekc
 = curio.
≥ekc1
;

1532 
curio
.
≥ekc1
 = 0;

1533 if(
c
 ='\n' && 
pushedio
.
bö
 =
nû
)

1534 
Àxlöío
++;

1535  
c
;

1538 if(
curio
.
bö
 =
nû
) {

1539 
c
 = *
curio
.
˝
 & 0xff;

1540 if(
c
 != 0)

1541 
curio
.
˝
++;

1543 
c
 = 
	`Bgëc
(
curio
.
bö
);

1545 
c
) {

1547 if(
curio
.
bö
 !
nû
) {

1548 
	`yyîr‹
("illegal NUL byte");

1551 
EOF
:

1553 if(
curio
.
eo‚l
)

1554  
EOF
;

1555 
curio
.
eo‚l
 = 1;

1556 
c
 = '\n';

1558 if(
pushedio
.
bö
 =
nû
)

1559 
Àxlöío
++;

1562  
c
;

1563 
	}
}

1566 
	$ungëc
(
c
)

1568 
curio
.
≥ekc1
 = curio.
≥ekc
;

1569 
curio
.
≥ekc
 = 
c
;

1570 if(
c
 ='\n' && 
pushedio
.
bö
 =
nû
)

1571 
Àxlöío
--;

1572 
	}
}

1574 
öt32


1575 
	$gër
()

1577 
c
, 
i
;

1578 
°r
[
UTFmax
+1];

1579 
Ru√
 
ru√
;

1581 
c
 = 
	`gëc
();

1582 if(
c
 < 
Ru√£lf
)

1583  
c
;

1584 
i
 = 0;

1585 
°r
[
i
++] = 
c
;

1587 
lo›
:

1588 
c
 = 
	`gëc
();

1589 
°r
[
i
++] = 
c
;

1590 if(!
	`fuŒru√
(
°r
, 
i
))

1591 
lo›
;

1592 
c
 = 
	`ch¨t‹u√
(&
ru√
, 
°r
);

1593 if(
ru√
 =
Ru√îr‹
 && 
c
 == 1) {

1594 
löío
 = 
Àxlöío
;

1595 
	`yyîr‹
("illegal UTF-8 sequence");

1596 
	`Êushîr‹s
();

1597 
	`¥öt
("\t");

1598 
c
=0; c<
i
; c++)

1599 
	`¥öt
("%s%.2x", 
c
 > 0 ? " " : "", *(
uch¨
*)(
°r
+c));

1600 
	`¥öt
("\n");

1602  
ru√
;

1603 
	}
}

1606 
	$escch¨
(
e
, *
escÊg
, 
vl⁄g
 *
vÆ
)

1608 
i
, 
u
, 
c
;

1609 
vl⁄g
 
l
;

1611 *
escÊg
 = 0;

1613 
c
 = 
	`gër
();

1614 
c
) {

1615 
EOF
:

1616 
	`yyîr‹
("eof in string");

1619 
	`yyîr‹
("newline in string");

1624 if(
c
 =
e
)

1626 *
vÆ
 = 
c
;

1630 
u
 = 0;

1631 
c
 = 
	`gër
();

1632 
c
) {

1634 *
escÊg
 = 1;

1635 
i
 = 2;

1636 
hex
;

1639 
i
 = 4;

1640 
u
 = 1;

1641 
hex
;

1644 
i
 = 8;

1645 
u
 = 1;

1646 
hex
;

1656 *
escÊg
 = 1;

1657 
o˘
;

1659 'a': 
c
 = '\a'; ;

1660 'b': 
c
 = '\b'; ;

1661 'f': 
c
 = '\f'; ;

1662 'n': 
c
 = '\n'; ;

1663 'r': 
c
 = '\r'; ;

1664 't': 
c
 = '\t'; ;

1665 'v': 
c
 = '\v'; ;

1666 '\\': 
c
 = '\\'; ;

1669 if(
c
 !
e
)

1670 
	`yyîr‹
("unknow¿esˇ≥ sequí˚: %c", 
c
);

1672 *
vÆ
 = 
c
;

1675 
hex
:

1676 
l
 = 0;

1677 ; 
i
>0; i--) {

1678 
c
 = 
	`gëc
();

1679 if(
c
 >= '0' && c <= '9') {

1680 
l
 =Ü*16 + 
c
-'0';

1683 if(
c
 >= 'a' && c <= 'f') {

1684 
l
 =Ü*16 + 
c
-'a' + 10;

1687 if(
c
 >= 'A' && c <= 'F') {

1688 
l
 =Ü*16 + 
c
-'A' + 10;

1691 
	`yyîr‹
("n⁄-hex ch¨a˘î i¿esˇ≥ sequí˚: %c", 
c
);

1692 
	`ungëc
(
c
);

1695 if(
u
 && (
l
 > 
Ru√max
 || (0xd800 <=Ü &&Ü < 0xe000))) {

1696 
	`yyîr‹
("övÆid UnicodêcodêpoöàöÉsˇ≥ sequí˚: %#Œx", 
l
);

1697 
l
 = 
Ru√îr‹
;

1699 *
vÆ
 = 
l
;

1702 
o˘
:

1703 
l
 = 
c
 - '0';

1704 
i
=2; i>0; i--) {

1705 
c
 = 
	`gëc
();

1706 if(
c
 >= '0' && c <= '7') {

1707 
l
 =Ü*8 + 
c
-'0';

1710 
	`yyîr‹
("n⁄-o˘Æ ch¨a˘î i¿esˇ≥ sequí˚: %c", 
c
);

1711 
	`ungëc
(
c
);

1713 if(
l
 > 255)

1714 
	`yyîr‹
("o˘ÆÉsˇ≥ vÆuê> 255: %d", 
l
);

1716 *
vÆ
 = 
l
;

1718 
	}
}

1722 * 
	m«me
;

1723 
	mÀxiˇl
;

1724 
	mëy≥
;

1725 
	m›
;

1726 } 
	gsyms
[] =

1731 "öt8", 
LNAME
, 
TINT8
, 
OXXX
,

1732 "öt16", 
LNAME
, 
TINT16
, 
OXXX
,

1733 "öt32", 
LNAME
, 
TINT32
, 
OXXX
,

1734 "öt64", 
LNAME
, 
TINT64
, 
OXXX
,

1736 "uöt8", 
LNAME
, 
TUINT8
, 
OXXX
,

1737 "uöt16", 
LNAME
, 
TUINT16
, 
OXXX
,

1738 "uöt32", 
LNAME
, 
TUINT32
, 
OXXX
,

1739 "uöt64", 
LNAME
, 
TUINT64
, 
OXXX
,

1741 "Êﬂt32", 
LNAME
, 
TFLOAT32
, 
OXXX
,

1742 "Êﬂt64", 
LNAME
, 
TFLOAT64
, 
OXXX
,

1744 "com∂ex64", 
LNAME
, 
TCOMPLEX64
, 
OXXX
,

1745 "com∂ex128", 
LNAME
, 
TCOMPLEX128
, 
OXXX
,

1747 "boﬁ", 
LNAME
, 
TBOOL
, 
OXXX
,

1748 "°rög", 
LNAME
, 
TSTRING
, 
OXXX
,

1750 "™y", 
LNAME
, 
TANY
, 
OXXX
,

1752 "bªak", 
LBREAK
, 
Txxx
, 
OXXX
,

1753 "ˇ£", 
LCASE
, 
Txxx
, 
OXXX
,

1754 "ch™", 
LCHAN
, 
Txxx
, 
OXXX
,

1755 "c⁄°", 
LCONST
, 
Txxx
, 
OXXX
,

1756 "c⁄töue", 
LCONTINUE
, 
Txxx
, 
OXXX
,

1757 "deÁu…", 
LDEFAULT
, 
Txxx
, 
OXXX
,

1758 "ñ£", 
LELSE
, 
Txxx
, 
OXXX
,

1759 "de„r", 
LDEFER
, 
Txxx
, 
OXXX
,

1760 "ÁŒthrough", 
LFALL
, 
Txxx
, 
OXXX
,

1761 "f‹", 
LFOR
, 
Txxx
, 
OXXX
,

1762 "func", 
LFUNC
, 
Txxx
, 
OXXX
,

1763 "go", 
LGO
, 
Txxx
, 
OXXX
,

1764 "gŸo", 
LGOTO
, 
Txxx
, 
OXXX
,

1765 "if", 
LIF
, 
Txxx
, 
OXXX
,

1766 "imp‹t", 
LIMPORT
, 
Txxx
, 
OXXX
,

1767 "öãrÁ˚", 
LINTERFACE
, 
Txxx
, 
OXXX
,

1768 "m≠", 
LMAP
, 
Txxx
, 
OXXX
,

1769 "∑ckage", 
LPACKAGE
, 
Txxx
, 
OXXX
,

1770 "ønge", 
LRANGE
, 
Txxx
, 
OXXX
,

1771 "ªtu∫", 
LRETURN
, 
Txxx
, 
OXXX
,

1772 "£À˘", 
LSELECT
, 
Txxx
, 
OXXX
,

1773 "°ru˘", 
LSTRUCT
, 
Txxx
, 
OXXX
,

1774 "swôch", 
LSWITCH
, 
Txxx
, 
OXXX
,

1775 "ty≥", 
LTYPE
, 
Txxx
, 
OXXX
,

1776 "v¨", 
LVAR
, 
Txxx
, 
OXXX
,

1778 "≠≥nd", 
LNAME
, 
Txxx
, 
OAPPEND
,

1779 "ˇp", 
LNAME
, 
Txxx
, 
OCAP
,

1780 "˛o£", 
LNAME
, 
Txxx
, 
OCLOSE
,

1781 "com∂ex", 
LNAME
, 
Txxx
, 
OCOMPLEX
,

1782 "c›y", 
LNAME
, 
Txxx
, 
OCOPY
,

1783 "dñëe", 
LNAME
, 
Txxx
, 
ODELETE
,

1784 "imag", 
LNAME
, 
Txxx
, 
OIMAG
,

1785 "Àn", 
LNAME
, 
Txxx
, 
OLEN
,

1786 "make", 
LNAME
, 
Txxx
, 
OMAKE
,

1787 "√w", 
LNAME
, 
Txxx
, 
ONEW
,

1788 "∑nic", 
LNAME
, 
Txxx
, 
OPANIC
,

1789 "¥öt", 
LNAME
, 
Txxx
, 
OPRINT
,

1790 "¥öén", 
LNAME
, 
Txxx
, 
OPRINTN
,

1791 "ªÆ", 
LNAME
, 
Txxx
, 
OREAL
,

1792 "ªcovî", 
LNAME
, 
Txxx
, 
ORECOVER
,

1794 "nŸwôh°™dög", 
LIGNORE
, 
Txxx
, 
OXXX
,

1795 "thërutho·hem©ãr", 
LIGNORE
, 
Txxx
, 
OXXX
,

1796 "de•ôóŒobje˘i⁄s", 
LIGNORE
, 
Txxx
, 
OXXX
,

1797 "whîós", 
LIGNORE
, 
Txxx
, 
OXXX
,

1798 "ösoÁøs", 
LIGNORE
, 
Txxx
, 
OXXX
,

1802 
	$Àxöô
()

1804 
i
, 
Àx
;

1805 
Sym
 *
s
, *
s1
;

1806 
Ty≥
 *
t
;

1807 
ëy≥
;

1808 
VÆ
 
v
;

1814 
i
=0; i<
	`√Àm
(
syms
); i++) {

1815 
Àx
 = 
syms
[
i
].
Àxiˇl
;

1816 
s
 = 
	`lookup
(
syms
[
i
].
«me
);

1817 
s
->
Àxiˇl
 = 
Àx
;

1819 
ëy≥
 = 
syms
[
i
].etype;

1820 if(
ëy≥
 !
Txxx
) {

1821 if(
ëy≥
 < 0 ||Éty≥ >
	`√Àm
(
ty≥s
))

1822 
	`Áèl
("Àxöô: %†badÉty≥", 
s
->
«me
);

1823 
t
 = 
ty≥s
[
ëy≥
];

1824 if(
t
 =
T
) {

1825 
t
 = 
	`typ
(
ëy≥
);

1826 
t
->
sym
 = 
s
;

1828 if(
ëy≥
 !
TANY
 &&Éty≥ !
TSTRING
)

1829 
	`dowidth
(
t
);

1830 
ty≥s
[
ëy≥
] = 
t
;

1832 
s1
 = 
	`pkglookup
(
syms
[
i
].
«me
, 
buûtöpkg
);

1833 
s1
->
Àxiˇl
 = 
LNAME
;

1834 
s1
->
def
 = 
	`ty≥nod
(
t
);

1838 
ëy≥
 = 
syms
[
i
].
›
;

1839 if(
ëy≥
 !
OXXX
) {

1840 
s1
 = 
	`pkglookup
(
syms
[
i
].
«me
, 
buûtöpkg
);

1841 
s1
->
Àxiˇl
 = 
LNAME
;

1842 
s1
->
def
 = 
	`nod
(
ONAME
, 
N
, N);

1843 
s1
->
def
->
sym
 = s1;

1844 
s1
->
def
->
ëy≥
 =Étype;

1845 
s1
->
def
->
buûtö
 = 1;

1854 
idól°rög
 = 
	`typ
(
TSTRING
);

1855 
idólboﬁ
 = 
	`typ
(
TBOOL
);

1857 
s
 = 
	`pkglookup
("åue", 
buûtöpkg
);

1858 
s
->
def
 = 
	`nodboﬁ
(1);

1859 
s
->
def
->
sym
 = 
	`lookup
("true");

1860 
s
->
def
->
ty≥
 = 
idólboﬁ
;

1862 
s
 = 
	`pkglookup
("Ál£", 
buûtöpkg
);

1863 
s
->
def
 = 
	`nodboﬁ
(0);

1864 
s
->
def
->
sym
 = 
	`lookup
("false");

1865 
s
->
def
->
ty≥
 = 
idólboﬁ
;

1867 
s
 = 
	`lookup
("_");

1868 
s
->
block
 = -100;

1869 
s
->
def
 = 
	`nod
(
ONAME
, 
N
, N);

1870 
s
->
def
->
sym
 = s;

1871 
ty≥s
[
TBLANK
] = 
	`typ
(TBLANK);

1872 
s
->
def
->
ty≥
 = 
ty≥s
[
TBLANK
];

1873 
nbœnk
 = 
s
->
def
;

1875 
s
 = 
	`pkglookup
("_", 
buûtöpkg
);

1876 
s
->
block
 = -100;

1877 
s
->
def
 = 
	`nod
(
ONAME
, 
N
, N);

1878 
s
->
def
->
sym
 = s;

1879 
ty≥s
[
TBLANK
] = 
	`typ
(TBLANK);

1880 
s
->
def
->
ty≥
 = 
ty≥s
[
TBLANK
];

1882 
ty≥s
[
TNIL
] = 
	`typ
(TNIL);

1883 
s
 = 
	`pkglookup
("nû", 
buûtöpkg
);

1884 
v
.
˘y≥
 = 
CTNIL
;

1885 
s
->
def
 = 
	`nodlô
(
v
);

1886 
s
->
def
->
sym
 = s;

1887 
	}
}

1890 
	$Àxöô1
()

1892 
Sym
 *
s
, *
s1
;

1893 
Ty≥
 *
t
, *
f
, *
rcvr
, *
ö
, *
out
;

1896 
rcvr
 = 
	`typ
(
TSTRUCT
);

1897 
rcvr
->
ty≥
 = 
	`typ
(
TFIELD
);

1898 
rcvr
->
ty≥
->ty≥ = 
	`±πo
(
	`typ
(
TSTRUCT
));

1899 
rcvr
->
fu«rg
 = 1;

1900 
ö
 = 
	`typ
(
TSTRUCT
);

1901 
ö
->
fu«rg
 = 1;

1902 
out
 = 
	`typ
(
TSTRUCT
);

1903 
out
->
ty≥
 = 
	`typ
(
TFIELD
);

1904 
out
->
ty≥
->ty≥ = 
ty≥s
[
TSTRING
];

1905 
out
->
fu«rg
 = 1;

1906 
f
 = 
	`typ
(
TFUNC
);

1907 *
	`gëthis
(
f
Ë
rcvr
;

1908 *
	`gëouèrg
(
f
Ë
out
;

1909 *
	`gëö¨g
(
f
Ë
ö
;

1910 
f
->
thi°u∂e
 = 1;

1911 
f
->
ötu∂e
 = 0;

1912 
f
->
ouäamed
 = 0;

1913 
f
->
ouâu∂e
 = 1;

1914 
t
 = 
	`typ
(
TINTER
);

1915 
t
->
ty≥
 = 
	`typ
(
TFIELD
);

1916 
t
->
ty≥
->
sym
 = 
	`lookup
("Error");

1917 
t
->
ty≥
->ty≥ = 
f
;

1920 
s
 = 
	`lookup
("error");

1921 
s
->
Àxiˇl
 = 
LNAME
;

1922 
îr‹ty≥
 = 
t
;

1923 
îr‹ty≥
->
sym
 = 
s
;

1924 
s1
 = 
	`pkglookup
("îr‹", 
buûtöpkg
);

1925 
s1
->
Àxiˇl
 = 
LNAME
;

1926 
s1
->
def
 = 
	`ty≥nod
(
îr‹ty≥
);

1929 
s
 = 
	`lookup
("byte");

1930 
s
->
Àxiˇl
 = 
LNAME
;

1931 
byãty≥
 = 
	`typ
(
TUINT8
);

1932 
byãty≥
->
sym
 = 
s
;

1933 
s1
 = 
	`pkglookup
("byã", 
buûtöpkg
);

1934 
s1
->
Àxiˇl
 = 
LNAME
;

1935 
s1
->
def
 = 
	`ty≥nod
(
byãty≥
);

1938 
s
 = 
	`lookup
("rune");

1939 
s
->
Àxiˇl
 = 
LNAME
;

1940 
ru√ty≥
 = 
	`typ
(
TINT32
);

1941 
ru√ty≥
->
sym
 = 
s
;

1942 
s1
 = 
	`pkglookup
("ru√", 
buûtöpkg
);

1943 
s1
->
Àxiˇl
 = 
LNAME
;

1944 
s1
->
def
 = 
	`ty≥nod
(
ru√ty≥
);

1945 
	}
}

1948 
	$Àxföi
()

1950 
Sym
 *
s
;

1951 
Àx
, 
ëy≥
, 
i
;

1952 
VÆ
 
v
;

1954 
i
=0; i<
	`√Àm
(
syms
); i++) {

1955 
Àx
 = 
syms
[
i
].
Àxiˇl
;

1956 if(
Àx
 !
LNAME
)

1958 
s
 = 
	`lookup
(
syms
[
i
].
«me
);

1959 
s
->
Àxiˇl
 = 
Àx
;

1961 
ëy≥
 = 
syms
[
i
].etype;

1962 if(
ëy≥
 !
Txxx
 && (ëy≥ !
TANY
 || 
debug
['A']Ë&& 
s
->
def
 =
N
)

1963 
s
->
def
 = 
	`ty≥nod
(
ty≥s
[
ëy≥
]);

1965 
ëy≥
 = 
syms
[
i
].
›
;

1966 if(
ëy≥
 !
OXXX
 && 
s
->
def
 =
N
) {

1967 
s
->
def
 = 
	`nod
(
ONAME
, 
N
, N);

1968 
s
->
def
->
sym
 = s;

1969 
s
->
def
->
ëy≥
 =Étype;

1970 
s
->
def
->
buûtö
 = 1;

1974 
i
=0; 
ty≥defs
[i].
«me
; i++) {

1975 
s
 = 
	`lookup
(
ty≥defs
[
i
].
«me
);

1976 if(
s
->
def
 =
N
)

1977 
s
->
def
 = 
	`ty≥nod
(
ty≥s
[
ty≥defs
[
i
].
ëy≥
]);

1982 
s
 = 
	`lookup
("byte");

1983 if(
s
->
def
 =
N
)

1984 
s
->
def
 = 
	`ty≥nod
(
byãty≥
);

1986 
s
 = 
	`lookup
("error");

1987 if(
s
->
def
 =
N
)

1988 
s
->
def
 = 
	`ty≥nod
(
îr‹ty≥
);

1990 
s
 = 
	`lookup
("rune");

1991 if(
s
->
def
 =
N
)

1992 
s
->
def
 = 
	`ty≥nod
(
ru√ty≥
);

1994 
s
 = 
	`lookup
("nil");

1995 if(
s
->
def
 =
N
) {

1996 
v
.
˘y≥
 = 
CTNIL
;

1997 
s
->
def
 = 
	`nodlô
(
v
);

1998 
s
->
def
->
sym
 = s;

2001 
s
 = 
	`lookup
("iota");

2002 if(
s
->
def
 =
N
) {

2003 
s
->
def
 = 
	`nod
(
OIOTA
, 
N
, N);

2004 
s
->
def
->
sym
 = s;

2007 
s
 = 
	`lookup
("true");

2008 if(
s
->
def
 =
N
) {

2009 
s
->
def
 = 
	`nodboﬁ
(1);

2010 
s
->
def
->
sym
 = s;

2013 
s
 = 
	`lookup
("false");

2014 if(
s
->
def
 =
N
) {

2015 
s
->
def
 = 
	`nodboﬁ
(0);

2016 
s
->
def
->
sym
 = s;

2019 
nodÂ
 = 
	`nod
(
ONAME
, 
N
, N);

2020 
nodÂ
->
ty≥
 = 
ty≥s
[
TINT32
];

2021 
nodÂ
->
xoff£t
 = 0;

2022 
nodÂ
->
˛ass
 = 
PPARAM
;

2023 
nodÂ
->
sym
 = 
	`lookup
(".fp");

2024 
	}
}

2028 
	mÀx
;

2029 * 
	m«me
;

2030 } 
	gÀxn
[] =

2032 
LANDAND
, "ANDAND",

2033 
LASOP
, "ASOP",

2034 
LBREAK
, "BREAK",

2035 
LCASE
, "CASE",

2036 
LCHAN
, "CHAN",

2037 
LCOLAS
, "COLAS",

2038 
LCONST
, "CONST",

2039 
LCONTINUE
, "CONTINUE",

2040 
LDEC
, "DEC",

2041 
LDEFER
, "DEFER",

2042 
LELSE
, "ELSE",

2043 
LEQ
, "EQ",

2044 
LFALL
, "FALL",

2045 
LFOR
, "FOR",

2046 
LFUNC
, "FUNC",

2047 
LGE
, "GE",

2048 
LGO
, "GO",

2049 
LGOTO
, "GOTO",

2050 
LGT
, "GT",

2051 
LIF
, "IF",

2052 
LIMPORT
, "IMPORT",

2053 
LINC
, "INC",

2054 
LINTERFACE
, "INTERFACE",

2055 
LLE
, "LE",

2056 
LLITERAL
, "LITERAL",

2057 
LLSH
, "LSH",

2058 
LLT
, "LT",

2059 
LMAP
, "MAP",

2060 
LNAME
, "NAME",

2061 
LNE
, "NE",

2062 
LOROR
, "OROR",

2063 
LPACKAGE
, "PACKAGE",

2064 
LRANGE
, "RANGE",

2065 
LRETURN
, "RETURN",

2066 
LRSH
, "RSH",

2067 
LSTRUCT
, "STRUCT",

2068 
LSWITCH
, "SWITCH",

2069 
LTYPE
, "TYPE",

2070 
LVAR
, "VAR",

2074 
	$Àx«me
(
Àx
)

2076 
i
;

2077 
buf
[100];

2079 
i
=0; i<
	`√Àm
(
Àxn
); i++)

2080 if(
Àxn
[
i
].
Àx
 ==Üex)

2081  
Àxn
[
i
].
«me
;

2082 
	`¢¥öt
(
buf
, (buf), "LEX-%d", 
Àx
);

2083  
buf
;

2084 
	}
}

2088 *
	mhave
;

2089 *
	mw™t
;

2090 } 
	gyytfix
[] =

2144 
	$yytöô
()

2146 
i
, 
j
;

2147 *
yyäame
[];

2148 *
s
, *
t
;

2150 
i
=0; 
yyäame
[i] !
nû
; i++) {

2151 
s
 = 
yyäame
[
i
];

2153 if(
	`°rcmp
(
s
, "LLITERAL") == 0) {

2154 
	`°r˝y
(
lôbuf
, "literal");

2155 
yyäame
[
i
] = 
lôbuf
;

2156 
lo›
;

2160 
j
=0; j<
	`√Àm
(
yytfix
); j++) {

2161 if(
	`°rcmp
(
s
, 
yytfix
[
j
].
have
) == 0) {

2162 
yyäame
[
i
] = 
yytfix
[
j
].
w™t
;

2163 
lo›
;

2168 if(
s
[0] == '\'') {

2169 
t
 = 
	`°rdup
(
s
+1);

2170 
t
[
	`°æí
(t)-1] = '\0';

2171 
yyäame
[
i
] = 
t
;

2173 
lo›
:;

2175 
	}
}

2178 
	$mk∑ckage
(* 
pkg«me
)

2180 
Sym
 *
s
;

2181 
öt32
 
h
;

2182 *
p
;

2184 if(
loˇÕkg
->
«me
 =
nû
) {

2185 if(
	`°rcmp
(
pkg«me
, "_") == 0)

2186 
	`yyîr‹
("invalidÖackageÇame _");

2187 
loˇÕkg
->
«me
 = 
pkg«me
;

2189 if(
	`°rcmp
(
pkg«me
, 
loˇÕkg
->
«me
) != 0)

2190 
	`yyîr‹
("∑ckagê%s;Éx≥˘ed %s", 
pkg«me
, 
loˇÕkg
->
«me
);

2191 
h
=0; h<
NHASH
; h++) {

2192 
s
 = 
hash
[
h
]; s !
S
; s = s->
lök
) {

2193 if(
s
->
def
 =
N
 || s->
pkg
 !
loˇÕkg
)

2195 if(
s
->
def
->
›
 =
OPACK
) {

2201 if(!
s
->
def
->
u£d
 && !
nsy¡axîr‹s
)

2202 
	`yyîr‹l
(
s
->
def
->
löío
, "imp‹ãdándÇŸ u£d: \"%Z\"", s->def->
pkg
->
∑th
);

2203 
s
->
def
 = 
N
;

2206 if(
s
->
def
->
sym
 != s) {

2209 if(
s
->
def
->
∑ck
 !
N
 && !s->def->∑ck->
u£d
 && !
nsy¡axîr‹s
) {

2210 
	`yyîr‹l
(
s
->
def
->
∑ck
->
löío
, "imp‹ãdándÇŸ u£d: \"%Z\"", s->def->∑ck->
pkg
->
∑th
);

2211 
s
->
def
->
∑ck
->
u£d
 = 1;

2213 
s
->
def
 = 
N
;

2220 if(
outfûe
 =
nû
) {

2221 
p
 = 
	`°ºchr
(
öfûe
, '/');

2222 if(
p
 =
nû
)

2223 
p
 = 
öfûe
;

2225 
p
 =Ö+1;

2226 
	`¢¥öt
(
«mebuf
, “amebuf), "%s", 
p
);

2227 
p
 = 
	`°ºchr
(
«mebuf
, '.');

2228 if(
p
 !
nû
)

2229 *
p
 = 0;

2230 
outfûe
 = 
	`sm¥öt
("%s.%c", 
«mebuf
, 
thech¨
);

2232 
	}
}

	@md5.c

8 
	~<u.h
>

9 
	~<libc.h
>

10 
	~"go.h
"

11 
	~"md5.h
"

13 
md5block
(
MD5
 *
dig
, 
uch¨
 *
p
, 
¬
);

16 
	m_Chunk
 = 64

19 
	#_Inô0
 0x67452301

	)

20 
	#_Inô1
 0xEFCDAB89

	)

21 
	#_Inô2
 0x98BADCFE

	)

22 
	#_Inô3
 0x10325476

	)

25 
	$md5ª£t
(
MD5
 *
d
)

27 
d
->
s
[0] = 
_Inô0
;

28 
d
->
s
[1] = 
_Inô1
;

29 
d
->
s
[2] = 
_Inô2
;

30 
d
->
s
[3] = 
_Inô3
;

31 
d
->
nx
 = 0;

32 
d
->
Àn
 = 0;

33 
	}
}

36 
	$md5wrôe
(
MD5
 *
d
, 
uch¨
 *
p
, 
¬
)

38 
i
, 
n
;

40 
d
->
Àn
 +
¬
;

41 if(
d
->
nx
 > 0) {

42 
n
 = 
¬
;

43 if(
n
 > 
_Chunk
 - 
d
->
nx
)

44 
n
 = 
_Chunk
 - 
d
->
nx
;

45 
i
=0; i<
n
; i++)

46 
d
->
x
[d->
nx
+
i
] = 
p
[i];

47 
d
->
nx
 +
n
;

48 if(
d
->
nx
 =
_Chunk
) {

49 
	`md5block
(
d
, d->
x
, 
_Chunk
);

50 
d
->
nx
 = 0;

52 
p
 +
n
;

53 
¬
 -
n
;

55 
n
 = 
	`md5block
(
d
, 
p
, 
¬
);

56 
p
 +
n
;

57 
¬
 -
n
;

58 if(
¬
 > 0) {

59 
i
=0; i<
¬
; i++)

60 
d
->
x
[
i
] = 
p
[i];

61 
d
->
nx
 = 
¬
;

63 
	}
}

65 
uöt64


66 
	$md5sum
(
MD5
 *
d
)

68 
uch¨
 
tmp
[64];

69 
i
;

70 
uöt64
 
Àn
;

73 
Àn
 = 
d
->len;

74 
	`mem£t
(
tmp
, 0, Åmp);

75 
tmp
[0] = 0x80;

76 if(
Àn
%64 < 56)

77 
	`md5wrôe
(
d
, 
tmp
, 56-
Àn
%64);

79 
	`md5wrôe
(
d
, 
tmp
, 64+56-
Àn
%64);

82 
Àn
 <<= 3;

83 
i
=0; i<8; i++)

84 
tmp
[
i
] = 
Àn
>>(8*i);

85 
	`md5wrôe
(
d
, 
tmp
, 8);

87 if(
d
->
nx
 != 0)

88 
	`Áèl
("md5sum");

90  
d
->
s
[0] | ((
uöt64
)d->s[1]<<32);

91 
	}
}

99 
uöt32
 
	gèbÀ
[64] = {

173 
uöt32
 
	gshi·1
[] = { 7, 12, 17, 22 };

174 
uöt32
 
	gshi·2
[] = { 5, 9, 14, 20 };

175 
uöt32
 
	gshi·3
[] = { 4, 11, 16, 23 };

176 
uöt32
 
	gshi·4
[] = { 6, 10, 15, 21 };

179 
	$md5block
(
MD5
 *
dig
, 
uch¨
 *
p
, 
¬
)

181 
uöt32
 
a
, 
b
, 
c
, 
d
, 
Ø
, 
bb
, 
cc
, 
dd
;

182 
i
, 
j
, 
n
;

183 
uöt32
 
X
[16];

185 
a
 = 
dig
->
s
[0];

186 
b
 = 
dig
->
s
[1];

187 
c
 = 
dig
->
s
[2];

188 
d
 = 
dig
->
s
[3];

189 
n
 = 0;

191 
¬
 >
_Chunk
) {

192 
Ø
 = 
a
;

193 
bb
 = 
b
;

194 
cc
 = 
c
;

195 
dd
 = 
d
;

197 
i
=0; i<16; i++) {

198 
j
 = 
i
*4;

199 
X
[
i
] = 
p
[
j
] | (p[j+1]<<8) | (p[j+2]<<16) | (p[j+3]<<24);

203 
i
=0; i<16; i++) {

204 
uöt32
 
x
, 
t
, 
s
, 
f
;

205 
x
 = 
i
;

206 
t
 = 
i
;

207 
s
 = 
shi·1
[
i
%4];

208 
f
 = ((
c
 ^ 
d
Ë& 
b
) ^ d;

209 
a
 +
f
 + 
X
[
x
] + 
èbÀ
[
t
];

210 
a
 =á<<
s
 |á>>(32-s);

211 
a
 +
b
;

213 
t
 = 
d
;

214 
d
 = 
c
;

215 
c
 = 
b
;

216 
b
 = 
a
;

217 
a
 = 
t
;

221 
i
=0; i<16; i++) {

222 
uöt32
 
x
, 
t
, 
s
, 
g
;

224 
x
 = (1+5*
i
)%16;

225 
t
 = 16+
i
;

226 
s
 = 
shi·2
[
i
%4];

227 
g
 = ((
b
 ^ 
c
Ë& 
d
) ^ c;

228 
a
 +
g
 + 
X
[
x
] + 
èbÀ
[
t
];

229 
a
 =á<<
s
 |á>>(32-s);

230 
a
 +
b
;

232 
t
 = 
d
;

233 
d
 = 
c
;

234 
c
 = 
b
;

235 
b
 = 
a
;

236 
a
 = 
t
;

240 
i
=0; i<16; i++) {

241 
uöt32
 
x
, 
t
, 
s
, 
h
;

243 
x
 = (5+3*
i
)%16;

244 
t
 = 32+
i
;

245 
s
 = 
shi·3
[
i
%4];

246 
h
 = 
b
 ^ 
c
 ^ 
d
;

247 
a
 +
h
 + 
X
[
x
] + 
èbÀ
[
t
];

248 
a
 =á<<
s
 |á>>(32-s);

249 
a
 +
b
;

251 
t
 = 
d
;

252 
d
 = 
c
;

253 
c
 = 
b
;

254 
b
 = 
a
;

255 
a
 = 
t
;

259 
i
=0; i<16; i++) {

260 
uöt32
 
x
, 
s
, 
t
, 
ii
;

262 
x
 = (7*
i
)%16;

263 
s
 = 
shi·4
[
i
%4];

264 
t
 = 48+
i
;

265 
ii
 = 
c
 ^ (
b
 | ~
d
);

266 
a
 +
ii
 + 
X
[
x
] + 
èbÀ
[
t
];

267 
a
 =á<<
s
 |á>>(32-s);

268 
a
 +
b
;

270 
t
 = 
d
;

271 
d
 = 
c
;

272 
c
 = 
b
;

273 
b
 = 
a
;

274 
a
 = 
t
;

277 
a
 +
Ø
;

278 
b
 +
bb
;

279 
c
 +
cc
;

280 
d
 +
dd
;

282 
p
 +
_Chunk
;

283 
n
 +
_Chunk
;

284 
¬
 -
_Chunk
;

287 
dig
->
s
[0] = 
a
;

288 
dig
->
s
[1] = 
b
;

289 
dig
->
s
[2] = 
c
;

290 
dig
->
s
[3] = 
d
;

291  
n
;

292 
	}
}

	@md5.h

5 
MD5
 
	tMD5
;

6 
	sMD5


8 
uöt32
 
	ms
[4];

9 
uch¨
 
	mx
[64];

10 
	mnx
;

11 
uöt64
 
	mÀn
;

14 
md5ª£t
(
MD5
*);

15 
md5wrôe
(
MD5
*, 
uch¨
*, );

16 
uöt64
 
md5sum
(
MD5
*);

	@mkbuiltin1.c

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<uni°d.h
>

12 
	~<°rög.h
>

13 
	~<î∫o.h
>

14 
	~<°d¨g.h
>

16 
esc
(*);

17 
Áèl
(*, ...);

20 
	$maö
(
¨gc
, **
¨gv
)

22 *
«me
;

23 
FILE
 *
fö
;

24 
buf
[1024], 
öôfunc
[1024], *
p
, *
q
;

26 if(
¨gc
 != 2) {

27 
	`Ârötf
(
°dîr
, "usage: mkbuiltin1 sys\n");

28 
	`Áèl
("in file $1.6 s/PACKAGE/$1/");

31 
«me
 = 
¨gv
[1];

32 
	`¢¥ötf
(
öôfunc
, (öôfunc), "öô_%s_fun˘i⁄", 
«me
);

34 
	`¢¥ötf
(
buf
, (buf), "%s.%s", 
«me
, 
	`gëív
("O"));

35 if((
fö
 = 
	`f›í
(
buf
, "r")Ë=
NULL
) {

36 
	`Áèl
("›í %s: %s", 
buf
, 
	`°ªº‹
(
î∫o
));

40 
	`fgës
(
buf
,  buf, 
fö
Ë!
NULL
)

41 if(
	`°r°r
(
buf
, "$$"))

42 
begö
;

43 
	`Áèl
("didÇot find beginning of imports");

45 
begö
:

46 
	`¥ötf
("ch¨ *%simp‹à=\n", 
«me
);

49 
	`fgës
(
buf
,  buf, 
fö
Ë!
NULL
) {

50 
buf
[
	`°æí
(buf)-1] = 0;

51 if(
	`°r°r
(
buf
, "$$"))

52 
íd
;

55 
p
=
buf
; *p==' ' || *p == '\t';Ö++)

59 if(
	`°r°r
(
buf
, 
öôfunc
))

64 
	`¥ötf
("\t\"");

65 
q
 = 
	`°r°r
(
p
, "PACKAGE")) {

66 *
q
 = 0;

67 
	`esc
(
p
);

68 
	`¥ötf
("%s", 
«me
);

69 
p
 = 
q
+7;

72 
	`esc
(
p
);

73 
	`¥ötf
("\\n\"\n");

75 
	`Áèl
("didÇot findÉnd of imports");

77 
íd
:

78 
	`¥ötf
("\t\"$$\\n\";\n");

80 
	}
}

83 
	$esc
(*
p
)

85 ; *
p
;Ö++) {

86 if(*
p
 == '\\' || *p == '\"')

87 
	`¥ötf
("\\");

88 
	`putch¨
(*
p
);

90 
	}
}

93 
	$Áèl
(*
msg
, ...)

95 
va_li°
 
¨g
;

97 
	`va_°¨t
(
¨g
, 
msg
);

98 
	`Ârötf
(
°dîr
, "fatal: ");

99 
	`vÂrötf
(
°dîr
, 
msg
, 
¨g
);

100 
	`Ârötf
(
°dîr
, "\n");

101 
	`exô
(2);

102 
	}
}

	@mparith1.c

5 
	~<u.h
>

6 
	~<libc.h
>

7 
	~"go.h
"

12 
	$mpcmpfixÊt
(
Mpöt
 *
a
, 
MpÊt
 *
b
)

14 
buf
[500];

15 
MpÊt
 
c
;

17 
	`¢¥öt
(
buf
, (buf), "%B", 
a
);

18 
	`m∑toÊt
(&
c
, 
buf
);

19  
	`mpcmpÊtÊt
(&
c
, 
b
);

20 
	}
}

23 
	$mpcmpÊtfix
(
MpÊt
 *
a
, 
Mpöt
 *
b
)

25 
buf
[500];

26 
MpÊt
 
c
;

28 
	`¢¥öt
(
buf
, (buf), "%B", 
b
);

29 
	`m∑toÊt
(&
c
, 
buf
);

30  
	`mpcmpÊtÊt
(
a
, &
c
);

31 
	}
}

34 
	$mpcmpfixfix
(
Mpöt
 *
a
, Mpöà*
b
)

36 
Mpöt
 
c
;

38 
	`mpmovefixfix
(&
c
, 
a
);

39 
	`mpsubfixfix
(&
c
, 
b
);

40  
	`m±e°fix
(&
c
);

41 
	}
}

44 
	$mpcmpfixc
(
Mpöt
 *
b
, 
vl⁄g
 
c
)

46 
Mpöt
 
a
;

48 
	`mpmovecfix
(&
a
, 
c
);

49  
	`mpcmpfixfix
(&
a
, 
b
);

50 
	}
}

53 
	$mpcmpÊtÊt
(
MpÊt
 *
a
, MpÊà*
b
)

55 
MpÊt
 
c
;

57 
	`mpmoveÊtÊt
(&
c
, 
a
);

58 
	`mpsubÊtÊt
(&
c
, 
b
);

59  
	`m±e°Êt
(&
c
);

60 
	}
}

63 
	$mpcmpÊtc
(
MpÊt
 *
b
, 
c
)

65 
MpÊt
 
a
;

67 
	`mpmovecÊt
(&
a
, 
c
);

68  
	`mpcmpÊtÊt
(&
a
, 
b
);

69 
	}
}

72 
	$mpsubfixfix
(
Mpöt
 *
a
, Mpöà*
b
)

74 
	`m≤egfix
(
a
);

75 
	`m∑ddfixfix
(
a
, 
b
, 0);

76 
	`m≤egfix
(
a
);

77 
	}
}

80 
	$mpsubÊtÊt
(
MpÊt
 *
a
, MpÊà*
b
)

82 
	`m≤egÊt
(
a
);

83 
	`m∑ddÊtÊt
(
a
, 
b
);

84 
	`m≤egÊt
(
a
);

85 
	}
}

88 
	$m∑ddcfix
(
Mpöt
 *
a
, 
vl⁄g
 
c
)

90 
Mpöt
 
b
;

92 
	`mpmovecfix
(&
b
, 
c
);

93 
	`m∑ddfixfix
(
a
, &
b
, 0);

94 
	}
}

97 
	$m∑ddcÊt
(
MpÊt
 *
a
, 
c
)

99 
MpÊt
 
b
;

101 
	`mpmovecÊt
(&
b
, 
c
);

102 
	`m∑ddÊtÊt
(
a
, &
b
);

103 
	}
}

106 
	$mpmulcfix
(
Mpöt
 *
a
, 
vl⁄g
 
c
)

108 
Mpöt
 
b
;

110 
	`mpmovecfix
(&
b
, 
c
);

111 
	`mpmulfixfix
(
a
, &
b
);

112 
	}
}

115 
	$mpmulcÊt
(
MpÊt
 *
a
, 
c
)

117 
MpÊt
 
b
;

119 
	`mpmovecÊt
(&
b
, 
c
);

120 
	`mpmulÊtÊt
(
a
, &
b
);

121 
	}
}

124 
	$mpdivfixfix
(
Mpöt
 *
a
, Mpöà*
b
)

126 
Mpöt
 
q
, 
r
;

128 
	`mpdivmodfixfix
(&
q
, &
r
, 
a
, 
b
);

129 
	`mpmovefixfix
(
a
, &
q
);

130 
	}
}

133 
	$mpmodfixfix
(
Mpöt
 *
a
, Mpöà*
b
)

135 
Mpöt
 
q
, 
r
;

137 
	`mpdivmodfixfix
(&
q
, &
r
, 
a
, 
b
);

138 
	`mpmovefixfix
(
a
, &
r
);

139 
	}
}

142 
	$mpcomfix
(
Mpöt
 *
a
)

144 
Mpöt
 
b
;

146 
	`mpmovecfix
(&
b
, 1);

147 
	`m≤egfix
(
a
);

148 
	`mpsubfixfix
(
a
, &
b
);

149 
	}
}

152 
	$mpmovefixÊt
(
MpÊt
 *
a
, 
Mpöt
 *
b
)

154 
a
->
vÆ
 = *
b
;

155 
a
->
exp
 = 0;

156 
	`m≤‹m
(
a
);

157 
	}
}

162 
	$m≥xa˘Êtfix
(
Mpöt
 *
a
, 
MpÊt
 *
b
)

164 
MpÊt
 
f
;

166 *
a
 = 
b
->
vÆ
;

167 
	`mpshi·fix
(
a
, 
b
->
exp
);

168 if(
b
->
exp
 < 0) {

169 
f
.
vÆ
 = *
a
;

170 
f
.
exp
 = 0;

171 
	`m≤‹m
(&
f
);

172 if(
	`mpcmpÊtÊt
(
b
, &
f
) != 0)

176 
	}
}

179 
	$mpmoveÊtfix
(
Mpöt
 *
a
, 
MpÊt
 *
b
)

181 
MpÊt
 
f
;

182 
i
;

184 if(
	`m≥xa˘Êtfix
(
a
, 
b
) == 0)

188 
f
 = *
b
;

189 
f
.
vÆ
.
a
[0] = 0;

190 if(
	`m≥xa˘Êtfix
(
a
, &
f
) == 0)

194 
i
=1; i<
Mµªc
; i++) {

195 
f
.
vÆ
.
a
[
i
]++;

196 if(
f
.
vÆ
.
a
[
i
] !
Mpba£
)

198 
f
.
vÆ
.
a
[
i
] = 0;

200 
	`m≤‹m
(&
f
);

201 if(
	`m≥xa˘Êtfix
(
a
, &
f
) == 0)

205 
	}
}

208 
	$mpmovefixfix
(
Mpöt
 *
a
, Mpöà*
b
)

210 *
a
 = *
b
;

211 
	}
}

214 
	$mpmoveÊtÊt
(
MpÊt
 *
a
, MpÊà*
b
)

216 *
a
 = *
b
;

217 
	}
}

219 
	gèb
[] = { 1e0, 1e1, 1e2, 1e3, 1e4, 1e5, 1e6, 1e7 };

221 
	$mµow10Êt
(
MpÊt
 *
a
, 
p
)

223 if(
p
 < 0)

224 
	`ab‹t
();

225 if(
p
 < 
	`√Àm
(
èb
)) {

226 
	`mpmovecÊt
(
a
, 
èb
[
p
]);

229 
	`mµow10Êt
(
a
, 
p
>>1);

230 
	`mpmulÊtÊt
(
a
,á);

231 if(
p
 & 1)

232 
	`mpmulcÊt
(
a
, 10);

233 
	}
}

240 
	$m∑toÊt
(
MpÊt
 *
a
, *
as
)

242 
MpÊt
 
b
;

243 
dp
, 
c
, 
f
, 
ef
, 
ex
, 
eb
;

244 *
s
;

246 
s
 = 
as
;

247 
dp
 = 0;

248 
f
 = 0;

249 
ex
 = 0;

250 
eb
 = 0;

252 
	`mpmovecÊt
(
a
, 0.0);

254 
c
 = *
s
++) {

256 
bad
;

259 
f
 = 1;

267 
dp
 = 1;

280 
	`mpmulcÊt
(
a
, 10);

281 
	`m∑ddcÊt
(
a
, 
c
-'0');

282 if(
dp
)

283 
dp
++;

288 
eb
 = 1;

292 
ex
 = 0;

293 
ef
 = 0;

295 
c
 = *
s
++;

296 if(
c
 == '+' || c == ' ' || c == '\t')

298 if(
c
 == '-') {

299 
ef
 = 1;

302 if(
c
 >= '0' && c <= '9') {

303 
ex
 =Éx*10 + (
c
-'0');

304 if(
ex
 > 1e8) {

305 
	`yyîr‹
("c⁄°™àexp⁄íàouào‡ønge: %s", 
as
);

306 
	`îr‹exô
();

312 if(
ef
)

313 
ex
 = -ex;

321 if(
eb
) {

322 if(
dp
)

323 
bad
;

324 
a
->
exp
 +
ex
;

325 
out
;

328 if(
dp
)

329 
dp
--;

330 if(
	`mpcmpÊtc
(
a
, 0.0) != 0) {

331 if(
ex
 >
dp
) {

332 
	`mµow10Êt
(&
b
, 
ex
-
dp
);

333 
	`mpmulÊtÊt
(
a
, &
b
);

335 
	`mµow10Êt
(&
b
, 
dp
-
ex
);

336 
	`mpdivÊtÊt
(
a
, &
b
);

340 
out
:

341 if(
f
)

342 
	`m≤egÊt
(
a
);

345 
bad
:

346 
	`yyîr‹
("c⁄°™àtoÿœrge: %s", 
as
);

347 
	`mpmovecÊt
(
a
, 0.0);

348 
	}
}

355 
	$m∑tofix
(
Mpöt
 *
a
, *
as
)

357 
c
, 
f
;

358 *
s
;

360 
s
 = 
as
;

361 
f
 = 0;

362 
	`mpmovecfix
(
a
, 0);

364 
c
 = *
s
++;

365 
c
) {

367 
f
 = 1;

370 
c
 = *
s
++;

371 if(
c
 != '0')

375 
o˘
;

378 
c
) {

379 if(
c
 >= '0' && c <= '9') {

380 
	`mpmulcfix
(
a
, 10);

381 
	`m∑ddcfix
(
a
, 
c
-'0');

382 
c
 = *
s
++;

385 
bad
;

387 
out
;

389 
o˘
:

390 
c
 = *
s
++;

391 if(
c
 == 'x' || c == 'X')

392 
hex
;

393 
c
) {

394 if(
c
 >= '0' && c <= '7') {

395 
	`mpmulcfix
(
a
, 8);

396 
	`m∑ddcfix
(
a
, 
c
-'0');

397 
c
 = *
s
++;

400 
bad
;

402 
out
;

404 
hex
:

405 
c
 = *
s
++;

406 
c
) {

407 if(
c
 >= '0' && c <= '9') {

408 
	`mpmulcfix
(
a
, 16);

409 
	`m∑ddcfix
(
a
, 
c
-'0');

410 
c
 = *
s
++;

413 if(
c
 >= 'a' && c <= 'f') {

414 
	`mpmulcfix
(
a
, 16);

415 
	`m∑ddcfix
(
a
, 
c
+10-'a');

416 
c
 = *
s
++;

419 if(
c
 >= 'A' && c <= 'F') {

420 
	`mpmulcfix
(
a
, 16);

421 
	`m∑ddcfix
(
a
, 
c
+10-'A');

422 
c
 = *
s
++;

425 
bad
;

428 
out
:

429 if(
f
)

430 
	`m≤egfix
(
a
);

433 
bad
:

434 
	`yyîr‹
("c⁄°™àtoÿœrge: %s", 
as
);

435 
	`mpmovecfix
(
a
, 0);

436 
	}
}

439 
	$Bc⁄v
(
Fmt
 *
Â
)

441 
buf
[500], *
p
;

442 
Mpöt
 *
xvÆ
, 
q
, 
r
, 
ãn
;

443 
f
;

445 
xvÆ
 = 
	`va_¨g
(
Â
->
¨gs
, 
Mpöt
*);

446 
	`mpmovefixfix
(&
q
, 
xvÆ
);

447 
f
 = 0;

448 if(
	`m±e°fix
(&
q
) < 0) {

449 
f
 = 1;

450 
	`m≤egfix
(&
q
);

452 
	`mpmovecfix
(&
ãn
, 10);

454 
p
 = &
buf
[(buf)];

455 *--
p
 = 0;

457 
	`mpdivmodfixfix
(&
q
, &
r
, &q, &
ãn
);

458 *--
p
 = 
	`mpgëfix
(&
r
) + '0';

459 if(
	`m±e°fix
(&
q
) <= 0)

462 if(
f
)

463 *--
p
 = '-';

464  
	`fmt°r˝y
(
Â
, 
p
);

465 
	}
}

468 
	$Fc⁄v
(
Fmt
 *
Â
)

470 
buf
[500];

471 
MpÊt
 *
fvp
, 
fv
;

472 
d
;

474 
fvp
 = 
	`va_¨g
(
Â
->
¨gs
, 
MpÊt
*);

475 if(
Â
->
Êags
 & 
FmtSh¨p
) {

478 if(-900 < 
fvp
->
exp
 && fvp->exp < 900) {

479 
d
 = 
	`mpgëÊt
(
fvp
);

480 if(
d
 >0 && (
Â
->
Êags
 & 
FmtSign
))

481 
	`fmçröt
(
Â
, "+");

482  
	`fmçröt
(
Â
, "%g", 
d
);

488 if(
	`sigfig
(
fvp
) == 0) {

489 
	`¢¥öt
(
buf
, (buf), "0p+0");

490 
out
;

492 
fv
 = *
fvp
;

494 
fv
.
vÆ
.
a
[0] == 0) {

495 
	`mpshi·fix
(&
fv
.
vÆ
, -
MpsˇÀ
);

496 
fv
.
exp
 +
MpsˇÀ
;

498 (
fv
.
vÆ
.
a
[0]&1) == 0) {

499 
	`mpshi·fix
(&
fv
.
vÆ
, -1);

500 
fv
.
exp
 += 1;

503 if(
fv
.
exp
 >= 0) {

504 
	`¢¥öt
(
buf
, (buf), "%Bp+%d", &
fv
.
vÆ
, fv.
exp
);

505 
out
;

507 
	`¢¥öt
(
buf
, (buf), "%Bp-%d", &
fv
.
vÆ
, -fv.
exp
);

509 
out
:

510  
	`fmt°r˝y
(
Â
, 
buf
);

511 
	}
}

	@mparith2.c

5 
	~<u.h
>

6 
	~<libc.h
>

7 
	~"go.h
"

14 
	$m∂í
(
Mpöt
 *
a
)

16 
i
, 
n
;

17 *
a1
;

19 
n
 = -1;

20 
a1
 = &
a
->a[0];

21 
i
=0; i<
Mµªc
; i++) {

22 if(*
a1
++ != 0)

23 
n
 = 
i
;

25  
n
+1;

26 
	}
}

33 
	$m∂sh
(
Mpöt
 *
a
, 
quõt
)

35 *
a1
, 
x
;

36 
i
, 
c
;

38 
c
 = 0;

39 
a1
 = &
a
->a[0];

40 
i
=0; i<
Mµªc
; i++) {

41 
x
 = (*
a1
 << 1Ë+ 
c
;

42 
c
 = 0;

43 if(
x
 >
Mpba£
) {

44 
x
 -
Mpba£
;

45 
c
 = 1;

47 *
a1
++ = 
x
;

49 
a
->
ovf
 = 
c
;

50 if(
a
->
ovf
 && !
quõt
)

51 
	`yyîr‹
("constant shift overflow");

52 
	}
}

59 
	$m∂shw
(
Mpöt
 *
a
, 
quõt
)

61 *
a1
;

62 
i
;

64 
a1
 = &
a
->a[
Mµªc
-1];

65 if(*
a1
) {

66 
a
->
ovf
 = 1;

67 if(!
quõt
)

68 
	`yyîr‹
("constant shift overflow");

70 
i
=1; i<
Mµªc
; i++) {

71 
a1
[0] =á1[-1];

72 
a1
--;

74 
a1
[0] = 0;

75 
	}
}

82 
	$m¥sh
(
Mpöt
 *
a
)

84 *
a1
, 
x
, 
lo
;

85 
i
, 
c
;

87 
c
 = 0;

88 
lo
 = 
a
->a[0] & 1;

89 
a1
 = &
a
->a[
Mµªc
];

90 
i
=0; i<
Mµªc
; i++) {

91 
x
 = *--
a1
;

92 *
a1
 = (
x
 + 
c
) >> 1;

93 
c
 = 0;

94 if(
x
 & 1)

95 
c
 = 
Mpba£
;

97 if(
a
->
√g
 && 
lo
 != 0)

98 
	`m∑ddcfix
(
a
, -1);

99 
	}
}

106 
	$m¥shw
(
Mpöt
 *
a
)

108 *
a1
, 
lo
;

109 
i
;

111 
lo
 = 
a
->a[0];

112 
a1
 = &
a
->a[0];

113 
i
=1; i<
Mµªc
; i++) {

114 
a1
[0] =á1[1];

115 
a1
++;

117 
a1
[0] = 0;

118 if(
a
->
√g
 && 
lo
 != 0)

119 
	`m∑ddcfix
(
a
, -1);

120 
	}
}

126 
	$mpcmp
(
Mpöt
 *
a
, Mpöà*
b
)

128 
x
, *
a1
, *
b1
;

129 
i
;

131 if(
a
->
ovf
 || 
b
->ovf) {

132 if(
nßvedîr‹s
+
√º‹s
 == 0)

133 
	`yyîr‹
("ovf in cmp");

137 
a1
 = &
a
->a[0] + 
Mµªc
;

138 
b1
 = &
b
->
a
[0] + 
Mµªc
;

140 
i
=0; i<
Mµªc
; i++) {

141 
x
 = *--
a1
 - *--
b1
;

142 if(
x
 > 0)

144 if(
x
 < 0)

148 
	}
}

155 
	$m≤eg
(
Mpöt
 *
a
)

157 
x
, *
a1
;

158 
i
, 
c
;

160 
a1
 = &
a
->a[0];

161 
c
 = 0;

162 
i
=0; i<
Mµªc
; i++) {

163 
x
 = -*
a1
 -
c
;

164 
c
 = 0;

165 if(
x
 < 0) {

166 
x
 +
Mpba£
;

167 
c
 = 1;

169 *
a1
++ = 
x
;

171 
	}
}

175 
	$mpshi·fix
(
Mpöt
 *
a
, 
s
)

177 if(
s
 >= 0) {

178 
s
 >
MpsˇÀ
) {

179 
	`m∂shw
(
a
, 0);

180 
s
 -
MpsˇÀ
;

182 
s
 > 0) {

183 
	`m∂sh
(
a
, 0);

184 
s
--;

187 
s
 = -s;

188 
s
 >
MpsˇÀ
) {

189 
	`m¥shw
(
a
);

190 
s
 -
MpsˇÀ
;

192 
s
 > 0) {

193 
	`m¥sh
(
a
);

194 
s
--;

197 
	}
}

202 
	$m∑ddfixfix
(
Mpöt
 *
a
, Mpöà*
b
, 
quõt
)

204 
i
, 
c
;

205 
x
, *
a1
, *
b1
;

207 if(
a
->
ovf
 || 
b
->ovf) {

208 if(
nßvedîr‹s
+
√º‹s
 == 0)

209 
	`yyîr‹
("ovf in mpaddxx");

210 
a
->
ovf
 = 1;

214 
c
 = 0;

215 
a1
 = &
a
->a[0];

216 
b1
 = &
b
->
a
[0];

217 if(
a
->
√g
 !
b
->neg)

218 
sub
;

221 
i
=0; i<
Mµªc
; i++) {

222 
x
 = *
a1
 + *
b1
++ + 
c
;

223 
c
 = 0;

224 if(
x
 >
Mpba£
) {

225 
x
 -
Mpba£
;

226 
c
 = 1;

228 *
a1
++ = 
x
;

230 
a
->
ovf
 = 
c
;

231 if(
a
->
ovf
 && !
quõt
)

232 
	`yyîr‹
("constantáddition overflow");

236 
sub
:

238 
	`mpcmp
(
a
, 
b
)) {

240 
	`mpmovecfix
(
a
, 0);

244 
i
=0; i<
Mµªc
; i++) {

245 
x
 = *
a1
 - *
b1
++ - 
c
;

246 
c
 = 0;

247 if(
x
 < 0) {

248 
x
 +
Mpba£
;

249 
c
 = 1;

251 *
a1
++ = 
x
;

256 
a
->
√g
 ^= 1;

257 
i
=0; i<
Mµªc
; i++) {

258 
x
 = *
b1
++ - *
a1
 - 
c
;

259 
c
 = 0;

260 if(
x
 < 0) {

261 
x
 +
Mpba£
;

262 
c
 = 1;

264 *
a1
++ = 
x
;

268 
	}
}

271 
	$mpmulfixfix
(
Mpöt
 *
a
, Mpöà*
b
)

274 
i
, 
j
, 
«
, 
nb
;

275 *
a1
, 
x
;

276 
Mpöt
 
s
, 
q
;

278 if(
a
->
ovf
 || 
b
->ovf) {

279 if(
nßvedîr‹s
+
√º‹s
 == 0)

280 
	`yyîr‹
("ovf in mpmulfixfix");

281 
a
->
ovf
 = 1;

287 
«
 = 
	`m∂í
(
a
);

288 
nb
 = 
	`m∂í
(
b
);

289 if(
«
 > 
nb
) {

290 
	`mpmovefixfix
(&
s
, 
a
);

291 
a1
 = &
b
->
a
[0];

292 
«
 = 
nb
;

294 
	`mpmovefixfix
(&
s
, 
b
);

295 
a1
 = &
a
->a[0];

297 
s
.
√g
 = 0;

299 
	`mpmovecfix
(&
q
, 0);

300 
i
=0; i<
«
; i++) {

301 
x
 = *
a1
++;

302 
j
=0; j<
MpsˇÀ
; j++) {

303 if(
x
 & 1)

304 
	`m∑ddfixfix
(&
q
, &
s
, 1);

305 
	`m∂sh
(&
s
, 1);

306 
x
 >>= 1;

310 
q
.
√g
 = 
a
->√g ^ 
b
->neg;

311 
	`mpmovefixfix
(
a
, &
q
);

312 if(
a
->
ovf
)

313 
	`yyîr‹
("constant multiplication overflow");

314 
	}
}

317 
	$mpmul‰a˘
(
Mpöt
 *
a
, Mpöà*
b
)

320 
i
, 
j
;

321 *
a1
, 
x
;

322 
Mpöt
 
s
, 
q
;

324 if(
a
->
ovf
 || 
b
->ovf) {

325 if(
nßvedîr‹s
+
√º‹s
 == 0)

326 
	`yyîr‹
("ovf in mpmulflt");

327 
a
->
ovf
 = 1;

331 
	`mpmovefixfix
(&
s
, 
b
);

332 
a1
 = &
a
->a[
Mµªc
];

333 
s
.
√g
 = 0;

334 
	`mpmovecfix
(&
q
, 0);

336 
x
 = *--
a1
;

337 if(
x
 != 0)

338 
	`yyîr‹
("mpmulfractÇotÇormal");

340 
i
=0; i<
Mµªc
-1; i++) {

341 
x
 = *--
a1
;

342 if(
x
 == 0) {

343 
	`m¥shw
(&
s
);

346 
j
=0; j<
MpsˇÀ
; j++) {

347 
x
 <<= 1;

348 if(
x
 & 
Mpba£
)

349 
	`m∑ddfixfix
(&
q
, &
s
, 1);

350 
	`m¥sh
(&
s
);

354 
q
.
√g
 = 
a
->√g ^ 
b
->neg;

355 
	`mpmovefixfix
(
a
, &
q
);

356 if(
a
->
ovf
)

357 
	`yyîr‹
("constant multiplication overflow");

358 
	}
}

361 
	$mp‹fixfix
(
Mpöt
 *
a
, Mpöà*
b
)

363 
i
;

364 
x
, *
a1
, *
b1
;

366 
x
 = 0;

367 if(
a
->
ovf
 || 
b
->ovf) {

368 if(
nßvedîr‹s
+
√º‹s
 == 0)

369 
	`yyîr‹
("ovf in mporfixfix");

370 
	`mpmovecfix
(
a
, 0);

371 
a
->
ovf
 = 1;

374 if(
a
->
√g
) {

375 
a
->
√g
 = 0;

376 
	`m≤eg
(
a
);

378 if(
b
->
√g
)

379 
	`m≤eg
(
b
);

381 
a1
 = &
a
->a[0];

382 
b1
 = &
b
->
a
[0];

383 
i
=0; i<
Mµªc
; i++) {

384 
x
 = *
a1
 | *
b1
++;

385 *
a1
++ = 
x
;

388 if(
b
->
√g
)

389 
	`m≤eg
(
b
);

390 if(
x
 & 
Mpsign
) {

391 
a
->
√g
 = 1;

392 
	`m≤eg
(
a
);

394 
	}
}

397 
	$m∑ndfixfix
(
Mpöt
 *
a
, Mpöà*
b
)

399 
i
;

400 
x
, *
a1
, *
b1
;

402 
x
 = 0;

403 if(
a
->
ovf
 || 
b
->ovf) {

404 if(
nßvedîr‹s
+
√º‹s
 == 0)

405 
	`yyîr‹
("ovf in mpandfixfix");

406 
	`mpmovecfix
(
a
, 0);

407 
a
->
ovf
 = 1;

410 if(
a
->
√g
) {

411 
a
->
√g
 = 0;

412 
	`m≤eg
(
a
);

414 if(
b
->
√g
)

415 
	`m≤eg
(
b
);

417 
a1
 = &
a
->a[0];

418 
b1
 = &
b
->
a
[0];

419 
i
=0; i<
Mµªc
; i++) {

420 
x
 = *
a1
 & *
b1
++;

421 *
a1
++ = 
x
;

424 if(
b
->
√g
)

425 
	`m≤eg
(
b
);

426 if(
x
 & 
Mpsign
) {

427 
a
->
√g
 = 1;

428 
	`m≤eg
(
a
);

430 
	}
}

433 
	$m∑ndnŸfixfix
(
Mpöt
 *
a
, Mpöà*
b
)

435 
i
;

436 
x
, *
a1
, *
b1
;

438 
x
 = 0;

439 if(
a
->
ovf
 || 
b
->ovf) {

440 if(
nßvedîr‹s
+
√º‹s
 == 0)

441 
	`yyîr‹
("ovf in mpandnotfixfix");

442 
	`mpmovecfix
(
a
, 0);

443 
a
->
ovf
 = 1;

446 if(
a
->
√g
) {

447 
a
->
√g
 = 0;

448 
	`m≤eg
(
a
);

450 if(
b
->
√g
)

451 
	`m≤eg
(
b
);

453 
a1
 = &
a
->a[0];

454 
b1
 = &
b
->
a
[0];

455 
i
=0; i<
Mµªc
; i++) {

456 
x
 = *
a1
 & ~*
b1
++;

457 *
a1
++ = 
x
;

460 if(
b
->
√g
)

461 
	`m≤eg
(
b
);

462 if(
x
 & 
Mpsign
) {

463 
a
->
√g
 = 1;

464 
	`m≤eg
(
a
);

466 
	}
}

469 
	$mpx‹fixfix
(
Mpöt
 *
a
, Mpöà*
b
)

471 
i
;

472 
x
, *
a1
, *
b1
;

474 
x
 = 0;

475 if(
a
->
ovf
 || 
b
->ovf) {

476 if(
nßvedîr‹s
+
√º‹s
 == 0)

477 
	`yyîr‹
("ovf in mporfixfix");

478 
	`mpmovecfix
(
a
, 0);

479 
a
->
ovf
 = 1;

482 if(
a
->
√g
) {

483 
a
->
√g
 = 0;

484 
	`m≤eg
(
a
);

486 if(
b
->
√g
)

487 
	`m≤eg
(
b
);

489 
a1
 = &
a
->a[0];

490 
b1
 = &
b
->
a
[0];

491 
i
=0; i<
Mµªc
; i++) {

492 
x
 = *
a1
 ^ *
b1
++;

493 *
a1
++ = 
x
;

496 if(
b
->
√g
)

497 
	`m≤eg
(
b
);

498 if(
x
 & 
Mpsign
) {

499 
a
->
√g
 = 1;

500 
	`m≤eg
(
a
);

502 
	}
}

505 
	$m∂shfixfix
(
Mpöt
 *
a
, Mpöà*
b
)

507 
vl⁄g
 
s
;

509 if(
a
->
ovf
 || 
b
->ovf) {

510 if(
nßvedîr‹s
+
√º‹s
 == 0)

511 
	`yyîr‹
("ovf in mporfixfix");

512 
	`mpmovecfix
(
a
, 0);

513 
a
->
ovf
 = 1;

516 
s
 = 
	`mpgëfix
(
b
);

517 if(
s
 < 0 || s >
Mµªc
*
MpsˇÀ
) {

518 
	`yyîr‹
("°upid shi·: %Œd", 
s
);

519 
	`mpmovecfix
(
a
, 0);

523 
	`mpshi·fix
(
a
, 
s
);

524 
	}
}

527 
	$m¥shfixfix
(
Mpöt
 *
a
, Mpöà*
b
)

529 
vl⁄g
 
s
;

531 if(
a
->
ovf
 || 
b
->ovf) {

532 if(
nßvedîr‹s
+
√º‹s
 == 0)

533 
	`yyîr‹
("ovf in mprshfixfix");

534 
	`mpmovecfix
(
a
, 0);

535 
a
->
ovf
 = 1;

538 
s
 = 
	`mpgëfix
(
b
);

539 if(
s
 < 0 || s >
Mµªc
*
MpsˇÀ
) {

540 
	`yyîr‹
("°upid shi·: %Œd", 
s
);

541 if(
a
->
√g
)

542 
	`mpmovecfix
(
a
, -1);

544 
	`mpmovecfix
(
a
, 0);

548 
	`mpshi·fix
(
a
, -
s
);

549 
	}
}

552 
	$m≤egfix
(
Mpöt
 *
a
)

554 
a
->
√g
 ^= 1;

555 
	}
}

557 
vl⁄g


558 
	$mpgëfix
(
Mpöt
 *
a
)

560 
vl⁄g
 
v
;

562 if(
a
->
ovf
) {

563 if(
nßvedîr‹s
+
√º‹s
 == 0)

564 
	`yyîr‹
("constant overflow");

568 
v
 = (
vl⁄g
)
a
->a[0];

569 
v
 |(
vl⁄g
)
a
->a[1] << 
MpsˇÀ
;

570 
v
 |(
vl⁄g
)
a
->a[2] << (
MpsˇÀ
+Mpscale);

571 if(
a
->
√g
)

572 
v
 = -v;

573  
v
;

574 
	}
}

577 
	$mpmovecfix
(
Mpöt
 *
a
, 
vl⁄g
 
c
)

579 
i
;

580 *
a1
;

581 
vl⁄g
 
x
;

583 
a
->
√g
 = 0;

584 
a
->
ovf
 = 0;

586 
x
 = 
c
;

587 if(
x
 < 0) {

588 
a
->
√g
 = 1;

589 
x
 = -x;

592 
a1
 = &
a
->a[0];

593 
i
=0; i<
Mµªc
; i++) {

594 *
a1
++ = 
x
&
Mpmask
;

595 
x
 >>
MpsˇÀ
;

597 
	}
}

600 
	$mpdivmodfixfix
(
Mpöt
 *
q
, Mpöà*
r
, Mpöà*
n
, Mpöà*
d
)

602 
i
, 
ns
, 
ds
;

604 
ns
 = 
n
->
√g
;

605 
ds
 = 
d
->
√g
;

606 
n
->
√g
 = 0;

607 
d
->
√g
 = 0;

609 
	`mpmovefixfix
(
r
, 
n
);

610 
	`mpmovecfix
(
q
, 0);

614 
i
=0; i<
Mµªc
*
MpsˇÀ
; i++) {

615 if(
	`mpcmp
(
d
, 
r
) > 0)

617 
	`m∂sh
(
d
, 1);

622 if(
i
 >
Mµªc
*
MpsˇÀ
) {

623 
q
->
ovf
 = 1;

624 
r
->
ovf
 = 1;

625 
n
->
√g
 = 
ns
;

626 
d
->
√g
 = 
ds
;

627 
	`yyîr‹
("constant division overflow");

635 ; 
i
>0; i--) {

636 
	`m∂sh
(
q
, 1);

637 
	`m¥sh
(
d
);

638 if(
	`mpcmp
(
d
, 
r
) <= 0) {

639 
	`m∑ddcfix
(
q
, 1);

640 
	`mpsubfixfix
(
r
, 
d
);

644 
n
->
√g
 = 
ns
;

645 
d
->
√g
 = 
ds
;

646 
r
->
√g
 = 
ns
;

647 
q
->
√g
 = 
ns
^
ds
;

648 
	}
}

651 
	$iszîo
(
Mpöt
 *
a
)

653 *
a1
;

654 
i
;

655 
a1
 = &
a
->a[0] + 
Mµªc
;

656 
i
=0; i<
Mµªc
; i++) {

657 if(*--
a1
 != 0)

661 
	}
}

664 
	$mpdiv‰a˘
(
Mpöt
 *
a
, Mpöà*
b
)

666 
Mpöt
 
n
, 
d
;

667 
i
, 
j
, 
√g
;

668 *
a1
, 
x
;

670 
	`mpmovefixfix
(&
n
, 
a
);

671 
	`mpmovefixfix
(&
d
, 
b
);

672 
a1
 = &
a
->a[
Mµªc
];

674 
√g
 = 
n
.√g ^ 
d
.neg;

675 
n
.
√g
 = 0;

676 
d
.
√g
 = 0;

677 
i
=0; i<
Mµªc
; i++) {

678 
x
 = 0;

679 
j
=0; j<
MpsˇÀ
; j++) {

680 
x
 <<= 1;

681 if(
	`mpcmp
(&
d
, &
n
) <= 0) {

682 if(!
	`iszîo
(&
d
))

683 
x
 |= 1;

684 
	`mpsubfixfix
(&
n
, &
d
);

686 
	`m¥sh
(&
d
);

688 *--
a1
 = 
x
;

690 
a
->
√g
 =Çeg;

691 
	}
}

694 
	$m±e°fix
(
Mpöt
 *
a
)

696 
Mpöt
 
b
;

697 
r
;

699 
	`mpmovecfix
(&
b
, 0);

700 
r
 = 
	`mpcmp
(
a
, &
b
);

701 if(
a
->
√g
) {

702 if(
r
 > 0)

704 if(
r
 < 0)

707  
r
;

708 
	}
}

	@mparith3.c

5 
	~<u.h
>

6 
	~<libc.h
>

7 
	~"go.h
"

14 
	$sigfig
(
MpÊt
 *
a
)

16 
i
;

18 
i
=
Mµªc
-1; i>=0; i--)

19 if(
a
->
vÆ
.a[
i
] != 0)

22  
i
+1;

23 
	}
}

30 
	$m≤‹m
(
MpÊt
 *
a
)

32 
s
, 
os
;

33 
x
;

35 
os
 = 
	`sigfig
(
a
);

36 if(
os
 == 0) {

38 
a
->
exp
 = 0;

39 
a
->
vÆ
.
√g
 = 0;

44 
x
 = 
a
->
vÆ
.a[
os
-1];

45 
s
 = (
M≤‹m
-
os
Ë* 
MpsˇÀ
;

49 
x
 <<= 1;

50 if(
x
 & 
Mpba£
)

52 
s
++;

53 if(
x
 == 0) {

57 
s
 = (
M≤‹m
-
os
Ë* 
MpsˇÀ
;

62 
	`mpshi·fix
(&
a
->
vÆ
, 
s
);

63 
a
->
exp
 -
s
;

64 
	}
}

69 
	$m∑ddÊtÊt
(
MpÊt
 *
a
, MpÊà*
b
)

71 
ß
, 
sb
, 
s
;

72 
MpÊt
 
c
;

74 if(
Mpdebug
)

75 
	`¥öt
("\n%F + %F", 
a
, 
b
);

77 
ß
 = 
	`sigfig
(
a
);

78 if(
ß
 == 0) {

79 
	`mpmoveÊtÊt
(
a
, 
b
);

80 
out
;

83 
sb
 = 
	`sigfig
(
b
);

84 if(
sb
 == 0)

85 
out
;

87 
s
 = 
a
->
exp
 - 
b
->exp;

88 if(
s
 > 0) {

90 
	`mpmoveÊtÊt
(&
c
, 
b
);

91 
	`mpshi·fix
(&
c
.
vÆ
, -
s
);

92 
	`m∑ddfixfix
(&
a
->
vÆ
, &
c
.val, 0);

93 
out
;

95 if(
s
 < 0) {

97 
	`mpshi·fix
(&
a
->
vÆ
, 
s
);

98 
a
->
exp
 -
s
;

99 
	`m∑ddfixfix
(&
a
->
vÆ
, &
b
->val, 0);

100 
out
;

102 
	`m∑ddfixfix
(&
a
->
vÆ
, &
b
->val, 0);

104 
out
:

105 
	`m≤‹m
(
a
);

106 if(
Mpdebug
)

107 
	`¥öt
(" = %F\n\n", 
a
);

108 
	}
}

111 
	$mpmulÊtÊt
(
MpÊt
 *
a
, MpÊà*
b
)

113 
ß
, 
sb
;

115 if(
Mpdebug
)

116 
	`¥öt
("%F\¿* %F\n", 
a
, 
b
);

118 
ß
 = 
	`sigfig
(
a
);

119 if(
ß
 == 0) {

121 
a
->
exp
 = 0;

122 
a
->
vÆ
.
√g
 = 0;

126 
sb
 = 
	`sigfig
(
b
);

127 if(
sb
 == 0) {

129 
	`mpmoveÊtÊt
(
a
, 
b
);

133 
	`mpmul‰a˘
(&
a
->
vÆ
, &
b
->val);

134 
a
->
exp
 = (a->ex∞+ 
b
->expË+ 
MpsˇÀ
*
Mµªc
 - Mpscale - 1;

136 
	`m≤‹m
(
a
);

137 if(
Mpdebug
)

138 
	`¥öt
(" = %F\n\n", 
a
);

139 
	}
}

142 
	$mpdivÊtÊt
(
MpÊt
 *
a
, MpÊà*
b
)

144 
ß
, 
sb
;

145 
MpÊt
 
c
;

147 if(
Mpdebug
)

148 
	`¥öt
("%F\¿/ %F\n", 
a
, 
b
);

150 
sb
 = 
	`sigfig
(
b
);

151 if(
sb
 == 0) {

153 
a
->
exp
 = 0;

154 
a
->
vÆ
.
√g
 = 0;

155 
a
->
vÆ
.
ovf
 = 1;

156 
	`yyîr‹
("constant division by zero");

160 
ß
 = 
	`sigfig
(
a
);

161 if(
ß
 == 0) {

163 
a
->
exp
 = 0;

164 
a
->
vÆ
.
√g
 = 0;

169 
	`mpmoveÊtÊt
(&
c
, 
b
);

170 
	`mpshi·fix
(&
c
.
vÆ
, 
MpsˇÀ
);

173 
	`mpdiv‰a˘
(&
a
->
vÆ
, &
c
.val);

174 
a
->
exp
 = (a->exp-
c
.expË- 
MpsˇÀ
*(
Mµªc
-1) + 1;

176 
	`m≤‹m
(
a
);

177 if(
Mpdebug
)

178 
	`¥öt
(" = %F\n\n", 
a
);

179 
	}
}

182 
	$mpgëÊt
(
MpÊt
 *
a
)

184 
s
, 
i
, 
e
;

185 
uvl⁄g
 
v
, 
vm
;

186 
f
;

188 if(
a
->
vÆ
.
ovf
 && 
nßvedîr‹s
+
√º‹s
 == 0)

189 
	`yyîr‹
("mpgetflt ovf");

191 
s
 = 
	`sigfig
(
a
);

192 if(
s
 == 0)

195 if(
s
 !
M≤‹m
) {

196 
	`yyîr‹
("mpgetfltÇorm");

197 
	`m≤‹m
(
a
);

200 (
a
->
vÆ
.a[
M≤‹m
-1] & 
Mpsign
) == 0) {

201 
	`mpshi·fix
(&
a
->
vÆ
, 1);

202 
a
->
exp
 -= 1;

210 
s
 = 53+1;

211 
v
 = 0;

212 
i
=
M≤‹m
-1; 
s
>=
MpsˇÀ
; i--) {

213 
v
 = (v<<
MpsˇÀ
Ë| 
a
->
vÆ
.a[
i
];

214 
s
 -
MpsˇÀ
;

216 
vm
 = 
v
;

217 if(
s
 > 0)

218 
vm
 = (vm<<
s
Ë| (
a
->
vÆ
.a[
i
]>>(
MpsˇÀ
-s));

221 
s
 += 64;

222 ; 
s
>=
MpsˇÀ
; 
i
--) {

223 
v
 = (v<<
MpsˇÀ
Ë| 
a
->
vÆ
.a[
i
];

224 
s
 -
MpsˇÀ
;

226 if(
s
 > 0)

227 
v
 = (v<<
s
Ë| (
a
->
vÆ
.a[
i
]>>(
MpsˇÀ
-s));

230 
e
 = 
M≤‹m
*
MpsˇÀ
 + 
a
->
exp
 - 53;

231 if(
e
 < -1074) {

232 
s
 = -
e
 - 1074;

233 if(
s
 > 54)

234 
s
 = 54;

235 
v
 |
vm
 & ((1ULL<<
s
) - 1);

236 
vm
 >>
s
;

237 
e
 = -1074;

242 if(
v
 !0 || (
vm
&2ULL) != 0)

243 
vm
 = (vm>>1) + (vm&1ULL);

245 
vm
 >>= 1;

247 
f
 = ()(
vm
);

248 
f
 = 
	`ldexp
(f, 
e
);

250 if(
a
->
vÆ
.
√g
)

251 
f
 = -f;

252  
f
;

253 
	}
}

256 
	$mpmovecÊt
(
MpÊt
 *
a
, 
c
)

258 
i
;

259 
f
;

260 
l
;

262 if(
Mpdebug
)

263 
	`¥öt
("\nc⁄° %g", 
c
);

264 
	`mpmovecfix
(&
a
->
vÆ
, 0);

265 
a
->
exp
 = 0;

266 if(
c
 == 0)

267 
out
;

268 if(
c
 < 0) {

269 
a
->
vÆ
.
√g
 = 1;

270 
c
 = -c;

273 
f
 = 
	`‰exp
(
c
, &
i
);

274 
a
->
exp
 = 
i
;

276 
i
=0; i<10; i++) {

277 
f
 = f*
Mpba£
;

278 
l
 = 
	`Êo‹
(
f
);

279 
f
 = f - 
l
;

280 
a
->
exp
 -
MpsˇÀ
;

281 
a
->
vÆ
.a[0] = 
l
;

282 if(
f
 == 0)

284 
	`mpshi·fix
(&
a
->
vÆ
, 
MpsˇÀ
);

287 
out
:

288 
	`m≤‹m
(
a
);

289 if(
Mpdebug
)

290 
	`¥öt
(" = %F\n", 
a
);

291 
	}
}

294 
	$m≤egÊt
(
MpÊt
 *
a
)

296 
a
->
vÆ
.
√g
 ^= 1;

297 
	}
}

300 
	$m±e°Êt
(
MpÊt
 *
a
)

302 
s
;

304 if(
Mpdebug
)

305 
	`¥öt
("\n%F?", 
a
);

306 
s
 = 
	`sigfig
(
a
);

307 if(
s
 != 0) {

308 
s
 = +1;

309 if(
a
->
vÆ
.
√g
)

310 
s
 = -1;

312 if(
Mpdebug
)

313 
	`¥öt
(" = %d\n", 
s
);

314  
s
;

315 
	}
}

	@obj.c

5 
	~<u.h
>

6 
	~<libc.h
>

7 
	~"go.h
"

13 
outhi°
(
Biobuf
 *
b
);

14 
dumpglobls
();

17 
	$dumpobj
()

19 
bout
 = 
	`B›í
(
outfûe
, 
OWRITE
);

20 if(
bout
 =
nû
) {

21 
	`Êushîr‹s
();

22 
	`¥öt
("ˇn'à¸óã %s: %r\n", 
outfûe
);

23 
	`îr‹exô
();

26 
	`B¥öt
(
bout
, "gÿobje˘ %†%†%†%s\n", 
	`gëgoos
(), 
the°rög
, 
	`gëgovîsi⁄
(), 
	`exp°rög
());

27 
	`B¥öt
(
bout
, "Éxportsáutomatically generated from\n");

28 
	`B¥öt
(
bout
, " %†öÖackagê\"%s\"\n", 
curio
.
öfûe
, 
loˇÕkg
->
«me
);

29 
	`dum≥xp‹t
();

30 
	`B¥öt
(
bout
, "\n!\n");

32 
	`outhi°
(
bout
);

34 
	`dumpglobls
();

35 
	`dum±y≥°ru˘s
();

36 
	`dumpd©a
();

37 
	`dumpfuncs
();

39 
	`Bãrm
(
bout
);

40 
	}
}

43 
	$dumpglobls
()

45 
Node
 *
n
;

46 
NodeLi°
 *
l
;

49 
l
=
exã∫d˛
;Ü;Üˆ->
√xt
) {

50 
n
 = 
l
->n;

51 if(
n
->
›
 !
ONAME
)

54 if(
n
->
ty≥
 =
T
)

55 
	`Áèl
("exã∫Æ %NÇûÅy≥\n", 
n
);

56 if(
n
->
˛ass
 =
PFUNC
)

58 if(
n
->
sym
->
pkg
 !
loˇÕkg
)

60 
	`dowidth
(
n
->
ty≥
);

62 
	`gglob od
(
n
,Ç->
ty≥
->
width
);

64 
	}
}

67 
	$Bpuäame
(
Biobuf
 *
b
, 
Sym
 *
s
)

69 
	`B¥öt
(
b
, "%s", 
s
->
pkg
->
¥efix
);

70 
	`Bputc
(
b
, '.');

71 
	`Bwrôe
(
b
, 
s
->
«me
, 
	`°æí
(s->name)+1);

72 
	}
}

75 
	$outzfûe
(
Biobuf
 *
b
, *
p
)

77 *
q
, *
q2
;

79 
p
) {

80 
q
 = 
	`ut‰u√
(
p
, '/');

81 if(
wödows
) {

82 
q2
 = 
	`ut‰u√
(
p
, '\\');

83 if(
q2
 && (!
q
 || q2 < q))

84 
q
 = 
q2
;

86 if(!
q
) {

87 
	`zfûe
(
b
, 
p
, 
	`°æí
(p));

90 if(
q
 > 
p
)

91 
	`zfûe
(
b
, 
p
, 
q
-p);

92 
p
 = 
q
 + 1;

94 
	}
}

96 
	#isdñim
(
c
Ë(¯='/' || c ='\\')

	)

99 
	$outwö«me
(
Biobuf
 *
b
, 
Hi°
 *
h
, *
ds
, *
p
)

101 if(
	`isdñim
(
p
[0])) {

103 
	`zfûe
(
b
, 
ds
, 3);

104 
	`outzfûe
(
b
, 
p
+1);

107 if(
h
->
off£t
 =0 && 
∑th«me
 &&Öathname[1] == ':') {

108 if(
	`tﬁowîru√
(
ds
[0]Ë=tﬁowîru√(
∑th«me
[0])) {

110 
	`zfûe
(
b
, 
∑th«me
, 3);

111 
	`outzfûe
(
b
, 
∑th«me
+3);

117 
	`zfûe
(
b
, 
ds
, 2);

120 
	`outzfûe
(
b
, 
p
);

122 
	}
}

125 
	$outhi°
(
Biobuf
 *
b
)

127 
Hi°
 *
h
;

128 *
p
, 
ds
[] = {'c', ':', '/', 0};

129 *
to‰ì
;

130 
n
;

131 
fú°
 = 1;

132 *
g‹oŸ
, *
g‹oŸ_föÆ
;

134 if(
fú°
) {

136 
fú°
 = 0;

137 
g‹oŸ
 = 
	`gëív
("GOROOT");

138 
g‹oŸ_föÆ
 = 
	`gëív
("GOROOT_FINAL");

139 if(
g‹oŸ
 =
nû
)

140 
g‹oŸ
 = "";

141 if(
g‹oŸ_föÆ
 =
nû
)

142 
g‹oŸ_föÆ
 = 
g‹oŸ
;

143 if(
	`°rcmp
(
g‹oŸ
, 
g‹oŸ_föÆ
) == 0) {

144 
g‹oŸ
 = 
nû
;

145 
g‹oŸ_föÆ
 = 
nû
;

149 
to‰ì
 = 
nû
;

150 
h
 = 
hi°
; h !
H
; h = h->
lök
) {

151 
p
 = 
h
->
«me
;

152 if(
p
) {

153 if(
g‹oŸ
 !
nû
) {

154 
n
 = 
	`°æí
(
g‹oŸ
);

155 if(
	`°∫cmp
(
p
, 
g‹oŸ
, 
	`°æí
(g‹oŸ)Ë=0 &&Ö[
n
] == '/') {

156 
to‰ì
 = 
	`sm¥öt
("%s%s", 
g‹oŸ_föÆ
, 
p
+
n
);

157 
p
 = 
to‰ì
;

160 if(
wödows
) {

164 if(
	`isdñim
(
p
[0]) && isdelim(p[1])) {

167 
	`zfûe
(
b
, "//", 2);

168 
	`outzfûe
(
b
, 
p
+2);

169 } if(
p
[1] == ':') {

171 
ds
[0] = 
p
[0];

172 
	`outwö«me
(
b
, 
h
, 
ds
, 
p
+2);

175 
	`outwö«me
(
b
, 
h
, 
∑th«me
, 
p
);

178 if(
p
[0] == '/') {

180 
	`zfûe
(
b
, "/", 1);

181 
	`outzfûe
(
b
, 
p
+1);

184 if(
h
->
off£t
 >0 && 
∑th«me
 &&Öathname[0] == '/') {

185 
	`zfûe
(
b
, "/", 1);

186 
	`outzfûe
(
b
, 
∑th«me
+1);

188 
	`outzfûe
(
b
, 
p
);

192 
	`zhi°
(
b
, 
h
->
löe
, h->
off£t
);

193 if(
to‰ì
) {

194 
	`‰ì
(
to‰ì
);

195 
to‰ì
 = 
nû
;

198 
	}
}

201 
	$õìdtod
(
uöt64
 *
õì
, 
«tive
)

203 
‰
, 
ho
, 
f
;

204 
exp
;

205 
uöt32
 
h
, 
l
;

206 
uöt64
 
bôs
;

208 if(
«tive
 < 0) {

209 
	`õìdtod
(
õì
, -
«tive
);

210 *
õì
 |= 1ULL<<63;

213 if(
«tive
 == 0) {

214 *
õì
 = 0;

217 
‰
 = 
	`‰exp
(
«tive
, &
exp
);

218 
f
 = 2097152L;

219 
‰
 = 
	`modf
(‰*
f
, &
ho
);

220 
h
 = 
ho
;

221 
h
 &= 0xfffffL;

222 
f
 = 65536L;

223 
‰
 = 
	`modf
(‰*
f
, &
ho
);

224 
l
 = 
ho
;

225 
l
 <<= 16;

226 
l
 |(
öt32
)(
‰
*
f
);

227 
bôs
 = ((
uöt64
)
h
<<32Ë| 
l
;

228 if(
exp
 < -1021) {

230 
bôs
 |= 1LL<<52;

231 
bôs
 >>-1021 - 
exp
;

232 
exp
 = -1022;

234 
bôs
 |(
uöt64
)(
exp
+1022L) << 52;

235 *
õì
 = 
bôs
;

236 
	}
}

239 
	$duöt8
(
Sym
 *
s
, 
off
, 
uöt8
 
v
)

241  
	`duötxx
(
s
, 
off
, 
v
, 1);

242 
	}
}

245 
	$duöt16
(
Sym
 *
s
, 
off
, 
uöt16
 
v
)

247  
	`duötxx
(
s
, 
off
, 
v
, 2);

248 
	}
}

251 
	$duöt32
(
Sym
 *
s
, 
off
, 
uöt32
 
v
)

253  
	`duötxx
(
s
, 
off
, 
v
, 4);

254 
	}
}

257 
	$duöt64
(
Sym
 *
s
, 
off
, 
uöt64
 
v
)

259  
	`duötxx
(
s
, 
off
, 
v
, 8);

260 
	}
}

263 
	$duöçå
(
Sym
 *
s
, 
off
, 
uöt64
 
v
)

265  
	`duötxx
(
s
, 
off
, 
v
, 
width±r
);

266 
	}
}

268 
Sym
*

269 
	$°rögsym
(*
s
, 
Àn
)

271 
gí
;

272 
Sym
 *
sym
;

273 
off
, 
n
, 
m
;

275 
Sålô
 
lô
;

276 
buf
[110];

277 } 
tmp
;

278 
Pkg
 *
pkg
;

280 if(
Àn
 > 100) {

282 
	`¢¥öt
(
«mebuf
, “amebuf), ".go°rög.%d", ++
gí
);

283 
pkg
 = 
loˇÕkg
;

288 
tmp
.
lô
.
Àn
 =Üen;

289 
	`memmove
(
tmp
.
lô
.
s
, s, 
Àn
);

290 
tmp
.
lô
.
s
[
Àn
] = '\0';

291 
	`¢¥öt
(
«mebuf
, “amebuf), "\"%Z\"", &
tmp
.
lô
);

292 
pkg
 = 
go°rögpkg
;

294 
sym
 = 
	`pkglookup
(
«mebuf
, 
pkg
);

297 if(
sym
->
Êags
 & 
SymUniq
)

298  
sym
;

299 
sym
->
Êags
 |
SymUniq
;

300 
sym
->
def
 = 
	`√w«me
(sym);

302 
off
 = 0;

305 
off
 = 
	`dsym±r
(
sym
, off, sym, 
width±r
+4);

306 
off
 = 
	`duöt32
(
sym
, off, 
Àn
);

309 
n
=0;Ç<
Àn
;Ç+=
m
) {

310 
m
 = 8;

311 if(
m
 > 
Àn
-
n
)

312 
m
 = 
Àn
-
n
;

313 
off
 = 
	`d¢ame
(
sym
, off, 
s
+
n
, 
m
);

315 
off
 = 
	`duöt8
(
sym
, off, 0);

316 
off
 = (off+
width±r
-1)&~(widthptr-1);

317 
	`ggloblsym
(
sym
, 
off
, 1);

319  
sym
;

320 
	}
}

	@opnames.h

2 *
	g›«mes
[] = {

3 [
OXXX
] = "XXX",

4 [
ONAME
] = "NAME",

5 [
ONONAME
] = "NONAME",

6 [
OTYPE
] = "TYPE",

7 [
OPACK
] = "PACK",

8 [
OLITERAL
] = "LITERAL",

9 [
OADD
] = "ADD",

10 [
OSUB
] = "SUB",

11 [
OOR
] = "OR",

12 [
OXOR
] = "XOR",

13 [
OADDSTR
] = "ADDSTR",

14 [
OADDR
] = "ADDR",

15 [
OANDAND
] = "ANDAND",

16 [
OAPPEND
] = "APPEND",

17 [
OARRAYBYTESTR
] = "ARRAYBYTESTR",

18 [
OARRAYRUNESTR
] = "ARRAYRUNESTR",

19 [
OSTRARRAYBYTE
] = "STRARRAYBYTE",

20 [
OSTRARRAYRUNE
] = "STRARRAYRUNE",

21 [
OAS
] = "AS",

22 [
OAS2
] = "AS2",

23 [
OAS2FUNC
] = "AS2FUNC",

24 [
OAS2RECV
] = "AS2RECV",

25 [
OAS2MAPR
] = "AS2MAPR",

26 [
OAS2DOTTYPE
] = "AS2DOTTYPE",

27 [
OASOP
] = "ASOP",

28 [
OBAD
] = "BAD",

29 [
OCALL
] = "CALL",

30 [
OCALLFUNC
] = "CALLFUNC",

31 [
OCALLMETH
] = "CALLMETH",

32 [
OCALLINTER
] = "CALLINTER",

33 [
OCAP
] = "CAP",

34 [
OCLOSE
] = "CLOSE",

35 [
OCLOSURE
] = "CLOSURE",

36 [
OCMPIFACE
] = "CMPIFACE",

37 [
OCMPSTR
] = "CMPSTR",

38 [
OCOMPLIT
] = "COMPLIT",

39 [
OMAPLIT
] = "MAPLIT",

40 [
OSTRUCTLIT
] = "STRUCTLIT",

41 [
OARRAYLIT
] = "ARRAYLIT",

42 [
OPTRLIT
] = "PTRLIT",

43 [
OCONV
] = "CONV",

44 [
OCONVIFACE
] = "CONVIFACE",

45 [
OCONVNOP
] = "CONVNOP",

46 [
OCOPY
] = "COPY",

47 [
ODCL
] = "DCL",

48 [
ODCLFUNC
] = "DCLFUNC",

49 [
ODCLFIELD
] = "DCLFIELD",

50 [
ODCLCONST
] = "DCLCONST",

51 [
ODCLTYPE
] = "DCLTYPE",

52 [
ODELETE
] = "DELETE",

53 [
ODOT
] = "DOT",

54 [
ODOTPTR
] = "DOTPTR",

55 [
ODOTMETH
] = "DOTMETH",

56 [
ODOTINTER
] = "DOTINTER",

57 [
OXDOT
] = "XDOT",

58 [
ODOTTYPE
] = "DOTTYPE",

59 [
ODOTTYPE2
] = "DOTTYPE2",

60 [
OEQ
] = "EQ",

61 [
ONE
] = "NE",

62 [
OLT
] = "LT",

63 [
OLE
] = "LE",

64 [
OGE
] = "GE",

65 [
OGT
] = "GT",

66 [
OIND
] = "IND",

67 [
OINDEX
] = "INDEX",

68 [
OINDEXMAP
] = "INDEXMAP",

69 [
OKEY
] = "KEY",

70 [
OPARAM
] = "PARAM",

71 [
OLEN
] = "LEN",

72 [
OMAKE
] = "MAKE",

73 [
OMAKECHAN
] = "MAKECHAN",

74 [
OMAKEMAP
] = "MAKEMAP",

75 [
OMAKESLICE
] = "MAKESLICE",

76 [
OHMUL
] = "HMUL",

77 [
ORRC
] = "RRC",

78 [
OLRC
] = "LRC",

79 [
OMUL
] = "MUL",

80 [
ODIV
] = "DIV",

81 [
OMOD
] = "MOD",

82 [
OLSH
] = "LSH",

83 [
ORSH
] = "RSH",

84 [
OAND
] = "AND",

85 [
OANDNOT
] = "ANDNOT",

86 [
ONEW
] = "NEW",

87 [
ONOT
] = "NOT",

88 [
OCOM
] = "COM",

89 [
OPLUS
] = "PLUS",

90 [
OMINUS
] = "MINUS",

91 [
OOROR
] = "OROR",

92 [
OPANIC
] = "PANIC",

93 [
OPRINT
] = "PRINT",

94 [
OPRINTN
] = "PRINTN",

95 [
OPAREN
] = "PAREN",

96 [
OSEND
] = "SEND",

97 [
OSLICE
] = "SLICE",

98 [
OSLICEARR
] = "SLICEARR",

99 [
OSLICESTR
] = "SLICESTR",

100 [
ORECOVER
] = "RECOVER",

101 [
ORECV
] = "RECV",

102 [
ORUNESTR
] = "RUNESTR",

103 [
OSELRECV
] = "SELRECV",

104 [
OSELRECV2
] = "SELRECV2",

105 [
OIOTA
] = "IOTA",

106 [
OREAL
] = "REAL",

107 [
OIMAG
] = "IMAG",

108 [
OCOMPLEX
] = "COMPLEX",

109 [
OBLOCK
] = "BLOCK",

110 [
OBREAK
] = "BREAK",

111 [
OCASE
] = "CASE",

112 [
OXCASE
] = "XCASE",

113 [
OCONTINUE
] = "CONTINUE",

114 [
ODEFER
] = "DEFER",

115 [
OEMPTY
] = "EMPTY",

116 [
OFALL
] = "FALL",

117 [
OXFALL
] = "XFALL",

118 [
OFOR
] = "FOR",

119 [
OGOTO
] = "GOTO",

120 [
OIF
] = "IF",

121 [
OLABEL
] = "LABEL",

122 [
OPROC
] = "PROC",

123 [
ORANGE
] = "RANGE",

124 [
ORETURN
] = "RETURN",

125 [
OSELECT
] = "SELECT",

126 [
OSWITCH
] = "SWITCH",

127 [
OTYPESW
] = "TYPESW",

128 [
OTCHAN
] = "TCHAN",

129 [
OTMAP
] = "TMAP",

130 [
OTSTRUCT
] = "TSTRUCT",

131 [
OTINTER
] = "TINTER",

132 [
OTFUNC
] = "TFUNC",

133 [
OTARRAY
] = "TARRAY",

134 [
OTPAREN
] = "TPAREN",

135 [
ODDD
] = "DDD",

136 [
ODDDARG
] = "DDDARG",

137 [
OINLCALL
] = "INLCALL",

138 [
OITAB
] = "ITAB",

139 [
OCMP
] = "CMP",

140 [
ODEC
] = "DEC",

141 [
OEXTEND
] = "EXTEND",

142 [
OINC
] = "INC",

143 [
OREGISTER
] = "REGISTER",

144 [
OINDREG
] = "INDREG",

145 [
OEND
] = "END",

	@order.c

9 
	~<u.h
>

10 
	~<libc.h
>

11 
	~"go.h
"

13 
‹dî°mt
(
Node
*, 
NodeLi°
**);

14 
‹dî°méi°
(
NodeLi°
*, NodeList**);

15 
‹dîblock
(
NodeLi°
 **
l
);

16 
‹dîex¥
(
Node
**, 
NodeLi°
**);

17 
‹dîex¥li°
(
NodeLi°
*, NodeList**);

20 
	$‹dî
(
Node
 *
‚
)

22 
	`‹dîblock
(&
‚
->
nbody
);

23 
	}
}

26 
	$‹dî°méi°
(
NodeLi°
 *
l
, NodeLi° **
out
)

28 ; 
l
;Üˆ->
√xt
)

29 
	`‹dî°mt
(
l
->
n
, 
out
);

30 
	}
}

35 
	$‹dîblock
(
NodeLi°
 **
l
)

37 
NodeLi°
 *
out
;

39 
out
 = 
nû
;

40 
	`‹dî°méi°
(*
l
, &
out
);

41 *
l
 = 
out
;

42 
	}
}

47 
	$‹dîex¥ö∂a˚
(
Node
 **
≈
)

49 
Node
 *
n
;

50 
NodeLi°
 *
out
;

52 
n
 = *
≈
;

53 
out
 = 
nû
;

54 
	`‹dîex¥
(&
n
, &
out
);

55 
	`addöô
(&
n
, 
out
);

56 *
≈
 = 
n
;

57 
	}
}

61 
	$‹dî°mtö∂a˚
(
Node
 **
≈
)

63 
Node
 *
n
;

64 
NodeLi°
 *
out
;

66 
n
 = *
≈
;

67 
out
 = 
nû
;

68 
	`‹dî°mt
(
n
, &
out
);

69 *
≈
 = 
	`li°°mt
(
out
);

70 
	}
}

74 
	$‹dîöô
(
Node
 *
n
, 
NodeLi°
 **
out
)

76 
	`‹dî°méi°
(
n
->
nöô
, 
out
);

77 
n
->
nöô
 = 
nû
;

78 
	}
}

82 
	$ismu…iˇŒ
(
NodeLi°
 *
l
)

84 
Node
 *
n
;

87 if(
l
 =
nû
 ||Ü->
√xt
 !=Çil)

89 
n
 = 
l
->n;

92 
n
->
›
) {

95 
OCALLFUNC
:

96 
OCALLMETH
:

97 
OCALLINTER
:

102  
n
->
À·
->
ty≥
->
ouâu∂e
 > 1;

103 
	}
}

107 
NodeLi°
*

108 
	$c›yªt
(
Node
 *
n
, 
NodeLi°
 **
out
)

110 
Ty≥
 *
t
;

111 
Node
 *
tmp
, *
as
;

112 
NodeLi°
 *
l1
, *
l2
;

113 
Iãr
 
é
;

115 if(
n
->
ty≥
->
ëy≥
 !
TSTRUCT
 || !n->ty≥->
fu«rg
)

116 
	`Áèl
("c›yªà%T %d", 
n
->
ty≥
,Ç->
À·
->ty≥->
ouâu∂e
);

118 
l1
 = 
nû
;

119 
l2
 = 
nû
;

120 
t
=
	`°ru˘fú°
(&
é
, &
n
->
ty≥
);Å;Å=
	`°ru˘√xt
(&tl)) {

121 
tmp
 = 
	`ãmp
(
t
->
ty≥
);

122 
l1
 = 
	`li°
÷1, 
tmp
);

123 
l2
 = 
	`li°
÷2, 
tmp
);

126 
as
 = 
	`nod
(
OAS2
, 
N
, N);

127 
as
->
li°
 = 
l1
;

128 
as
->
æi°
 = 
	`li°1
(
n
);

129 
	`ty≥check
(&
as
, 
Et›
);

130 
	`‹dî°mt
(
as
, 
out
);

132  
l2
;

133 
	}
}

136 
	$‹dîˇŒ¨gs
(
NodeLi°
 **
l
, NodeLi° **
out
)

138 if(
	`ismu…iˇŒ
(*
l
)) {

140 *
l
 = 
	`c›yªt
((*l)->
n
, 
out
);

142 
	`‹dîex¥li°
(*
l
, 
out
);

144 
	}
}

147 
	$‹dîˇŒ
(
Node
 *
n
, 
NodeLi°
 **
out
)

149 
	`‹dîex¥
(&
n
->
À·
, 
out
);

150 
	`‹dîˇŒ¨gs
(&
n
->
li°
, 
out
);

151 
	}
}

154 
	$‹dî°mt
(
Node
 *
n
, 
NodeLi°
 **
out
)

156 
 o
;

157 
NodeLi°
 *
l
;

158 
Node
 *
r
;

160 if(
n
 =
N
)

163 
 o
 = 
	`£éöío
(
n
);

165 
	`‹dîöô
(
n
, 
out
);

167 
n
->
›
) {

169 
	`Áèl
("‹dî°mà%O", 
n
->
›
);

171 
OAS2
:

172 
OAS2DOTTYPE
:

173 
OAS2MAPR
:

174 
OAS
:

175 
OASOP
:

176 
OCLOSE
:

177 
OCOPY
:

178 
ODELETE
:

179 
OPANIC
:

180 
OPRINT
:

181 
OPRINTN
:

182 
ORECOVER
:

183 
ORECV
:

184 
OSEND
:

185 
	`‹dîex¥
(&
n
->
À·
, 
out
);

186 
	`‹dîex¥
(&
n
->
right
, 
out
);

187 
	`‹dîex¥li°
(
n
->
li°
, 
out
);

188 
	`‹dîex¥li°
(
n
->
æi°
, 
out
);

189 *
out
 = 
	`li°
(*out, 
n
);

192 
OAS2FUNC
:

194 
	`‹dîex¥li°
(
n
->
li°
, 
out
);

195 
	`‹dîˇŒ
(
n
->
æi°
->n, 
out
);

196 *
out
 = 
	`li°
(*out, 
n
);

199 
OAS2RECV
:

201 
	`‹dîex¥li°
(
n
->
li°
, 
out
);

202 
	`‹dîex¥
(&
n
->
æi°
->n->
À·
, 
out
);

203 *
out
 = 
	`li°
(*out, 
n
);

206 
OBLOCK
:

207 
OEMPTY
:

209 
	`‹dî°méi°
(
n
->
li°
, 
out
);

212 
OBREAK
:

213 
OCONTINUE
:

214 
ODCL
:

215 
ODCLCONST
:

216 
ODCLTYPE
:

217 
OFALL
:

218 
ˇ£_OFALL
:

219 
OGOTO
:

220 
OLABEL
:

222 *
out
 = 
	`li°
(*out, 
n
);

225 
OCALLFUNC
:

226 
OCALLINTER
:

227 
OCALLMETH
:

229 
	`‹dîˇŒ
(
n
, 
out
);

230 *
out
 = 
	`li°
(*out, 
n
);

233 
ODEFER
:

234 
OPROC
:

236 
	`‹dîˇŒ
(
n
->
À·
, 
out
);

237 *
out
 = 
	`li°
(*out, 
n
);

240 
OFOR
:

241 
	`‹dîex¥ö∂a˚
(&
n
->
¡e°
);

242 
	`‹dî°mtö∂a˚
(&
n
->
nö¸
);

243 
	`‹dîblock
(&
n
->
nbody
);

244 *
out
 = 
	`li°
(*out, 
n
);

247 
OIF
:

248 
	`‹dîex¥ö∂a˚
(&
n
->
¡e°
);

249 
	`‹dîblock
(&
n
->
nbody
);

250 
	`‹dîblock
(&
n
->
√l£
);

251 *
out
 = 
	`li°
(*out, 
n
);

254 
ORANGE
:

255 
	`‹dîex¥
(&
n
->
right
, 
out
);

256 
l
=
n
->
li°
;Ü;Üˆ->
√xt
)

257 
	`‹dîex¥ö∂a˚
(&
l
->
n
);

258 
	`‹dîblock
(&
n
->
nbody
);

259 *
out
 = 
	`li°
(*out, 
n
);

262 
ORETURN
:

263 
	`‹dîˇŒ¨gs
(&
n
->
li°
, 
out
);

264 *
out
 = 
	`li°
(*out, 
n
);

267 
OSELECT
:

268 
l
=
n
->
li°
;Ü;Üˆ->
√xt
) {

269 if(
l
->
n
->
›
 !
OXCASE
)

270 
	`Áèl
("‹dî sñe˘ ca£ %O", 
l
->
n
->
›
);

271 
r
 = 
l
->
n
->
À·
;

272 if(
r
 =
nû
)

274 
r
->
›
) {

275 
OSELRECV
:

276 
OSELRECV2
:

277 
	`‹dîex¥ö∂a˚
(&
r
->
À·
);

278 
	`‹dîex¥ö∂a˚
(&
r
->
¡e°
);

279 
	`‹dîex¥
(&
r
->
right
->
À·
, 
out
);

281 
OSEND
:

282 
	`‹dîex¥
(&
r
->
À·
, 
out
);

283 
	`‹dîex¥
(&
r
->
right
, 
out
);

287 *
out
 = 
	`li°
(*out, 
n
);

290 
OSWITCH
:

291 
	`‹dîex¥
(&
n
->
¡e°
, 
out
);

292 
l
=
n
->
li°
;Ü;Üˆ->
√xt
) {

293 if(
l
->
n
->
›
 !
OXCASE
)

294 
	`Áèl
("‹dî swôch ca£ %O", 
l
->
n
->
›
);

295 
	`‹dîex¥
(&
l
->
n
->
À·
, &l->n->
nöô
);

297 *
out
 = 
	`li°
(*out, 
n
);

300 
OXFALL
:

301 
	`yyîr‹
("fallthrough statement out ofÖlace");

302 
n
->
›
 = 
OFALL
;

303 
ˇ£_OFALL
;

306 
löío
 = 
 o
;

307 
	}
}

310 
	$‹dîex¥li°
(
NodeLi°
 *
l
, NodeLi° **
out
)

312 ; 
l
;Üˆ->
√xt
)

313 
	`‹dîex¥
(&
l
->
n
, 
out
);

314 
	}
}

317 
	$‹dîex¥
(
Node
 **
≈
, 
NodeLi°
 **
out
)

319 
Node
 *
n
;

320 
 o
;

322 
n
 = *
≈
;

323 if(
n
 =
N
)

326 
 o
 = 
	`£éöío
(
n
);

327 
	`‹dîöô
(
n
, 
out
);

329 
n
->
›
) {

331 
	`‹dîex¥
(&
n
->
À·
, 
out
);

332 
	`‹dîex¥
(&
n
->
right
, 
out
);

333 
	`‹dîex¥li°
(
n
->
li°
, 
out
);

334 
	`‹dîex¥li°
(
n
->
æi°
, 
out
);

337 
OANDAND
:

338 
OOROR
:

339 
	`‹dîex¥
(&
n
->
À·
, 
out
);

340 
	`‹dîex¥ö∂a˚
(&
n
->
right
);

343 
OCALLFUNC
:

344 
OCALLMETH
:

345 
OCALLINTER
:

346 
	`‹dîˇŒ
(
n
, 
out
);

347 
n
 = 
	`c›yex¥
“,Ç->
ty≥
, 
out
);

350 
ORECV
:

351 
n
 = 
	`c›yex¥
“,Ç->
ty≥
, 
out
);

355 
löío
 = 
 o
;

357 *
≈
 = 
n
;

358 
	}
}

	@pgen.c

5 
	~<u.h
>

6 
	~<libc.h
>

7 
	~"gg.h
"

8 
	~"›t.h
"

10 
Æloˇuto
(
Prog
* 
p
);

13 
	$compûe
(
Node
 *
‚
)

15 
Pli°
 *
∂
;

16 
Node
 
nod1
, *
n
;

17 
Prog
 *
±xt
;

18 
öt32
 
 o
;

19 
Ty≥
 *
t
;

20 
Iãr
 
ßve
;

21 
vl⁄g
 
ﬁd°ksize
;

23 if(
√w¥oc
 =
N
) {

24 
√w¥oc
 = 
	`sysfunc
("newproc");

25 
de„Ωroc
 = 
	`sysfunc
("deferproc");

26 
de„ºëu∫
 = 
	`sysfunc
("deferreturn");

27 
∑nicödex
 = 
	`sysfunc
("panicindex");

28 
∑nic¶i˚
 = 
	`sysfunc
("panicslice");

29 
throwªtu∫
 = 
	`sysfunc
("throwreturn");

32 if(
‚
->
nbody
 =
nû
)

35 
	`ßvìº‹s
();

38 
	`˛óæabñs
();

40 
 o
 = 
	`£éöío
(
‚
);

42 
cur‚
 = 
‚
;

43 
	`dowidth
(
cur‚
->
ty≥
);

45 if(
cur‚
->
ty≥
->
ouäamed
) {

47 
t
 = 
	`°ru˘fú°
(&
ßve
, 
	`gëouèrg
(
cur‚
->
ty≥
));

48 
t
 !
T
) {

49 if(
t
->
¬ame
 !
N
) {

50 
n
 = 
	`nod
(
OAS
, 
t
->
¬ame
, 
N
);

51 
	`ty≥check
(&
n
, 
Et›
);

52 
cur‚
->
nbody
 = 
	`c⁄ˇt
(
	`li°1
(
n
), curfn->nbody);

54 
t
 = 
	`°ru˘√xt
(&
ßve
);

58 
	`‹dî
(
cur‚
);

59 if(
√º‹s
 != 0)

60 
ªt
;

62 
hasde„r
 = 0;

63 
	`wÆk
(
cur‚
);

64 if(
√º‹s
 != 0)

65 
ªt
;

67 
c⁄töpc
 = 
P
;

68 
bªakpc
 = 
P
;

70 
∂
 = 
	`√w∂i°
();

71 
∂
->
«me
 = 
cur‚
->
¬ame
;

73 
	`£éöío
(
cur‚
);

75 
	`nodc⁄°
(&
nod1
, 
ty≥s
[
TINT32
], 0);

76 
±xt
 = 
	`gös
(
ATEXT
, 
	`isbœnk
(
cur‚
->
¬ame
Ë? 
N
 : cur‚->¬ame, &
nod1
);

77 if(
‚
->
dupok
)

78 
±xt
->
TEXTFLAG
 = 
DUPOK
;

79 
	`afun˛ô
(&
±xt
->
‰om
);

81 
	`göô
();

82 
	`gíli°
(
cur‚
->
íãr
);

84 
ªçc
 = 
nû
;

85 if(
hasde„r
 || 
cur‚
->
exô
) {

86 
Prog
 *
p1
;

88 
p1
 = 
	`gjmp
(
nû
);

89 
ªçc
 = 
	`gjmp
(
nû
);

90 
	`∑tch
(
p1
, 
pc
);

93 
	`gíli°
(
cur‚
->
nbody
);

94 
	`g˛ón
();

95 
	`checkœbñs
();

96 if(
√º‹s
 != 0)

97 
ªt
;

98 if(
cur‚
->
ídlöío
)

99 
löío
 = 
cur‚
->
ídlöío
;

101 if(
cur‚
->
ty≥
->
ouâu∂e
 != 0)

102 
	`gösˇŒ
(
throwªtu∫
, 0);

104 if(
ªçc
)

105 
	`∑tch
(
ªçc
, 
pc
);

106 
	`göô
();

107 if(
hasde„r
)

108 
	`gösˇŒ
(
de„ºëu∫
, 0);

109 if(
cur‚
->
exô
)

110 
	`gíli°
(
cur‚
->
exô
);

111 
	`g˛ón
();

112 if(
√º‹s
 != 0)

113 
ªt
;

114 
pc
->
as
 = 
ARET
;

115 
pc
->
löío
 =Üineno;

117 if(!
debug
['N'] || debug['R'] || debug['P']) {

118 
	`ªg›t
(
±xt
);

121 
ﬁd°ksize
 = 
°ksize
;

122 
	`Æloˇuto
(
±xt
);

124 
	`¥öt
("Æloˇuto: %ŒdÅÿ%Œd\n", 
ﬁd°ksize
, (
vl⁄g
)
°ksize
);

126 
	`£éöío
(
cur‚
);

127 if((
öt64
)
°ksize
+
max¨g
 > (1ULL<<31))

128 
	`yyîr‹
("stack frameÅooÜarge (>2GB)");

130 
	`def‰ame
(
±xt
);

133 
	`‰ame
(0);

135 
ªt
:

136 
löío
 = 
 o
;

137 
	}
}

144 
	$cmp°ackv¨
(
Node
 *
a
, Nodê*
b
)

146 i‡(
a
->
˛ass
 !
b
->class)

147  (
a
->
˛ass
 =
PAUTO
) ? 1 : -1;

148 i‡(
a
->
˛ass
 !
PAUTO
)

149  
a
->
xoff£t
 - 
b
->xoffset;

150 i‡((
a
->
u£d
 =0Ë!(
b
->used == 0))

151  
b
->
u£d
 - 
a
->used;

152  
b
->
ty≥
->
Æign
 - 
a
->type->align;

154 
	}
}

158 
	$Æloˇuto
(
Prog
* 
±xt
)

160 
NodeLi°
 *
Œ
;

161 
Node
* 
n
;

162 
vl⁄g
 
w
;

164 if(
cur‚
->
d˛
 =
nû
)

168 
Œ
=
cur‚
->
d˛
;Ü»!
nû
;Ülˆl->
√xt
)

169 i‡(
Œ
->
n
->
˛ass
 =
PAUTO
)

170 
Œ
->
n
->
u£d
 = 0;

172 
	`m¨kautou£d
(
±xt
);

174 
	`li°s‹t
(&
cur‚
->
d˛
, 
cmp°ackv¨
);

177 
Œ
 = 
cur‚
->
d˛
;

178 
n
 = 
Œ
->n;

179 i‡(
n
->
˛ass
 =
PAUTO
 &&Ç->
›
 =
ONAME
 && !n->
u£d
) {

180 
cur‚
->
d˛
 = 
nû
;

181 
°ksize
 = 0;

185 
Œ
 = 
cur‚
->
d˛
;Ül->
√xt
 !
nû
;Ül=ll->next) {

186 
n
 = 
Œ
->
√xt
->n;

187 i‡(
n
->
˛ass
 =
PAUTO
 &&Ç->
›
 =
ONAME
 && !n->
u£d
) {

188 
Œ
->
√xt
 = 
nû
;

189 
cur‚
->
d˛
->
íd
 = 
Œ
;

195 
°ksize
 = 0;

196 
Œ
 = 
cur‚
->
d˛
;Ü»!
nû
;Ülˆl->
√xt
) {

197 
n
 = 
Œ
->n;

198 i‡(
n
->
˛ass
 !
PAUTO
 ||Ç->
›
 !
ONAME
)

201 
	`dowidth
(
n
->
ty≥
);

202 
w
 = 
n
->
ty≥
->
width
;

203 if(
w
 >
MAXWIDTH
 || w < 0)

204 
	`Áèl
("bad width");

205 
°ksize
 +
w
;

206 
°ksize
 = 
	`∫d
(°ksize, 
n
->
ty≥
->
Æign
);

207 if(
thech¨
 == '5')

208 
°ksize
 = 
	`∫d
(°ksize, 
width±r
);

209 
n
->
°kdñè
 = -
°ksize
 -Ç->
xoff£t
;

212 
	`fixautou£d
(
±xt
);

215 
Œ
 = 
cur‚
->
d˛
 ;Œ !
nû
;Ülˆl->
√xt
) {

216 i‡(
Œ
->
n
->
˛ass
 !
PAUTO
 ||Ül->n->
›
 !
ONAME
)

218 
Œ
->
n
->
xoff£t
 +Œ->n->
°kdñè
;

219 
Œ
->
n
->
°kdñè
 = 0;

221 
	}
}

	@range.c

9 
	~<u.h
>

10 
	~<libc.h
>

11 
	~"go.h
"

14 
	$ty≥checkønge
(
Node
 *
n
)

16 *
why
;

17 
Ty≥
 *
t
, *
t1
, *
t2
;

18 
Node
 *
v1
, *
v2
;

19 
NodeLi°
 *
Œ
;

22 
Œ
=
n
->
li°
;Ül;Ülˆl->
√xt
)

23 if(
Œ
->
n
->
de‚
 !=Ç)

24 
	`ty≥check
(&
Œ
->
n
, 
Erv
 | 
Easgn
);

26 
	`ty≥check
(&
n
->
right
, 
Erv
);

27 if((
t
 = 
n
->
right
->
ty≥
Ë=
T
)

28 
out
;

29 if(
i•å
[
t
->
ëy≥
] && 
	`isfixed¨øy
—->
ty≥
))

30 
t
 =Å->
ty≥
;

31 
n
->
ty≥
 = 
t
;

33 
t
->
ëy≥
) {

35 
	`yyîr‹
("ˇ¬ŸÑ™gêovî %lN", 
n
->
right
);

36 
out
;

38 
TARRAY
:

39 
t1
 = 
ty≥s
[
TINT
];

40 
t2
 = 
t
->
ty≥
;

43 
TMAP
:

44 
t1
 = 
t
->
down
;

45 
t2
 = 
t
->
ty≥
;

48 
TCHAN
:

49 if(!(
t
->
ch™
 & 
Cªcv
)) {

50 
	`yyîr‹
("övÆid o≥øti⁄:Ñ™gê%N (ª˚ivê‰om síd-⁄lyÅy≥ %T)", 
n
->
right
,Ç->right->
ty≥
);

51 
out
;

53 
t1
 = 
t
->
ty≥
;

54 
t2
 = 
nû
;

55 if(
	`cou¡
(
n
->
li°
) == 2)

56 
toom™y
;

59 
TSTRING
:

60 
t1
 = 
ty≥s
[
TINT
];

61 
t2
 = 
ru√ty≥
;

65 if(
	`cou¡
(
n
->
li°
) > 2) {

66 
toom™y
:

67 
	`yyîr‹
("too many variables inÑange");

70 
v1
 = 
n
->
li°
->n;

71 
v2
 = 
N
;

72 if(
n
->
li°
->
√xt
)

73 
v2
 = 
n
->
li°
->
√xt
->n;

75 if(
v1
->
de‚
 =
n
)

76 
v1
->
ty≥
 = 
t1
;

77 if(
v1
->
ty≥
 !
T
 && 
	`assign›
(
t1
, v1->ty≥, &
why
) == 0)

78 
	`yyîr‹
("ˇ¬Ÿássig¿ty≥ %TÅÿ%lN i¿ønge%s", 
t1
, 
v1
, 
why
);

79 if(
v2
) {

80 if(
v2
->
de‚
 =
n
)

81 
v2
->
ty≥
 = 
t2
;

82 if(
v2
->
ty≥
 !
T
 && 
	`assign›
(
t2
, v2->ty≥, &
why
) == 0)

83 
	`yyîr‹
("ˇ¬Ÿássig¿ty≥ %TÅÿ%lN i¿ønge%s", 
t2
, 
v2
, 
why
);

86 
out
:

87 
	`ty≥checkli°
(
n
->
nbody
, 
Et›
);

90 
n
->
ty≥check
 = 1;

91 
Œ
=
n
->
li°
;Ül;Ülˆl->
√xt
)

92 if(
Œ
->
n
->
ty≥check
 == 0)

93 
	`ty≥check
(&
Œ
->
n
, 
Erv
 | 
Easgn
);

94 
	}
}

97 
	$wÆkønge
(
Node
 *
n
)

99 
Node
 *
ohv1
, *
hv1
, *
hv2
;

100 
Node
 *
ha
, *
hô
;

101 
Node
 *
hn
, *
hp
;

102 
Node
 *
hb
;

103 
Node
 *
a
, *
v1
, *
v2
;

104 
Node
 *
‚
, *
tmp
;

105 
NodeLi°
 *
body
, *
öô
;

106 
Ty≥
 *
th
, *
t
;

107 
 o
;

109 
t
 = 
n
->
ty≥
;

110 
öô
 = 
nû
;

112 
a
 = 
n
->
right
;

113 
 o
 = 
	`£éöío
(
a
);

114 if(
t
->
ëy≥
 =
TSTRING
 && !
	`eqty≥
—, 
ty≥s
[TSTRING])) {

115 
a
 = 
	`nod
(
OCONV
, 
n
->
right
, 
N
);

116 
a
->
ty≥
 = 
ty≥s
[
TSTRING
];

119 
v1
 = 
n
->
li°
->n;

120 
v2
 = 
N
;

121 if(
n
->
li°
->
√xt
)

122 
v2
 = 
n
->
li°
->
√xt
->n;

123 
hv2
 = 
N
;

125 if(
v2
 =
N
 && 
t
->
ëy≥
 =
TARRAY
) {

128 
ha
 = 
a
;

130 
ha
 = 
	`ãmp
(
a
->
ty≥
);

131 
öô
 = 
	`li°
(öô, 
	`nod
(
OAS
, 
ha
, 
a
));

134 
t
->
ëy≥
) {

136 
	`Áèl
("walkrange");

138 
TARRAY
:

139 
hv1
 = 
	`ãmp
(
ty≥s
[
TINT
]);

140 
hn
 = 
	`ãmp
(
ty≥s
[
TINT
]);

141 
hp
 = 
nû
;

143 
öô
 = 
	`li°
(öô, 
	`nod
(
OAS
, 
hv1
, 
N
));

144 
öô
 = 
	`li°
(öô, 
	`nod
(
OAS
, 
hn
,Çod(
OLEN
, 
ha
, 
N
)));

145 if(
v2
) {

146 
hp
 = 
	`ãmp
(
	`±πo
(
n
->
ty≥
->type));

147 
tmp
 = 
	`nod
(
OINDEX
, 
ha
, 
	`nodötc⁄°
(0));

148 
tmp
->
ëy≥
 = 1;

149 
öô
 = 
	`li°
(öô, 
	`nod
(
OAS
, 
hp
,Çod(
OADDR
, 
tmp
, 
N
)));

152 
n
->
¡e°
 = 
	`nod
(
OLT
, 
hv1
, 
hn
);

153 
n
->
nö¸
 = 
	`nod
(
OASOP
, 
hv1
, 
	`nodötc⁄°
(1));

154 
n
->
nö¸
->
ëy≥
 = 
OADD
;

155 if(
v2
 =
N
)

156 
body
 = 
	`li°1
(
	`nod
(
OAS
, 
v1
, 
hv1
));

158 
a
 = 
	`nod
(
OAS2
, 
N
, N);

159 
a
->
li°
 = 
	`li°
(
	`li°1
(
v1
), 
v2
);

160 
a
->
æi°
 = 
	`li°
(
	`li°1
(
hv1
), 
	`nod
(
OIND
, 
hp
, 
N
));

161 
body
 = 
	`li°1
(
a
);

163 
tmp
 = 
	`nod
(
OADD
, 
hp
, 
	`nodötc⁄°
(
t
->
ty≥
->
width
));

164 
tmp
->
ty≥
 = 
hp
->type;

165 
tmp
->
ty≥check
 = 1;

166 
tmp
->
right
->
ty≥
 = 
ty≥s
[
çå
];

167 
tmp
->
right
->
ty≥check
 = 1;

168 
body
 = 
	`li°
(body, 
	`nod
(
OAS
, 
hp
, 
tmp
));

172 
TMAP
:

173 
th
 = 
	`typ
(
TARRAY
);

174 
th
->
ty≥
 = 
	`±πo
(
ty≥s
[
TUINT8
]);

177 
th
->
bound
 = 5 + 4*3 + 4*4/
width±r
;

178 
hô
 = 
	`ãmp
(
th
);

180 
‚
 = 
	`sy¶ook
("mapiterinit", 1);

181 
	`¨gty≥
(
‚
, 
t
->
down
);

182 
	`¨gty≥
(
‚
, 
t
->
ty≥
);

183 
	`¨gty≥
(
‚
, 
th
);

184 
öô
 = 
	`li°
(öô, 
	`mkˇŒ1
(
‚
, 
T
, 
nû
, 
	`ty≥«me
(
t
), 
ha
, 
	`nod
(
OADDR
, 
hô
, 
N
)));

185 
n
->
¡e°
 = 
	`nod
(
ONE
,Çod(
OINDEX
, 
hô
, 
	`nodötc⁄°
(0)), 
	`nodnû
());

187 
‚
 = 
	`sy¶ook
("mapiternext", 1);

188 
	`¨gty≥
(
‚
, 
th
);

189 
n
->
nö¸
 = 
	`mkˇŒ1
(
‚
, 
T
, 
nû
, 
	`nod
(
OADDR
, 
hô
, 
N
));

191 if(
v2
 =
N
) {

192 
‚
 = 
	`sy¶ook
("mapiter1", 1);

193 
	`¨gty≥
(
‚
, 
th
);

194 
	`¨gty≥
(
‚
, 
t
->
down
);

195 
a
 = 
	`nod
(
OAS
, 
v1
, 
	`mkˇŒ1
(
‚
, 
t
->
down
, 
nû
,Çod(
OADDR
, 
hô
, 
N
)));

197 
‚
 = 
	`sy¶ook
("mapiter2", 1);

198 
	`¨gty≥
(
‚
, 
th
);

199 
	`¨gty≥
(
‚
, 
t
->
down
);

200 
	`¨gty≥
(
‚
, 
t
->
ty≥
);

201 
a
 = 
	`nod
(
OAS2
, 
N
, N);

202 
a
->
li°
 = 
	`li°
(
	`li°1
(
v1
), 
v2
);

203 
a
->
æi°
 = 
	`li°1
(
	`mkˇŒ1
(
‚
, 
	`gëouèrgx
(‚->
ty≥
), 
nû
, 
	`nod
(
OADDR
, 
hô
, 
N
)));

205 
body
 = 
	`li°1
(
a
);

208 
TCHAN
:

209 
hv1
 = 
	`ãmp
(
t
->
ty≥
);

210 
hb
 = 
	`ãmp
(
ty≥s
[
TBOOL
]);

212 
n
->
¡e°
 = 
	`nod
(
ONE
, 
hb
, 
	`nodboﬁ
(0));

213 
a
 = 
	`nod
(
OAS2RECV
, 
N
, N);

214 
a
->
ty≥check
 = 1;

215 
a
->
li°
 = 
	`li°
(
	`li°1
(
hv1
), 
hb
);

216 
a
->
æi°
 = 
	`li°1
(
	`nod
(
ORECV
, 
ha
, 
N
));

217 
n
->
¡e°
->
nöô
 = 
	`li°1
(
a
);

218 
body
 = 
	`li°1
(
	`nod
(
OAS
, 
v1
, 
hv1
));

221 
TSTRING
:

222 
ohv1
 = 
	`ãmp
(
ty≥s
[
TINT
]);

224 
hv1
 = 
	`ãmp
(
ty≥s
[
TINT
]);

225 
öô
 = 
	`li°
(öô, 
	`nod
(
OAS
, 
hv1
, 
N
));

227 if(
v2
 =
N
)

228 
a
 = 
	`nod
(
OAS
, 
hv1
, 
	`mkˇŒ
("°rögôî", 
ty≥s
[
TINT
], 
nû
, 
ha
, hv1));

230 
hv2
 = 
	`ãmp
(
ru√ty≥
);

231 
a
 = 
	`nod
(
OAS2
, 
N
, N);

232 
a
->
li°
 = 
	`li°
(
	`li°1
(
hv1
), 
hv2
);

233 
‚
 = 
	`sy¶ook
("stringiter2", 0);

234 
a
->
æi°
 = 
	`li°1
(
	`mkˇŒ1
(
‚
, 
	`gëouèrgx
(‚->
ty≥
), 
nû
, 
ha
, 
hv1
));

236 
n
->
¡e°
 = 
	`nod
(
ONE
, 
hv1
, 
	`nodötc⁄°
(0));

237 
n
->
¡e°
->
nöô
 = 
	`li°
(
	`li°1
(
	`nod
(
OAS
, 
ohv1
, 
hv1
)), 
a
);

239 
body
 = 
	`li°1
(
	`nod
(
OAS
, 
v1
, 
ohv1
));

240 if(
v2
 !
N
)

241 
body
 = 
	`li°
(body, 
	`nod
(
OAS
, 
v2
, 
hv2
));

245 
n
->
›
 = 
OFOR
;

246 
	`ty≥checkli°
(
öô
, 
Et›
);

247 
n
->
nöô
 = 
	`c⁄ˇt
“->nöô, 
öô
);

248 
	`ty≥checkli°
(
n
->
¡e°
->
nöô
, 
Et›
);

249 
	`ty≥check
(&
n
->
¡e°
, 
Erv
);

250 
	`ty≥check
(&
n
->
nö¸
, 
Et›
);

251 
	`ty≥checkli°
(
body
, 
Et›
);

252 
n
->
nbody
 = 
	`c⁄ˇt
(
body
,Ç->nbody);

253 
	`wÆk°mt
(&
n
);

255 
löío
 = 
 o
;

256 
	}
}

	@reflect.c

5 
	~<u.h
>

6 
	~<libc.h
>

7 
	~"go.h
"

13 
NodeLi°
* 
	gsig«éi°
;

14 
Sym
* 
dty≥sym
(
Ty≥
*);

15 
Sym
* 
wókty≥sym
(
Ty≥
*);

16 
Sym
* 
dÆgsym
(
Ty≥
*);

19 
	$sigcmp
(
Sig
 *
a
, Sig *
b
)

21 
i
;

23 
i
 = 
	`°rcmp
(
a
->
«me
, 
b
->name);

24 if(
i
 != 0)

25  
i
;

26 if(
a
->
pkg
 =
b
->pkg)

28 if(
a
->
pkg
 =
nû
)

30 if(
b
->
pkg
 =
nû
)

32  
	`°rcmp
(
a
->
pkg
->
∑th
->
s
, 
b
->pkg->path->s);

33 
	}
}

35 
Sig
*

36 
ls‹t
(
Sig
 *
l
, (*
f
)(Sig*, Sig*))

38 
Sig
 *
l1
, *
l2
, *
À
;

40 if(
l
 =0 ||Ü->
lök
 == 0)

41  
l
;

43 
l1
 = 
l
;

44 
l2
 = 
l
;

46 
l2
 =Ü2->
lök
;

47 if(
l2
 == 0)

49 
l2
 =Ü2->
lök
;

50 if(
l2
 == 0)

52 
l1
 =Ü1->
lök
;

55 
l2
 = 
l1
->
lök
;

56 
l1
->
lök
 = 0;

57 
l1
 = 
	`ls‹t
(
l
, 
f
);

58 
l2
 = 
	`ls‹t
÷2, 
f
);

61 if((*
f
)(
l1
, 
l2
) < 0) {

62 
l
 = 
l1
;

63 
l1
 =Ü1->
lök
;

65 
l
 = 
l2
;

66 
l2
 =Ü2->
lök
;

68 
À
 = 
l
;

71 if(
l1
 == 0) {

72 
l2
) {

73 
À
->
lök
 = 
l2
;

74 
À
 = 
l2
;

75 
l2
 =Ü2->
lök
;

77 
À
->
lök
 = 0;

80 if(
l2
 == 0) {

81 
l1
) {

82 
À
->
lök
 = 
l1
;

83 
À
 = 
l1
;

84 
l1
 =Ü1->
lök
;

88 if((*
f
)(
l1
, 
l2
) < 0) {

89 
À
->
lök
 = 
l1
;

90 
À
 = 
l1
;

91 
l1
 =Ü1->
lök
;

93 
À
->
lök
 = 
l2
;

94 
À
 = 
l2
;

95 
l2
 =Ü2->
lök
;

98 
À
->
lök
 = 0;

99  
l
;

100 
	}
}

106 
Ty≥
*

107 
	$mëhodfunc
(
Ty≥
 *
f
, Ty≥ *
ª˚ivî
)

109 
NodeLi°
 *
ö
, *
out
;

110 
Node
 *
d
;

111 
Ty≥
 *
t
;

113 
ö
 = 
nû
;

114 if(
ª˚ivî
) {

115 
d
 = 
	`nod
(
ODCLFIELD
, 
N
, N);

116 
d
->
ty≥
 = 
ª˚ivî
;

117 
ö
 = 
	`li°
(ö, 
d
);

119 
t
=
	`gëö¨gx
(
f
)->
ty≥
;Å;ÅÒ->
down
) {

120 
d
 = 
	`nod
(
ODCLFIELD
, 
N
, N);

121 
d
->
ty≥
 = 
t
->type;

122 
d
->
isddd
 = 
t
->isddd;

123 
ö
 = 
	`li°
(ö, 
d
);

126 
out
 = 
nû
;

127 
t
=
	`gëouèrgx
(
f
)->
ty≥
;Å;ÅÒ->
down
) {

128 
d
 = 
	`nod
(
ODCLFIELD
, 
N
, N);

129 
d
->
ty≥
 = 
t
->type;

130 
out
 = 
	`li°
(out, 
d
);

133  
	`fun˘y≥
(
N
, 
ö
, 
out
);

134 
	}
}

140 
Sig
*

141 
	$mëhods
(
Ty≥
 *
t
)

143 
Ty≥
 *
f
, *
mt
, *
ô
, *
this
;

144 
Sig
 *
a
, *
b
;

145 
Sym
 *
mëhod
;

148 
mt
 = 
	`mëhty≥
(
t
, 0);

149 if(
mt
 =
T
)

150  
nû
;

151 
	`ex∑ndmëh
(
mt
);

154 
ô
 = 
t
;

155 if(
ô
->
width
 > 
width±r
)

156 
ô
 = 
	`±πo
(
t
);

160 
a
 = 
nû
;

161 
f
=
mt
->
xmëhod
; f; f=f->
down
) {

162 if(
f
->
ëy≥
 !
TFIELD
)

163 
	`Áèl
("mëhods:ÇŸ fõld %T", 
f
);

164 i‡(
f
->
ty≥
->
ëy≥
 !
TFUNC
 || f->ty≥->
thi°u∂e
 == 0)

165 
	`Áèl
("n⁄-mëhod o¿%T mëhod %S %T\n", 
mt
, 
f
->
sym
, f);

166 i‡(!
	`gëthisx
(
f
->
ty≥
)->type)

167 
	`Áèl
("ª˚ivî wôhÇÿty≥ o¿%T mëhod %S %T\n", 
mt
, 
f
->
sym
, f);

169 
mëhod
 = 
f
->
sym
;

170 if(
mëhod
 =
nû
)

177 
this
 = 
	`gëthisx
(
f
->
ty≥
)->type->type;

178 if(
i•å
[
this
->
ëy≥
] &&Åhis->
ty≥
 =
t
)

180 if(
i•å
[
this
->
ëy≥
] && !i•å[
t
->etype]

181 && 
f
->
embedded
 !2 && !
	`isiÁ˚mëhod
(f->
ty≥
))

184 
b
 = 
	`mÆ
((*b));

185 
b
->
lök
 = 
a
;

186 
a
 = 
b
;

188 
a
->
«me
 = 
mëhod
->name;

189 if(!
	`exp‹äame
(
mëhod
->
«me
)) {

190 if(
mëhod
->
pkg
 =
nû
)

191 
	`Áèl
("methods: missingÖackage");

192 
a
->
pkg
 = 
mëhod
->pkg;

194 
a
->
isym
 = 
	`mëhodsym
(
mëhod
, 
ô
, 1);

195 
a
->
tsym
 = 
	`mëhodsym
(
mëhod
, 
t
, 0);

196 
a
->
ty≥
 = 
	`mëhodfunc
(
f
->ty≥, 
t
);

197 
a
->
mty≥
 = 
	`mëhodfunc
(
f
->
ty≥
, 
nû
);

199 if(!(
a
->
isym
->
Êags
 & 
SymSiggí
)) {

200 
a
->
isym
->
Êags
 |
SymSiggí
;

201 if(!
	`eqty≥
(
this
, 
ô
Ë||Åhis->
width
 < 
ty≥s
[
çå
]->width) {

206 if(
i•å
[
ô
->
ëy≥
] && i•å[
this
->etype]

207 && 
f
->
embedded
 && !
	`isiÁ˚mëhod
(f->
ty≥
))

208 
	`gíembedåamp
(
ô
, 
f
, 
a
->
isym
, 1);

210 
	`gíwøµî
(
ô
, 
f
, 
a
->
isym
, 1);

214 if(!(
a
->
tsym
->
Êags
 & 
SymSiggí
)) {

215 
a
->
tsym
->
Êags
 |
SymSiggí
;

216 if(!
	`eqty≥
(
this
, 
t
)) {

217 if(
i•å
[
t
->
ëy≥
] && i•å[
this
->etype]

218 && 
f
->
embedded
 && !
	`isiÁ˚mëhod
(f->
ty≥
))

219 
	`gíembedåamp
(
t
, 
f
, 
a
->
tsym
, 0);

221 
	`gíwøµî
(
t
, 
f
, 
a
->
tsym
, 0);

226  
	`ls‹t
(
a
, 
sigcmp
);

227 
	}
}

232 
Sig
*

233 
	$imëhods
(
Ty≥
 *
t
)

235 
Sig
 *
a
, *
Æl
, *
œ°
;

236 
Ty≥
 *
f
;

237 
Sym
 *
mëhod
, *
isym
;

239 
Æl
 = 
nû
;

240 
œ°
 = 
nû
;

241 
f
=
t
->
ty≥
; f; f=f->
down
) {

242 if(
f
->
ëy≥
 !
TFIELD
)

243 
	`Áèl
("imethods:Çot field");

244 if(
f
->
ty≥
->
ëy≥
 !
TFUNC
 || f->
sym
 =
nû
)

246 
mëhod
 = 
f
->
sym
;

247 
a
 = 
	`mÆ
((*a));

248 
a
->
«me
 = 
mëhod
->name;

249 if(!
	`exp‹äame
(
mëhod
->
«me
)) {

250 if(
mëhod
->
pkg
 =
nû
)

251 
	`Áèl
("imethods: missingÖackage");

252 
a
->
pkg
 = 
mëhod
->pkg;

254 
a
->
mty≥
 = 
f
->
ty≥
;

255 
a
->
off£t
 = 0;

256 
a
->
ty≥
 = 
	`mëhodfunc
(
f
->ty≥, 
nû
);

258 if(
œ°
 && 
	`sigcmp
÷a°, 
a
) >= 0)

259 
	`Áèl
("sigcm∞v†s‹töã∏%†%s", 
œ°
->
«me
, 
a
->name);

260 if(
œ°
 =
nû
)

261 
Æl
 = 
a
;

263 
œ°
->
lök
 = 
a
;

264 
œ°
 = 
a
;

268 if(
t
->
sym
 =
S
)

275 
isym
 = 
	`mëhodsym
(
mëhod
, 
t
, 0);

276 if(!(
isym
->
Êags
 & 
SymSiggí
)) {

277 
isym
->
Êags
 |
SymSiggí
;

278 
	`gíwøµî
(
t
, 
f
, 
isym
, 0);

281  
Æl
;

282 
	}
}

285 
	$dimp‹ç©h
(
Pkg
 *
p
)

287 
Pkg
 *
g›kg
;

288 *
«m
;

289 
Node
 *
n
;

291 if(
p
->
∑thsym
 !
S
)

294 if(
g›kg
 =
nû
) {

295 
g›kg
 = 
	`mkpkg
(
	`°æô
("go"));

296 
g›kg
->
«me
 = "go";

298 
«m
 = 
	`sm¥öt
("imp‹ç©h.%s.", 
p
->
¥efix
);

300 
n
 = 
	`nod
(
ONAME
, 
N
, N);

301 
n
->
sym
 = 
	`pkglookup
(
«m
, 
g›kg
);

302 
	`‰ì
(
«m
);

303 
n
->
˛ass
 = 
PEXTERN
;

304 
n
->
xoff£t
 = 0;

305 
p
->
∑thsym
 = 
n
->
sym
;

307 
	`gd©a°rög
(
n
, 
p
->
∑th
);

308 
	`ggloblsym
(
n
->
sym
, 
ty≥s
[
TSTRING
]->
width
, 1);

309 
	}
}

312 
	$dg›kg∑th
(
Sym
 *
s
, 
Ÿ
, 
Pkg
 *
pkg
)

314 if(
pkg
 =
nû
)

315  
	`dgo°rög±r
(
s
, 
Ÿ
, 
nû
);

320 if(
pkg
 =
loˇÕkg
) {

321 
Sym
 *
ns
;

323 if(
ns
 =
nû
)

324 
ns
 = 
	`pkglookup
("imp‹ç©h.\"\".", 
	`mkpkg
(
	`°æô
("go")));

325  
	`dsym±r
(
s
, 
Ÿ
, 
ns
, 0);

328 
	`dimp‹ç©h
(
pkg
);

329  
	`dsym±r
(
s
, 
Ÿ
, 
pkg
->
∑thsym
, 0);

330 
	}
}

337 
	$dexå©y≥
(
Sym
 *
sym
, 
off
, 
Ty≥
 *
t
, 
±roff
)

339 
Ÿ
, 
n
;

340 
Sym
 *
s
;

341 
Sig
 *
a
, *
m
;

343 
m
 = 
	`mëhods
(
t
);

344 if(
t
->
sym
 =
nû
 && 
m
 ==Çil)

345  
off
;

348 
	`dsym±r
(
sym
, 
±roff
, sym, 
off
);

350 
n
 = 0;

351 
a
=
m
;á;á˜->
lök
) {

352 
	`dty≥sym
(
a
->
ty≥
);

353 
n
++;

356 
Ÿ
 = 
off
;

357 
s
 = 
sym
;

358 if(
t
->
sym
) {

359 
Ÿ
 = 
	`dgo°rög±r
(
s
, ot, 
t
->
sym
->
«me
);

360 if(
t
 !
ty≥s
[t->
ëy≥
] &&Å !
îr‹ty≥
)

361 
Ÿ
 = 
	`dg›kg∑th
(
s
, ot, 
t
->
sym
->
pkg
);

363 
Ÿ
 = 
	`dgo°rög±r
(
s
, ot, 
nû
);

365 
Ÿ
 = 
	`dgo°rög±r
(
s
, ot, 
nû
);

366 
Ÿ
 = 
	`dgo°rög±r
(
s
, ot, 
nû
);

370 
Ÿ
 = 
	`dsym±r
(
s
, ot, s, oà+ 
width±r
 + 2*4);

371 
Ÿ
 = 
	`duöt32
(
s
, ot, 
n
);

372 
Ÿ
 = 
	`duöt32
(
s
, ot, 
n
);

375 
a
=
m
;á;á˜->
lök
) {

378 
Ÿ
 = 
	`dgo°rög±r
(
s
, ot, 
a
->
«me
);

379 
Ÿ
 = 
	`dg›kg∑th
(
s
, ot, 
a
->
pkg
);

380 
Ÿ
 = 
	`dsym±r
(
s
, ot, 
	`dty≥sym
(
a
->
mty≥
), 0);

381 
Ÿ
 = 
	`dsym±r
(
s
, ot, 
	`dty≥sym
(
a
->
ty≥
), 0);

382 if(
a
->
isym
)

383 
Ÿ
 = 
	`dsym±r
(
s
, ot, 
a
->
isym
, 0);

385 
Ÿ
 = 
	`duöçå
(
s
, ot, 0);

386 if(
a
->
tsym
)

387 
Ÿ
 = 
	`dsym±r
(
s
, ot, 
a
->
tsym
, 0);

389 
Ÿ
 = 
	`duöçå
(
s
, ot, 0);

392  
Ÿ
;

393 
	}
}

396 
	mKödBoﬁ
 = 1,

397 
	mKödI¡
,

398 
	mKödI¡8
,

399 
	mKödI¡16
,

400 
	mKödI¡32
,

401 
	mKödI¡64
,

402 
	mKödUöt
,

403 
	mKödUöt8
,

404 
	mKödUöt16
,

405 
	mKödUöt32
,

406 
	mKödUöt64
,

407 
	mKödUöçå
,

408 
	mKödFlﬂt32
,

409 
	mKödFlﬂt64
,

410 
	mKödCom∂ex64
,

411 
	mKödCom∂ex128
,

412 
	mKödAºay
,

413 
	mKödCh™
,

414 
	mKödFunc
,

415 
	mKödI¡îÁ˚
,

416 
	mKödM≠
,

417 
	mKödPå
,

418 
	mKödSli˚
,

419 
	mKödSåög
,

420 
	mKödSåu˘
,

421 
	mKödUnß„Poöãr
,

423 
	mKödNoPoöãrs
 = 1<<7,

427 
	gköds
[] =

429 [
TINT
] = 
KödI¡
,

430 [
TUINT
] = 
KödUöt
,

431 [
TINT8
] = 
KödI¡8
,

432 [
TUINT8
] = 
KödUöt8
,

433 [
TINT16
] = 
KödI¡16
,

434 [
TUINT16
] = 
KödUöt16
,

435 [
TINT32
] = 
KödI¡32
,

436 [
TUINT32
] = 
KödUöt32
,

437 [
TINT64
] = 
KödI¡64
,

438 [
TUINT64
] = 
KödUöt64
,

439 [
TUINTPTR
] = 
KödUöçå
,

440 [
TFLOAT32
] = 
KödFlﬂt32
,

441 [
TFLOAT64
] = 
KödFlﬂt64
,

442 [
TBOOL
] = 
KödBoﬁ
,

443 [
TSTRING
] = 
KödSåög
,

444 [
TPTR32
] = 
KödPå
,

445 [
TPTR64
] = 
KödPå
,

446 [
TSTRUCT
] = 
KödSåu˘
,

447 [
TINTER
] = 
KödI¡îÁ˚
,

448 [
TCHAN
] = 
KödCh™
,

449 [
TMAP
] = 
KödM≠
,

450 [
TARRAY
] = 
KödAºay
,

451 [
TFUNC
] = 
KödFunc
,

452 [
TCOMPLEX64
] = 
KödCom∂ex64
,

453 [
TCOMPLEX128
] = 
KödCom∂ex128
,

454 [
TUNSAFEPTR
] = 
KödUnß„Poöãr
,

457 
Sym
*

458 
	$ty≥°ru˘
(
Ty≥
 *
t
)

467  
	`pkglookup
("*ªÊe˘.comm⁄Ty≥", 
wókty≥pkg
);

468 
	}
}

471 
	$ha•oöãrs
(
Ty≥
 *
t
)

473 
Ty≥
 *
t1
;

475 
t
->
ëy≥
) {

476 
TINT
:

477 
TUINT
:

478 
TINT8
:

479 
TUINT8
:

480 
TINT16
:

481 
TUINT16
:

482 
TINT32
:

483 
TUINT32
:

484 
TINT64
:

485 
TUINT64
:

486 
TUINTPTR
:

487 
TFLOAT32
:

488 
TFLOAT64
:

489 
TBOOL
:

491 
TARRAY
:

492 if(
t
->
bound
 < 0)

494  
	`ha•oöãrs
(
t
->
ty≥
);

495 
TSTRUCT
:

496 
t1
=
t
->
ty≥
;Å1!=
T
;Å1Ò1->
down
)

497 if(
	`ha•oöãrs
(
t1
->
ty≥
))

500 
TSTRING
:

501 
TPTR32
:

502 
TPTR64
:

503 
TUNSAFEPTR
:

504 
TINTER
:

505 
TCHAN
:

506 
TMAP
:

507 
TFUNC
:

511 
	}
}

518 
	$dcomm⁄ty≥
(
Sym
 *
s
, 
Ÿ
, 
Ty≥
 *
t
)

520 
i
, 
Æg
, 
sizeofAlg
;

521 
Sym
 *
•å
, *
Ægsym
;

522 
Sym
 *
Æg¨øy
;

523 *
p
;

525 
sizeofAlg
 = 4*
width±r
;

526 if(
Æg¨øy
 =
nû
)

527 
Æg¨øy
 = 
	`pkglookup
("Æg¨øy", 
ru¡imïkg
);

528 
Æg
 = 
	`Ægty≥
(
t
);

529 
Ægsym
 = 
S
;

530 if(
Æg
 < 0)

531 
Ægsym
 = 
	`dÆgsym
(
t
);

533 
	`dowidth
(
t
);

534 if(
t
->
sym
 !
nû
 && !
i•å
[t->
ëy≥
])

535 
•å
 = 
	`dty≥sym
(
	`±πo
(
t
));

537 
•å
 = 
	`wókty≥sym
(
	`±πo
(
t
));

542 
Ÿ
 = 
	`∫d
(Ÿ, 
width±r
);

543 
Ÿ
 = 
	`dsym±r
(
s
, ot, 
	`ty≥°ru˘
(
t
), 0);

544 
Ÿ
 = 
	`dsym±r
(
s
, ot, s, 2*
width±r
);

559 
Ÿ
 = 
	`duöçå
(
s
, ot, 
t
->
width
);

560 
Ÿ
 = 
	`duöt32
(
s
, ot, 
	`ty≥hash
(
t
));

561 
Ÿ
 = 
	`duöt8
(
s
, ot, 0);

562 
Ÿ
 = 
	`duöt8
(
s
, ot, 
t
->
Æign
);

563 
Ÿ
 = 
	`duöt8
(
s
, ot, 
t
->
Æign
);

564 
i
 = 
köds
[
t
->
ëy≥
];

565 if(
t
->
ëy≥
 =
TARRAY
 &&Å->
bound
 < 0)

566 
i
 = 
KödSli˚
;

567 if(!
	`ha•oöãrs
(
t
))

568 
i
 |
KödNoPoöãrs
;

569 
Ÿ
 = 
	`duöt8
(
s
, ot, 
i
);

570 if(
Æg
 >= 0)

571 
Ÿ
 = 
	`dsym±r
(
s
, ot, 
Æg¨øy
, 
Æg
*
sizeofAlg
);

573 
Ÿ
 = 
	`dsym±r
(
s
, ot, 
Ægsym
, 0);

574 
p
 = 
	`sm¥öt
("%-uT", 
t
);

576 
Ÿ
 = 
	`dgo°rög±r
(
s
, ot, 
p
);

577 
	`‰ì
(
p
);

583 
Ÿ
 +
width±r
;

585 
Ÿ
 = 
	`dsym±r
(
s
, ot, 
•å
, 0);

586  
Ÿ
;

587 
	}
}

589 
Sym
*

590 
	$ty≥sym
(
Ty≥
 *
t
)

592 *
p
;

593 
Sym
 *
s
;

595 
p
 = 
	`sm¥öt
("%-T", 
t
);

596 
s
 = 
	`pkglookup
(
p
, 
ty≥pkg
);

598 
	`‰ì
(
p
);

599  
s
;

600 
	}
}

602 
Sym
*

603 
	$ty≥sym¥efix
(*
¥efix
, 
Ty≥
 *
t
)

605 *
p
;

606 
Sym
 *
s
;

608 
p
 = 
	`sm¥öt
("%s.%-T", 
¥efix
, 
t
);

609 
s
 = 
	`pkglookup
(
p
, 
ty≥pkg
);

611 
	`‰ì
(
p
);

612  
s
;

613 
	}
}

615 
Node
*

616 
	$ty≥«me
(
Ty≥
 *
t
)

618 
Sym
 *
s
;

619 
Node
 *
n
;

621 if(
t
 =
T
 || (
i•å
[t->
ëy≥
] &&Å->
ty≥
 =TË|| 
	`isidól
(t))

622 
	`Áèl
("ty≥«mê%T", 
t
);

623 
s
 = 
	`ty≥sym
(
t
);

624 if(
s
->
def
 =
N
) {

625 
n
 = 
	`nod
(
ONAME
, 
N
, N);

626 
n
->
sym
 = 
s
;

627 
n
->
ty≥
 = 
ty≥s
[
TUINT8
];

628 
n
->
addabÀ
 = 1;

629 
n
->
uŒm™
 = 1;

630 
n
->
˛ass
 = 
PEXTERN
;

631 
n
->
xoff£t
 = 0;

632 
n
->
ty≥check
 = 1;

633 
s
->
def
 = 
n
;

635 
sig«éi°
 = 
	`li°
(sig«éi°, 
	`ty≥nod
(
t
));

638 
n
 = 
	`nod
(
OADDR
, 
s
->
def
, 
N
);

639 
n
->
ty≥
 = 
	`±πo
(
s
->
def
->type);

640 
n
->
addabÀ
 = 1;

641 
n
->
uŒm™
 = 2;

642 
n
->
ty≥check
 = 1;

643  
n
;

644 
	}
}

646 
Sym
*

647 
	$wókty≥sym
(
Ty≥
 *
t
)

649 *
p
;

650 
Sym
 *
s
;

652 
p
 = 
	`sm¥öt
("%-T", 
t
);

653 
s
 = 
	`pkglookup
(
p
, 
wókty≥pkg
);

655 
	`‰ì
(
p
);

656  
s
;

657 
	}
}

659 
Sym
*

660 
	$dty≥sym
(
Ty≥
 *
t
)

662 
Ÿ
, 
xt
, 
n
, 
isddd
, 
dupok
;

663 
Sym
 *
s
, *
s1
, *
s2
;

664 
Sig
 *
a
, *
m
;

665 
Ty≥
 *
t1
, *
tba£
, *
t2
;

667 if(
	`isidól
(
t
))

668 
	`Áèl
("dty≥sym %T", 
t
);

670 
s
 = 
	`ty≥sym
(
t
);

671 if(
s
->
Êags
 & 
SymSiggí
)

672  
s
;

673 
s
->
Êags
 |
SymSiggí
;

678 
tba£
 = 
t
;

679 if(
i•å
[
t
->
ëy≥
] &&Å->
sym
 =
S
 &&Å->
ty≥
->sym != S)

680 
tba£
 = 
t
->
ty≥
;

681 
dupok
 = 
tba£
->
sym
 =
S
;

683 if(
compûög_ru¡ime
 &&

684 (
tba£
 =
ty≥s
[tba£->
ëy≥
] ||

685 
tba£
 =
byãty≥
 ||

686 
tba£
 =
ru√ty≥
 ||

687 
tba£
 =
îr‹ty≥
)) {

688 
ok
;

692 if(
tba£
->
sym
 && !tba£->
loˇl
)

693  
s
;

694 if(
isf‹w
[
tba£
->
ëy≥
])

695  
s
;

697 
ok
:

698 
Ÿ
 = 0;

699 
xt
 = 0;

700 
t
->
ëy≥
) {

702 
Ÿ
 = 
	`dcomm⁄ty≥
(
s
, ot, 
t
);

703 
xt
 = 
Ÿ
 - 2*
width±r
;

706 
TARRAY
:

707 if(
t
->
bound
 >= 0) {

709 
s1
 = 
	`dty≥sym
(
t
->
ty≥
);

710 
t2
 = 
	`typ
(
TARRAY
);

711 
t2
->
ty≥
 = 
t
->type;

712 
t2
->
bound
 = -1;

713 
s2
 = 
	`dty≥sym
(
t2
);

714 
Ÿ
 = 
	`dcomm⁄ty≥
(
s
, ot, 
t
);

715 
xt
 = 
Ÿ
 - 2*
width±r
;

716 
Ÿ
 = 
	`dsym±r
(
s
, ot, 
s1
, 0);

717 
Ÿ
 = 
	`dsym±r
(
s
, ot, 
s2
, 0);

718 
Ÿ
 = 
	`duöçå
(
s
, ot, 
t
->
bound
);

721 
s1
 = 
	`dty≥sym
(
t
->
ty≥
);

722 
Ÿ
 = 
	`dcomm⁄ty≥
(
s
, ot, 
t
);

723 
xt
 = 
Ÿ
 - 2*
width±r
;

724 
Ÿ
 = 
	`dsym±r
(
s
, ot, 
s1
, 0);

728 
TCHAN
:

730 
s1
 = 
	`dty≥sym
(
t
->
ty≥
);

731 
Ÿ
 = 
	`dcomm⁄ty≥
(
s
, ot, 
t
);

732 
xt
 = 
Ÿ
 - 2*
width±r
;

733 
Ÿ
 = 
	`dsym±r
(
s
, ot, 
s1
, 0);

734 
Ÿ
 = 
	`duöçå
(
s
, ot, 
t
->
ch™
);

737 
TFUNC
:

738 
t1
=
	`gëthisx
(
t
)->
ty≥
;Å1;Å1Ò1->
down
)

739 
	`dty≥sym
(
t1
->
ty≥
);

740 
isddd
 = 0;

741 
t1
=
	`gëö¨gx
(
t
)->
ty≥
;Å1;Å1Ò1->
down
) {

742 
isddd
 = 
t1
->isddd;

743 
	`dty≥sym
(
t1
->
ty≥
);

745 
t1
=
	`gëouèrgx
(
t
)->
ty≥
;Å1;Å1Ò1->
down
)

746 
	`dty≥sym
(
t1
->
ty≥
);

748 
Ÿ
 = 
	`dcomm⁄ty≥
(
s
, ot, 
t
);

749 
xt
 = 
Ÿ
 - 2*
width±r
;

750 
Ÿ
 = 
	`duöt8
(
s
, ot, 
isddd
);

753 
Ÿ
 = 
	`∫d
(Ÿ, 
width±r
);

754 
Ÿ
 = 
	`dsym±r
(
s
, ot, s, ot+2*(
width±r
+2*4));

755 
n
 = 
t
->
thi°u∂e
 +Å->
ötu∂e
;

756 
Ÿ
 = 
	`duöt32
(
s
, ot, 
n
);

757 
Ÿ
 = 
	`duöt32
(
s
, ot, 
n
);

758 
Ÿ
 = 
	`dsym±r
(
s
, ot, s, ot+1*(
width±r
+2*4)+
n
*widthptr);

759 
Ÿ
 = 
	`duöt32
(
s
, ot, 
t
->
ouâu∂e
);

760 
Ÿ
 = 
	`duöt32
(
s
, ot, 
t
->
ouâu∂e
);

763 
t1
=
	`gëthisx
(
t
)->
ty≥
;Å1;Å1Ò1->
down
, 
n
++)

764 
Ÿ
 = 
	`dsym±r
(
s
, ot, 
	`dty≥sym
(
t1
->
ty≥
), 0);

765 
t1
=
	`gëö¨gx
(
t
)->
ty≥
;Å1;Å1Ò1->
down
, 
n
++)

766 
Ÿ
 = 
	`dsym±r
(
s
, ot, 
	`dty≥sym
(
t1
->
ty≥
), 0);

767 
t1
=
	`gëouèrgx
(
t
)->
ty≥
;Å1;Å1Ò1->
down
, 
n
++)

768 
Ÿ
 = 
	`dsym±r
(
s
, ot, 
	`dty≥sym
(
t1
->
ty≥
), 0);

771 
TINTER
:

772 
m
 = 
	`imëhods
(
t
);

773 
n
 = 0;

774 
a
=
m
;á;á˜->
lök
) {

775 
	`dty≥sym
(
a
->
ty≥
);

776 
n
++;

780 
Ÿ
 = 
	`dcomm⁄ty≥
(
s
, ot, 
t
);

781 
xt
 = 
Ÿ
 - 2*
width±r
;

782 
Ÿ
 = 
	`dsym±r
(
s
, ot, s, ot+
width±r
+2*4);

783 
Ÿ
 = 
	`duöt32
(
s
, ot, 
n
);

784 
Ÿ
 = 
	`duöt32
(
s
, ot, 
n
);

785 
a
=
m
;á;á˜->
lök
) {

787 
Ÿ
 = 
	`dgo°rög±r
(
s
, ot, 
a
->
«me
);

788 
Ÿ
 = 
	`dg›kg∑th
(
s
, ot, 
a
->
pkg
);

789 
Ÿ
 = 
	`dsym±r
(
s
, ot, 
	`dty≥sym
(
a
->
ty≥
), 0);

793 
TMAP
:

795 
s1
 = 
	`dty≥sym
(
t
->
down
);

796 
s2
 = 
	`dty≥sym
(
t
->
ty≥
);

797 
Ÿ
 = 
	`dcomm⁄ty≥
(
s
, ot, 
t
);

798 
xt
 = 
Ÿ
 - 2*
width±r
;

799 
Ÿ
 = 
	`dsym±r
(
s
, ot, 
s1
, 0);

800 
Ÿ
 = 
	`dsym±r
(
s
, ot, 
s2
, 0);

803 
TPTR32
:

804 
TPTR64
:

805 if(
t
->
ty≥
->
ëy≥
 =
TANY
) {

807 
Ÿ
 = 
	`dcomm⁄ty≥
(
s
, ot, 
t
);

811 
s1
 = 
	`dty≥sym
(
t
->
ty≥
);

812 
Ÿ
 = 
	`dcomm⁄ty≥
(
s
, ot, 
t
);

813 
xt
 = 
Ÿ
 - 2*
width±r
;

814 
Ÿ
 = 
	`dsym±r
(
s
, ot, 
s1
, 0);

817 
TSTRUCT
:

820 
n
 = 0;

821 
t1
=
t
->
ty≥
;Å1!=
T
;Å1Ò1->
down
) {

822 
	`dty≥sym
(
t1
->
ty≥
);

823 
n
++;

825 
Ÿ
 = 
	`dcomm⁄ty≥
(
s
, ot, 
t
);

826 
xt
 = 
Ÿ
 - 2*
width±r
;

827 
Ÿ
 = 
	`dsym±r
(
s
, ot, s, ot+
width±r
+2*4);

828 
Ÿ
 = 
	`duöt32
(
s
, ot, 
n
);

829 
Ÿ
 = 
	`duöt32
(
s
, ot, 
n
);

830 
t1
=
t
->
ty≥
;Å1!=
T
;Å1Ò1->
down
) {

832 if(
t1
->
sym
 && !t1->
embedded
) {

833 
Ÿ
 = 
	`dgo°rög±r
(
s
, ot, 
t1
->
sym
->
«me
);

834 if(
	`exp‹äame
(
t1
->
sym
->
«me
))

835 
Ÿ
 = 
	`dgo°rög±r
(
s
, ot, 
nû
);

837 
Ÿ
 = 
	`dg›kg∑th
(
s
, ot, 
t1
->
sym
->
pkg
);

839 
Ÿ
 = 
	`dgo°rög±r
(
s
, ot, 
nû
);

840 
Ÿ
 = 
	`dgo°rög±r
(
s
, ot, 
nû
);

842 
Ÿ
 = 
	`dsym±r
(
s
, ot, 
	`dty≥sym
(
t1
->
ty≥
), 0);

843 
Ÿ
 = 
	`dgo°æô±r
(
s
, ot, 
t1
->
nŸe
);

844 
Ÿ
 = 
	`duöçå
(
s
, ot, 
t1
->
width
);

848 
Ÿ
 = 
	`dexå©y≥
(
s
, ot, 
t
, 
xt
);

849 
	`ggloblsym
(
s
, 
Ÿ
, 
dupok
);

850  
s
;

851 
	}
}

854 
	$dum±y≥°ru˘s
()

856 
i
;

857 
NodeLi°
 *
l
;

858 
Node
 *
n
;

859 
Ty≥
 *
t
;

860 
Pkg
 *
p
;

863 
l
=
exã∫d˛
;Ü;Üˆ->
√xt
) {

864 
n
 = 
l
->n;

865 if(
n
->
›
 !
OTYPE
)

867 
sig«éi°
 = 
	`li°
(sig«éi°, 
n
);

871 
l
=
sig«éi°
;Ü;Üˆ->
√xt
) {

872 
n
 = 
l
->n;

873 if(
n
->
›
 !
OTYPE
)

875 
t
 = 
n
->
ty≥
;

876 
	`dty≥sym
(
t
);

877 if(
t
->
sym
)

878 
	`dty≥sym
(
	`±πo
(
t
));

882 
i
=0; i<
	`√Àm
(
phash
); i++)

883 
p
=
phash
[
i
];Ö;Öı->
lök
)

884 if(
p
->
dúe˘
)

885 
	`dimp‹ç©h
(
p
);

893 if(
compûög_ru¡ime
) {

894 
i
=1; i<=
TBOOL
; i++)

895 
	`dty≥sym
(
	`±πo
(
ty≥s
[
i
]));

896 
	`dty≥sym
(
	`±πo
(
ty≥s
[
TSTRING
]));

897 
	`dty≥sym
(
	`±πo
(
ty≥s
[
TUNSAFEPTR
]));

901 
	`dty≥sym
(
	`±πo
(
îr‹ty≥
));

902 
	`dty≥sym
(
	`fun˘y≥
(
nû
,

903 
	`li°1
(
	`nod
(
ODCLFIELD
, 
N
, 
	`ty≥nod
(
îr‹ty≥
))),

904 
	`li°1
(
	`nod
(
ODCLFIELD
, 
N
, 
	`ty≥nod
(
ty≥s
[
TSTRING
])))));

907 
	`dimp‹ç©h
(
ru¡imïkg
);

908 
	`dimp‹ç©h
(
	`mkpkg
(
	`°æô
("main")));

910 
	}
}

912 
Sym
*

913 
	$dÆgsym
(
Ty≥
 *
t
)

915 
Ÿ
;

916 
Sym
 *
s
, *
hash
, *
eq
;

917 
buf
[100];

922 
s
 = 
	`ty≥sym¥efix
(".Æg", 
t
);

923 
hash
 = 
	`ty≥sym¥efix
(".hash", 
t
);

924 
	`gíhash
(
hash
, 
t
);

925 
eq
 = 
	`ty≥sym¥efix
(".eq", 
t
);

926 
	`gíeq
(
eq
, 
t
);

929 
Ÿ
 = 0;

930 
Ÿ
 = 
	`dsym±r
(
s
, ot, 
hash
, 0);

931 
Ÿ
 = 
	`dsym±r
(
s
, ot, 
eq
, 0);

932 
Ÿ
 = 
	`dsym±r
(
s
, ot, 
	`pkglookup
("mem¥öt", 
ru¡imïkg
), 0);

933 
t
->
width
) {

935 
Ÿ
 = 
	`dsym±r
(
s
, ot, 
	`pkglookup
("memc›y", 
ru¡imïkg
), 0);

942 
	`¢¥öt
(
buf
,  buf, "memc›y%d", ()
t
->
width
*8);

943 
Ÿ
 = 
	`dsym±r
(
s
, ot, 
	`pkglookup
(
buf
, 
ru¡imïkg
), 0);

947 
	`ggloblsym
(
s
, 
Ÿ
, 1);

948  
s
;

949 
	}
}

	@select.c

9 
	~<u.h
>

10 
	~<libc.h
>

11 
	~"go.h
"

14 
	$ty≥check£À˘
(
Node
 *
£l
)

16 
Node
 *
nˇ£
, *
n
, *
def
;

17 
NodeLi°
 *
l
;

18 
 o
, 
cou¡
;

20 
def
 = 
nû
;

21 
 o
 = 
	`£éöío
(
£l
);

22 
cou¡
 = 0;

23 
	`ty≥checkli°
(
£l
->
nöô
, 
Et›
);

24 
l
=
£l
->
li°
;Ü;Üˆ->
√xt
) {

25 
cou¡
++;

26 
nˇ£
 = 
l
->
n
;

27 
	`£éöío
(
nˇ£
);

28 if(
nˇ£
->
›
 !
OXCASE
)

29 
	`Áèl
("ty≥check£À˘ %O", 
nˇ£
->
›
);

31 if(
nˇ£
->
li°
 =
nû
) {

33 if(
def
 !
N
)

34 
	`yyîr‹
("mu…ùÀ deÁu…†ö sñe˘ (fú°áà%L)", 
def
->
löío
);

36 
def
 = 
nˇ£
;

37 } if(
nˇ£
->
li°
->
√xt
) {

38 
	`yyîr‹
("select cases cannot beÜists");

40 
n
 = 
	`ty≥check
(&
nˇ£
->
li°
->n, 
Et›
);

41 
nˇ£
->
À·
 = 
n
;

42 
nˇ£
->
li°
 = 
nû
;

43 
	`£éöío
(
n
);

44 
n
->
›
) {

46 
	`yyîr‹
("select case must beÑeceive, send orássignÑecv");

49 
OAS
:

53 if((
n
->
right
->
›
 =
OCONVNOP
 ||Ç->right->› =
OCONVIFACE
Ë&&Ç->right->
im∂icô
)

54 
n
->
right
 =Ç->right->
À·
;

56 if(
n
->
right
->
›
 !
ORECV
) {

57 
	`yyîr‹
("selectássignment must haveÑeceive onÑight hand side");

60 
n
->
›
 = 
OSELRECV
;

63 
OAS2RECV
:

65 if(
n
->
right
->
›
 !
ORECV
) {

66 
	`yyîr‹
("selectássignment must haveÑeceive onÑight hand side");

69 
n
->
›
 = 
OSELRECV2
;

70 
n
->
À·
 =Ç->
li°
->n;

71 
n
->
¡e°
 =Ç->
li°
->
√xt
->n;

72 
n
->
right
 =Ç->
æi°
->n;

75 
ORECV
:

77 
n
 = 
	`nod
(
OSELRECV
, 
N
,Ç);

78 
n
->
ty≥check
 = 1;

79 
nˇ£
->
À·
 = 
n
;

82 
OSEND
:

86 
	`ty≥checkli°
(
nˇ£
->
nbody
, 
Et›
);

88 
£l
->
xoff£t
 = 
cou¡
;

89 
löío
 = 
 o
;

90 
	}
}

93 
	$wÆk£À˘
(
Node
 *
£l
)

95 
 o
, 
i
;

96 
Node
 *
n
, *
r
, *
a
, *
tmp
, *
v¨
, *
ˇs
, *
dÊt
, *
ch
;

97 
NodeLi°
 *
l
, *
öô
;

99 if(
£l
->
li°
 =
nû
 && sñ->
xoff£t
 != 0)

100 
	`Áèl
("double walkselect");

102 
 o
 = 
	`£éöío
(
£l
);

103 
i
 = 
	`cou¡
(
£l
->
li°
);

106 if(
i
 == 0) {

107 
£l
->
nbody
 = 
	`li°1
(
	`mkˇŒ
("block", 
nû
,Çil));

108 
out
;

112 if(
i
 == 1) {

113 
ˇs
 = 
£l
->
li°
->
n
;

114 
	`£éöío
(
ˇs
);

115 
l
 = 
ˇs
->
nöô
;

116 if(
ˇs
->
À·
 !
N
) {

117 
n
 = 
ˇs
->
À·
;

118 
l
 = 
	`c⁄ˇt
÷, 
n
->
nöô
);

119 
n
->
nöô
 = 
nû
;

120 
n
->
›
) {

122 
	`Áèl
("£À˘ %O", 
n
->
›
);

124 
OSEND
:

125 
ch
 = 
	`chó≥x¥
(
n
->
À·
, &
l
);

126 
n
->
À·
 = 
ch
;

129 
OSELRECV
:

130 
r
 = 
n
->
right
;

131 
ch
 = 
	`chó≥x¥
(
r
->
À·
, &
l
);

132 
r
->
À·
 = 
ch
;

134 if(
n
->
À·
 =
N
)

135 
n
 = 
r
;

137 
n
 = 
	`nod
(
OAS
,Ç->
À·
, 
r
);

138 
	`ty≥check
(&
n
, 
Et›
);

142 
OSELRECV2
:

143 
r
 = 
n
->
right
;

144 
ch
 = 
	`chó≥x¥
(
r
->
À·
, &
l
);

145 
r
->
À·
 = 
ch
;

147 
a
 = 
	`nod
(
OAS2
, 
N
, N);

148 
a
->
li°
 = 
n
->list;

149 
a
->
æi°
 = 
n
->rlist;

150 
n
 = 
a
;

151 
	`ty≥check
(&
n
, 
Et›
);

156 
a
 = 
	`nod
(
OIF
, 
N
, N);

157 
a
->
¡e°
 = 
	`nod
(
OEQ
, 
ch
, 
	`nodnû
());

158 
a
->
nbody
 = 
	`li°1
(
	`mkˇŒ
("block", 
nû
, &
l
));

159 
	`ty≥check
(&
a
, 
Et›
);

160 
l
 = 
	`li°
÷, 
a
);

161 
l
 = 
	`li°
÷, 
n
);

163 
l
 = 
	`c⁄ˇt
÷, 
ˇs
->
nbody
);

164 
£l
->
nbody
 = 
l
;

165 
out
;

170 
l
=
£l
->
li°
;Ü;Üˆ->
√xt
) {

171 
ˇs
 = 
l
->
n
;

172 
	`£éöío
(
ˇs
);

173 
n
 = 
ˇs
->
À·
;

174 if(
n
 =
N
)

176 
n
->
›
) {

177 
OSELRECV
:

178 
OSELRECV2
:

179 
ch
 = 
n
->
right
->
À·
;

187 if(
n
->
›
 =
OSELRECV2
) {

188 if(
n
->
¡e°
 =
N
 || 
	`isbœnk
(n->ntest))

189 
n
->
¡e°
 = 
	`nodnû
();

190 if(
n
->
¡e°
->
›
 =
ONAME
 &&

191 (!
n
->
cﬁas
 || (n->
¡e°
->
˛ass
&
PHEAP
) == 0) &&

192 
	`c⁄vît›
(
ty≥s
[
TBOOL
], 
n
->
¡e°
->
ty≥
, 
nû
Ë=
OCONVNOP
) {

193 
n
->
¡e°
 = 
	`nod
(
OADDR
,Ç->¡e°, 
N
);

194 
n
->
¡e°
->
ëy≥
 = 1;

195 
	`ty≥check
(&
n
->
¡e°
, 
Erv
);

197 
tmp
 = 
	`ãmp
(
ty≥s
[
TBOOL
]);

198 
a
 = 
	`nod
(
OADDR
, 
tmp
, 
N
);

199 
a
->
ëy≥
 = 1;

200 
	`ty≥check
(&
a
, 
Erv
);

201 
r
 = 
	`nod
(
OAS
, 
n
->
¡e°
, 
tmp
);

202 
	`ty≥check
(&
r
, 
Et›
);

203 
ˇs
->
nbody
 = 
	`c⁄ˇt
(
	`li°1
(
r
), cas->nbody);

204 
n
->
¡e°
 = 
a
;

208 if(
n
->
À·
 =
N
 || 
	`isbœnk
(n->left))

209 
n
->
À·
 = 
	`nodnû
();

210 if(
n
->
À·
->
›
 =
ONAME
 &&

211 (!
n
->
cﬁas
 || (n->
À·
->
˛ass
&
PHEAP
) == 0) &&

212 
	`c⁄vît›
(
ch
->
ty≥
->ty≥, 
n
->
À·
->ty≥, 
nû
Ë=
OCONVNOP
) {

213 
n
->
À·
 = 
	`nod
(
OADDR
,Ç->À·, 
N
);

214 
n
->
À·
->
ëy≥
 = 1;

215 
	`ty≥check
(&
n
->
À·
, 
Erv
);

217 
tmp
 = 
	`ãmp
(
ch
->
ty≥
->type);

218 
a
 = 
	`nod
(
OADDR
, 
tmp
, 
N
);

219 
a
->
ëy≥
 = 1;

220 
	`ty≥check
(&
a
, 
Erv
);

221 
r
 = 
	`nod
(
OAS
, 
n
->
À·
, 
tmp
);

222 
	`ty≥check
(&
r
, 
Et›
);

223 
ˇs
->
nbody
 = 
	`c⁄ˇt
(
	`li°1
(
r
), cas->nbody);

224 
n
->
À·
 = 
a
;

227 
ˇs
->
nbody
 = 
	`c⁄ˇt
(
n
->
nöô
, cas->nbody);

228 
n
->
nöô
 = 
nû
;

234 if(
i
 =2 && (
£l
->
li°
->
n
->
À·
 =
nû
 || sñ->li°->
√xt
->n->left ==Çil)) {

235 if(
£l
->
li°
->
n
->
À·
 =
nû
) {

236 
ˇs
 = 
£l
->
li°
->
√xt
->
n
;

237 
dÊt
 = 
£l
->
li°
->
n
;

239 
dÊt
 = 
£l
->
li°
->
√xt
->
n
;

240 
ˇs
 = 
£l
->
li°
->
n
;

243 
n
 = 
ˇs
->
À·
;

244 
	`£éöío
(
n
);

245 
r
 = 
	`nod
(
OIF
, 
N
, N);

246 
r
->
nöô
 = 
ˇs
->ninit;

247 
n
->
›
) {

249 
	`Áèl
("£À˘ %O", 
n
->
›
);

251 
OSEND
:

253 
ch
 = 
	`chó≥x¥
(
n
->
À·
, &
r
->
nöô
);

254 
r
->
¡e°
 = 
	`mkˇŒ1
(
	`ch™‚
("£À˘nb£nd", 2, 
ch
->
ty≥
),

255 
ty≥s
[
TBOOL
], &
r
->
nöô
, 
	`ty≥«me
(
ch
->
ty≥
), ch, 
n
->
right
);

258 
OSELRECV
:

260 
r
 = 
	`nod
(
OIF
, 
N
, N);

261 
r
->
nöô
 = 
ˇs
->ninit;

262 
ch
 = 
	`chó≥x¥
(
n
->
right
->
À·
, &
r
->
nöô
);

263 
r
->
¡e°
 = 
	`mkˇŒ1
(
	`ch™‚
("£À˘nbªcv", 2, 
ch
->
ty≥
),

264 
ty≥s
[
TBOOL
], &
r
->
nöô
, 
	`ty≥«me
(
ch
->
ty≥
), 
n
->
À·
, ch);

267 
OSELRECV2
:

269 
r
 = 
	`nod
(
OIF
, 
N
, N);

270 
r
->
nöô
 = 
ˇs
->ninit;

271 
ch
 = 
	`chó≥x¥
(
n
->
right
->
À·
, &
r
->
nöô
);

272 
r
->
¡e°
 = 
	`mkˇŒ1
(
	`ch™‚
("£À˘nbªcv2", 2, 
ch
->
ty≥
),

273 
ty≥s
[
TBOOL
], &
r
->
nöô
, 
	`ty≥«me
(
ch
->
ty≥
), 
n
->
À·
,Ç->
¡e°
, ch);

276 
	`ty≥check
(&
r
->
¡e°
, 
Erv
);

277 
r
->
nbody
 = 
ˇs
->nbody;

278 
r
->
√l£
 = 
	`c⁄ˇt
(
dÊt
->
nöô
, dÊt->
nbody
);

279 
£l
->
nbody
 = 
	`li°1
(
r
);

280 
out
;

283 
öô
 = 
£l
->
nöô
;

284 
£l
->
nöô
 = 
nû
;

287 
	`£éöío
(
£l
);

288 
v¨
 = 
	`ãmp
(
	`±πo
(
ty≥s
[
TUINT8
]));

289 
r
 = 
	`nod
(
OAS
, 
v¨
, 
	`mkˇŒ
("√w£À˘", v¨->
ty≥
, 
nû
, 
	`nodötc⁄°
(
£l
->
xoff£t
)));

290 
	`ty≥check
(&
r
, 
Et›
);

291 
öô
 = 
	`li°
(öô, 
r
);

294 
l
=
£l
->
li°
;Ü;Üˆ->
√xt
) {

295 
ˇs
 = 
l
->
n
;

296 
	`£éöío
(
ˇs
);

297 
n
 = 
ˇs
->
À·
;

298 
r
 = 
	`nod
(
OIF
, 
N
, N);

299 
r
->
nbody
 = 
ˇs
->
nöô
;

300 
ˇs
->
nöô
 = 
nû
;

301 if(
n
 !
nû
) {

302 
r
->
nbody
 = 
	`c⁄ˇt
‘->nbody, 
n
->
nöô
);

303 
n
->
nöô
 = 
nû
;

305 if(
n
 =
nû
) {

307 
r
->
¡e°
 = 
	`mkˇŒ
("£À˘deÁu…", 
ty≥s
[
TBOOL
], &
öô
, 
v¨
);

309 
n
->
›
) {

311 
	`Áèl
("£À˘ %O", 
n
->
›
);

313 
OSEND
:

315 
n
->
À·
 = 
	`ß„ex¥
“->À·, &
r
->
nöô
);

316 
n
->
right
 = 
	`loˇÀx¥
“->right,Ç->
À·
->
ty≥
->ty≥, &
r
->
nöô
);

317 
n
->
right
 = 
	`nod
(
OADDR
,Ç->right, 
N
);

318 
n
->
right
->
ëy≥
 = 1;

319 
	`ty≥check
(&
n
->
right
, 
Erv
);

320 
r
->
¡e°
 = 
	`mkˇŒ1
(
	`ch™‚
("£À˘£nd", 2, 
n
->
À·
->
ty≥
), 
ty≥s
[
TBOOL
],

321 &
öô
, 
v¨
, 
n
->
À·
,Ç->
right
);

324 
OSELRECV
:

326 
r
->
¡e°
 = 
	`mkˇŒ1
(
	`ch™‚
("£À˘ªcv", 2, 
n
->
right
->
À·
->
ty≥
), 
ty≥s
[
TBOOL
],

327 &
öô
, 
v¨
, 
n
->
right
->
À·
,Ç->left);

330 
OSELRECV2
:

332 
r
->
¡e°
 = 
	`mkˇŒ1
(
	`ch™‚
("£À˘ªcv2", 2, 
n
->
right
->
À·
->
ty≥
), 
ty≥s
[
TBOOL
],

333 &
öô
, 
v¨
, 
n
->
right
->
À·
,Ç->À·,Ç->
¡e°
);

337 
r
->
nbody
 = 
	`c⁄ˇt
‘->nbody, 
ˇs
->nbody);

338 
r
->
nbody
 = 
	`li°
‘->nbody, 
	`nod
(
OBREAK
, 
N
, N));

339 
öô
 = 
	`li°
(öô, 
r
);

343 
	`£éöío
(
£l
);

344 
öô
 = 
	`li°
(öô, 
	`mkˇŒ
("£À˘go", 
T
, 
nû
, 
v¨
));

345 
£l
->
nbody
 = 
öô
;

347 
out
:

348 
£l
->
li°
 = 
nû
;

349 
	`wÆk°méi°
(
£l
->
nbody
);

350 
löío
 = 
 o
;

351 
	}
}

	@sinit.c

9 
	~<u.h
>

10 
	~<libc.h
>

11 
	~"go.h
"

15 
	mInôNŸSèπed
 = 0,

16 
	mInôD⁄e
 = 1,

17 
	mInôPídög
 = 2,

20 
iszîo
(
Node
*);

21 
öô∂™
(
Node
*);

22 
NodeLi°
 *
	göôli°
;

23 
öô2
(
Node
*, 
NodeLi°
**);

24 
öô2li°
(
NodeLi°
*, NodeList**);

25 
°©icöô
(
Node
*, 
NodeLi°
**);

26 
Node
 *
°©i˙ame
(
Ty≥
*, );

29 
	$öô1
(
Node
 *
n
, 
NodeLi°
 **
out
)

31 
NodeLi°
 *
l
;

33 if(
n
 =
N
)

35 
	`öô1
(
n
->
À·
, 
out
);

36 
	`öô1
(
n
->
right
, 
out
);

37 
l
=
n
->
li°
;Ü;Üˆ->
√xt
)

38 
	`öô1
(
l
->
n
, 
out
);

40 if(
n
->
›
 !
ONAME
)

42 
n
->
˛ass
) {

43 
PEXTERN
:

44 
PFUNC
:

47 if(
	`isbœnk
(
n
Ë&&Ç->
de‚
 !
N
 &&Ç->de‚->
öô‹dî
 =
InôNŸSèπed
) {

48 
n
->
de‚
->
öô‹dî
 = 
InôD⁄e
;

49 *
out
 = 
	`li°
(*out, 
n
->
de‚
);

54 if(
n
->
öô‹dî
 =
InôD⁄e
)

56 if(
n
->
öô‹dî
 =
InôPídög
) {

57 if(
n
->
˛ass
 =
PFUNC
)

64 
	`Êushîr‹s
();

65 if(
√º‹s
 > 0)

66 
	`îr‹exô
();

68 
	`¥öt
("%L: inôüliz©i⁄Üo›:\n", 
n
->
löío
);

69 
l
=
öôli°
;;Üˆ->
√xt
) {

70 if(
l
->
√xt
 =
nû
)

72 
l
->
√xt
->
íd
 =Ü;

74 ; 
l
;Üˆ->
íd
)

75 
	`¥öt
("\t%L %SÑe„r†to\n", 
l
->
n
->
löío
,Ü->n->
sym
);

76 
	`¥öt
("\t%L %S\n", 
n
->
löío
,Ç->
sym
);

77 
	`îr‹exô
();

79 
n
->
öô‹dî
 = 
InôPídög
;

80 
l
 = 
	`mÆloc
( *l);

81 
l
->
√xt
 = 
öôli°
;

82 
l
->
n
 =Ç;

83 
l
->
íd
 = 
nû
;

84 
öôli°
 = 
l
;

88 if(
n
->
de‚
 !
N
) {

89 
n
->
de‚
->
›
) {

91 
bad
;

93 
ODCLFUNC
:

94 
	`öô2li°
(
n
->
de‚
->
nbody
, 
out
);

97 
OAS
:

98 if(
n
->
de‚
->
À·
 !=Ç)

99 
bad
;

109 
	`öô2
(
n
->
de‚
->
right
, 
out
);

110 if(
debug
['j'])

111 
	`¥öt
("%S\n", 
n
->
sym
);

112 if(!
	`°©icöô
(
n
, 
out
)) {

113 if(
debug
['%']Ë
	`dump
("n⁄°©ic", 
n
->
de‚
);

114 *
out
 = 
	`li°
(*out, 
n
->
de‚
);

117 
n
->
de‚
->
dod©a
 = 1;

118 
	`öô1
(
n
->
de‚
->
right
, 
out
);

119 if(
debug
['j'])

120 
	`¥öt
("%S\n", 
n
->
sym
);

121 *
out
 = 
	`li°
(*out, 
n
->
de‚
);

125 
OAS2FUNC
:

126 
OAS2MAPR
:

127 
OAS2DOTTYPE
:

128 
OAS2RECV
:

129 if(
n
->
de‚
->
öô‹dî
 !
InôNŸSèπed
)

131 
n
->
de‚
->
öô‹dî
 = 
InôD⁄e
;

132 
l
=
n
->
de‚
->
æi°
;Ü;Üˆ->
√xt
)

133 
	`öô1
(
l
->
n
, 
out
);

134 *
out
 = 
	`li°
(*out, 
n
->
de‚
);

138 
l
 = 
öôli°
;

139 
öôli°
 = 
l
->
√xt
;

140 if(
l
->
n
 !=Ç)

141 
	`Áèl
("bad initlist");

142 
	`‰ì
(
l
);

143 
n
->
öô‹dî
 = 
InôD⁄e
;

146 
bad
:

147 
	`dump
("de‚", 
n
->
de‚
);

148 
	`Áèl
("init1: bad defn");

149 
	}
}

153 
	$öô2
(
Node
 *
n
, 
NodeLi°
 **
out
)

155 if(
n
 =
N
 ||Ç->
öô‹dî
 =
InôD⁄e
)

158 if(
n
->
›
 =
ONAME
 &&Ç->
nöô
)

159 
	`Áèl
("«mê%S wôhÇöô: %+N\n", 
n
->
sym
,Ç);

161 
	`öô1
(
n
, 
out
);

162 
	`öô2
(
n
->
À·
, 
out
);

163 
	`öô2
(
n
->
right
, 
out
);

164 
	`öô2
(
n
->
¡e°
, 
out
);

165 
	`öô2li°
(
n
->
nöô
, 
out
);

166 
	`öô2li°
(
n
->
li°
, 
out
);

167 
	`öô2li°
(
n
->
æi°
, 
out
);

168 
	`öô2li°
(
n
->
nbody
, 
out
);

169 
	`öô2li°
(
n
->
√l£
, 
out
);

170 
	}
}

173 
	$öô2li°
(
NodeLi°
 *
l
, NodeLi° **
out
)

175 ; 
l
;Üˆ->
√xt
)

176 
	`öô2
(
l
->
n
, 
out
);

177 
	}
}

180 
	$öôª‹dî
(
NodeLi°
 *
l
, NodeLi° **
out
)

182 
Node
 *
n
;

184 ; 
l
;Üˆ->
√xt
) {

185 
n
 = 
l
->n;

186 
n
->
›
) {

187 
ODCLFUNC
:

188 
ODCLCONST
:

189 
ODCLTYPE
:

192 
	`öôª‹dî
(
n
->
nöô
, 
out
);

193 
n
->
nöô
 = 
nû
;

194 
	`öô1
(
n
, 
out
);

196 
	}
}

198 
NodeLi°
*

199 
	$öôfix
(
NodeLi°
 *
l
)

201 
NodeLi°
 *
lout
;

202 
 o
;

204 
lout
 = 
nû
;

205 
 o
 = 
löío
;

206 
	`öôª‹dî
(
l
, &
lout
);

207 
löío
 = 
 o
;

208  
lout
;

209 
	}
}

216 
°©iˇssign
(
Node
*, Node*, 
NodeLi°
**);

219 
	$°©icöô
(
Node
 *
n
, 
NodeLi°
 **
out
)

221 
Node
 *
l
, *
r
;

223 if(
n
->
›
 !
ONAME
 ||Ç->
˛ass
 !
PEXTERN
 ||Ç->
de‚
 =
N
 ||Ç->de‚->› !
OAS
)

224 
	`Áèl
("staticinit");

226 
löío
 = 
n
->lineno;

227 
l
 = 
n
->
de‚
->
À·
;

228 
r
 = 
n
->
de‚
->
right
;

229  
	`°©iˇssign
(
l
, 
r
, 
out
);

230 
	}
}

235 
	$°©icc›y
(
Node
 *
l
, Nodê*
r
, 
NodeLi°
 **
out
)

237 
i
;

238 
InôE¡ry
 *
e
;

239 
InôPœn
 *
p
;

240 
Node
 *
a
, *
Œ
, *
º
, *
‹ig
, 
n1
;

242 if(
r
->
›
 !
ONAME
 ||Ñ->
˛ass
 !
PEXTERN
 ||Ñ->
sym
->
pkg
 !
loˇÕkg
)

244 if(
r
->
de‚
 =
N
)

246 if(
r
->
de‚
->
›
 !
OAS
)

248 
‹ig
 = 
r
;

249 
r
 =Ñ->
de‚
->
right
;

251 
r
->
›
) {

252 
ONAME
:

253 if(
	`°©icc›y
(
l
, 
r
, 
out
))

255 *
out
 = 
	`li°
(*out, 
	`nod
(
OAS
, 
l
, 
r
));

258 
OLITERAL
:

259 if(
	`iszîo
(
r
))

261 
	`gd©a
(
l
, 
r
,Ü->
ty≥
->
width
);

264 
OADDR
:

265 
r
->
À·
->
›
) {

266 
ONAME
:

267 
	`gd©a
(
l
, 
r
,Ü->
ty≥
->
width
);

272 
OPTRLIT
:

273 
r
->
À·
->
›
) {

277 
OARRAYLIT
:

278 
OSTRUCTLIT
:

279 
OMAPLIT
:

281 
	`gd©a
(
l
, 
	`nod
(
OADDR
, 
r
->
¬ame
, 
N
),Ü->
ty≥
->
width
);

286 
OARRAYLIT
:

287 if(
	`is¶i˚
(
r
->
ty≥
)) {

289 
a
 = 
r
->
¬ame
;

290 
n1
 = *
l
;

291 
n1
.
xoff£t
 = 
l
->xoff£à+ 
Aºay_¨øy
;

292 
	`gd©a
(&
n1
, 
	`nod
(
OADDR
, 
a
, 
N
), 
width±r
);

293 
n1
.
xoff£t
 = 
l
->xoff£à+ 
Aºay_√l
;

294 
	`gd©a
(&
n1
, 
r
->
right
, 4);

295 
n1
.
xoff£t
 = 
l
->xoff£à+ 
Aºay_ˇp
;

296 
	`gd©a
(&
n1
, 
r
->
right
, 4);

300 
OSTRUCTLIT
:

301 
p
 = 
r
->
öô∂™
;

302 
n1
 = *
l
;

303 
i
=0; i<
p
->
Àn
; i++) {

304 
e
 = &
p
->e[
i
];

305 
n1
.
xoff£t
 = 
l
->xoff£à+ 
e
->xoffset;

306 
n1
.
ty≥
 = 
e
->
ex¥
->type;

307 if(
e
->
ex¥
->
›
 =
OLITERAL
)

308 
	`gd©a
(&
n1
, 
e
->
ex¥
,Ç1.
ty≥
->
width
);

310 
Œ
 = 
	`nod
(
OXXX
, 
N
, N);

311 *
Œ
 = 
n1
;

312 if(!
	`°©iˇssign
(
Œ
, 
e
->
ex¥
, 
out
)) {

315 
º
 = 
	`nod
(
OXXX
, 
N
, N);

316 *
º
 = *
‹ig
;

317 
º
->
ty≥
 = 
Œ
->type;

318 
º
->
xoff£t
 +
e
->xoffset;

319 *
out
 = 
	`li°
(*out, 
	`nod
(
OAS
, 
Œ
, 
º
));

326 
	}
}

329 
	$°©iˇssign
(
Node
 *
l
, Nodê*
r
, 
NodeLi°
 **
out
)

331 
Node
 *
a
, 
n1
;

332 
Ty≥
 *
è
;

333 
InôPœn
 *
p
;

334 
InôE¡ry
 *
e
;

335 
i
;

337 
r
->
›
) {

342 
ONAME
:

343 if(
r
->
˛ass
 =
PEXTERN
 &&Ñ->
sym
->
pkg
 =
loˇÕkg
)

344  
	`°©icc›y
(
l
, 
r
, 
out
);

347 
OLITERAL
:

348 if(
	`iszîo
(
r
))

350 
	`gd©a
(
l
, 
r
,Ü->
ty≥
->
width
);

353 
OADDR
:

354 
r
->
À·
->
›
) {

359 
ONAME
:

360 
	`gd©a
(
l
, 
r
,Ü->
ty≥
->
width
);

364 
OPTRLIT
:

365 
r
->
À·
->
›
) {

370 
OARRAYLIT
:

371 
OMAPLIT
:

372 
OSTRUCTLIT
:

374 
a
 = 
	`°©i˙ame
(
r
->
À·
->
ty≥
, 1);

375 
r
->
¬ame
 = 
a
;

376 
	`gd©a
(
l
, 
	`nod
(
OADDR
, 
a
, 
N
),Ü->
ty≥
->
width
);

378 if(!
	`°©iˇssign
(
a
, 
r
->
À·
, 
out
))

379 *
out
 = 
	`li°
(*out, 
	`nod
(
OAS
, 
a
, 
r
->
À·
));

384 
OARRAYLIT
:

385 
	`öô∂™
(
r
);

386 if(
	`is¶i˚
(
r
->
ty≥
)) {

388 
è
 = 
	`typ
(
TARRAY
);

389 
è
->
ty≥
 = 
r
->type->type;

390 
è
->
bound
 = 
	`mpgëfix
(
r
->
right
->
vÆ
.
u
.
xvÆ
);

391 
a
 = 
	`°©i˙ame
(
è
, 1);

392 
r
->
¬ame
 = 
a
;

393 
n1
 = *
l
;

394 
n1
.
xoff£t
 = 
l
->xoff£à+ 
Aºay_¨øy
;

395 
	`gd©a
(&
n1
, 
	`nod
(
OADDR
, 
a
, 
N
), 
width±r
);

396 
n1
.
xoff£t
 = 
l
->xoff£à+ 
Aºay_√l
;

397 
	`gd©a
(&
n1
, 
r
->
right
, 4);

398 
n1
.
xoff£t
 = 
l
->xoff£à+ 
Aºay_ˇp
;

399 
	`gd©a
(&
n1
, 
r
->
right
, 4);

401 
l
 = 
a
;

404 
OSTRUCTLIT
:

405 
	`öô∂™
(
r
);

406 
p
 = 
r
->
öô∂™
;

407 
n1
 = *
l
;

408 
i
=0; i<
p
->
Àn
; i++) {

409 
e
 = &
p
->e[
i
];

410 
n1
.
xoff£t
 = 
l
->xoff£à+ 
e
->xoffset;

411 
n1
.
ty≥
 = 
e
->
ex¥
->type;

412 if(
e
->
ex¥
->
›
 =
OLITERAL
)

413 
	`gd©a
(&
n1
, 
e
->
ex¥
,Ç1.
ty≥
->
width
);

415 
a
 = 
	`nod
(
OXXX
, 
N
, N);

416 *
a
 = 
n1
;

417 if(!
	`°©iˇssign
(
a
, 
e
->
ex¥
, 
out
))

418 *
out
 = 
	`li°
(*out, 
	`nod
(
OAS
, 
a
, 
e
->
ex¥
));

423 
OMAPLIT
:

428 
	}
}

438 
°ru˘lô
(
˘xt
, 
∑ss
, 
Node
 *
n
, Nodê*
v¨
, 
NodeLi°
 **
öô
);

439 
¨øylô
(
˘xt
, 
∑ss
, 
Node
 *
n
, Nodê*
v¨
, 
NodeLi°
 **
öô
);

440 
¶i˚lô
(
˘xt
, 
Node
 *
n
, Nodê*
v¨
, 
NodeLi°
 **
öô
);

441 
m≠lô
(
˘xt
, 
Node
 *
n
, Nodê*
v¨
, 
NodeLi°
 **
öô
);

443 
Node
*

444 
	$°©i˙ame
(
Ty≥
 *
t
, 
˘xt
)

446 
Node
 *
n
;

448 
	`¢¥öt
(
«mebuf
, “amebuf), "°©i˘mp_%.4d", 
°©uniqgí
);

449 
°©uniqgí
++;

450 
n
 = 
	`√w«me
(
	`lookup
(
«mebuf
));

451 if(!
˘xt
)

452 
n
->
ªad⁄ly
 = 1;

453 
	`addv¨
(
n
, 
t
, 
PEXTERN
);

454  
n
;

455 
	}
}

458 
	$i¶ôîÆ
(
Node
 *
n
)

460 if(
n
->
›
 =
OLITERAL
)

461 if(
n
->
vÆ
.
˘y≥
 !
CTNIL
)

464 
	}
}

467 
	$sim∂íame
(
Node
 *
n
)

469 if(
n
->
›
 !
ONAME
)

470 
no
;

471 if(!
n
->
addabÀ
)

472 
no
;

473 if(
n
->
˛ass
 & 
PHEAP
)

474 
no
;

475 if(
n
->
˛ass
 =
PPARAMREF
)

476 
no
;

479 
no
:

481 
	}
}

484 
	$lôas
(
Node
 *
l
, Nodê*
r
, 
NodeLi°
 **
öô
)

486 
Node
 *
a
;

488 
a
 = 
	`nod
(
OAS
, 
l
, 
r
);

489 
	`ty≥check
(&
a
, 
Et›
);

490 
	`wÆkex¥
(&
a
, 
öô
);

491 *
öô
 = 
	`li°
(*öô, 
a
);

492 
	}
}

496 
	mMODEDYNAM
 = 1,

497 
	mMODECONST
 = 2,

501 
	$gëdyn
(
Node
 *
n
, 
t›
)

503 
NodeLi°
 *
∆
;

504 
Node
 *
vÆue
;

505 
mode
;

507 
mode
 = 0;

508 
n
->
›
) {

510 if(
	`i¶ôîÆ
(
n
))

511  
MODECONST
;

512  
MODEDYNAM
;

513 
OARRAYLIT
:

514 if(!
t›
 && 
n
->
ty≥
->
bound
 < 0)

515  
MODEDYNAM
;

516 
OSTRUCTLIT
:

520 
∆
=
n
->
li°
;Çl;ÇlÚl->
√xt
) {

521 
vÆue
 = 
∆
->
n
->
right
;

522 
mode
 |
	`gëdyn
(
vÆue
, 0);

523 if(
mode
 =(
MODEDYNAM
|
MODECONST
))

526  
mode
;

527 
	}
}

530 
	$°ru˘lô
(
˘xt
, 
∑ss
, 
Node
 *
n
, Nodê*
v¨
, 
NodeLi°
 **
öô
)

532 
Node
 *
r
, *
a
;

533 
NodeLi°
 *
∆
;

534 
Node
 *
ödex
, *
vÆue
;

536 
∆
=
n
->
li°
;Çl;ÇlÚl->
√xt
) {

537 
r
 = 
∆
->
n
;

538 if(
r
->
›
 !
OKEY
)

539 
	`Áèl
("°ru˘lô:Ñh†nŸ OKEY: %N", 
r
);

540 
ödex
 = 
r
->
À·
;

541 
vÆue
 = 
r
->
right
;

543 
vÆue
->
›
) {

544 
OARRAYLIT
:

545 if(
vÆue
->
ty≥
->
bound
 < 0) {

546 if(
∑ss
 =1 && 
˘xt
 != 0) {

547 
a
 = 
	`nod
(
ODOT
, 
v¨
, 
	`√w«me
(
ödex
->
sym
));

548 
	`¶i˚lô
(
˘xt
, 
vÆue
, 
a
, 
öô
);

550 if(
∑ss
 =2 && 
˘xt
 == 0) {

551 
a
 = 
	`nod
(
ODOT
, 
v¨
, 
	`√w«me
(
ödex
->
sym
));

552 
	`¶i˚lô
(
˘xt
, 
vÆue
, 
a
, 
öô
);

554 if(
∑ss
 == 3)

558 
a
 = 
	`nod
(
ODOT
, 
v¨
, 
	`√w«me
(
ödex
->
sym
));

559 
	`¨øylô
(
˘xt
, 
∑ss
, 
vÆue
, 
a
, 
öô
);

562 
OSTRUCTLIT
:

563 
a
 = 
	`nod
(
ODOT
, 
v¨
, 
	`√w«me
(
ödex
->
sym
));

564 
	`°ru˘lô
(
˘xt
, 
∑ss
, 
vÆue
, 
a
, 
öô
);

568 if(
	`i¶ôîÆ
(
vÆue
)) {

569 if(
∑ss
 == 2)

572 if(
∑ss
 == 1)

576 
a
 = 
	`nod
(
ODOT
, 
v¨
, 
	`√w«me
(
ödex
->
sym
));

577 
a
 = 
	`nod
(
OAS
,á, 
vÆue
);

578 
	`ty≥check
(&
a
, 
Et›
);

579 
	`wÆkex¥
(&
a
, 
öô
);

580 if(
∑ss
 == 1) {

581 if(
a
->
›
 !
OAS
)

582 
	`Áèl
("structlit:Çotás");

583 
a
->
dod©a
 = 2;

585 *
öô
 = 
	`li°
(*öô, 
a
);

587 
	}
}

590 
	$¨øylô
(
˘xt
, 
∑ss
, 
Node
 *
n
, Nodê*
v¨
, 
NodeLi°
 **
öô
)

592 
Node
 *
r
, *
a
;

593 
NodeLi°
 *
l
;

594 
Node
 *
ödex
, *
vÆue
;

596 
l
=
n
->
li°
;Ü;Üˆ->
√xt
) {

597 
r
 = 
l
->
n
;

598 if(
r
->
›
 !
OKEY
)

599 
	`Áèl
("¨øylô:Ñh†nŸ OKEY: %N", 
r
);

600 
ödex
 = 
r
->
À·
;

601 
vÆue
 = 
r
->
right
;

603 
vÆue
->
›
) {

604 
OARRAYLIT
:

605 if(
vÆue
->
ty≥
->
bound
 < 0) {

606 if(
∑ss
 =1 && 
˘xt
 != 0) {

607 
a
 = 
	`nod
(
OINDEX
, 
v¨
, 
ödex
);

608 
	`¶i˚lô
(
˘xt
, 
vÆue
, 
a
, 
öô
);

610 if(
∑ss
 =2 && 
˘xt
 == 0) {

611 
a
 = 
	`nod
(
OINDEX
, 
v¨
, 
ödex
);

612 
	`¶i˚lô
(
˘xt
, 
vÆue
, 
a
, 
öô
);

614 if(
∑ss
 == 3)

618 
a
 = 
	`nod
(
OINDEX
, 
v¨
, 
ödex
);

619 
	`¨øylô
(
˘xt
, 
∑ss
, 
vÆue
, 
a
, 
öô
);

622 
OSTRUCTLIT
:

623 
a
 = 
	`nod
(
OINDEX
, 
v¨
, 
ödex
);

624 
	`°ru˘lô
(
˘xt
, 
∑ss
, 
vÆue
, 
a
, 
öô
);

628 if(
	`i¶ôîÆ
(
ödex
Ë&& i¶ôîÆ(
vÆue
)) {

629 if(
∑ss
 == 2)

632 if(
∑ss
 == 1)

636 
a
 = 
	`nod
(
OINDEX
, 
v¨
, 
ödex
);

637 
a
 = 
	`nod
(
OAS
,á, 
vÆue
);

638 
	`ty≥check
(&
a
, 
Et›
);

639 
	`wÆkex¥
(&
a
, 
öô
);

640 if(
∑ss
 == 1) {

641 if(
a
->
›
 !
OAS
)

642 
	`Áèl
("structlit:Çotás");

643 
a
->
dod©a
 = 2;

645 *
öô
 = 
	`li°
(*öô, 
a
);

647 
	}
}

650 
	$¶i˚lô
(
˘xt
, 
Node
 *
n
, Nodê*
v¨
, 
NodeLi°
 **
öô
)

652 
Node
 *
r
, *
a
;

653 
NodeLi°
 *
l
;

654 
Ty≥
 *
t
;

655 
Node
 *
v°©
, *
vauto
;

656 
Node
 *
ödex
, *
vÆue
;

657 
mode
;

660 
t
 = 
	`shÆlow
(
n
->
ty≥
);

661 
t
->
bound
 = 
	`mpgëfix
(
n
->
right
->
vÆ
.
u
.
xvÆ
);

662 
t
->
width
 = 0;

663 
t
->
sym
 = 
nû
;

664 
	`dowidth
(
t
);

666 if(
˘xt
 != 0) {

668 
v°©
 = 
	`°©i˙ame
(
t
, 
˘xt
);

669 
	`¨øylô
(
˘xt
, 1, 
n
, 
v°©
, 
öô
);

670 
	`¨øylô
(
˘xt
, 2, 
n
, 
v°©
, 
öô
);

673 
a
 = 
	`nod
(
OSLICE
, 
v°©
,Çod(
OKEY
, 
N
, N));

674 
a
 = 
	`nod
(
OAS
, 
v¨
,á);

675 
	`ty≥check
(&
a
, 
Et›
);

676 
a
->
dod©a
 = 2;

677 *
öô
 = 
	`li°
(*öô, 
a
);

702 
v°©
 = 
N
;

703 
mode
 = 
	`gëdyn
(
n
, 1);

704 if(
mode
 & 
MODECONST
) {

705 
v°©
 = 
	`°©i˙ame
(
t
, 
˘xt
);

706 
	`¨øylô
(
˘xt
, 1, 
n
, 
v°©
, 
öô
);

710 
vauto
 = 
	`ãmp
(
	`±πo
(
t
));

713 if(
n
->
esc
 =
EscN⁄e
) {

714 
a
 = 
	`nod
(
OAS
, 
	`ãmp
(
t
), 
N
);

715 
	`ty≥check
(&
a
, 
Et›
);

716 *
öô
 = 
	`li°
(*öô, 
a
);

717 
a
 = 
	`nod
(
OADDR
,á->
À·
, 
N
);

719 
a
 = 
	`nod
(
ONEW
, 
N
, N);

720 
a
->
li°
 = 
	`li°1
(
	`ty≥nod
(
t
));

722 
a
 = 
	`nod
(
OAS
, 
vauto
,á);

723 
	`ty≥check
(&
a
, 
Et›
);

724 
	`wÆkex¥
(&
a
, 
öô
);

725 *
öô
 = 
	`li°
(*öô, 
a
);

727 if(
v°©
 !
N
) {

729 
a
 = 
	`nod
(
OIND
, 
vauto
, 
N
);

730 
a
 = 
	`nod
(
OAS
,á, 
v°©
);

731 
	`ty≥check
(&
a
, 
Et›
);

732 
	`wÆkex¥
(&
a
, 
öô
);

733 *
öô
 = 
	`li°
(*öô, 
a
);

737 
a
 = 
	`nod
(
OAS
, 
v¨
,Çod(
OSLICE
, 
vauto
,Çod(
OKEY
, 
N
, N)));

738 
	`ty≥check
(&
a
, 
Et›
);

739 
	`wÆkex¥
(&
a
, 
öô
);

740 *
öô
 = 
	`li°
(*öô, 
a
);

743 
l
=
n
->
li°
;Ü;Üˆ->
√xt
) {

744 
r
 = 
l
->
n
;

745 if(
r
->
›
 !
OKEY
)

746 
	`Áèl
("¶i˚lô:Ñh†nŸ OKEY: %N", 
r
);

747 
ödex
 = 
r
->
À·
;

748 
vÆue
 = 
r
->
right
;

749 
a
 = 
	`nod
(
OINDEX
, 
v¨
, 
ödex
);

750 
a
->
ëy≥
 = 1;

753 
vÆue
->
›
) {

754 
OARRAYLIT
:

755 if(
vÆue
->
ty≥
->
bound
 < 0)

757 
	`¨øylô
(
˘xt
, 2, 
vÆue
, 
a
, 
öô
);

760 
OSTRUCTLIT
:

761 
	`°ru˘lô
(
˘xt
, 2, 
vÆue
, 
a
, 
öô
);

765 if(
	`i¶ôîÆ
(
ödex
Ë&& i¶ôîÆ(
vÆue
))

769 
a
 = 
	`nod
(
OAS
,á, 
vÆue
);

770 
	`ty≥check
(&
a
, 
Et›
);

771 
	`wÆkex¥
(&
a
, 
öô
);

772 *
öô
 = 
	`li°
(*öô, 
a
);

774 
	}
}

777 
	$m≠lô
(
˘xt
, 
Node
 *
n
, Nodê*
v¨
, 
NodeLi°
 **
öô
)

779 
Node
 *
r
, *
a
;

780 
NodeLi°
 *
l
;

781 
√º
, 
b
;

782 
Ty≥
 *
t
, *
tk
, *
tv
, *
t1
;

783 
Node
 *
v°©
, *
ödex
, *
vÆue
;

784 
Sym
 *
syma
, *
symb
;

786 
	`USED
(
˘xt
);

787 
˘xt
 = 0;

790 
√º
 = 
√º‹s
;

792 
a
 = 
	`nod
(
OMAKE
, 
N
, N);

793 
a
->
li°
 = 
	`li°1
(
	`ty≥nod
(
n
->
ty≥
));

794 
	`lôas
(
v¨
, 
a
, 
öô
);

797 
b
 = 0;

798 
l
=
n
->
li°
;Ü;Üˆ->
√xt
) {

799 
r
 = 
l
->
n
;

801 if(
r
->
›
 !
OKEY
)

802 
	`Áèl
("¶i˚lô:Ñh†nŸ OKEY: %N", 
r
);

803 
ödex
 = 
r
->
À·
;

804 
vÆue
 = 
r
->
right
;

806 if(
	`i¶ôîÆ
(
ödex
Ë&& i¶ôîÆ(
vÆue
))

807 
b
++;

810 if(
b
 != 0) {

812 
t
 = 
n
->
ty≥
;

813 
tk
 = 
t
->
down
;

814 
tv
 = 
t
->
ty≥
;

816 
symb
 = 
	`lookup
("b");

817 
t
 = 
	`typ
(
TFIELD
);

818 
t
->
ty≥
 = 
tv
;

819 
t
->
sym
 = 
symb
;

821 
syma
 = 
	`lookup
("a");

822 
t1
 = 
t
;

823 
t
 = 
	`typ
(
TFIELD
);

824 
t
->
ty≥
 = 
tk
;

825 
t
->
sym
 = 
syma
;

826 
t
->
down
 = 
t1
;

828 
t1
 = 
t
;

829 
t
 = 
	`typ
(
TSTRUCT
);

830 
t
->
ty≥
 = 
t1
;

832 
t1
 = 
t
;

833 
t
 = 
	`typ
(
TARRAY
);

834 
t
->
bound
 = 
b
;

835 
t
->
ty≥
 = 
t1
;

837 
	`dowidth
(
t
);

840 
v°©
 = 
	`°©i˙ame
(
t
, 
˘xt
);

841 
b
 = 0;

842 
l
=
n
->
li°
;Ü;Üˆ->
√xt
) {

843 
r
 = 
l
->
n
;

845 if(
r
->
›
 !
OKEY
)

846 
	`Áèl
("¶i˚lô:Ñh†nŸ OKEY: %N", 
r
);

847 
ödex
 = 
r
->
À·
;

848 
vÆue
 = 
r
->
right
;

850 if(
	`i¶ôîÆ
(
ödex
Ë&& i¶ôîÆ(
vÆue
)) {

852 
a
 = 
	`nodötc⁄°
(
b
);

853 
a
 = 
	`nod
(
OINDEX
, 
v°©
,á);

854 
a
 = 
	`nod
(
ODOT
,á, 
	`√w«me
(
syma
));

855 
a
 = 
	`nod
(
OAS
,á, 
ödex
);

856 
	`ty≥check
(&
a
, 
Et›
);

857 
	`wÆkex¥
(&
a
, 
öô
);

858 
a
->
dod©a
 = 2;

859 *
öô
 = 
	`li°
(*öô, 
a
);

862 
a
 = 
	`nodötc⁄°
(
b
);

863 
a
 = 
	`nod
(
OINDEX
, 
v°©
,á);

864 
a
 = 
	`nod
(
ODOT
,á, 
	`√w«me
(
symb
));

865 
a
 = 
	`nod
(
OAS
,á, 
vÆue
);

866 
	`ty≥check
(&
a
, 
Et›
);

867 
	`wÆkex¥
(&
a
, 
öô
);

868 
a
->
dod©a
 = 2;

869 *
öô
 = 
	`li°
(*öô, 
a
);

871 
b
++;

879 
ödex
 = 
	`ãmp
(
ty≥s
[
TINT
]);

881 
a
 = 
	`nod
(
OINDEX
, 
v°©
, 
ödex
);

882 
a
->
ëy≥
 = 1;

883 
a
 = 
	`nod
(
ODOT
,á, 
	`√w«me
(
symb
));

885 
r
 = 
	`nod
(
OINDEX
, 
v°©
, 
ödex
);

886 
r
->
ëy≥
 = 1;

887 
r
 = 
	`nod
(
ODOT
,Ñ, 
	`√w«me
(
syma
));

888 
r
 = 
	`nod
(
OINDEX
, 
v¨
,Ñ);

890 
r
 = 
	`nod
(
OAS
,Ñ, 
a
);

892 
a
 = 
	`nod
(
OFOR
, 
N
, N);

893 
a
->
nbody
 = 
	`li°1
(
r
);

895 
a
->
nöô
 = 
	`li°1
(
	`nod
(
OAS
, 
ödex
, 
	`nodötc⁄°
(0)));

896 
a
->
¡e°
 = 
	`nod
(
OLT
, 
ödex
, 
	`nodötc⁄°
(
t
->
bound
));

897 
a
->
nö¸
 = 
	`nod
(
OASOP
, 
ödex
, 
	`nodötc⁄°
(1));

898 
a
->
nö¸
->
ëy≥
 = 
OADD
;

900 
	`ty≥check
(&
a
, 
Et›
);

901 
	`wÆk°mt
(&
a
);

902 *
öô
 = 
	`li°
(*öô, 
a
);

906 
l
=
n
->
li°
;Ü;Üˆ->
√xt
) {

907 
r
 = 
l
->
n
;

909 if(
r
->
›
 !
OKEY
)

910 
	`Áèl
("¶i˚lô:Ñh†nŸ OKEY: %N", 
r
);

911 
ödex
 = 
r
->
À·
;

912 
vÆue
 = 
r
->
right
;

914 if(
	`i¶ôîÆ
(
ödex
Ë&& i¶ôîÆ(
vÆue
))

918 
a
 = 
	`nod
(
OINDEX
, 
v¨
, 
r
->
À·
);

919 
a
 = 
	`nod
(
OAS
,á, 
r
->
right
);

920 
	`ty≥check
(&
a
, 
Et›
);

921 
	`wÆkex¥
(&
a
, 
öô
);

922 if(
√º
 !
√º‹s
)

925 *
öô
 = 
	`li°
(*öô, 
a
);

927 
	}
}

930 
	$™ylô
(
˘xt
, 
Node
 *
n
, Nodê*
v¨
, 
NodeLi°
 **
öô
)

932 
Ty≥
 *
t
;

933 
Node
 *
a
, *
v°©
;

935 
t
 = 
n
->
ty≥
;

936 
n
->
›
) {

938 
	`Áèl
("anylit:ÇotÜit");

940 
OPTRLIT
:

941 if(!
i•å
[
t
->
ëy≥
])

942 
	`Áèl
("anylit:ÇotÖtr");

944 
a
 = 
	`nod
(
OAS
, 
v¨
, 
	`ˇŒ√w
(
t
->
ty≥
));

945 
	`ty≥check
(&
a
, 
Et›
);

946 *
öô
 = 
	`li°
(*öô, 
a
);

948 
v¨
 = 
	`nod
(
OIND
, v¨, 
N
);

949 
	`ty≥check
(&
v¨
, 
Erv
 | 
Easgn
);

950 
	`™ylô
(
˘xt
, 
n
->
À·
, 
v¨
, 
öô
);

953 
OSTRUCTLIT
:

954 if(
t
->
ëy≥
 !
TSTRUCT
)

955 
	`Áèl
("anylit:Çot struct");

957 if(
	`sim∂íame
(
v¨
)) {

959 if(
˘xt
 == 0) {

961 
v°©
 = 
	`°©i˙ame
(
t
, 
˘xt
);

962 
	`°ru˘lô
(
˘xt
, 1, 
n
, 
v°©
, 
öô
);

965 
a
 = 
	`nod
(
OAS
, 
v¨
, 
v°©
);

966 
	`ty≥check
(&
a
, 
Et›
);

967 
	`wÆkex¥
(&
a
, 
öô
);

968 *
öô
 = 
	`li°
(*öô, 
a
);

971 
	`°ru˘lô
(
˘xt
, 2, 
n
, 
v¨
, 
öô
);

974 
	`°ru˘lô
(
˘xt
, 1, 
n
, 
v¨
, 
öô
);

975 
	`°ru˘lô
(
˘xt
, 2, 
n
, 
v¨
, 
öô
);

980 if(
	`cou¡
(
n
->
li°
Ë< 
	`°ru˘cou¡
(
t
)) {

981 
a
 = 
	`nod
(
OAS
, 
v¨
, 
N
);

982 
	`ty≥check
(&
a
, 
Et›
);

983 
	`wÆkex¥
(&
a
, 
öô
);

984 *
öô
 = 
	`li°
(*öô, 
a
);

986 
	`°ru˘lô
(
˘xt
, 3, 
n
, 
v¨
, 
öô
);

989 
OARRAYLIT
:

990 if(
t
->
ëy≥
 !
TARRAY
)

991 
	`Áèl
("anylit:Çotárray");

992 if(
t
->
bound
 < 0) {

993 
	`¶i˚lô
(
˘xt
, 
n
, 
v¨
, 
öô
);

997 if(
	`sim∂íame
(
v¨
)) {

999 if(
˘xt
 == 0) {

1001 
v°©
 = 
	`°©i˙ame
(
t
, 
˘xt
);

1002 
	`¨øylô
(1, 1, 
n
, 
v°©
, 
öô
);

1005 
a
 = 
	`nod
(
OAS
, 
v¨
, 
v°©
);

1006 
	`ty≥check
(&
a
, 
Et›
);

1007 
	`wÆkex¥
(&
a
, 
öô
);

1008 *
öô
 = 
	`li°
(*öô, 
a
);

1011 
	`¨øylô
(
˘xt
, 2, 
n
, 
v¨
, 
öô
);

1014 
	`¨øylô
(
˘xt
, 1, 
n
, 
v¨
, 
öô
);

1015 
	`¨øylô
(
˘xt
, 2, 
n
, 
v¨
, 
öô
);

1020 if(
	`cou¡
(
n
->
li°
Ë< 
t
->
bound
) {

1021 
a
 = 
	`nod
(
OAS
, 
v¨
, 
N
);

1022 
	`ty≥check
(&
a
, 
Et›
);

1023 
	`wÆkex¥
(&
a
, 
öô
);

1024 *
öô
 = 
	`li°
(*öô, 
a
);

1026 
	`¨øylô
(
˘xt
, 3, 
n
, 
v¨
, 
öô
);

1029 
OMAPLIT
:

1030 if(
t
->
ëy≥
 !
TMAP
)

1031 
	`Áèl
("anylit:Çot map");

1032 
	`m≠lô
(
˘xt
, 
n
, 
v¨
, 
öô
);

1035 
	}
}

1038 
	$ﬂ¶ô
(
Node
 *
n
, 
NodeLi°
 **
öô
)

1040 
˘xt
;

1042 if(
n
->
À·
 =
N
 ||Ç->
right
 == N)

1043 
no
;

1044 if(
n
->
À·
->
ty≥
 =
T
 ||Ç->
right
->type == T)

1045 
no
;

1046 if(!
	`sim∂íame
(
n
->
À·
))

1047 
no
;

1048 if(!
	`eqty≥
(
n
->
À·
->
ty≥
,Ç->
right
->type))

1049 
no
;

1054 
˘xt
 = 0;

1058 
n
->
right
->
›
) {

1060 
no
;

1062 
OSTRUCTLIT
:

1063 
OARRAYLIT
:

1064 
OMAPLIT
:

1065 if(
	`vm©ch1
(
n
->
À·
,Ç->
right
))

1066 
no
;

1067 
	`™ylô
(
˘xt
, 
n
->
right
,Ç->
À·
, 
öô
);

1070 
n
->
›
 = 
OEMPTY
;

1073 
no
:

1076 
	}
}

1079 
	$gëlô
(
Node
 *
lô
)

1081 if(
	`smÆlötc⁄°
(
lô
))

1082  
	`mpgëfix
(
lô
->
vÆ
.
u
.
xvÆ
);

1084 
	}
}

1087 
	$°©addr
(
Node
 *
«m
, Nodê*
n
)

1089 
l
;

1091 if(
n
 =
N
)

1092 
no
;

1094 
n
->
›
) {

1096 
ONAME
:

1097 *
«m
 = *
n
;

1098  
n
->
addabÀ
;

1100 
ODOT
:

1101 if(!
	`°©addr
(
«m
, 
n
->
À·
))

1103 
«m
->
xoff£t
 +
n
->xoffset;

1104 
«m
->
ty≥
 = 
n
->type;

1107 
OINDEX
:

1108 if(
n
->
À·
->
ty≥
->
bound
 < 0)

1110 if(!
	`°©addr
(
«m
, 
n
->
À·
))

1112 
l
 = 
	`gëlô
(
n
->
right
);

1113 if(
l
 < 0)

1115 
«m
->
xoff£t
 +
l
*
n
->
ty≥
->
width
;

1116 
«m
->
ty≥
 = 
n
->type;

1120 
no
:

1122 
	}
}

1125 
	$gí_as_öô
(
Node
 *
n
)

1127 
Node
 *
ƒ
, *
∆
;

1128 
Node
 
«m
, 
nod1
;

1130 if(
n
->
dod©a
 == 0)

1131 
no
;

1133 
ƒ
 = 
n
->
right
;

1134 
∆
 = 
n
->
À·
;

1135 if(
ƒ
 =
N
) {

1136 if(!
	`°©addr
(&
«m
, 
∆
))

1137 
no
;

1138 if(
«m
.
˛ass
 !
PEXTERN
)

1139 
no
;

1140 
yes
;

1143 if(
ƒ
->
ty≥
 =
T
 || !
	`eqty≥
(
∆
->type,Çr->type))

1144 
no
;

1146 if(!
	`°©addr
(&
«m
, 
∆
))

1147 
no
;

1149 if(
«m
.
˛ass
 !
PEXTERN
)

1150 
no
;

1152 
ƒ
->
›
) {

1154 
no
;

1156 
OCONVNOP
:

1157 
ƒ
 =Çr->
À·
;

1158 if(
ƒ
 =
N
 ||Çr->
›
 !
OSLICEARR
)

1159 
no
;

1162 
OSLICEARR
:

1163 if(
ƒ
->
right
->
›
 =
OKEY
 &&Çr->right->
À·
 =
N
 &&Çr->right->right == N) {

1164 
ƒ
 =Çr->
À·
;

1165 
¶i˚
;

1167 
no
;

1169 
OLITERAL
:

1173 
ƒ
->
ty≥
->
ëy≥
) {

1175 
no
;

1177 
TBOOL
:

1178 
TINT8
:

1179 
TUINT8
:

1180 
TINT16
:

1181 
TUINT16
:

1182 
TINT32
:

1183 
TUINT32
:

1184 
TINT64
:

1185 
TUINT64
:

1186 
TINT
:

1187 
TUINT
:

1188 
TUINTPTR
:

1189 
TPTR32
:

1190 
TPTR64
:

1191 
TFLOAT32
:

1192 
TFLOAT64
:

1193 
	`gd©a
(&
«m
, 
ƒ
,Çr->
ty≥
->
width
);

1196 
TCOMPLEX64
:

1197 
TCOMPLEX128
:

1198 
	`gd©acom∂ex
(&
«m
, 
ƒ
->
vÆ
.
u
.
cvÆ
);

1201 
TSTRING
:

1202 
	`gd©a°rög
(&
«m
, 
ƒ
->
vÆ
.
u
.
svÆ
);

1206 
yes
:

1209 
¶i˚
:

1210 
	`gu£d
(
N
);

1211 
∆
 = 
ƒ
;

1212 if(
ƒ
 =
N
 ||Çr->
›
 !
OADDR
)

1213 
no
;

1214 
ƒ
 =Çr->
À·
;

1215 if(
ƒ
 =
N
 ||Çr->
›
 !
ONAME
)

1216 
no
;

1219 if(
ƒ
->
ty≥
 =
T
 ||Çr->ty≥->
ëy≥
 !
TARRAY
 ||Çr->ty≥->
bound
 < 0)

1220 
no
;

1222 
«m
.
xoff£t
 +
Aºay_¨øy
;

1223 
	`gd©a
(&
«m
, 
∆
, 
ty≥s
[
çå
]->
width
);

1225 
«m
.
xoff£t
 +
Aºay_√l
-
Aºay_¨øy
;

1226 
	`nodc⁄°
(&
nod1
, 
ty≥s
[
TINT32
], 
ƒ
->
ty≥
->
bound
);

1227 
	`gd©a
(&
«m
, &
nod1
, 
ty≥s
[
TINT32
]->
width
);

1229 
«m
.
xoff£t
 +
Aºay_ˇp
-
Aºay_√l
;

1230 
	`gd©a
(&
«m
, &
nod1
, 
ty≥s
[
TINT32
]->
width
);

1232 
yes
;

1234 
no
:

1235 if(
n
->
dod©a
 == 2) {

1236 
	`dump
("\ngí_as_öô", 
n
);

1237 
	`Áèl
("gen_as_init couldnt make data statement");

1240 
	}
}

1242 
iszîo
(
Node
*);

1243 
isvÆuñô
(
Node
*);

1244 
InôE¡ry
* 
íåy
(
InôPœn
*);

1245 
addvÆue
(
InôPœn
*, 
vl⁄g
, 
Node
*, Node*);

1248 
	$öô∂™
(
Node
 *
n
)

1250 
InôPœn
 *
p
;

1251 
Node
 *
a
;

1252 
NodeLi°
 *
l
;

1254 if(
n
->
öô∂™
 !
nû
)

1256 
p
 = 
	`mÆ
( *p);

1257 
n
->
öô∂™
 = 
p
;

1258 
n
->
›
) {

1260 
	`Áèl
("initplan");

1261 
OARRAYLIT
:

1262 
l
=
n
->
li°
;Ü;Üˆ->
√xt
) {

1263 
a
 = 
l
->
n
;

1264 if(
a
->
›
 !
OKEY
 || !
	`smÆlötc⁄°
◊->
À·
))

1265 
	`Áèl
("initplanárraylit");

1266 
	`addvÆue
(
p
, 
n
->
ty≥
->ty≥->
width
*
	`mpgëfix
(
a
->
À·
->
vÆ
.
u
.
xvÆ
), 
N
,á->
right
);

1269 
OSTRUCTLIT
:

1270 
l
=
n
->
li°
;Ü;Üˆ->
√xt
) {

1271 
a
 = 
l
->
n
;

1272 if(
a
->
›
 !
OKEY
 ||á->
À·
->
ty≥
 =
T
)

1273 
	`Áèl
("initplan structlit");

1274 
	`addvÆue
(
p
, 
a
->
À·
->
ty≥
->
width
, 
N
,á->
right
);

1277 
OMAPLIT
:

1278 
l
=
n
->
li°
;Ü;Üˆ->
√xt
) {

1279 
a
 = 
l
->
n
;

1280 if(
a
->
›
 !
OKEY
)

1281 
	`Áèl
("initplan maplit");

1282 
	`addvÆue
(
p
, -1, 
a
->
À·
,á->
right
);

1286 
	}
}

1289 
	$addvÆue
(
InôPœn
 *
p
, 
vl⁄g
 
xoff£t
, 
Node
 *
key
, Nodê*
n
)

1291 
i
;

1292 
InôPœn
 *
q
;

1293 
InôE¡ry
 *
e
;

1295 
	`USED
(
key
);

1298 if(
	`iszîo
(
n
)) {

1299 
p
->
zîo
 +
n
->
ty≥
->
width
;

1304 if(
	`isvÆuñô
(
n
)) {

1305 
	`öô∂™
(
n
);

1306 
q
 = 
n
->
öô∂™
;

1307 
i
=0; i<
q
->
Àn
; i++) {

1308 
e
 = 
	`íåy
(
p
);

1309 *
e
 = 
q
->e[
i
];

1310 
e
->
xoff£t
 += xoffset;

1316 if(
n
->
›
 =
OLITERAL
)

1317 
p
->
lô
 +
n
->
ty≥
->
width
;

1319 
p
->
ex¥
 +
n
->
ty≥
->
width
;

1321 
e
 = 
	`íåy
(
p
);

1322 
e
->
xoff£t
 = xoffset;

1323 
e
->
ex¥
 = 
n
;

1324 
	}
}

1327 
	$iszîo
(
Node
 *
n
)

1329 
NodeLi°
 *
l
;

1331 
n
->
›
) {

1332 
OLITERAL
:

1333 
n
->
vÆ
.
˘y≥
) {

1335 
	`dump
("u√x≥˘edÜôîÆ", 
n
);

1336 
	`Áèl
("iszero");

1338 
CTNIL
:

1341 
CTSTR
:

1342  
n
->
vÆ
.
u
.
svÆ
 =
nû
 ||Ç->vÆ.u.svÆ->
Àn
 == 0;

1344 
CTBOOL
:

1345  
n
->
vÆ
.
u
.
bvÆ
 == 0;

1347 
CTINT
:

1348 
CTRUNE
:

1349  
	`mpcmpfixc
(
n
->
vÆ
.
u
.
xvÆ
, 0) == 0;

1351 
CTFLT
:

1352  
	`mpcmpÊtc
(
n
->
vÆ
.
u
.
fvÆ
, 0) == 0;

1354 
CTCPLX
:

1355  
	`mpcmpÊtc
(&
n
->
vÆ
.
u
.
cvÆ
->
ªÆ
, 0Ë=0 && mpcmpÊtc(&n->vÆ.u.cvÆ->
imag
, 0) == 0;

1358 
OARRAYLIT
:

1359 if(
	`is¶i˚
(
n
->
ty≥
))

1362 
OSTRUCTLIT
:

1363 
l
=
n
->
li°
;Ü;Üˆ->
√xt
)

1364 if(!
	`iszîo
(
l
->
n
->
right
))

1369 
	}
}

1372 
	$isvÆuñô
(
Node
 *
n
)

1374  (
n
->
›
 =
OARRAYLIT
 && 
	`isfixed¨øy
“->
ty≥
)Ë||Ç->› =
OSTRUCTLIT
;

1375 
	}
}

1377 
InôE¡ry
*

1378 
	$íåy
(
InôPœn
 *
p
)

1380 if(
p
->
Àn
 >p->
ˇp
) {

1381 if(
p
->
ˇp
 == 0)

1382 
p
->
ˇp
 = 4;

1384 
p
->
ˇp
 *= 2;

1385 
p
->
e
 = 
	`ªÆloc
’->e,Ö->
ˇp
*Ö->e[0]);

1386 if(
p
->
e
 =
nû
)

1387 
	`Áèl
("out of memory");

1389  &
p
->
e
[p->
Àn
++];

1390 
	}
}

	@subr.c

5 
	~<u.h
>

6 
	~<libc.h
>

7 
	~"go.h
"

8 
	~"md5.h
"

9 
	~"y.èb.h
"

10 
	~"yîr.h
"

12 
Eº‹
 
	tEº‹
;

13 
	sEº‹


15 
	mlöío
;

16 
	m£q
;

17 *
	mmsg
;

19 
Eº‹
 *
	gîr
;

20 
	g√º
;

21 
	gmîr
;

24 
	$îr‹exô
()

26 
	`Êushîr‹s
();

27 if(
outfûe
)

28 
	`ªmove
(
outfûe
);

29 
	`exôs
("error");

30 
	}
}

32 
yych¨
;

34 
	$∑r£æöe
()

36 if(
yych¨
 != 0 && yychar != -2)

37  
¥evlöío
;

38  
löío
;

39 
	}
}

42 
	$addîr
(
löe
, *
fmt
, 
va_li°
 
¨g
)

44 
Fmt
 
f
;

45 
Eº‹
 *
p
;

47 
	`fmt°röô
(&
f
);

48 
	`fmçröt
(&
f
, "%L: ", 
löe
);

49 
	`fmtv¥öt
(&
f
, 
fmt
, 
¨g
);

50 
	`fmçröt
(&
f
, "\n");

52 if(
√º
 >
mîr
) {

53 if(
mîr
 == 0)

54 
mîr
 = 16;

56 
mîr
 *= 2;

57 
p
 = 
	`ªÆloc
(
îr
, 
mîr
*Érr[0]);

58 if(
p
 =
nû
) {

59 
mîr
 = 
√º
;

60 
	`Êushîr‹s
();

61 
	`¥öt
("out of memory\n");

62 
	`îr‹exô
();

64 
îr
 = 
p
;

66 
îr
[
√º
].
£q
 =Çerr;

67 
îr
[
√º
].
löío
 = 
löe
;

68 
îr
[
√º
].
msg
 = 
	`fmt°rÊush
(&
f
);

69 
√º
++;

70 
	}
}

73 
	$îrcmp
(c⁄° *
va
, c⁄° *
vb
)

75 
Eº‹
 *
a
, *
b
;

77 
a
 = (
Eº‹
*)
va
;

78 
b
 = (
Eº‹
*)
vb
;

79 if(
a
->
löío
 !
b
->lineno)

80  
a
->
löío
 - 
b
->lineno;

81 if(
a
->
£q
 !
b
->seq)

82  
a
->
£q
 - 
b
->seq;

83  
	`°rcmp
(
a
->
msg
, 
b
->msg);

84 
	}
}

87 
	$Êushîr‹s
()

89 
i
;

91 if(
√º
 == 0)

93 
	`qs‹t
(
îr
, 
√º
, Éº[0], 
îrcmp
);

94 
i
=0; i<
√º
; i++)

95 if(
i
==0 || 
	`°rcmp
(
îr
[i].
msg
,Érr[i-1].msg) != 0)

96 
	`¥öt
("%s", 
îr
[
i
].
msg
);

97 
√º
 = 0;

98 
	}
}

101 
	$h¸ash
()

103 if(
debug
['h']) {

104 
	`Êushîr‹s
();

105 if(
outfûe
)

106 
	`ªmove
(
outfûe
);

109 
	}
}

112 
	$yyîr‹l
(
löe
, *
fmt
, ...)

114 
va_li°
 
¨g
;

116 
	`va_°¨t
(
¨g
, 
fmt
);

117 
	`addîr
(
löe
, 
fmt
, 
¨g
);

118 
	`va_íd
(
¨g
);

120 
	`h¸ash
();

121 
√º‹s
++;

122 if(
nßvedîr‹s
+
√º‹s
 >10 && !
debug
['e']) {

123 
	`Êushîr‹s
();

124 
	`¥öt
("%L:Åoÿm™yÉº‹s\n", 
löe
);

125 
	`îr‹exô
();

127 
	}
}

129 
yy°©e
, 
yych¨
;

132 
	$yyîr‹
(*
fmt
, ...)

134 
i
;

135 
œ°sy¡ax
;

136 
va_li°
 
¨g
;

137 
buf
[512], *
p
;

139 if(
	`°∫cmp
(
fmt
, "syntaxÉrror", 12) == 0) {

140 
nsy¡axîr‹s
++;

142 if(
debug
['x'])

143 
	`¥öt
("yyîr‹: yy°©e=%d yych¨=%d\n", 
yy°©e
, 
yych¨
);

146 if(
œ°sy¡ax
 =
Àxlöío
)

148 
œ°sy¡ax
 = 
Àxlöío
;

150 if(
	`°r°r
(
fmt
, "{ or {")) {

153 
	`°ª˝y
(
buf
, buf+ buf, 
fmt
);

154 
p
 = 
	`°r°r
(
buf
, "{ or {");

155 if(
p
)

156 
	`memmove
(
p
+1,Ö+6, 
	`°æí
(p+6)+1);

157 
fmt
 = 
buf
;

161 
i
=0; i<
	`√Àm
(
yymsg
); i++) {

162 if(
yymsg
[
i
].
yy°©e
 =yy°©ê&& yymsg[i].
yych¨
 == yychar) {

163 
	`yyîr‹l
(
Àxlöío
, "sy¡axÉº‹: %s", 
yymsg
[
i
].
msg
);

169 if(
	`°rcmp
(
fmt
, "syntaxÉrror") == 0) {

170 
	`yyîr‹l
(
Àxlöío
, "sy¡axÉº‹Çó∏%s", 
Àxbuf
);

175 if(
fmt
[12] == ',') {

176 
	`yyîr‹l
(
Àxlöío
, "sy¡axÉº‹:%s", 
fmt
+13);

180 
	`yyîr‹l
(
Àxlöío
, "%s", 
fmt
);

184 
	`va_°¨t
(
¨g
, 
fmt
);

185 
	`addîr
(
	`∑r£æöe
(), 
fmt
, 
¨g
);

186 
	`va_íd
(
¨g
);

188 
	`h¸ash
();

189 
√º‹s
++;

190 if(
nßvedîr‹s
+
√º‹s
 >10 && !
debug
['e']) {

191 
	`Êushîr‹s
();

192 
	`¥öt
("%L:Åoÿm™yÉº‹s\n", 
	`∑r£æöe
());

193 
	`îr‹exô
();

195 
	}
}

198 
	$w¨n
(*
fmt
, ...)

200 
va_li°
 
¨g
;

202 
	`va_°¨t
(
¨g
, 
fmt
);

203 
	`addîr
(
	`∑r£æöe
(), 
fmt
, 
¨g
);

204 
	`va_íd
(
¨g
);

206 
	`h¸ash
();

207 
	}
}

210 
	$w¨∆
(
löe
, *
fmt
, ...)

212 
va_li°
 
¨g
;

214 
	`va_°¨t
(
¨g
, 
fmt
);

215 
	`addîr
(
löe
, 
fmt
, 
¨g
);

216 
	`va_íd
(
¨g
);

217 
	}
}

220 
	$Áèl
(*
fmt
, ...)

222 
va_li°
 
¨g
;

224 
	`Êushîr‹s
();

226 
	`¥öt
("%L: i¡î«»compûîÉº‹: ", 
löío
);

227 
	`va_°¨t
(
¨g
, 
fmt
);

228 
	`vÂröt
(1, 
fmt
, 
¨g
);

229 
	`va_íd
(
¨g
);

230 
	`¥öt
("\n");

233 if(
	`°∫cmp
(
	`gëgovîsi⁄
(), "release", 7) == 0) {

234 
	`¥öt
("\n");

235 
	`¥öt
("Please fileá bugÑeport includingá shortÖrogramÅhatÅriggersÅheÉrror.\n");

236 
	`¥öt
("http://code.google.com/p/go/issues/entry?template=compilerbug\n");

238 
	`h¸ash
();

239 
	`îr‹exô
();

240 
	}
}

243 
	$löehi°
(*
fûe
, 
öt32
 
off
, 
ªœtive
)

245 
Hi°
 *
h
;

246 *
˝
;

248 if(
debug
['i']) {

249 if(
fûe
 !
nû
) {

250 if(
off
 < 0)

251 
	`¥öt
("¥agm®%s", 
fûe
);

253 if(
off
 > 0)

254 
	`¥öt
("löê%s", 
fûe
);

256 
	`¥öt
("imp‹à%s", 
fûe
);

258 
	`¥öt
("end of import");

259 
	`¥öt
("áàlöê%L\n", 
Àxlöío
);

262 if(
off
 < 0 && 
fûe
[0] !'/' && !
ªœtive
) {

263 
˝
 = 
	`mÆ
(
	`°æí
(
fûe
Ë+ såÀn(
∑th«me
) + 2);

264 
	`•röt
(
˝
, "%s/%s", 
∑th«me
, 
fûe
);

265 
fûe
 = 
˝
;

268 
h
 = 
	`mÆ
((
Hi°
));

269 
h
->
«me
 = 
fûe
;

270 
h
->
löe
 = 
Àxlöío
;

271 
h
->
off£t
 = 
off
;

272 
h
->
lök
 = 
H
;

273 if(
ehi°
 =
H
) {

274 
hi°
 = 
h
;

275 
ehi°
 = 
h
;

278 
ehi°
->
lök
 = 
h
;

279 
ehi°
 = 
h
;

280 
	}
}

282 
öt32


283 
	$£éöío
(
Node
 *
n
)

285 
öt32
 
 o
;

287 
 o
 = 
löío
;

288 if(
n
 !
N
)

289 
n
->
›
) {

290 
ONAME
:

291 
OTYPE
:

292 
OPACK
:

293 
OLITERAL
:

296 
löío
 = 
n
->lineno;

297 if(
löío
 == 0) {

298 if(
debug
['K'])

299 
	`w¨n
("setlineno:Üine 0");

300 
löío
 = 
 o
;

303  
 o
;

304 
	}
}

306 
uöt32


307 
	$°röghash
(*
p
)

309 
öt32
 
h
;

310 
c
;

312 
h
 = 0;

314 
c
 = *
p
++;

315 if(
c
 == 0)

317 
h
 = h*
PRIME1
 + 
c
;

320 if(
h
 < 0) {

321 
h
 = -h;

322 if(
h
 < 0)

323 
h
 = 0;

325  
h
;

326 
	}
}

328 
Sym
*

329 
	$lookup
(*
«me
)

331  
	`pkglookup
(
«me
, 
loˇÕkg
);

332 
	}
}

334 
Sym
*

335 
	$pkglookup
(*
«me
, 
Pkg
 *
pkg
)

337 
Sym
 *
s
;

338 
uöt32
 
h
;

339 
c
;

341 
h
 = 
	`°röghash
(
«me
Ë% 
NHASH
;

342 
c
 = 
«me
[0];

343 
s
 = 
hash
[
h
]; s !
S
; s = s->
lök
) {

344 if(
s
->
«me
[0] !
c
 || s->
pkg
 !=Ökg)

346 if(
	`°rcmp
(
s
->
«me
,Çame) == 0)

347  
s
;

350 
s
 = 
	`mÆ
((*s));

351 
s
->
«me
 = 
	`mÆ
(
	`°æí
(name)+1);

352 
	`°r˝y
(
s
->
«me
,Çame);

354 
s
->
pkg
 =Ökg;

356 
s
->
lök
 = 
hash
[
h
];

357 
hash
[
h
] = 
s
;

358 
s
->
Àxiˇl
 = 
LNAME
;

360  
s
;

361 
	}
}

363 
Sym
*

364 
	$ª°ri˘lookup
(*
«me
, 
Pkg
 *
pkg
)

366 if(!
	`exp‹äame
(
«me
Ë&& 
pkg
 !
loˇÕkg
)

367 
	`yyîr‹
("ˇ¬ŸÑe„∏tÿu√xp‹ãdÇamê%s.%s", 
pkg
->
«me
,Çame);

368  
	`pkglookup
(
«me
, 
pkg
);

369 
	}
}

375 
	$imp‹tdŸ
(
Pkg
 *
›kg
, 
Node
 *
∑ck
)

377 
Sym
 *
s
, *
s1
;

378 
uöt32
 
h
;

379 
n
;

381 
n
 = 0;

382 
h
=0; h<
NHASH
; h++) {

383 
s
 = 
hash
[
h
]; s !
S
; s = s->
lök
) {

384 if(
s
->
pkg
 !
›kg
)

386 if(
s
->
def
 =
N
)

388 if(!
	`exp‹äame
(
s
->
«me
Ë|| 
	`ut‰u√
(s->name, 0xb7))

390 
s1
 = 
	`lookup
(
s
->
«me
);

391 if(
s1
->
def
 !
N
) {

392 
	`ªde˛¨e
(
s1
, "during import");

395 
s1
->
def
 = 
s
->def;

396 
s1
->
block
 = 
s
->block;

397 
s1
->
def
->
∑ck
 =Öack;

398 
n
++;

401 if(
n
 == 0) {

403 
	`yyîr‹l
(
∑ck
->
löío
, "imp‹ãdándÇŸ u£d: \"%Z\"", 
›kg
->
∑th
);

405 
	}
}

408 
	$gëhunk
()

410 *
h
;

411 
öt32
 
nh
;

413 
nh
 = 
NHUNK
;

414 if(
thunk
 >10L*
NHUNK
)

415 
nh
 = 10L*
NHUNK
;

416 
h
 = (*)
	`mÆloc
(
nh
);

417 if(
h
 =
nû
) {

418 
	`Êushîr‹s
();

419 
	`yyîr‹
("out of memory");

420 
	`îr‹exô
();

422 
hunk
 = 
h
;

423 
nhunk
 = 
nh
;

424 
thunk
 +
nh
;

425 
	}
}

428 
	$mÆ
(
öt32
 
n
)

430 *
p
;

432 if(
n
 >
NHUNK
) {

433 
p
 = 
	`mÆloc
(
n
);

434 if(
p
 =
nû
) {

435 
	`Êushîr‹s
();

436 
	`yyîr‹
("out of memory");

437 
	`îr‹exô
();

439 
	`mem£t
(
p
, 0, 
n
);

440  
p
;

443 (
uöçå
)
hunk
 & 
MAXALIGN
) {

444 
hunk
++;

445 
nhunk
--;

447 if(
nhunk
 < 
n
)

448 
	`gëhunk
();

450 
p
 = 
hunk
;

451 
nhunk
 -
n
;

452 
hunk
 +
n
;

453 
	`mem£t
(
p
, 0, 
n
);

454  
p
;

455 
	}
}

458 
	$ªmÆ
(*
p
, 
öt32
 
⁄
, i¡32 
n
)

460 *
q
;

462 
q
 = (
uch¨
*)
p
 + 
⁄
;

463 if(
q
 !
hunk
 || 
nhunk
 < 
n
) {

464 if(
⁄
+
n
 >
NHUNK
) {

465 
q
 = 
	`mÆ
(
⁄
+
n
);

466 
	`memmove
(
q
, 
p
, 
⁄
);

467  
q
;

469 if(
nhunk
 < 
⁄
+
n
)

470 
	`gëhunk
();

471 
	`memmove
(
hunk
, 
p
, 
⁄
);

472 
p
 = 
hunk
;

473 
hunk
 +
⁄
;

474 
nhunk
 -
⁄
;

476 
hunk
 +
n
;

477 
nhunk
 -
n
;

478  
p
;

479 
	}
}

481 
Node
*

482 
	$nod
(
›
, 
Node
 *
∆e·
, Nodê*
ƒight
)

484 
Node
 *
n
;

486 
n
 = 
	`mÆ
((*n));

487 
n
->
›
 = op;

488 
n
->
À·
 = 
∆e·
;

489 
n
->
right
 = 
ƒight
;

490 
n
->
löío
 = 
	`∑r£æöe
();

491 
n
->
xoff£t
 = 
BADWIDTH
;

492 
n
->
‹ig
 =Ç;

493 
n
->
cur‚
 = curfn;

494  
n
;

495 
	}
}

498 
	$Ægty≥1
(
Ty≥
 *
t
, Ty≥ **
bad
)

500 
a
, 
ªt
;

501 
Ty≥
 *
t1
;

503 if(
bad
)

504 *
bad
 = 
T
;

506 
t
->
ëy≥
) {

507 
TINT8
:

508 
TUINT8
:

509 
TINT16
:

510 
TUINT16
:

511 
TINT32
:

512 
TUINT32
:

513 
TINT64
:

514 
TUINT64
:

515 
TINT
:

516 
TUINT
:

517 
TUINTPTR
:

518 
TBOOL
:

519 
TPTR32
:

520 
TPTR64
:

521 
TCHAN
:

522 
TUNSAFEPTR
:

523  
AMEM
;

525 
TFUNC
:

526 
TMAP
:

527 if(
bad
)

528 *
bad
 = 
t
;

529  
ANOEQ
;

531 
TFLOAT32
:

532  
AFLOAT32
;

534 
TFLOAT64
:

535  
AFLOAT64
;

537 
TCOMPLEX64
:

538  
ACPLX64
;

540 
TCOMPLEX128
:

541  
ACPLX128
;

543 
TSTRING
:

544  
ASTRING
;

546 
TINTER
:

547 if(
	`i¢ûöãr
(
t
))

548  
ANILINTER
;

549  
AINTER
;

551 
TARRAY
:

552 if(
	`is¶i˚
(
t
)) {

553 if(
bad
)

554 *
bad
 = 
t
;

555  
ANOEQ
;

557 if(
t
->
bound
 == 0)

558  
AMEM
;

559 
a
 = 
	`Ægty≥1
(
t
->
ty≥
, 
bad
);

560 if(
a
 =
ANOEQ
 ||á =
AMEM
) {

561 if(
a
 =
ANOEQ
 && 
bad
)

562 *
bad
 = 
t
;

563  
a
;

567 
TSTRUCT
:

568 if(
t
->
ty≥
 !
T
 &&Å->ty≥->
down
 == T) {

570  
	`Ægty≥1
(
t
->
ty≥
->ty≥, 
bad
);

572 
ªt
 = 
AMEM
;

573 
t1
=
t
->
ty≥
;Å1!=
T
;Å1Ò1->
down
) {

574 if(
	`isbœnksym
(
t1
->
sym
))

576 
a
 = 
	`Ægty≥1
(
t1
->
ty≥
, 
bad
);

577 if(
a
 =
ANOEQ
)

578  
ANOEQ
;

579 if(
a
 !
AMEM
)

580 
ªt
 = -1;

582  
ªt
;

585 
	`Áèl
("Ægty≥1: u√x≥˘edÅy≥ %T", 
t
);

587 
	}
}

590 
	$Ægty≥
(
Ty≥
 *
t
)

592 
a
;

594 
a
 = 
	`Ægty≥1
(
t
, 
nû
);

595 if(
a
 =
AMEM
 ||á =
ANOEQ
) {

596 if(
	`is¶i˚
(
t
))

597  
ASLICE
;

598 
t
->
width
) {

600  
a
 + 
AMEM0
 - 
AMEM
;

602  
a
 + 
AMEM8
 - 
AMEM
;

604  
a
 + 
AMEM16
 - 
AMEM
;

606  
a
 + 
AMEM32
 - 
AMEM
;

608  
a
 + 
AMEM64
 - 
AMEM
;

610  
a
 + 
AMEM128
 - 
AMEM
;

613  
a
;

614 
	}
}

616 
Ty≥
*

617 
	$m≠ty≥
(
Ty≥
 *
key
, Ty≥ *
vÆ
)

619 
Ty≥
 *
t
;

621 if(
key
 !
nû
) {

622 
key
->
ëy≥
) {

624 if(
	`Ægty≥1
(
key
, 
nû
Ë=
ANOEQ
)

625 
	`yyîr‹
("övÆid m≠ keyÅy≥ %T", 
key
);

627 
TANY
:

630 
TFORW
:

637 if(
key
->
m≠löío
 == 0)

638 
key
->
m≠löío
 = 
löío
;

642 
t
 = 
	`typ
(
TMAP
);

643 
t
->
down
 = 
key
;

644 
t
->
ty≥
 = 
vÆ
;

645  
t
;

646 
	}
}

648 
Ty≥
*

649 
	$typ
(
ë
)

651 
Ty≥
 *
t
;

653 
t
 = 
	`mÆ
((*t));

654 
t
->
ëy≥
 = 
ë
;

655 
t
->
width
 = 
BADWIDTH
;

656 
t
->
löío
 =Üineno;

657 
t
->
‹ig
 =Å;

658  
t
;

659 
	}
}

662 
	$mëhcmp
(c⁄° *
va
, c⁄° *
vb
)

664 
Ty≥
 *
a
, *
b
;

665 
i
;

667 
a
 = *(
Ty≥
**)
va
;

668 
b
 = *(
Ty≥
**)
vb
;

669 
i
 = 
	`°rcmp
(
a
->
sym
->
«me
, 
b
->sym->name);

670 if(
i
 != 0)

671  
i
;

672 if(!
	`exp‹äame
(
a
->
sym
->
«me
)) {

673 
i
 = 
	`°rcmp
(
a
->
sym
->
pkg
->
∑th
->
s
, 
b
->sym->pkg->path->s);

674 if(
i
 != 0)

675  
i
;

678 
	}
}

680 
Ty≥
*

681 
	$s‹töãr
(
Ty≥
 *
t
)

683 
Ty≥
 *
f
;

684 
i
;

685 
Ty≥
 **
a
;

687 if(
t
->
ty≥
 =
nû
 ||Å->ty≥->
down
 ==Çil)

688  
t
;

690 
i
=0;

691 
f
=
t
->
ty≥
; f; f=f->
down
)

692 
i
++;

693 
a
 = 
	`mÆ
(
i
* 
f
);

694 
i
 = 0;

695 
f
=
t
->
ty≥
; f; f=f->
down
)

696 
a
[
i
++] = 
f
;

697 
	`qs‹t
(
a
, 
i
, á[0], 
mëhcmp
);

698 
i
-- > 0) {

699 
a
[
i
]->
down
 = 
f
;

700 
f
 = 
a
[
i
];

702 
t
->
ty≥
 = 
f
;

703  
t
;

704 
	}
}

706 
Node
*

707 
	$nodötc⁄°
(
öt64
 
v
)

709 
Node
 *
c
;

711 
c
 = 
	`nod
(
OLITERAL
, 
N
, N);

712 
c
->
addabÀ
 = 1;

713 
c
->
vÆ
.
u
.
xvÆ
 = 
	`mÆ
((*c->val.u.xval));

714 
	`mpmovecfix
(
c
->
vÆ
.
u
.
xvÆ
, 
v
);

715 
c
->
vÆ
.
˘y≥
 = 
CTINT
;

716 
c
->
ty≥
 = 
ty≥s
[
TIDEAL
];

717 
	`uŒm™ˇlc
(
c
);

718  
c
;

719 
	}
}

721 
Node
*

722 
	$nodÊtc⁄°
(
MpÊt
* 
v
)

724 
Node
 *
c
;

726 
c
 = 
	`nod
(
OLITERAL
, 
N
, N);

727 
c
->
addabÀ
 = 1;

728 
c
->
vÆ
.
u
.
fvÆ
 = 
	`mÆ
((*c->val.u.fval));

729 
	`mpmoveÊtÊt
(
c
->
vÆ
.
u
.
fvÆ
, 
v
);

730 
c
->
vÆ
.
˘y≥
 = 
CTFLT
;

731 
c
->
ty≥
 = 
ty≥s
[
TIDEAL
];

732 
	`uŒm™ˇlc
(
c
);

733  
c
;

734 
	}
}

737 
	$nodc⁄°
(
Node
 *
n
, 
Ty≥
 *
t
, 
öt64
 
v
)

739 
	`mem£t
(
n
, 0, (*n));

740 
n
->
›
 = 
OLITERAL
;

741 
n
->
addabÀ
 = 1;

742 
	`uŒm™ˇlc
(
n
);

743 
n
->
vÆ
.
u
.
xvÆ
 = 
	`mÆ
((*n->val.u.xval));

744 
	`mpmovecfix
(
n
->
vÆ
.
u
.
xvÆ
, 
v
);

745 
n
->
vÆ
.
˘y≥
 = 
CTINT
;

746 
n
->
ty≥
 = 
t
;

748 if(
isÊﬂt
[
t
->
ëy≥
])

749 
	`Áèl
("nodc⁄°: badÅy≥ %T", 
t
);

750 
	}
}

752 
Node
*

753 
	$nodnû
()

755 
Node
 *
c
;

757 
c
 = 
	`nodötc⁄°
(0);

758 
c
->
vÆ
.
˘y≥
 = 
CTNIL
;

759 
c
->
ty≥
 = 
ty≥s
[
TNIL
];

760  
c
;

761 
	}
}

763 
Node
*

764 
	$nodboﬁ
(
b
)

766 
Node
 *
c
;

768 
c
 = 
	`nodötc⁄°
(0);

769 
c
->
vÆ
.
˘y≥
 = 
CTBOOL
;

770 
c
->
vÆ
.
u
.
bvÆ
 = 
b
;

771 
c
->
ty≥
 = 
idólboﬁ
;

772  
c
;

773 
	}
}

775 
Ty≥
*

776 
	$aödex
(
Node
 *
b
, 
Ty≥
 *
t
)

778 
Ty≥
 *
r
;

779 
bound
;

781 
bound
 = -1;

782 
	`ty≥check
(&
b
, 
Erv
);

783 if(
b
 !
nû
) {

784 
	`c⁄°ty≥
(
b
)) {

786 
	`yyîr‹
("array bound must beán integerÉxpression");

788 
CTINT
:

789 
CTRUNE
:

790 
bound
 = 
	`mpgëfix
(
b
->
vÆ
.
u
.
xvÆ
);

791 if(
bound
 < 0)

792 
	`yyîr‹
("array bound must beÇonÇegative");

798 
r
 = 
	`typ
(
TARRAY
);

799 
r
->
ty≥
 = 
t
;

800 
r
->
bound
 = bound;

801  
r
;

802 
	}
}

804 
Node
*

805 
	$åìc›y
(
Node
 *
n
)

807 
Node
 *
m
;

809 if(
n
 =
N
)

810  
N
;

812 
n
->
›
) {

814 
m
 = 
	`nod
(
OXXX
, 
N
, N);

815 *
m
 = *
n
;

816 
m
->
À·
 = 
	`åìc›y
(
n
->left);

817 
m
->
right
 = 
	`åìc›y
(
n
->right);

818 
m
->
li°
 = 
	`li°åìc›y
(
n
->list);

819 if(
m
->
de‚
)

820 
	`ab‹t
();

823 
ONONAME
:

824 if(
n
->
sym
 =
	`lookup
("iota")) {

829 
m
 = 
	`nod
(
OXXX
, 
N
, N);

830 *
m
 = *
n
;

831 
m
->
iŸa
 = iota;

835 
ONAME
:

836 
OLITERAL
:

837 
OTYPE
:

838 
m
 = 
n
;

841  
m
;

842 
	}
}

846 
	$i¢û
(
Node
 *
n
)

848 if(
n
 =
N
)

850 if(
n
->
›
 !
OLITERAL
)

852 if(
n
->
vÆ
.
˘y≥
 !
CTNIL
)

855 
	}
}

858 
	$i•åto
(
Ty≥
 *
t
, 
ë
)

860 if(
t
 =
T
)

862 if(!
i•å
[
t
->
ëy≥
])

864 
t
 =Å->
ty≥
;

865 if(
t
 =
T
)

867 if(
t
->
ëy≥
 !
ë
)

870 
	}
}

873 
	$i°y≥
(
Ty≥
 *
t
, 
ë
)

875  
t
 !
T
 &&Å->
ëy≥
 =
ë
;

876 
	}
}

879 
	$isfixed¨øy
(
Ty≥
 *
t
)

881  
t
 !
T
 &&Å->
ëy≥
 =
TARRAY
 &&Å->
bound
 >= 0;

882 
	}
}

885 
	$is¶i˚
(
Ty≥
 *
t
)

887  
t
 !
T
 &&Å->
ëy≥
 =
TARRAY
 &&Å->
bound
 < 0;

888 
	}
}

891 
	$isbœnk
(
Node
 *
n
)

893 if(
n
 =
N
)

895  
	`isbœnksym
(
n
->
sym
);

896 
	}
}

899 
	$isbœnksym
(
Sym
 *
s
)

901 *
p
;

903 if(
s
 =
S
)

905 
p
 = 
s
->
«me
;

906 if(
p
 =
nû
)

908  
p
[0] == '_' &&Ö[1] == '\0';

909 
	}
}

912 
	$isöãr
(
Ty≥
 *
t
)

914  
t
 !
T
 &&Å->
ëy≥
 =
TINTER
;

915 
	}
}

918 
	$i¢ûöãr
(
Ty≥
 *
t
)

920 if(!
	`isöãr
(
t
))

922 if(
t
->
ty≥
 !
T
)

925 
	}
}

928 
	$isidól
(
Ty≥
 *
t
)

930 if(
t
 =
T
)

932 if(
t
 =
idól°rög
 ||Å =
idólboﬁ
)

934 
t
->
ëy≥
) {

935 
TNIL
:

936 
TIDEAL
:

940 
	}
}

946 
Ty≥
*

947 
	$mëhty≥
(
Ty≥
 *
t
, 
mu°«me
)

949 if(
t
 =
T
)

950  
T
;

953 if(
i•å
[
t
->
ëy≥
]) {

954 if(
t
->
sym
 !
S
)

955  
T
;

956 
t
 =Å->
ty≥
;

957 if(
t
 =
T
)

958  
T
;

962 if(
t
->
sym
 =
S
 && (
mu°«me
 ||Å->
ëy≥
 !
TSTRUCT
))

963  
T
;

966 if(!
issim∂e
[
t
->
ëy≥
])

967 
t
->
ëy≥
) {

969  
T
;

970 
TSTRUCT
:

971 
TARRAY
:

972 
TMAP
:

973 
TCHAN
:

974 
TSTRING
:

975 
TFUNC
:

979  
t
;

980 
	}
}

983 
	$˝lxsubty≥
(
ë
)

985 
ë
) {

986 
TCOMPLEX64
:

987  
TFLOAT32
;

988 
TCOMPLEX128
:

989  
TFLOAT64
;

991 
	`Áèl
("˝lxsubty≥: %E\n", 
ë
);

993 
	}
}

996 
	$eqnŸe
(
Sålô
 *
a
, Sålô *
b
)

998 if(
a
 =
b
)

1000 if(
a
 =
nû
 || 
b
 ==Çil)

1002 if(
a
->
Àn
 !
b
->len)

1004  
	`memcmp
(
a
->
s
, 
b
->s,á->
Àn
) == 0;

1005 
	}
}

1007 
Ty≥PaúLi°
 
	tTy≥PaúLi°
;

1008 
	sTy≥PaúLi°


1010 
Ty≥
 *
	mt1
;

1011 
Ty≥
 *
	mt2
;

1012 
Ty≥PaúLi°
 *
	m√xt
;

1016 
	$⁄li°
(
Ty≥PaúLi°
 *
l
, 
Ty≥
 *
t1
, Ty≥ *
t2
)

1018 ; 
l
;Üˆ->
√xt
)

1019 if((
l
->
t1
 =t1 &&Ü->
t2
 ==Å2) || (l->t1 ==Å2 &&Ü->t2 ==Å1))

1022 
	}
}

1024 
eqty≥1
(
Ty≥
*, Ty≥*, 
Ty≥PaúLi°
*);

1033 
	$eqty≥
(
Ty≥
 *
t1
, Ty≥ *
t2
)

1035  
	`eqty≥1
(
t1
, 
t2
, 
nû
);

1036 
	}
}

1039 
	$eqty≥1
(
Ty≥
 *
t1
, Ty≥ *
t2
, 
Ty≥PaúLi°
 *
assumed_equÆ
)

1041 
Ty≥PaúLi°
 
l
;

1043 if(
t1
 =
t2
)

1045 if(
t1
 =
T
 || 
t2
 =T ||Å1->
ëy≥
 !=Å2->etype)

1047 if(
t1
->
sym
 || 
t2
->sym) {

1050 
t1
->
ëy≥
) {

1051 
TUINT8
:

1052 if((
t1
 =
ty≥s
[
TUINT8
] ||Å1 =
byãty≥
Ë&& (
t2
 ==Åypes[TUINT8] ||Å2 == bytetype))

1055 
TINT
:

1056 
TINT32
:

1057 if((
t1
 =
ty≥s
[
ru√ty≥
->
ëy≥
] ||Å1 =ru√ty≥Ë&& (
t2
 ==Åypes[runetype->etype] ||Å2 ==Ñunetype))

1064 if(
	`⁄li°
(
assumed_equÆ
, 
t1
, 
t2
))

1066 
l
.
√xt
 = 
assumed_equÆ
;

1067 
l
.
t1
 =Å1;

1068 
l
.
t2
 =Å2;

1070 
t1
->
ëy≥
) {

1071 
TINTER
:

1072 
TSTRUCT
:

1073 
t1
Ò1->
ty≥
, 
t2
Ò2->ty≥;Å1 &&Å2;Å1Ò1->
down
,Å2=t2->down) {

1074 if(
t1
->
ëy≥
 !
TFIELD
 || 
t2
->etype != TFIELD)

1075 
	`Áèl
("°ru˘/öãrÁ˚ missög fõld: %T %T", 
t1
, 
t2
);

1076 if(
t1
->
sym
 !
t2
->sym ||Å1->
embedded
 !t2->embedded || !
	`eqty≥1
—1->
ty≥
,Å2->ty≥, &
l
Ë|| !
	`eqnŸe
—1->
nŸe
,Å2->note))

1077 
no
;

1079 if(
t1
 =
T
 && 
t2
 == T)

1080 
yes
;

1081 
no
;

1083 
TFUNC
:

1085 
t1
Ò1->
ty≥
, 
t2
Ò2->ty≥;Å1 &&Å2;Å1Ò1->
down
,Å2=t2->down) {

1086 
Ty≥
 *
è
, *
tb
;

1088 if(
t1
->
ëy≥
 !
TSTRUCT
 || 
t2
->etype != TSTRUCT)

1089 
	`Áèl
("fun¯missög såu˘: %T %T", 
t1
, 
t2
);

1092 
è
=
t1
->
ty≥
, 
tb
=
t2
->ty≥;Å®&&Åb;ÅaÒa->
down
,Åb=tb->down) {

1093 if(
è
->
ëy≥
 !
TFIELD
 || 
tb
->etype != TFIELD)

1094 
	`Áèl
("fun¯°ru˘ missög fõld: %T %T", 
è
, 
tb
);

1095 if(
è
->
isddd
 !
tb
->isddd || !
	`eqty≥1
—a->
ty≥
,Åb->ty≥, &
l
))

1096 
no
;

1098 if(
è
 !
T
 || 
tb
 != T)

1099 
no
;

1101 if(
t1
 =
T
 && 
t2
 == T)

1102 
yes
;

1103 
no
;

1105 
TARRAY
:

1106 if(
t1
->
bound
 !
t2
->bound)

1107 
no
;

1110 
TCHAN
:

1111 if(
t1
->
ch™
 !
t2
->chan)

1112 
no
;

1116 if(
	`eqty≥1
(
t1
->
down
, 
t2
->down, &
l
Ë&&Éqty≥1—1->
ty≥
,Å2->type, &l))

1117 
yes
;

1118 
no
;

1120 
yes
:

1123 
no
:

1125 
	}
}

1131 
	$eqty≥n⁄ame
(
Ty≥
 *
t1
, Ty≥ *
t2
)

1133 if(
t1
 =
T
 || 
t2
 =T ||Å1->
ëy≥
 !
TSTRUCT
 ||Å2->etype != TSTRUCT)

1136 
t1
 =Å1->
ty≥
;

1137 
t2
 =Å2->
ty≥
;

1139 if(!
	`eqty≥
(
t1
, 
t2
))

1141 if(
t1
 =
T
)

1143 
t1
 =Å1->
down
;

1144 
t2
 =Å2->
down
;

1146 
	}
}

1152 
	$assign›
(
Ty≥
 *
§c
, Ty≥ *
d°
, **
why
)

1154 
Ty≥
 *
missög
, *
have
;

1155 
±r
;

1157 if(
why
 !
nû
)

1158 *
why
 = "";

1162 if(
ß„mode
 && 
imp‹çkg
 =
nû
 && 
§c
 !
T
 && src->
ëy≥
 =
TUNSAFEPTR
) {

1163 
	`yyîr‹
("cannot use unsafe.Pointer");

1164 
	`îr‹exô
();

1167 if(
§c
 =
d°
)

1168  
OCONVNOP
;

1169 if(
§c
 =
T
 || 
d°
 =T || src->
ëy≥
 =
TFORW
 || d°->ëy≥ =TFORW || src->
‹ig
 == T || dst->orig == T)

1173 if(
	`eqty≥
(
§c
, 
d°
))

1174  
OCONVNOP
;

1179 if(
	`eqty≥
(
§c
->
‹ig
, 
d°
->‹igË&& (§c->
sym
 =
S
 || d°->sym =S || src->
ëy≥
 =
TINTER
))

1180  
OCONVNOP
;

1183 if(
d°
->
ëy≥
 =
TINTER
 && 
§c
->ëy≥ !
TNIL
) {

1184 if(
	`im∂emíts
(
§c
, 
d°
, &
missög
, &
have
, &
±r
))

1185  
OCONVIFACE
;

1188 if(
have
 && have->
sym
 =
missög
->sym && (have->
ty≥
->
broke
 || missing->type->broke))

1189  
OCONVIFACE
;

1191 if(
why
 !
nû
) {

1192 if(
	`i•åto
(
§c
, 
TINTER
))

1193 *
why
 = 
	`sm¥öt
(":\n\t%T i†poöã∏tÿöãrÁ˚,ÇŸ i¡îÁ˚", 
§c
);

1194 if(
have
 && have->
sym
 =
missög
->sym)

1195 *
why
 = 
	`sm¥öt
(":\n\t%T doesÇot implement %T (wrongÅype for %S method)\n"

1196 "\t\thavê%S%hhT\n\t\tw™à%S%hhT", 
§c
, 
d°
, 
missög
->
sym
,

1197 
have
->
sym
, have->
ty≥
, 
missög
->sym, missing->type);

1198 if(
±r
)

1199 *
why
 = 
	`sm¥öt
(":\n\t%T doesÇot implement %T (%S methodÑequiresÖointerÑeceiver)",

1200 
§c
, 
d°
, 
missög
->
sym
);

1201 if(
have
)

1202 *
why
 = 
	`sm¥öt
(":\n\t%T doesÇot implement %T (missing %S method)\n"

1203 "\t\thavê%S%hhT\n\t\tw™à%S%hhT", 
§c
, 
d°
, 
missög
->
sym
,

1204 
have
->
sym
, have->
ty≥
, 
missög
->sym, missing->type);

1206 *
why
 = 
	`sm¥öt
(":\n\t%T doesÇot implement %T (missing %S method)",

1207 
§c
, 
d°
, 
missög
->
sym
);

1211 if(
	`i•åto
(
d°
, 
TINTER
)) {

1212 if(
why
 !
nû
)

1213 *
why
 = 
	`sm¥öt
(":\n\t%T i†poöã∏tÿöãrÁ˚,ÇŸ i¡îÁ˚", 
d°
);

1216 if(
§c
->
ëy≥
 =
TINTER
 && 
d°
->ëy≥ !
TBLANK
) {

1217 if(
why
 !
nû
)

1218 *
why
 = ":ÇeedÅypeássertion";

1225 if(
§c
->
ëy≥
 =
TCHAN
 && src->
ch™
 =
CbŸh
 && 
d°
->etype == TCHAN)

1226 if(
	`eqty≥
(
§c
->
ty≥
, 
d°
->ty≥Ë&& (§c->
sym
 =
S
 || dst->sym == S))

1227  
OCONVNOP
;

1230 if(
§c
->
ëy≥
 =
TNIL
) {

1231 
d°
->
ëy≥
) {

1232 
TARRAY
:

1233 if(
d°
->
bound
 != -100)

1235 
TPTR32
:

1236 
TPTR64
:

1237 
TFUNC
:

1238 
TMAP
:

1239 
TCHAN
:

1240 
TINTER
:

1241  
OCONVNOP
;

1248 if(
d°
->
ëy≥
 =
TBLANK
)

1249  
OCONVNOP
;

1252 
	}
}

1258 
	$c⁄vît›
(
Ty≥
 *
§c
, Ty≥ *
d°
, **
why
)

1260 
›
;

1262 if(
why
 !
nû
)

1263 *
why
 = "";

1265 if(
§c
 =
d°
)

1266  
OCONVNOP
;

1267 if(
§c
 =
T
 || 
d°
 == T)

1271 if((
›
 = 
	`assign›
(
§c
, 
d°
, 
why
)) != 0)

1272  
›
;

1278 if(
§c
->
ëy≥
 =
TINTER
 || 
d°
->etype == TINTER)

1280 if(
why
 !
nû
)

1281 *
why
 = "";

1284 if(
	`eqty≥
(
§c
->
‹ig
, 
d°
->orig))

1285  
OCONVNOP
;

1289 if(
i•å
[
§c
->
ëy≥
] && i•å[
d°
->ëy≥] && src->
sym
 =
S
 && dst->sym == S)

1290 if(
	`eqty≥
(
§c
->
ty≥
->
‹ig
, 
d°
->type->orig))

1291  
OCONVNOP
;

1294 if((
isöt
[
§c
->
ëy≥
] || 
isÊﬂt
[§c->ëy≥]Ë&& (isöt[
d°
->etype] || isfloat[dst->etype])) {

1295 if(
simty≥
[
§c
->
ëy≥
] =simty≥[
d°
->etype])

1296  
OCONVNOP
;

1297  
OCONV
;

1301 if(
iscom∂ex
[
§c
->
ëy≥
] && iscom∂ex[
d°
->etype]) {

1302 if(
simty≥
[
§c
->
ëy≥
] =simty≥[
d°
->etype])

1303  
OCONVNOP
;

1304  
OCONV
;

1309 if(
isöt
[
§c
->
ëy≥
] && 
d°
->ëy≥ =
TSTRING
)

1310  
ORUNESTR
;

1312 if(
	`is¶i˚
(
§c
Ë&& 
d°
->
ëy≥
 =
TSTRING
) {

1313 if(
§c
->
ty≥
->
ëy≥
 =
byãty≥
->etype)

1314  
OARRAYBYTESTR
;

1315 if(
§c
->
ty≥
->
ëy≥
 =
ru√ty≥
->etype)

1316  
OARRAYRUNESTR
;

1321 if(
§c
->
ëy≥
 =
TSTRING
 && 
	`is¶i˚
(
d°
)) {

1322 if(
d°
->
ty≥
->
ëy≥
 =
byãty≥
->etype)

1323  
OSTRARRAYBYTE
;

1324 if(
d°
->
ty≥
->
ëy≥
 =
ru√ty≥
->etype)

1325  
OSTRARRAYRUNE
;

1329 if((
i•å
[
§c
->
ëy≥
] || src->ëy≥ =
TUINTPTR
Ë&& 
d°
->ëy≥ =
TUNSAFEPTR
)

1330  
OCONVNOP
;

1333 if(
§c
->
ëy≥
 =
TUNSAFEPTR
 && (
i•å
[
d°
->ëy≥] || d°->ëy≥ =
TUINTPTR
))

1334  
OCONVNOP
;

1337 
	}
}

1340 
Node
*

1341 
	$assignc⁄v
(
Node
 *
n
, 
Ty≥
 *
t
, *
c⁄ãxt
)

1343 
›
;

1344 
Node
 *
r
, *
ﬁd
;

1345 *
why
;

1347 if(
n
 =
N
 ||Ç->
ty≥
 =
T
)

1348  
n
;

1350 
ﬁd
 = 
n
;

1351 
ﬁd
->
düg
++;

1352 
	`deÁu…lô
(&
n
, 
t
);

1353 
ﬁd
->
düg
--;

1354 if(
t
->
ëy≥
 =
TBLANK
)

1355  
n
;

1359 if(
n
->
ty≥
 =
idólboﬁ
 && 
t
->
ëy≥
 !
TBOOL
) {

1360 if(
n
->
›
 =
ONAME
 ||Ç->› =
OLITERAL
) {

1361 
r
 = 
	`nod
(
OCONVNOP
, 
n
, 
N
);

1362 
r
->
ty≥
 = 
ty≥s
[
TBOOL
];

1363 
r
->
ty≥check
 = 1;

1364 
r
->
im∂icô
 = 1;

1365 
n
 = 
r
;

1369 if(
	`eqty≥
(
n
->
ty≥
, 
t
))

1370  
n
;

1372 
›
 = 
	`assign›
(
n
->
ty≥
, 
t
, &
why
);

1373 if(
›
 == 0) {

1374 
	`yyîr‹
("ˇ¬Ÿ u£ %lNá†ty≥ %T i¿%s%s", 
n
, 
t
, 
c⁄ãxt
, 
why
);

1375 
›
 = 
OCONV
;

1378 
r
 = 
	`nod
(
›
, 
n
, 
N
);

1379 
r
->
ty≥
 = 
t
;

1380 
r
->
ty≥check
 = 1;

1381 
r
->
im∂icô
 = 1;

1382  
r
;

1383 
	}
}

1386 
	$subty≥
(
Ty≥
 **
°p
, Ty≥ *
t
, 
d
)

1388 
Ty≥
 *
°
;

1390 
lo›
:

1391 
°
 = *
°p
;

1392 if(
°
 =
T
)

1395 
d
++;

1396 if(
d
 >= 10)

1399 
°
->
ëy≥
) {

1403 
TPTR32
:

1404 
TPTR64
:

1405 
TCHAN
:

1406 
TARRAY
:

1407 
°p
 = &
°
->
ty≥
;

1408 
lo›
;

1410 
TANY
:

1411 if(!
°
->
c›y™y
)

1413 *
°p
 = 
t
;

1416 
TMAP
:

1417 if(
	`subty≥
(&
°
->
down
, 
t
, 
d
))

1419 
°p
 = &
°
->
ty≥
;

1420 
lo›
;

1422 
TFUNC
:

1424 if(
	`subty≥
(&
°
->
ty≥
, 
t
, 
d
))

1426 if(
	`subty≥
(&
°
->
ty≥
->
down
->down, 
t
, 
d
))

1428 if(
	`subty≥
(&
°
->
ty≥
->
down
, 
t
, 
d
))

1434 
TSTRUCT
:

1435 
°
=°->
ty≥
; st!=
T
; st=°->
down
)

1436 if(
	`subty≥
(&
°
->
ty≥
, 
t
, 
d
))

1441 
	}
}

1447 
	$is64
(
Ty≥
 *
t
)

1449 if(
t
 =
T
)

1451 
simty≥
[
t
->
ëy≥
]) {

1452 
TINT64
:

1453 
TUINT64
:

1454 
TPTR64
:

1458 
	}
}

1464 
	$noc⁄v
(
Ty≥
 *
t1
, Ty≥ *
t2
)

1466 
e1
, 
e2
;

1468 
e1
 = 
simty≥
[
t1
->
ëy≥
];

1469 
e2
 = 
simty≥
[
t2
->
ëy≥
];

1471 
e1
) {

1472 
TINT8
:

1473 
TUINT8
:

1474  
e2
 =
TINT8
 ||É2 =
TUINT8
;

1476 
TINT16
:

1477 
TUINT16
:

1478  
e2
 =
TINT16
 ||É2 =
TUINT16
;

1480 
TINT32
:

1481 
TUINT32
:

1482 
TPTR32
:

1483  
e2
 =
TINT32
 ||É2 =
TUINT32
 ||É2 =
TPTR32
;

1485 
TINT64
:

1486 
TUINT64
:

1487 
TPTR64
:

1488  
e2
 =
TINT64
 ||É2 =
TUINT64
 ||É2 =
TPTR64
;

1490 
TFLOAT32
:

1491  
e2
 =
TFLOAT32
;

1493 
TFLOAT64
:

1494  
e2
 =
TFLOAT64
;

1497 
	}
}

1500 
	$¨gty≥
(
Node
 *
⁄
, 
Ty≥
 *
t
)

1502 
	`dowidth
(
t
);

1503 if(!
	`subty≥
(&
⁄
->
ty≥
, 
t
, 0))

1504 
	`Áèl
("¨gty≥: faûed %N %T\n", 
⁄
, 
t
);

1505 
	}
}

1507 
Ty≥
*

1508 
	$shÆlow
(
Ty≥
 *
t
)

1510 
Ty≥
 *
¡
;

1512 if(
t
 =
T
)

1513  
T
;

1514 
¡
 = 
	`typ
(0);

1515 *
¡
 = *
t
;

1516 if(
t
->
‹ig
 ==Å)

1517 
¡
->
‹ig
 =Çt;

1518  
¡
;

1519 
	}
}

1521 
Ty≥
*

1522 
	$dìp
(
Ty≥
 *
t
)

1524 
Ty≥
 *
¡
, *
xt
;

1526 if(
t
 =
T
)

1527  
T
;

1529 
t
->
ëy≥
) {

1531 
¡
 = 
t
;

1534 
TANY
:

1535 
¡
 = 
	`shÆlow
(
t
);

1536 
¡
->
c›y™y
 = 1;

1539 
TPTR32
:

1540 
TPTR64
:

1541 
TCHAN
:

1542 
TARRAY
:

1543 
¡
 = 
	`shÆlow
(
t
);

1544 
¡
->
ty≥
 = 
	`dìp
(
t
->type);

1547 
TMAP
:

1548 
¡
 = 
	`shÆlow
(
t
);

1549 
¡
->
down
 = 
	`dìp
(
t
->down);

1550 
¡
->
ty≥
 = 
	`dìp
(
t
->type);

1553 
TFUNC
:

1554 
¡
 = 
	`shÆlow
(
t
);

1555 
¡
->
ty≥
 = 
	`dìp
(
t
->type);

1556 
¡
->
ty≥
->
down
 = 
	`dìp
(
t
->type->down);

1557 
¡
->
ty≥
->
down
->dow¿
	`dìp
(
t
->type->down->down);

1560 
TSTRUCT
:

1561 
¡
 = 
	`shÆlow
(
t
);

1562 
¡
->
ty≥
 = 
	`shÆlow
(
t
->type);

1563 
xt
 = 
¡
->
ty≥
;

1565 
t
Ò->
ty≥
;Å!=
T
;ÅÒ->
down
) {

1566 
xt
->
ty≥
 = 
	`dìp
(
t
->type);

1567 
xt
->
down
 = 
	`shÆlow
(
t
->down);

1568 
xt
 = xt->
down
;

1572  
¡
;

1573 
	}
}

1575 
Node
*

1576 
	$sy¶ook
(*
«me
, 
c›y
)

1578 
Sym
 *
s
;

1579 
Node
 *
n
;

1581 
s
 = 
	`pkglookup
(
«me
, 
ru¡imïkg
);

1582 if(
s
 =
S
 || s->
def
 =
N
)

1583 
	`Áèl
("sy¶ook: c™'àfödÑu¡ime.%s", 
«me
);

1585 if(!
c›y
)

1586  
s
->
def
;

1588 
n
 = 
	`nod
(0, 
N
, N);

1589 *
n
 = *
s
->
def
;

1590 
n
->
ty≥
 = 
	`dìp
(
s
->
def
->type);

1592  
n
;

1593 
	}
}

1607 
uöt32


1608 
	$ty≥hash
(
Ty≥
 *
t
)

1610 *
p
;

1611 
MD5
 
d
;

1613 if(
t
->
thi°u∂e
) {

1615 
t
->
thi°u∂e
 = 0;

1616 
p
 = 
	`sm¥öt
("%-uT", 
t
);

1617 
t
->
thi°u∂e
 = 1;

1619 
p
 = 
	`sm¥öt
("%-uT", 
t
);

1621 
	`md5ª£t
(&
d
);

1622 
	`md5wrôe
(&
d
, (
uch¨
*)
p
, 
	`°æí
(p));

1623 
	`‰ì
(
p
);

1624  
	`md5sum
(&
d
);

1625 
	}
}

1627 
Ty≥
*

1628 
	$±πo
(
Ty≥
 *
t
)

1630 
Ty≥
 *
t1
;

1632 if(
çå
 == 0)

1633 
	`Áèl
("ptrto:ÇoÅptr");

1634 
t1
 = 
	`typ
(
çå
);

1635 
t1
->
ty≥
 = 
t
;

1636 
t1
->
width
 = 
width±r
;

1637 
t1
->
Æign
 = 
width±r
;

1638  
t1
;

1639 
	}
}

1642 
	$‰ame
(
c⁄ãxt
)

1644 *
p
;

1645 
NodeLi°
 *
l
;

1646 
Node
 *
n
;

1647 
Êag
;

1649 
p
 = "stack";

1650 
l
 = 
nû
;

1651 if(
cur‚
)

1652 
l
 = 
cur‚
->
d˛
;

1653 if(
c⁄ãxt
) {

1654 
p
 = "external";

1655 
l
 = 
exã∫d˛
;

1658 
Êag
 = 1;

1659 ; 
l
;Üˆ->
√xt
) {

1660 
n
 = 
l
->n;

1661 
n
->
›
) {

1662 
ONAME
:

1663 if(
Êag
)

1664 
	`¥öt
("--- %†‰amê---\n", 
p
);

1665 
	`¥öt
("%O %S G%d %T\n", 
n
->
›
,Ç->
sym
,Ç->
v¨gí
,Ç->
ty≥
);

1666 
Êag
 = 0;

1669 
OTYPE
:

1670 if(
Êag
)

1671 
	`¥öt
("--- %†‰amê---\n", 
p
);

1672 
	`¥öt
("%O %T\n", 
n
->
›
,Ç->
ty≥
);

1673 
Êag
 = 0;

1677 
	}
}

1686 
	$uŒm™ˇlc
(
Node
 *
n
)

1688 
ul
, 
ur
;

1690 if(
n
 =
N
)

1693 if(
n
->
nöô
 !
nû
) {

1694 
ul
 = 
UINF
;

1695 
out
;

1698 
n
->
›
) {

1699 
OREGISTER
:

1700 
OLITERAL
:

1701 
ONAME
:

1702 
ul
 = 1;

1703 if(
n
->
˛ass
 =
PPARAMREF
 || (n->˛as†& 
PHEAP
))

1704 
ul
++;

1705 
out
;

1706 
OCALL
:

1707 
OCALLFUNC
:

1708 
OCALLMETH
:

1709 
OCALLINTER
:

1710 
ul
 = 
UINF
;

1711 
out
;

1713 
ul
 = 1;

1714 if(
n
->
À·
 !
N
)

1715 
ul
 = 
n
->
À·
->
uŒm™
;

1716 
ur
 = 1;

1717 if(
n
->
right
 !
N
)

1718 
ur
 = 
n
->
right
->
uŒm™
;

1719 if(
ul
 =
ur
)

1720 
ul
 += 1;

1721 if(
ur
 > 
ul
)

1722 
ul
 = 
ur
;

1724 
out
:

1725 
n
->
uŒm™
 = 
ul
;

1726 
	}
}

1729 
	$badty≥
(
o
, 
Ty≥
 *
é
, Ty≥ *
å
)

1731 
Fmt
 
fmt
;

1732 *
s
;

1734 
	`fmt°röô
(&
fmt
);

1735 if(
é
 !
T
)

1736 
	`fmçröt
(&
fmt
, "\n %T", 
é
);

1737 if(
å
 !
T
)

1738 
	`fmçröt
(&
fmt
, "\n %T", 
å
);

1741 if(
é
 && 
å
 && 
i•å
[é->
ëy≥
] && isptr[tr->etype]) {

1742 if(
é
->
ty≥
->
ëy≥
 =
TSTRUCT
 && 
å
->ty≥->ëy≥ =
TINTER
)

1743 
	`fmçröt
(&
fmt
, "\n (*struct vs *interface)");

1744 if(
é
->
ty≥
->
ëy≥
 =
TINTER
 && 
å
->ty≥->ëy≥ =
TSTRUCT
)

1745 
	`fmçröt
(&
fmt
, "\n (*interface vs *struct)");

1747 
s
 = 
	`fmt°rÊush
(&
fmt
);

1748 
	`yyîr‹
("ûÀgÆÅy≥†f‹ o≥ønd: %O%s", 
o
, 
s
);

1749 
	}
}

1754 
Ty≥
*

1755 
	$°ru˘fú°
(
Iãr
 *
s
, 
Ty≥
 **
¬
)

1757 
Ty≥
 *
n
, *
t
;

1759 
n
 = *
¬
;

1760 if(
n
 =
T
)

1761 
bad
;

1763 
n
->
ëy≥
) {

1765 
bad
;

1767 
TSTRUCT
:

1768 
TINTER
:

1769 
TFUNC
:

1773 
t
 = 
n
->
ty≥
;

1774 if(
t
 =
T
)

1775 
∫û
;

1777 if(
t
->
ëy≥
 !
TFIELD
)

1778 
	`Áèl
("°ru˘fú°:ÇŸ fõld %T", 
t
);

1780 
s
->
t
 =Å;

1781  
t
;

1783 
bad
:

1784 
	`Áèl
("°ru˘fú°:ÇŸ såu˘ %T", 
n
);

1786 
∫û
:

1787  
T
;

1788 
	}
}

1790 
Ty≥
*

1791 
	$°ru˘√xt
(
Iãr
 *
s
)

1793 
Ty≥
 *
n
, *
t
;

1795 
n
 = 
s
->
t
;

1796 
t
 = 
n
->
down
;

1797 if(
t
 =
T
)

1798 
∫û
;

1800 if(
t
->
ëy≥
 !
TFIELD
)

1801 
bad
;

1803 
s
->
t
 =Å;

1804  
t
;

1806 
bad
:

1807 
	`Áèl
("°ru˘√xt:ÇŸ såu˘ %T", 
n
);

1809 
∫û
:

1810  
T
;

1811 
	}
}

1816 
Ty≥
*

1817 
	$funcfú°
(
Iãr
 *
s
, 
Ty≥
 *
t
)

1819 
Ty≥
 *
Â
;

1821 if(
t
 =
T
)

1822 
bad
;

1824 if(
t
->
ëy≥
 !
TFUNC
)

1825 
bad
;

1827 
s
->
tfunc
 = 
t
;

1828 
s
->
d⁄e
 = 0;

1829 
Â
 = 
	`°ru˘fú°
(
s
, 
	`gëthis
(
t
));

1830 if(
Â
 =
T
) {

1831 
s
->
d⁄e
 = 1;

1832 
Â
 = 
	`°ru˘fú°
(
s
, 
	`gëö¨g
(
t
));

1834  
Â
;

1836 
bad
:

1837 
	`Áèl
("funcfú°:ÇŸ fun¯%T", 
t
);

1838  
T
;

1839 
	}
}

1841 
Ty≥
*

1842 
	$fun˙ext
(
Iãr
 *
s
)

1844 
Ty≥
 *
Â
;

1846 
Â
 = 
	`°ru˘√xt
(
s
);

1847 if(
Â
 =
T
 && !
s
->
d⁄e
) {

1848 
s
->
d⁄e
 = 1;

1849 
Â
 = 
	`°ru˘fú°
(
s
, 
	`gëö¨g
(s->
tfunc
));

1851  
Â
;

1852 
	}
}

1854 
Ty≥
**

1855 
	$gëthis
(
Ty≥
 *
t
)

1857 if(
t
->
ëy≥
 !
TFUNC
)

1858 
	`Áèl
("gëthis:ÇŸá fun¯%T", 
t
);

1859  &
t
->
ty≥
;

1860 
	}
}

1862 
Ty≥
**

1863 
	$gëouèrg
(
Ty≥
 *
t
)

1865 if(
t
->
ëy≥
 !
TFUNC
)

1866 
	`Áèl
("gëouèrg:ÇŸá fun¯%T", 
t
);

1867  &
t
->
ty≥
->
down
;

1868 
	}
}

1870 
Ty≥
**

1871 
	$gëö¨g
(
Ty≥
 *
t
)

1873 if(
t
->
ëy≥
 !
TFUNC
)

1874 
	`Áèl
("gëö¨g:ÇŸá fun¯%T", 
t
);

1875  &
t
->
ty≥
->
down
->down;

1876 
	}
}

1878 
Ty≥
*

1879 
	$gëthisx
(
Ty≥
 *
t
)

1881  *
	`gëthis
(
t
);

1882 
	}
}

1884 
Ty≥
*

1885 
	$gëouèrgx
(
Ty≥
 *
t
)

1887  *
	`gëouèrg
(
t
);

1888 
	}
}

1890 
Ty≥
*

1891 
	$gëö¨gx
(
Ty≥
 *
t
)

1893  *
	`gëö¨g
(
t
);

1894 
	}
}

1901 
	$brcom
(
a
)

1903 
a
) {

1904 
OEQ
:  
ONE
;

1905 
ONE
:  
OEQ
;

1906 
OLT
:  
OGE
;

1907 
OGT
:  
OLE
;

1908 
OLE
:  
OGT
;

1909 
OGE
:  
OLT
;

1911 
	`Áèl
("brcom:Çÿcom f‹ %A\n", 
a
);

1912  
a
;

1913 
	}
}

1920 
	$bºev
(
a
)

1922 
a
) {

1923 
OEQ
:  OEQ;

1924 
ONE
:  ONE;

1925 
OLT
:  
OGT
;

1926 
OGT
:  
OLT
;

1927 
OLE
:  
OGE
;

1928 
OGE
:  
OLE
;

1930 
	`Áèl
("brcom:Çÿªv f‹ %A\n", 
a
);

1931  
a
;

1932 
	}
}

1938 
Node
*

1939 
	$ß„ex¥
(
Node
 *
n
, 
NodeLi°
 **
öô
)

1941 
Node
 *
l
;

1942 
Node
 *
r
;

1943 
Node
 *
a
;

1945 if(
n
 =
N
)

1946  
N
;

1948 if(
n
->
nöô
) {

1949 
	`wÆk°méi°
(
n
->
nöô
);

1950 *
öô
 = 
	`c⁄ˇt
(*öô, 
n
->
nöô
);

1951 
n
->
nöô
 = 
nû
;

1954 
n
->
›
) {

1955 
ONAME
:

1956 
OLITERAL
:

1957  
n
;

1959 
ODOT
:

1960 
l
 = 
	`ß„ex¥
(
n
->
À·
, 
öô
);

1961 if(
l
 =
n
->
À·
)

1962  
n
;

1963 
r
 = 
	`nod
(
OXXX
, 
N
, N);

1964 *
r
 = *
n
;

1965 
r
->
À·
 = 
l
;

1966 
	`ty≥check
(&
r
, 
Erv
);

1967 
	`wÆkex¥
(&
r
, 
öô
);

1968  
r
;

1970 
ODOTPTR
:

1971 
OIND
:

1972 
l
 = 
	`ß„ex¥
(
n
->
À·
, 
öô
);

1973 if(
l
 =
n
->
À·
)

1974  
n
;

1975 
a
 = 
	`nod
(
OXXX
, 
N
, N);

1976 *
a
 = *
n
;

1977 
a
->
À·
 = 
l
;

1978 
	`wÆkex¥
(&
a
, 
öô
);

1979  
a
;

1981 
OINDEX
:

1982 
OINDEXMAP
:

1983 
l
 = 
	`ß„ex¥
(
n
->
À·
, 
öô
);

1984 
r
 = 
	`ß„ex¥
(
n
->
right
, 
öô
);

1985 if(
l
 =
n
->
À·
 && 
r
 =n->
right
)

1986  
n
;

1987 
a
 = 
	`nod
(
OXXX
, 
N
, N);

1988 *
a
 = *
n
;

1989 
a
->
À·
 = 
l
;

1990 
a
->
right
 = 
r
;

1991 
	`wÆkex¥
(&
a
, 
öô
);

1992  
a
;

1996 if(
	`i¶vÆue
(
n
))

1997 
	`Áèl
("missögÜvÆuêˇ£ i¿ß„ex¥: %N", 
n
);

1998  
	`chó≥x¥
(
n
, 
öô
);

1999 
	}
}

2001 
Node
*

2002 
	$c›yex¥
(
Node
 *
n
, 
Ty≥
 *
t
, 
NodeLi°
 **
öô
)

2004 
Node
 *
a
, *
l
;

2006 
l
 = 
	`ãmp
(
t
);

2007 
a
 = 
	`nod
(
OAS
, 
l
, 
n
);

2008 
	`ty≥check
(&
a
, 
Et›
);

2009 
	`wÆkex¥
(&
a
, 
öô
);

2010 *
öô
 = 
	`li°
(*öô, 
a
);

2011  
l
;

2012 
	}
}

2018 
Node
*

2019 
	$chó≥x¥
(
Node
 *
n
, 
NodeLi°
 **
öô
)

2021 
n
->
›
) {

2022 
ONAME
:

2023 
OLITERAL
:

2024  
n
;

2027  
	`c›yex¥
(
n
,Ç->
ty≥
, 
öô
);

2028 
	}
}

2033 
Node
*

2034 
	$loˇÀx¥
(
Node
 *
n
, 
Ty≥
 *
t
, 
NodeLi°
 **
öô
)

2036 if(
n
->
›
 =
ONAME
 &&

2037 (
n
->
˛ass
 =
PAUTO
 ||Ç->˛as†=
PPARAM
 ||Ç->˛as†=
PPARAMOUT
) &&

2038 
	`c⁄vît›
(
n
->
ty≥
, 
t
, 
nû
Ë=
OCONVNOP
)

2039  
n
;

2041  
	`c›yex¥
(
n
, 
t
, 
öô
);

2042 
	}
}

2045 
	$£tmax¨g
(
Ty≥
 *
t
)

2047 
öt32
 
w
;

2049 
	`dowidth
(
t
);

2050 
w
 = 
t
->
¨gwid
;

2051 if(
t
->
¨gwid
 >
MAXWIDTH
)

2052 
	`Áèl
("badárgwid %T", 
t
);

2053 if(
w
 > 
max¨g
)

2054 
max¨g
 = 
w
;

2055 
	}
}

2062 
	$uci°rcmp
(*
p
, *
q
)

2064 
Ru√
 
Ω
, 
rq
;

2066 *
p
 || *
q
) {

2067 if(*
p
 == 0)

2069 if(*
q
 == 0)

2071 
p
 +
	`ch¨t‹u√
(&
Ω
,Ö);

2072 
q
 +
	`ch¨t‹u√
(&
rq
, q);

2073 
Ω
 = 
	`tﬁowîru√
(rp);

2074 
rq
 = 
	`tﬁowîru√
(rq);

2075 if(
Ω
 < 
rq
)

2077 if(
Ω
 > 
rq
)

2081 
	}
}

2092 
	$lookdŸ0
(
Sym
 *
s
, 
Ty≥
 *
t
, Ty≥ **
ßve
, 
ign‹eˇ£
)

2094 
Ty≥
 *
f
, *
u
;

2095 
c
;

2097 
u
 = 
t
;

2098 if(
i•å
[
u
->
ëy≥
])

2099 
u
 = u->
ty≥
;

2101 
c
 = 0;

2102 if(
u
->
ëy≥
 =
TSTRUCT
 || u->ëy≥ =
TINTER
) {

2103 
f
=
u
->
ty≥
; f!=
T
; f=f->
down
)

2104 if(
f
->
sym
 =
s
 || (
ign‹eˇ£
 && 
	`uci°rcmp
(f->sym->
«me
, s->name) == 0)) {

2105 if(
ßve
)

2106 *
ßve
 = 
f
;

2107 
c
++;

2110 
u
 = 
	`mëhty≥
(
t
, 0);

2111 if(
u
 !
T
) {

2112 
f
=
u
->
mëhod
; f!=
T
; f=f->
down
)

2113 if(
f
->
embedded
 =0 && (f->
sym
 =
s
 || (
ign‹eˇ£
 && 
	`uci°rcmp
(f->sym->
«me
, s->name) == 0))) {

2114 if(
ßve
)

2115 *
ßve
 = 
f
;

2116 
c
++;

2119  
c
;

2120 
	}
}

2128 
	$adddŸ1
(
Sym
 *
s
, 
Ty≥
 *
t
, 
d
, Ty≥ **
ßve
, 
ign‹eˇ£
)

2130 
Ty≥
 *
f
, *
u
;

2131 
c
, 
a
;

2133 if(
t
->
åecur
)

2135 
t
->
åecur
 = 1;

2137 if(
d
 == 0) {

2138 
c
 = 
	`lookdŸ0
(
s
, 
t
, 
ßve
, 
ign‹eˇ£
);

2139 
out
;

2142 
c
 = 0;

2143 
u
 = 
t
;

2144 if(
i•å
[
u
->
ëy≥
])

2145 
u
 = u->
ty≥
;

2146 if(
u
->
ëy≥
 !
TSTRUCT
 && u->ëy≥ !
TINTER
)

2147 
out
;

2149 
d
--;

2150 
f
=
u
->
ty≥
; f!=
T
; f=f->
down
) {

2151 if(!
f
->
embedded
)

2153 if(
f
->
sym
 =
S
)

2155 
a
 = 
	`adddŸ1
(
s
, 
f
->
ty≥
, 
d
, 
ßve
, 
ign‹eˇ£
);

2156 if(
a
 !0 && 
c
 == 0)

2157 
dŸli°
[
d
].
fõld
 = 
f
;

2158 
c
 +
a
;

2161 
out
:

2162 
t
->
åecur
 = 0;

2163  
c
;

2164 
	}
}

2170 
Node
*

2171 
	$adddŸ
(
Node
 *
n
)

2173 
Ty≥
 *
t
;

2174 
Sym
 *
s
;

2175 
c
, 
d
;

2177 
	`ty≥check
(&
n
->
À·
, 
Ety≥
|
Erv
);

2178 
t
 = 
n
->
À·
->
ty≥
;

2179 if(
t
 =
T
)

2180 
ªt
;

2182 if(
n
->
À·
->
›
 =
OTYPE
)

2183 
ªt
;

2185 if(
n
->
right
->
›
 !
ONAME
)

2186 
ªt
;

2187 
s
 = 
n
->
right
->
sym
;

2188 if(
s
 =
S
)

2189 
ªt
;

2191 
d
=0; d<
	`√Àm
(
dŸli°
); d++) {

2192 
c
 = 
	`adddŸ1
(
s
, 
t
, 
d
, 
nû
, 0);

2193 if(
c
 > 0)

2194 
out
;

2196 
ªt
;

2198 
out
:

2199 if(
c
 > 1) {

2200 
	`yyîr‹
("ambiguou†£À˘‹ %N", 
n
);

2201 
n
->
À·
 = 
N
;

2202  
n
;

2206 
c
=
d
-1; c>=0; c--)

2207 
n
->
À·
 = 
	`nod
(
ODOT
,Ç->À·, 
	`√w«me
(
dŸli°
[
c
].
fõld
->
sym
));

2208 
ªt
:

2209  
n
;

2210 
	}
}

2224 
Symlök
 
	tSymlök
;

2225 
	sSymlök


2227 
Ty≥
* 
	mfõld
;

2228 
uch¨
 
	mgood
;

2229 
uch¨
 
	mfﬁlow±r
;

2230 
Symlök
* 
	mlök
;

2232 
Symlök
* 
	g¶i°
;

2235 
	$ex∑nd0
(
Ty≥
 *
t
, 
fﬁlow±r
)

2237 
Ty≥
 *
f
, *
u
;

2238 
Symlök
 *
¶
;

2240 
u
 = 
t
;

2241 if(
i•å
[
u
->
ëy≥
]) {

2242 
fﬁlow±r
 = 1;

2243 
u
 = u->
ty≥
;

2246 if(
u
->
ëy≥
 =
TINTER
) {

2247 
f
=
u
->
ty≥
; f!=
T
; f=f->
down
) {

2248 if(
f
->
sym
->
Êags
 & 
SymUniq
)

2250 
f
->
sym
->
Êags
 |
SymUniq
;

2251 
¶
 = 
	`mÆ
((*sl));

2252 
¶
->
fõld
 = 
f
;

2253 
¶
->
lök
 = 
¶i°
;

2254 
¶
->
fﬁlow±r
 = followptr;

2255 
¶i°
 = 
¶
;

2260 
u
 = 
	`mëhty≥
(
t
, 0);

2261 if(
u
 !
T
) {

2262 
f
=
u
->
mëhod
; f!=
T
; f=f->
down
) {

2263 if(
f
->
sym
->
Êags
 & 
SymUniq
)

2265 
f
->
sym
->
Êags
 |
SymUniq
;

2266 
¶
 = 
	`mÆ
((*sl));

2267 
¶
->
fõld
 = 
f
;

2268 
¶
->
lök
 = 
¶i°
;

2269 
¶
->
fﬁlow±r
 = followptr;

2270 
¶i°
 = 
¶
;

2273 
	}
}

2276 
	$ex∑nd1
(
Ty≥
 *
t
, 
d
, 
fﬁlow±r
)

2278 
Ty≥
 *
f
, *
u
;

2280 if(
t
->
åecur
)

2282 if(
d
 == 0)

2284 
t
->
åecur
 = 1;

2286 if(
d
 !
	`√Àm
(
dŸli°
)-1)

2287 
	`ex∑nd0
(
t
, 
fﬁlow±r
);

2289 
u
 = 
t
;

2290 if(
i•å
[
u
->
ëy≥
]) {

2291 
fﬁlow±r
 = 1;

2292 
u
 = u->
ty≥
;

2294 if(
u
->
ëy≥
 !
TSTRUCT
 && u->ëy≥ !
TINTER
)

2295 
out
;

2297 
f
=
u
->
ty≥
; f!=
T
; f=f->
down
) {

2298 if(!
f
->
embedded
)

2300 if(
f
->
sym
 =
S
)

2302 
	`ex∑nd1
(
f
->
ty≥
, 
d
-1, 
fﬁlow±r
);

2305 
out
:

2306 
t
->
åecur
 = 0;

2307 
	}
}

2310 
	$ex∑ndmëh
(
Ty≥
 *
t
)

2312 
Symlök
 *
¶
;

2313 
Ty≥
 *
f
;

2314 
c
, 
d
;

2316 if(
t
 =
T
 ||Å->
xmëhod
 !
nû
)

2321 
f
=
t
->
mëhod
; f !
nû
; f=f->
down
)

2322 
f
->
sym
->
Êags
 |
SymUniq
;

2325 
¶i°
 = 
nû
;

2326 
	`ex∑nd1
(
t
, 
	`√Àm
(
dŸli°
)-1, 0);

2329 
¶
=
¶i°
; sl!=
nû
; sl=¶->
lök
) {

2330 
¶
->
fõld
->
sym
->
Êags
 &~
SymUniq
;

2331 
d
=0; d<
	`√Àm
(
dŸli°
); d++) {

2332 
c
 = 
	`adddŸ1
(
¶
->
fõld
->
sym
, 
t
, 
d
, &
f
, 0);

2333 if(
c
 == 0)

2335 if(
c
 == 1) {

2337 if(
f
->
ty≥
->
ëy≥
 =
TFUNC
 && f->ty≥->
thi°u∂e
 > 0) {

2338 
¶
->
good
 = 1;

2339 
¶
->
fõld
 = 
f
;

2346 
f
=
t
->
mëhod
; f !
nû
; f=f->
down
)

2347 
f
->
sym
->
Êags
 &~
SymUniq
;

2349 
t
->
xmëhod
 =Å->
mëhod
;

2350 
¶
=
¶i°
; sl!=
nû
; sl=¶->
lök
) {

2351 if(
¶
->
good
) {

2353 
f
 = 
	`typ
(
TFIELD
);

2354 *
f
 = *
¶
->
fõld
;

2355 
f
->
embedded
 = 1;

2356 if(
¶
->
fﬁlow±r
)

2357 
f
->
embedded
 = 2;

2358 
f
->
down
 = 
t
->
xmëhod
;

2359 
t
->
xmëhod
 = 
f
;

2362 
	}
}

2367 
NodeLi°
*

2368 
	$°ru˘¨gs
(
Ty≥
 **
é
, 
mu°«me
)

2370 
Iãr
 
ßvë
;

2371 
Node
 *
a
, *
n
;

2372 
NodeLi°
 *
¨gs
;

2373 
Ty≥
 *
t
;

2374 
buf
[100];

2375 
gí
;

2377 
¨gs
 = 
nû
;

2378 
gí
 = 0;

2379 
t
 = 
	`°ru˘fú°
(&
ßvë
, 
é
);Å !
T
;Å = 
	`°ru˘√xt
(&savet)) {

2380 
n
 = 
N
;

2381 if(
mu°«me
 && (
t
->
sym
 =
nû
 || 
	`°rcmp
—->sym->
«me
, "_") == 0)) {

2383 
	`¢¥öt
(
buf
,  buf, ".™⁄%d", 
gí
++);

2384 
n
 = 
	`√w«me
(
	`lookup
(
buf
));

2385 } if(
t
->
sym
)

2386 
n
 = 
	`√w«me
(
t
->
sym
);

2387 
a
 = 
	`nod
(
ODCLFIELD
, 
n
, 
	`ty≥nod
(
t
->
ty≥
));

2388 
a
->
isddd
 = 
t
->isddd;

2389 if(
n
 !
N
)

2390 
n
->
isddd
 = 
t
->isddd;

2391 
¨gs
 = 
	`li°
◊rgs, 
a
);

2393  
¨gs
;

2394 
	}
}

2420 
	$gíwøµî
(
Ty≥
 *
rcvr
, Ty≥ *
mëhod
, 
Sym
 *
√w«m
, 
iÁ˚
)

2422 
Node
 *
this
, *
‚
, *
ˇŒ
, *
n
, *
t
, *
∑d
;

2423 
NodeLi°
 *
l
, *
¨gs
, *
ö
, *
out
;

2424 
Ty≥
 *
çad
;

2425 
isddd
;

2426 
VÆ
 
v
;

2428 if(
debug
['r'])

2429 
	`¥öt
("genwrapperÑcvrtype=%T method=%TÇewnam=%S\n",

2430 
rcvr
, 
mëhod
, 
√w«m
);

2432 
löío
 = 1;

2434 
d˛c⁄ãxt
 = 
PEXTERN
;

2435 
	`m¨kd˛
();

2437 
this
 = 
	`nod
(
ODCLFIELD
, 
	`√w«me
(
	`lookup
(".this")), 
	`ty≥nod
(
rcvr
));

2438 
this
->
À·
->
¡y≥
 =Åhis->
right
;

2439 
ö
 = 
	`°ru˘¨gs
(
	`gëö¨g
(
mëhod
->
ty≥
), 1);

2440 
out
 = 
	`°ru˘¨gs
(
	`gëouèrg
(
mëhod
->
ty≥
), 0);

2442 
t
 = 
	`nod
(
OTFUNC
, 
N
, N);

2443 
l
 = 
	`li°1
(
this
);

2444 if(
iÁ˚
 && 
rcvr
->
width
 < 
ty≥s
[
çå
]->width) {

2450 
çad
 = 
	`typ
(
TARRAY
);

2451 
çad
->
ty≥
 = 
ty≥s
[
TUINT8
];

2452 
çad
->
bound
 = 
ty≥s
[
çå
]->
width
 - 
rcvr
->width;

2453 
∑d
 = 
	`nod
(
ODCLFIELD
, 
	`√w«me
(
	`lookup
(".∑d")), 
	`ty≥nod
(
çad
));

2454 
l
 = 
	`li°
÷, 
∑d
);

2456 
t
->
li°
 = 
	`c⁄ˇt
(
l
, 
ö
);

2457 
t
->
æi°
 = 
out
;

2459 
‚
 = 
	`nod
(
ODCLFUNC
, 
N
, N);

2460 
‚
->
¬ame
 = 
	`√w«me
(
√w«m
);

2461 
‚
->
¬ame
->
de‚
 = fn;

2462 
‚
->
¬ame
->
¡y≥
 = 
t
;

2463 
	`de˛¨e
(
‚
->
¬ame
, 
PFUNC
);

2464 
	`funchdr
(
‚
);

2467 
¨gs
 = 
nû
;

2468 
isddd
 = 0;

2469 
l
=
ö
;Ü;Üˆ->
√xt
) {

2470 
¨gs
 = 
	`li°
◊rgs, 
l
->
n
->
À·
);

2471 
isddd
 = 
l
->
n
->
À·
->isddd;

2475 if(
i•å
[
rcvr
->
ëy≥
] &&Ñcvr->
ty≥
 =
	`gëthisx
(
mëhod
->type)->type->type) {

2477 
n
 = 
	`nod
(
OIF
, 
N
, N);

2478 
n
->
¡e°
 = 
	`nod
(
OEQ
, 
this
->
À·
, 
	`nodnû
());

2481 
l
 = 
nû
;

2482 
v
.
˘y≥
 = 
CTSTR
;

2483 
v
.
u
.
svÆ
 = 
	`°æô
(
rcvr
->
ty≥
->
sym
->
pkg
->
«me
);

2484 
l
 = 
	`li°
÷, 
	`nodlô
(
v
));

2485 
v
.
u
.
svÆ
 = 
	`°æô
(
rcvr
->
ty≥
->
sym
->
«me
);

2486 
l
 = 
	`li°
÷, 
	`nodlô
(
v
));

2487 
v
.
u
.
svÆ
 = 
	`°æô
(
mëhod
->
sym
->
«me
);

2488 
l
 = 
	`li°
÷, 
	`nodlô
(
v
));

2489 
ˇŒ
 = 
	`nod
(
OCALL
, 
	`sy¶ook
("∑nicwøp", 0), 
N
);

2490 
ˇŒ
->
li°
 = 
l
;

2491 
n
->
nbody
 = 
	`li°1
(
ˇŒ
);

2492 
‚
->
nbody
 = 
	`li°
(‚->nbody, 
n
);

2496 
ˇŒ
 = 
	`nod
(
OCALL
, 
	`adddŸ
“od(
OXDOT
, 
this
->
À·
, 
	`√w«me
(
mëhod
->
sym
))), 
N
);

2497 
ˇŒ
->
li°
 = 
¨gs
;

2498 
ˇŒ
->
isddd
 = isddd;

2499 if(
mëhod
->
ty≥
->
ouâu∂e
 > 0) {

2500 
n
 = 
	`nod
(
ORETURN
, 
N
, N);

2501 
n
->
li°
 = 
	`li°1
(
ˇŒ
);

2502 
ˇŒ
 = 
n
;

2504 
‚
->
nbody
 = 
	`li°
(‚->nbody, 
ˇŒ
);

2506 if(0 && 
debug
['r'])

2507 
	`dum∂i°
("gíwøµî body", 
‚
->
nbody
);

2509 
	`funcbody
(
‚
);

2510 
cur‚
 = 
‚
;

2511 
	`ty≥check
(&
‚
, 
Et›
);

2512 
	`ty≥checkli°
(
‚
->
nbody
, 
Et›
);

2513 
cur‚
 = 
nû
;

2514 
	`funccompûe
(
‚
, 0);

2515 
	}
}

2517 
Node
*

2518 
	$hashmem
(
Ty≥
 *
t
)

2520 
Node
 *
t‚
, *
n
;

2521 
Sym
 *
sym
;

2523 
sym
 = 
	`pkglookup
("memhash", 
ru¡imïkg
);

2525 
n
 = 
	`√w«me
(
sym
);

2526 
n
->
˛ass
 = 
PFUNC
;

2527 
t‚
 = 
	`nod
(
OTFUNC
, 
N
, N);

2528 
t‚
->
li°
 = 
	`li°
—‚->li°, 
	`nod
(
ODCLFIELD
, 
N
, 
	`ty≥nod
(
	`±πo
(
ty≥s
[
TUINTPTR
]))));

2529 
t‚
->
li°
 = 
	`li°
—‚->li°, 
	`nod
(
ODCLFIELD
, 
N
, 
	`ty≥nod
(
ty≥s
[
TUINTPTR
])));

2530 
t‚
->
li°
 = 
	`li°
—‚->li°, 
	`nod
(
ODCLFIELD
, 
N
, 
	`ty≥nod
(
	`±πo
(
t
))));

2531 
	`ty≥check
(&
t‚
, 
Ety≥
);

2532 
n
->
ty≥
 = 
t‚
->type;

2533  
n
;

2534 
	}
}

2536 
Node
*

2537 
	$hashf‹
(
Ty≥
 *
t
)

2539 
a
;

2540 
Sym
 *
sym
;

2541 
Node
 *
t‚
, *
n
;

2543 
a
 = 
	`Ægty≥1
(
t
, 
nû
);

2544 
a
) {

2545 
AMEM
:

2546  
	`hashmem
(
t
);

2547 
AINTER
:

2548 
sym
 = 
	`pkglookup
("öãrhash", 
ru¡imïkg
);

2550 
ANILINTER
:

2551 
sym
 = 
	`pkglookup
("nûöãrhash", 
ru¡imïkg
);

2553 
ASTRING
:

2554 
sym
 = 
	`pkglookup
("°rhash", 
ru¡imïkg
);

2556 
AFLOAT32
:

2557 
sym
 = 
	`pkglookup
("f32hash", 
ru¡imïkg
);

2559 
AFLOAT64
:

2560 
sym
 = 
	`pkglookup
("f64hash", 
ru¡imïkg
);

2562 
ACPLX64
:

2563 
sym
 = 
	`pkglookup
("c64hash", 
ru¡imïkg
);

2565 
ACPLX128
:

2566 
sym
 = 
	`pkglookup
("c128hash", 
ru¡imïkg
);

2569 
sym
 = 
	`ty≥sym¥efix
(".hash", 
t
);

2573 
n
 = 
	`√w«me
(
sym
);

2574 
n
->
˛ass
 = 
PFUNC
;

2575 
t‚
 = 
	`nod
(
OTFUNC
, 
N
, N);

2576 
t‚
->
li°
 = 
	`li°
—‚->li°, 
	`nod
(
ODCLFIELD
, 
N
, 
	`ty≥nod
(
	`±πo
(
ty≥s
[
TUINTPTR
]))));

2577 
t‚
->
li°
 = 
	`li°
—‚->li°, 
	`nod
(
ODCLFIELD
, 
N
, 
	`ty≥nod
(
ty≥s
[
TUINTPTR
])));

2578 
t‚
->
li°
 = 
	`li°
—‚->li°, 
	`nod
(
ODCLFIELD
, 
N
, 
	`ty≥nod
(
	`±πo
(
t
))));

2579 
	`ty≥check
(&
t‚
, 
Ety≥
);

2580 
n
->
ty≥
 = 
t‚
->type;

2581  
n
;

2582 
	}
}

2588 
	$gíhash
(
Sym
 *
sym
, 
Ty≥
 *
t
)

2590 
Node
 *
n
, *
‚
, *
≈
, *
nh
, *
ni
, *
ˇŒ
, *
nx
, *
«
, *
t‚
;

2591 
Node
 *
hashñ
;

2592 
Ty≥
 *
fú°
, *
t1
;

2593 
ﬁd_ß„mode
;

2594 
öt64
 
size
, 
mul
;

2596 if(
debug
['r'])

2597 
	`¥öt
("gíhash %S %T\n", 
sym
, 
t
);

2599 
löío
 = 1;

2600 
d˛c⁄ãxt
 = 
PEXTERN
;

2601 
	`m¨kd˛
();

2604 
‚
 = 
	`nod
(
ODCLFUNC
, 
N
, N);

2605 
‚
->
¬ame
 = 
	`√w«me
(
sym
);

2606 
‚
->
¬ame
->
˛ass
 = 
PFUNC
;

2607 
t‚
 = 
	`nod
(
OTFUNC
, 
N
, N);

2608 
‚
->
¬ame
->
¡y≥
 = 
t‚
;

2610 
n
 = 
	`nod
(
ODCLFIELD
, 
	`√w«me
(
	`lookup
("h")), 
	`ty≥nod
(
	`±πo
(
ty≥s
[
TUINTPTR
])));

2611 
t‚
->
li°
 = 
	`li°
—‚->li°, 
n
);

2612 
nh
 = 
n
->
À·
;

2613 
n
 = 
	`nod
(
ODCLFIELD
, 
	`√w«me
(
	`lookup
("s")), 
	`ty≥nod
(
ty≥s
[
TUINTPTR
]));

2614 
t‚
->
li°
 = 
	`li°
—‚->li°, 
n
);

2615 
n
 = 
	`nod
(
ODCLFIELD
, 
	`√w«me
(
	`lookup
("p")), 
	`ty≥nod
(
	`±πo
(
t
)));

2616 
t‚
->
li°
 = 
	`li°
—‚->li°, 
n
);

2617 
≈
 = 
n
->
À·
;

2619 
	`funchdr
(
‚
);

2620 
	`ty≥check
(&
‚
->
¬ame
->
¡y≥
, 
Ety≥
);

2625 
t
->
ëy≥
) {

2627 
	`Áèl
("gíhash %T", 
t
);

2628 
TARRAY
:

2629 if(
	`is¶i˚
(
t
))

2630 
	`Áèl
("gíhash %T", 
t
);

2634 
hashñ
 = 
	`hashf‹
(
t
->
ty≥
);

2635 
n
 = 
	`nod
(
ORANGE
, 
N
,Çod(
OIND
, 
≈
, N));

2636 
ni
 = 
	`√w«me
(
	`lookup
("i"));

2637 
ni
->
ty≥
 = 
ty≥s
[
TINT
];

2638 
n
->
li°
 = 
	`li°1
(
ni
);

2639 
n
->
cﬁas
 = 1;

2640 
	`cﬁasde‚
(
n
->
li°
,Ç);

2641 
ni
 = 
n
->
li°
->n;

2644 
n
->
nbody
 = 
	`li°
(n->nbody,

2645 
	`nod
(
OAS
,

2646 
	`nod
(
OIND
, 
nh
, 
N
),

2647 
	`nod
(
OOR
,

2648 
	`nod
(
OLSH
,Çod(
OIND
, 
nh
, 
N
), 
	`nodötc⁄°
(3)),

2649 
	`nod
(
ORSH
,Çod(
OIND
, 
nh
, 
N
), 
	`nodötc⁄°
(
width±r
*8-3)))));

2653 if(
width±r
 == 4)

2654 
mul
 = 3267000013LL;

2656 
mul
 = 23344194077549503LL;

2657 
n
->
nbody
 = 
	`li°
(n->nbody,

2658 
	`nod
(
OAS
,

2659 
	`nod
(
OIND
, 
nh
, 
N
),

2660 
	`nod
(
OMUL
,Çod(
OIND
, 
nh
, 
N
), 
	`nodötc⁄°
(
mul
))));

2663 
ˇŒ
 = 
	`nod
(
OCALL
, 
hashñ
, 
N
);

2664 
ˇŒ
->
li°
 = 
	`li°
(ˇŒ->li°, 
nh
);

2665 
ˇŒ
->
li°
 = 
	`li°
(ˇŒ->li°, 
	`nodötc⁄°
(
t
->
ty≥
->
width
));

2666 
nx
 = 
	`nod
(
OINDEX
, 
≈
, 
ni
);

2667 
nx
->
ëy≥
 = 1;

2668 
«
 = 
	`nod
(
OADDR
, 
nx
, 
N
);

2669 
«
->
ëy≥
 = 1;

2670 
ˇŒ
->
li°
 = 
	`li°
(ˇŒ->li°, 
«
);

2671 
n
->
nbody
 = 
	`li°
“->nbody, 
ˇŒ
);

2673 
‚
->
nbody
 = 
	`li°
(‚->nbody, 
n
);

2676 
TSTRUCT
:

2679 
fú°
 = 
T
;

2680 
t1
=
t
->
ty≥
;;Å1Ò1->
down
) {

2681 if(
t1
 !
T
 && (
	`isbœnksym
—1->
sym
Ë|| 
	`Ægty≥1
—1->
ty≥
, 
nû
Ë=
AMEM
)) {

2682 if(
fú°
 =
T
 && !
	`isbœnksym
(
t1
->
sym
))

2683 
fú°
 = 
t1
;

2687 
fú°
 !
T
 && 
	`isbœnksym
(fú°->
sym
))

2688 
fú°
 = fú°->
down
;

2689 if(
fú°
 !
T
) {

2690 if(
fú°
->
down
 =
t1
)

2691 
size
 = 
fú°
->
ty≥
->
width
;

2692 if(
t1
 =
T
)

2693 
size
 = 
t
->
width
 - 
fú°
->width;

2695 
size
 = 
t1
->
width
 - 
fú°
->width;

2696 
hashñ
 = 
	`hashmem
(
fú°
->
ty≥
);

2698 
ˇŒ
 = 
	`nod
(
OCALL
, 
hashñ
, 
N
);

2699 
ˇŒ
->
li°
 = 
	`li°
(ˇŒ->li°, 
nh
);

2700 
ˇŒ
->
li°
 = 
	`li°
(ˇŒ->li°, 
	`nodötc⁄°
(
size
));

2701 
nx
 = 
	`nod
(
OXDOT
, 
≈
, 
	`√w«me
(
fú°
->
sym
));

2702 
«
 = 
	`nod
(
OADDR
, 
nx
, 
N
);

2703 
«
->
ëy≥
 = 1;

2704 
ˇŒ
->
li°
 = 
	`li°
(ˇŒ->li°, 
«
);

2705 
‚
->
nbody
 = 
	`li°
(‚->nbody, 
ˇŒ
);

2707 
fú°
 = 
T
;

2709 if(
t1
 =
T
)

2713 
hashñ
 = 
	`hashf‹
(
t1
->
ty≥
);

2715 
ˇŒ
 = 
	`nod
(
OCALL
, 
hashñ
, 
N
);

2716 
ˇŒ
->
li°
 = 
	`li°
(ˇŒ->li°, 
nh
);

2717 
ˇŒ
->
li°
 = 
	`li°
(ˇŒ->li°, 
	`nodötc⁄°
(
t1
->
ty≥
->
width
));

2718 
nx
 = 
	`nod
(
OXDOT
, 
≈
, 
	`√w«me
(
t1
->
sym
));

2719 
«
 = 
	`nod
(
OADDR
, 
nx
, 
N
);

2720 
«
->
ëy≥
 = 1;

2721 
ˇŒ
->
li°
 = 
	`li°
(ˇŒ->li°, 
«
);

2722 
‚
->
nbody
 = 
	`li°
(‚->nbody, 
ˇŒ
);

2727 if(
debug
['r'])

2728 
	`dum∂i°
("gíhash body", 
‚
->
nbody
);

2730 
	`funcbody
(
‚
);

2731 
cur‚
 = 
‚
;

2732 
‚
->
dupok
 = 1;

2733 
	`ty≥check
(&
‚
, 
Et›
);

2734 
	`ty≥checkli°
(
‚
->
nbody
, 
Et›
);

2735 
cur‚
 = 
nû
;

2742 
ﬁd_ß„mode
 = 
ß„mode
;

2743 
ß„mode
 = 0;

2744 
	`funccompûe
(
‚
, 0);

2745 
ß„mode
 = 
ﬁd_ß„mode
;

2746 
	}
}

2750 
Node
*

2751 
	$eqfõld
(
Node
 *
p
, Nodê*
q
, Nodê*
fõld
, Nodê*
eq
)

2753 
Node
 *
nif
, *
nx
, *
ny
;

2755 
nx
 = 
	`nod
(
OXDOT
, 
p
, 
fõld
);

2756 
ny
 = 
	`nod
(
OXDOT
, 
q
, 
fõld
);

2757 
nif
 = 
	`nod
(
OIF
, 
N
, N);

2758 
nif
->
¡e°
 = 
	`nod
(
ONE
, 
nx
, 
ny
);

2759 
nif
->
nbody
 = 
	`li°
“if->nbody, 
	`nod
(
OAS
,Çod(
OIND
, 
eq
, 
N
), 
	`nodboﬁ
(0)));

2760 
nif
->
nbody
 = 
	`li°
“if->nbody, 
	`nod
(
ORETURN
, 
N
, N));

2761  
nif
;

2762 
	}
}

2764 
Node
*

2765 
	$eqmemfunc
(
vl⁄g
 
size
, 
Ty≥
 *
ty≥
)

2767 
buf
[30];

2768 
Node
 *
‚
;

2770 
size
) {

2772 
‚
 = 
	`sy¶ook
("memequal", 1);

2779 
	`¢¥öt
(
buf
,  buf, "memequÆ%d", ()
size
*8);

2780 
‚
 = 
	`sy¶ook
(
buf
, 1);

2783 
	`¨gty≥
(
‚
, 
ty≥
);

2784 
	`¨gty≥
(
‚
, 
ty≥
);

2785  
‚
;

2786 
	}
}

2790 
Node
*

2791 
	$eqmem
(
Node
 *
p
, Nodê*
q
, Nodê*
fõld
, 
vl⁄g
 
size
, Nodê*
eq
)

2793 
Node
 *
nif
, *
nx
, *
ny
, *
ˇŒ
;

2795 
nx
 = 
	`nod
(
OADDR
,Çod(
OXDOT
, 
p
, 
fõld
), 
N
);

2796 
nx
->
ëy≥
 = 1;

2797 
ny
 = 
	`nod
(
OADDR
,Çod(
OXDOT
, 
q
, 
fõld
), 
N
);

2798 
ny
->
ëy≥
 = 1;

2799 
	`ty≥check
(&
nx
, 
Erv
);

2800 
	`ty≥check
(&
ny
, 
Erv
);

2802 
ˇŒ
 = 
	`nod
(
OCALL
, 
	`eqmemfunc
(
size
, 
nx
->
ty≥
->ty≥), 
N
);

2803 
ˇŒ
->
li°
 = 
	`li°
(ˇŒ->li°, 
eq
);

2804 
ˇŒ
->
li°
 = 
	`li°
(ˇŒ->li°, 
	`nodötc⁄°
(
size
));

2805 
ˇŒ
->
li°
 = 
	`li°
(ˇŒ->li°, 
nx
);

2806 
ˇŒ
->
li°
 = 
	`li°
(ˇŒ->li°, 
ny
);

2808 
nif
 = 
	`nod
(
OIF
, 
N
, N);

2809 
nif
->
nöô
 = 
	`li°
“if->nöô, 
ˇŒ
);

2810 
nif
->
¡e°
 = 
	`nod
(
ONOT
,Çod(
OIND
, 
eq
, 
N
), N);

2811 
nif
->
nbody
 = 
	`li°
“if->nbody, 
	`nod
(
ORETURN
, 
N
, N));

2812  
nif
;

2813 
	}
}

2819 
	$gíeq
(
Sym
 *
sym
, 
Ty≥
 *
t
)

2821 
Node
 *
n
, *
‚
, *
≈
, *
√q
, *
nq
, *
t‚
, *
nif
, *
ni
, *
nx
, *
ny
, *
ƒ™ge
;

2822 
Ty≥
 *
t1
, *
fú°
;

2823 
ﬁd_ß„mode
;

2824 
öt64
 
size
;

2826 if(
debug
['r'])

2827 
	`¥öt
("gíeq %S %T\n", 
sym
, 
t
);

2829 
löío
 = 1;

2830 
d˛c⁄ãxt
 = 
PEXTERN
;

2831 
	`m¨kd˛
();

2834 
‚
 = 
	`nod
(
ODCLFUNC
, 
N
, N);

2835 
‚
->
¬ame
 = 
	`√w«me
(
sym
);

2836 
‚
->
¬ame
->
˛ass
 = 
PFUNC
;

2837 
t‚
 = 
	`nod
(
OTFUNC
, 
N
, N);

2838 
‚
->
¬ame
->
¡y≥
 = 
t‚
;

2840 
n
 = 
	`nod
(
ODCLFIELD
, 
	`√w«me
(
	`lookup
("eq")), 
	`ty≥nod
(
	`±πo
(
ty≥s
[
TBOOL
])));

2841 
t‚
->
li°
 = 
	`li°
—‚->li°, 
n
);

2842 
√q
 = 
n
->
À·
;

2843 
n
 = 
	`nod
(
ODCLFIELD
, 
	`√w«me
(
	`lookup
("s")), 
	`ty≥nod
(
ty≥s
[
TUINTPTR
]));

2844 
t‚
->
li°
 = 
	`li°
—‚->li°, 
n
);

2845 
n
 = 
	`nod
(
ODCLFIELD
, 
	`√w«me
(
	`lookup
("p")), 
	`ty≥nod
(
	`±πo
(
t
)));

2846 
t‚
->
li°
 = 
	`li°
—‚->li°, 
n
);

2847 
≈
 = 
n
->
À·
;

2848 
n
 = 
	`nod
(
ODCLFIELD
, 
	`√w«me
(
	`lookup
("q")), 
	`ty≥nod
(
	`±πo
(
t
)));

2849 
t‚
->
li°
 = 
	`li°
—‚->li°, 
n
);

2850 
nq
 = 
n
->
À·
;

2852 
	`funchdr
(
‚
);

2857 
t
->
ëy≥
) {

2859 
	`Áèl
("gíeq %T", 
t
);

2860 
TARRAY
:

2861 if(
	`is¶i˚
(
t
))

2862 
	`Áèl
("gíeq %T", 
t
);

2868 
ƒ™ge
 = 
	`nod
(
ORANGE
, 
N
,Çod(
OIND
, 
≈
, N));

2869 
ni
 = 
	`√w«me
(
	`lookup
("i"));

2870 
ni
->
ty≥
 = 
ty≥s
[
TINT
];

2871 
ƒ™ge
->
li°
 = 
	`li°1
(
ni
);

2872 
ƒ™ge
->
cﬁas
 = 1;

2873 
	`cﬁasde‚
(
ƒ™ge
->
li°
,Çrange);

2874 
ni
 = 
ƒ™ge
->
li°
->
n
;

2877 
nx
 = 
	`nod
(
OINDEX
, 
≈
, 
ni
);

2878 
nx
->
ëy≥
 = 1;

2879 
ny
 = 
	`nod
(
OINDEX
, 
nq
, 
ni
);

2880 
ny
->
ëy≥
 = 1;

2882 
nif
 = 
	`nod
(
OIF
, 
N
, N);

2883 
nif
->
¡e°
 = 
	`nod
(
ONE
, 
nx
, 
ny
);

2884 
nif
->
nbody
 = 
	`li°
“if->nbody, 
	`nod
(
OAS
,Çod(
OIND
, 
√q
, 
N
), 
	`nodboﬁ
(0)));

2885 
nif
->
nbody
 = 
	`li°
“if->nbody, 
	`nod
(
ORETURN
, 
N
, N));

2886 
ƒ™ge
->
nbody
 = 
	`li°
“ønge->nbody, 
nif
);

2887 
‚
->
nbody
 = 
	`li°
(‚->nbody, 
ƒ™ge
);

2890 
‚
->
nbody
 = 
	`li°
(‚->nbody, 
	`nod
(
OAS
,Çod(
OIND
, 
√q
, 
N
), 
	`nodboﬁ
(1)));

2893 
TSTRUCT
:

2896 
fú°
 = 
T
;

2897 
t1
=
t
->
ty≥
;;Å1Ò1->
down
) {

2898 if(
t1
 !
T
 && (
	`isbœnksym
—1->
sym
Ë|| 
	`Ægty≥1
—1->
ty≥
, 
nû
Ë=
AMEM
)) {

2899 if(
fú°
 =
T
 && !
	`isbœnksym
(
t1
->
sym
))

2900 
fú°
 = 
t1
;

2906 
fú°
 !
T
 && 
	`isbœnksym
(fú°->
sym
))

2907 
fú°
 = fú°->
down
;

2908 if(
fú°
 !
T
) {

2909 if(
fú°
->
down
 =
t1
) {

2910 
‚
->
nbody
 = 
	`li°
(‚->nbody, 
	`eqfõld
(
≈
, 
nq
, 
	`√w«me
(
fú°
->
sym
), 
√q
));

2911 } if(
fú°
->
down
->dow¿=
t1
) {

2912 
‚
->
nbody
 = 
	`li°
(‚->nbody, 
	`eqfõld
(
≈
, 
nq
, 
	`√w«me
(
fú°
->
sym
), 
√q
));

2913 
fú°
 = fú°->
down
;

2914 if(!
	`isbœnksym
(
fú°
->
sym
))

2915 
‚
->
nbody
 = 
	`li°
(‚->nbody, 
	`eqfõld
(
≈
, 
nq
, 
	`√w«me
(
fú°
->
sym
), 
√q
));

2918 if(
t1
 =
T
)

2919 
size
 = 
t
->
width
 - 
fú°
->width;

2921 
size
 = 
t1
->
width
 - 
fú°
->width;

2922 
‚
->
nbody
 = 
	`li°
(‚->nbody, 
	`eqmem
(
≈
, 
nq
, 
	`√w«me
(
fú°
->
sym
), 
size
, 
√q
));

2924 
fú°
 = 
T
;

2926 if(
t1
 =
T
)

2930 
‚
->
nbody
 = 
	`li°
(‚->nbody, 
	`eqfõld
(
≈
, 
nq
, 
	`√w«me
(
t1
->
sym
), 
√q
));

2934 
‚
->
nbody
 = 
	`li°
(‚->nbody, 
	`nod
(
OAS
,Çod(
OIND
, 
√q
, 
N
), 
	`nodboﬁ
(1)));

2938 if(
debug
['r'])

2939 
	`dum∂i°
("gíeq body", 
‚
->
nbody
);

2941 
	`funcbody
(
‚
);

2942 
cur‚
 = 
‚
;

2943 
‚
->
dupok
 = 1;

2944 
	`ty≥check
(&
‚
, 
Et›
);

2945 
	`ty≥checkli°
(
‚
->
nbody
, 
Et›
);

2946 
cur‚
 = 
nû
;

2953 
ﬁd_ß„mode
 = 
ß„mode
;

2954 
ß„mode
 = 0;

2955 
	`funccompûe
(
‚
, 0);

2956 
ß„mode
 = 
ﬁd_ß„mode
;

2957 
	}
}

2959 
Ty≥
*

2960 
	$iÁ˚lookdŸ
(
Sym
 *
s
, 
Ty≥
 *
t
, *
fﬁlow±r
, 
ign‹eˇ£
)

2962 
i
, 
c
, 
d
;

2963 
Ty≥
 *
m
;

2965 *
fﬁlow±r
 = 0;

2967 if(
t
 =
T
)

2968  
T
;

2970 
d
=0; d<
	`√Àm
(
dŸli°
); d++) {

2971 
c
 = 
	`adddŸ1
(
s
, 
t
, 
d
, &
m
, 
ign‹eˇ£
);

2972 if(
c
 > 1) {

2973 
	`yyîr‹
("%T.%S i†ambiguous", 
t
, 
s
);

2974  
T
;

2976 if(
c
 == 1) {

2977 
i
=0; i<
d
; i++) {

2978 if(
i•å
[
dŸli°
[
i
].
fõld
->
ty≥
->
ëy≥
]) {

2979 *
fﬁlow±r
 = 1;

2983 if(
m
->
ty≥
->
ëy≥
 !
TFUNC
 || m->ty≥->
thi°u∂e
 == 0) {

2984 
	`yyîr‹
("%T.%S i†®fõld,ÇŸá mëhod", 
t
, 
s
);

2985  
T
;

2987  
m
;

2990  
T
;

2991 
	}
}

2994 
	$im∂emíts
(
Ty≥
 *
t
, Ty≥ *
iÁ˚
, Ty≥ **
m
, Ty≥ **
ßmíame
, *
±r
)

2996 
Ty≥
 *
t0
, *
im
, *
tm
, *
rcvr
, *
imty≥
;

2997 
fﬁlow±r
;

2999 
t0
 = 
t
;

3000 if(
t
 =
T
)

3007 if(
t
->
ëy≥
 =
TINTER
) {

3008 
im
=
iÁ˚
->
ty≥
; im; im=im->
down
) {

3009 
tm
=
t
->
ty≥
;Åm;ÅmÒm->
down
) {

3010 if(
tm
->
sym
 =
im
->sym) {

3011 if(
	`eqty≥
(
tm
->
ty≥
, 
im
->type))

3012 
found
;

3013 *
m
 = 
im
;

3014 *
ßmíame
 = 
tm
;

3015 *
±r
 = 0;

3019 *
m
 = 
im
;

3020 *
ßmíame
 = 
nû
;

3021 *
±r
 = 0;

3023 
found
:;

3028 
t
 = 
	`mëhty≥
(t, 0);

3029 if(
t
 !
T
)

3030 
	`ex∑ndmëh
(
t
);

3031 
im
=
iÁ˚
->
ty≥
; im; im=im->
down
) {

3032 
imty≥
 = 
	`mëhodfunc
(
im
->
ty≥
, 0);

3033 
tm
 = 
	`iÁ˚lookdŸ
(
im
->
sym
, 
t
, &
fﬁlow±r
, 0);

3034 if(
tm
 =
T
 || !
	`eqty≥
(
	`mëhodfunc
—m->
ty≥
, 0), 
imty≥
)) {

3035 if(
tm
 =
T
)

3036 
tm
 = 
	`iÁ˚lookdŸ
(
im
->
sym
, 
t
, &
fﬁlow±r
, 1);

3037 *
m
 = 
im
;

3038 *
ßmíame
 = 
tm
;

3039 *
±r
 = 0;

3044 
rcvr
 = 
	`gëthisx
(
tm
->
ty≥
)->type->type;

3045 if(
i•å
[
rcvr
->
ëy≥
] && !i•å[
t0
->ëy≥] && !
fﬁlow±r
 && !
	`isiÁ˚mëhod
(
tm
->
ty≥
)) {

3046 if(0 && 
debug
['r'])

3047 
	`yyîr‹
("interfaceÖointer mismatch");

3049 *
m
 = 
im
;

3050 *
ßmíame
 = 
nû
;

3051 *
±r
 = 1;

3056 
	}
}

3064 
	$simsimty≥
(
Ty≥
 *
t
)

3066 
ë
;

3068 if(
t
 == 0)

3071 
ë
 = 
simty≥
[
t
->
ëy≥
];

3072 
ë
) {

3073 
TPTR32
:

3074 
ë
 = 
TUINT32
;

3076 
TPTR64
:

3077 
ë
 = 
TUINT64
;

3079 
TBOOL
:

3080 
ë
 = 
TUINT8
;

3083  
ë
;

3084 
	}
}

3086 
NodeLi°
*

3087 
	$c⁄ˇt
(
NodeLi°
 *
a
, NodeLi° *
b
)

3089 if(
a
 =
nû
)

3090  
b
;

3091 if(
b
 =
nû
)

3092  
a
;

3094 
a
->
íd
->
√xt
 = 
b
;

3095 
a
->
íd
 = 
b
->end;

3096 
b
->
íd
 = 
nû
;

3097  
a
;

3098 
	}
}

3100 
NodeLi°
*

3101 
	$li°1
(
Node
 *
n
)

3103 
NodeLi°
 *
l
;

3105 if(
n
 =
nû
)

3106  
nû
;

3107 if(
n
->
›
 =
OBLOCK
 &&Ç->
nöô
 =
nû
) {

3110 
l
 = 
n
->
li°
;

3111 
n
->
li°
 = (
NodeLi°
*)1;

3112  
l
;

3114 
l
 = 
	`mÆ
( *l);

3115 
l
->
n
 =Ç;

3116 
l
->
íd
 =Ü;

3117  
l
;

3118 
	}
}

3120 
NodeLi°
*

3121 
	$li°
(
NodeLi°
 *
l
, 
Node
 *
n
)

3123  
	`c⁄ˇt
(
l
, 
	`li°1
(
n
));

3124 
	}
}

3127 
li°s‹t
(
NodeLi°
** 
l
, (*
f
)(
Node
*, Node*))

3129 
NodeLi°
 *
l1
, *
l2
, *
À
;

3131 if(*
l
 =
nû
 || (*l)->
√xt
 ==Çil)

3134 
l1
 = *
l
;

3135 
l2
 = *
l
;

3137 
l2
 =Ü2->
√xt
;

3138 if(
l2
 =
nû
)

3140 
l2
 =Ü2->
√xt
;

3141 if(
l2
 =
nû
)

3143 
l1
 =Ü1->
√xt
;

3146 
l2
 = 
l1
->
√xt
;

3147 
l1
->
√xt
 = 
nû
;

3148 
l2
->
íd
 = (*
l
)->end;

3149 (*
l
)->
íd
 = 
l1
;

3151 
l1
 = *
l
;

3152 
	`li°s‹t
(&
l1
, 
f
);

3153 
	`li°s‹t
(&
l2
, 
f
);

3155 if((*
f
)(
l1
->
n
, 
l2
->n) < 0) {

3156 *
l
 = 
l1
;

3158 *
l
 = 
l2
;

3159 
l2
 = 
l1
;

3160 
l1
 = *
l
;

3165 (
l1
 !
nû
Ë&& (
l2
 !=Çil)) {

3166 (
l1
->
√xt
 !
nû
Ë&& (*
f
)÷1->√xt->
n
, 
l2
->n) < 0)

3167 
l1
 =Ü1->
√xt
;

3170 
À
 = 
l1
->
√xt
;

3171 if(
À
 !
nû
)

3172 
À
->
íd
 = (*
l
)->end;

3174 (*
l
)->
íd
 = 
l1
;

3175 *
l
 = 
	`c⁄ˇt
(*l, 
l2
);

3177 
l1
 = 
l2
;

3178 
l2
 = 
À
;

3181 *
l
 = 
	`c⁄ˇt
(*l, 
l2
);

3182 
	}
}

3184 
NodeLi°
*

3185 
	$li°åìc›y
(
NodeLi°
 *
l
)

3187 
NodeLi°
 *
out
;

3189 
out
 = 
nû
;

3190 ; 
l
;Üˆ->
√xt
)

3191 
out
 = 
	`li°
(out, 
	`åìc›y
(
l
->
n
));

3192  
out
;

3193 
	}
}

3195 
Node
*

3196 
	$li°°mt
(
NodeLi°
 *
l
)

3198 
Node
 *
n
;

3200 
n
 = 
	`nod
(
OBLOCK
, 
N
, N);

3201 
n
->
li°
 = 
l
;

3202 if(
l
)

3203 
n
->
löío
 = 
l
->n->lineno;

3204  
n
;

3205 
	}
}

3211 
	$cou¡
(
NodeLi°
 *
l
)

3213 
n
;

3215 
n
 = 0;

3216 ; 
l
;Üˆ->
√xt
)

3217 
n
++;

3218  
n
;

3219 
	}
}

3225 
	$°ru˘cou¡
(
Ty≥
 *
t
)

3227 
v
;

3228 
Iãr
 
s
;

3230 
v
 = 0;

3231 
t
 = 
	`°ru˘fú°
(&
s
, &t);Å !
T
;Å = 
	`°ru˘√xt
(&s))

3232 
v
++;

3233  
v
;

3234 
	}
}

3242 
	$powtwo
(
Node
 *
n
)

3244 
uvl⁄g
 
v
, 
b
;

3245 
i
;

3247 if(
n
 =
N
 ||Ç->
›
 !
OLITERAL
 ||Ç->
ty≥
 =
T
)

3248 
no
;

3249 if(!
isöt
[
n
->
ty≥
->
ëy≥
])

3250 
no
;

3252 
v
 = 
	`mpgëfix
(
n
->
vÆ
.
u
.
xvÆ
);

3253 
b
 = 1ULL;

3254 
i
=0; i<64; i++) {

3255 if(
b
 =
v
)

3256  
i
;

3257 
b
 = b<<1;

3260 if(!
issig√d
[
n
->
ty≥
->
ëy≥
])

3261 
no
;

3263 
v
 = -v;

3264 
b
 = 1ULL;

3265 
i
=0; i<64; i++) {

3266 if(
b
 =
v
)

3267  
i
+1000;

3268 
b
 = b<<1;

3271 
no
:

3273 
	}
}

3281 
Ty≥
*

3282 
	$tounsig√d
(
Ty≥
 *
t
)

3287 
t
->
ëy≥
) {

3289 
	`¥öt
("tounsig√d: unknow¿ty≥ %T\n", 
t
);

3290 
t
 = 
T
;

3292 
TINT
:

3293 
t
 = 
ty≥s
[
TUINT
];

3295 
TINT8
:

3296 
t
 = 
ty≥s
[
TUINT8
];

3298 
TINT16
:

3299 
t
 = 
ty≥s
[
TUINT16
];

3301 
TINT32
:

3302 
t
 = 
ty≥s
[
TUINT32
];

3304 
TINT64
:

3305 
t
 = 
ty≥s
[
TUINT64
];

3308  
t
;

3309 
	}
}

3316 
	$smagic
(
Magic
 *
m
)

3318 
p
;

3319 
uöt64
 
ad
, 
™c
, 
dñè
, 
q1
, 
r1
, 
q2
, 
r2
, 
t
;

3320 
uöt64
 
mask
, 
two31
;

3322 
m
->
bad
 = 0;

3323 
m
->
w
) {

3325 
m
->
bad
 = 1;

3328 
mask
 = 0xffLL;

3331 
mask
 = 0xffffLL;

3334 
mask
 = 0xffffffffLL;

3337 
mask
 = 0xffffffffffffffffLL;

3340 
two31
 = 
mask
 ^ (mask>>1);

3342 
p
 = 
m
->
w
-1;

3343 
ad
 = 
m
->
sd
;

3344 if(
m
->
sd
 < 0)

3345 
ad
 = -
m
->
sd
;

3348 if(
ad
 =0 ||ád =1 ||ád =
two31
) {

3349 
m
->
bad
 = 1;

3353 
t
 = 
two31
;

3354 
ad
 &
mask
;

3356 
™c
 = 
t
 - 1 -Å%
ad
;

3357 
™c
 &
mask
;

3359 
q1
 = 
two31
/
™c
;

3360 
r1
 = 
two31
 - 
q1
*
™c
;

3361 
q1
 &
mask
;

3362 
r1
 &
mask
;

3364 
q2
 = 
two31
/
ad
;

3365 
r2
 = 
two31
 - 
q2
*
ad
;

3366 
q2
 &
mask
;

3367 
r2
 &
mask
;

3370 
p
++;

3371 
q1
 <<= 1;

3372 
r1
 <<= 1;

3373 
q1
 &
mask
;

3374 
r1
 &
mask
;

3375 if(
r1
 >
™c
) {

3376 
q1
++;

3377 
r1
 -
™c
;

3378 
q1
 &
mask
;

3379 
r1
 &
mask
;

3382 
q2
 <<= 1;

3383 
r2
 <<= 1;

3384 
q2
 &
mask
;

3385 
r2
 &
mask
;

3386 if(
r2
 >
ad
) {

3387 
q2
++;

3388 
r2
 -
ad
;

3389 
q2
 &
mask
;

3390 
r2
 &
mask
;

3393 
dñè
 = 
ad
 - 
r2
;

3394 
dñè
 &
mask
;

3395 if(
q1
 < 
dñè
 || (q1 =dñè && 
r1
 == 0)) {

3401 
m
->
sm
 = 
q2
+1;

3402 if(
m
->
sm
 & 
two31
)

3403 
m
->
sm
 |~
mask
;

3404 
m
->
s
 = 
p
-m->
w
;

3405 
	}
}

3412 
	$umagic
(
Magic
 *
m
)

3414 
p
;

3415 
uöt64
 
nc
, 
dñè
, 
q1
, 
r1
, 
q2
, 
r2
;

3416 
uöt64
 
mask
, 
two31
;

3418 
m
->
bad
 = 0;

3419 
m
->
ua
 = 0;

3421 
m
->
w
) {

3423 
m
->
bad
 = 1;

3426 
mask
 = 0xffLL;

3429 
mask
 = 0xffffLL;

3432 
mask
 = 0xffffffffLL;

3435 
mask
 = 0xffffffffffffffffLL;

3438 
two31
 = 
mask
 ^ (mask>>1);

3440 
m
->
ud
 &
mask
;

3441 if(
m
->
ud
 =0 || m->ud =
two31
) {

3442 
m
->
bad
 = 1;

3445 
nc
 = 
mask
 - (-
m
->
ud
&mask)%m->ud;

3446 
p
 = 
m
->
w
-1;

3448 
q1
 = 
two31
/
nc
;

3449 
r1
 = 
two31
 - 
q1
*
nc
;

3450 
q1
 &
mask
;

3451 
r1
 &
mask
;

3453 
q2
 = (
two31
-1Ë/ 
m
->
ud
;

3454 
r2
 = (
two31
-1Ë- 
q2
*
m
->
ud
;

3455 
q2
 &
mask
;

3456 
r2
 &
mask
;

3459 
p
++;

3460 if(
r1
 >
nc
-r1) {

3461 
q1
 <<= 1;

3462 
q1
++;

3463 
r1
 <<= 1;

3464 
r1
 -
nc
;

3466 
q1
 <<= 1;

3467 
r1
 <<= 1;

3469 
q1
 &
mask
;

3470 
r1
 &
mask
;

3471 if(
r2
+1 >
m
->
ud
-r2) {

3472 if(
q2
 >
two31
-1) {

3473 
m
->
ua
 = 1;

3475 
q2
 <<= 1;

3476 
q2
++;

3477 
r2
 <<= 1;

3478 
r2
++;

3479 
r2
 -
m
->
ud
;

3481 if(
q2
 >
two31
) {

3482 
m
->
ua
 = 1;

3484 
q2
 <<= 1;

3485 
r2
 <<= 1;

3486 
r2
++;

3488 
q2
 &
mask
;

3489 
r2
 &
mask
;

3491 
dñè
 = 
m
->
ud
 - 1 - 
r2
;

3492 
dñè
 &
mask
;

3494 if(
p
 < 
m
->
w
+m->w)

3495 if(
q1
 < 
dñè
 || (q1 =dñè && 
r1
 == 0)) {

3500 
m
->
um
 = 
q2
+1;

3501 
m
->
s
 = 
p
-m->
w
;

3502 
	}
}

3504 
Sym
*

3505 
	$ngŸy≥
(
Node
 *
n
)

3507 if(
n
->
sym
 !
S
 &&Ç->
ªÆty≥
 !
T
)

3508 if(
	`°∫cmp
(
n
->
sym
->
«me
, "autotmp_", 8) != 0)

3509 if(
	`°∫cmp
(
n
->
sym
->
«me
, "statictmp_", 8) != 0)

3510  
	`ty≥«me
(
n
->
ªÆty≥
)->
À·
->
sym
;

3512  
S
;

3513 
	}
}

3525 
	$∑tht›ªfix
(*
s
)

3527 
hex
[] = "0123456789abcdef";

3528 *
p
, *
r
, *
w
, *
l
;

3529 
n
;

3532 
l
 = 
s
;

3533 
r
=
s
; *r;Ñ++)

3534 if(*
r
 == '/')

3535 
l
 = 
r
+1;

3538 
n
 = 0;

3539 
r
=
s
; *r;Ñ++)

3540 if(*
r
 <' ' || (*∏='.' &&Ñ >
l
) || *r == '%' || *r == '"' || *r >= 0x7f)

3541 
n
++;

3544 if(
n
 == 0)

3545  
s
;

3548 
p
 = 
	`mÆ
((
r
-
s
)+1+2*
n
);

3549 
r
=
s
, 
w
=
p
; *r;Ñ++) {

3550 if(*
r
 <' ' || (*∏='.' &&Ñ >
l
) || *r == '%' || *r == '"' || *r >= 0x7f) {

3551 *
w
++ = '%';

3552 *
w
++ = 
hex
[(*
r
>>4)&0xF];

3553 *
w
++ = 
hex
[*
r
&0xF];

3555 *
w
++ = *
r
;

3557 *
w
 = '\0';

3558  
p
;

3559 
	}
}

3561 
Pkg
*

3562 
	$mkpkg
(
Sålô
 *
∑th
)

3564 
Pkg
 *
p
;

3565 
h
;

3567 if(
	`isbadimp‹t
(
∑th
))

3568 
	`îr‹exô
();

3570 
h
 = 
	`°röghash
(
∑th
->
s
Ë& (
	`√Àm
(
phash
)-1);

3571 
p
=
phash
[
h
];Ö;Öı->
lök
)

3572 if(
p
->
∑th
->
Àn
 =∑th->À¿&& 
	`memcmp
’©h->
s
,Ö->path->s,Öath->len) == 0)

3573  
p
;

3575 
p
 = 
	`mÆ
( *p);

3576 
p
->
∑th
 =Öath;

3577 
p
->
¥efix
 = 
	`∑tht›ªfix
(
∑th
->
s
);

3578 
p
->
lök
 = 
phash
[
h
];

3579 
phash
[
h
] = 
p
;

3580  
p
;

3581 
	}
}

3583 
Sålô
*

3584 
	$°æô
(*
s
)

3586 
Sålô
 *
t
;

3588 
t
 = 
	`mÆ
( *à+ 
	`°æí
(
s
));

3589 
	`°r˝y
(
t
->
s
, s);

3590 
t
->
Àn
 = 
	`°æí
(
s
);

3591  
t
;

3592 
	}
}

3595 
	$addöô
(
Node
 **
≈
, 
NodeLi°
 *
öô
)

3597 
Node
 *
n
;

3599 if(
öô
 =
nû
)

3602 
n
 = *
≈
;

3603 
n
->
›
) {

3604 
ONAME
:

3605 
OLITERAL
:

3608 
n
 = 
	`nod
(
OCONVNOP
,Ç, 
N
);

3609 
n
->
ty≥
 =Ç->
À·
->type;

3610 
n
->
ty≥check
 = 1;

3611 *
≈
 = 
n
;

3614 
n
->
nöô
 = 
	`c⁄ˇt
(
öô
,Ç->ninit);

3615 
n
->
uŒm™
 = 
UINF
;

3616 
	}
}

3619 
	$isbadimp‹t
(
Sålô
 *
∑th
)

3621 *
s
;

3622 
Ru√
 
r
;

3624 if(
	`°æí
(
∑th
->
s
Ë!∑th->
Àn
) {

3625 
	`yyîr‹
("importÖath contains NUL");

3629 
s
 = 
∑th
->s;

3630 *
s
) {

3631 
s
 +
	`ch¨t‹u√
(&
r
, s);

3632 if(
r
 =
Ru√îr‹
) {

3633 
	`yyîr‹
("imp‹à∑th c⁄èö†övÆid UTF-8 sequí˚: \"%Z\"", 
∑th
);

3636 if(
r
 < 0x20 ||Ñ == 0x7f) {

3637 
	`yyîr‹
("imp‹à∑th c⁄èö†c⁄åﬁ ch¨a˘î: \"%Z\"", 
∑th
);

3640 if(
r
 == '\\') {

3641 
	`yyîr‹
("imp‹à∑th c⁄èö†back¶ash; u£ sœsh: \"%Z\"", 
∑th
);

3644 if(
	`is•a˚ru√
(
r
)) {

3645 
	`yyîr‹
("imp‹à∑th c⁄èö†•a˚ ch¨a˘î: \"%Z\"", 
∑th
);

3648 if(
	`ut‰u√
("!\"#$%&'()*,:;<=>?[]^`{|}", 
r
)) {

3649 
	`yyîr‹
("imp‹à∑th c⁄èö†övÆid ch¨a˘î '%C': \"%Z\"", 
r
, 
∑th
);

3654 
	}
}

	@swt.c

5 
	~<u.h
>

6 
	~<libc.h
>

7 
	~"go.h
"

11 
	mSn‹m
 = 0,

12 
	mSåue
,

13 
	mSÁl£
,

14 
	mSty≥
,

16 
	mTdeÁu…
,

17 
	mTex¥c⁄°
,

18 
	mTex¥v¨
,

19 
	mTty≥nû
,

20 
	mTty≥c⁄°
,

21 
	mTty≥v¨
,

23 
	mNˇ£
 = 4,

26 
Ca£
 
	tCa£
;

27 
	sCa£


29 
Node
* 
	mnode
;

30 
uöt32
 
	mhash
;

31 
uöt8
 
	mty≥
;

32 
uöt8
 
	mdüg
;

33 
uöt16
 
	m‹döÆ
;

34 
Ca£
* 
	mlök
;

36 
	#C
 ((
Ca£
*)
nû
)

	)

39 
	$dumpˇ£
(
Ca£
 *
c0
)

41 
Ca£
 *
c
;

43 
c
=
c0
; c!=
C
; c=c->
lök
) {

44 
c
->
ty≥
) {

45 
TdeÁu…
:

46 
	`¥öt
("case-default\n");

47 
	`¥öt
(" ord=%d\n", 
c
->
‹döÆ
);

49 
Tex¥c⁄°
:

50 
	`¥öt
("case-exprconst\n");

51 
	`¥öt
(" ord=%d\n", 
c
->
‹döÆ
);

53 
Tex¥v¨
:

54 
	`¥öt
("case-exprvar\n");

55 
	`¥öt
(" ord=%d\n", 
c
->
‹döÆ
);

56 
	`¥öt
(" op=%O\n", 
c
->
node
->
À·
->
›
);

58 
Tty≥nû
:

59 
	`¥öt
("case-typenil\n");

60 
	`¥öt
(" ord=%d\n", 
c
->
‹döÆ
);

62 
Tty≥c⁄°
:

63 
	`¥öt
("case-typeconst\n");

64 
	`¥öt
(" ord=%d\n", 
c
->
‹döÆ
);

65 
	`¥öt
(" hash=%ux\n", 
c
->
hash
);

67 
Tty≥v¨
:

68 
	`¥öt
("case-typevar\n");

69 
	`¥öt
(" ord=%d\n", 
c
->
‹döÆ
);

72 
	`¥öt
("case-???\n");

73 
	`¥öt
(" ord=%d\n", 
c
->
‹döÆ
);

74 
	`¥öt
(" op=%O\n", 
c
->
node
->
À·
->
›
);

75 
	`¥öt
(" hash=%ux\n", 
c
->
hash
);

79 
	`¥öt
("\n");

80 
	}
}

83 
	$‹dlcmp
(
Ca£
 *
c1
, Ca£ *
c2
)

86 if(
c1
->
ty≥
 =
TdeÁu…
)

88 if(
c2
->
ty≥
 =
TdeÁu…
)

92 if(
c1
->
ty≥
 =
Tty≥nû
)

94 if(
c2
->
ty≥
 =
Tty≥nû
)

98 if(
c1
->
‹döÆ
 > 
c2
->ordinal)

100 if(
c1
->
‹döÆ
 < 
c2
->ordinal)

103 
	}
}

106 
	$ex¥cmp
(
Ca£
 *
c1
, Ca£ *
c2
)

108 
˘
, 
n
;

109 
Node
 *
n1
, *
n2
;

112 if(
c1
->
ty≥
 !
Tex¥c⁄°
)

114 if(
c2
->
ty≥
 !
Tex¥c⁄°
)

117 
n1
 = 
c1
->
node
->
À·
;

118 
n2
 = 
c2
->
node
->
À·
;

120 
˘
 = 
n1
->
vÆ
.
˘y≥
;

121 if(
˘
 !
n2
->
vÆ
.
˘y≥
) {

125  
˘
 - 
n2
->
vÆ
.
˘y≥
;

129 
n
 = 0;

130 
˘
) {

131 
CTFLT
:

132 
n
 = 
	`mpcmpÊtÊt
(
n1
->
vÆ
.
u
.
fvÆ
, 
n2
->val.u.fval);

134 
CTINT
:

135 
CTRUNE
:

136 
n
 = 
	`mpcmpfixfix
(
n1
->
vÆ
.
u
.
xvÆ
, 
n2
->val.u.xval);

138 
CTSTR
:

139 
n
 = 
	`cmp¶ô
(
n1
, 
n2
);

143  
n
;

144 
	}
}

147 
	$ty≥cmp
(
Ca£
 *
c1
, Ca£ *
c2
)

151 if(
c1
->
ty≥
 !
Tty≥c⁄°
)

153 if(
c2
->
ty≥
 !
Tty≥c⁄°
)

157 if(
c1
->
hash
 > 
c2
->hash)

159 if(
c1
->
hash
 < 
c2
->hash)

164 if(
c1
->
‹döÆ
 > 
c2
->ordinal)

166 if(
c1
->
‹döÆ
 < 
c2
->ordinal)

169 
	}
}

171 
Ca£
*

172 
cs‹t
(
Ca£
 *
l
, (*
f
)(Case*, Case*))

174 
Ca£
 *
l1
, *
l2
, *
À
;

176 if(
l
 =
C
 ||Ü->
lök
 == C)

177  
l
;

179 
l1
 = 
l
;

180 
l2
 = 
l
;

182 
l2
 =Ü2->
lök
;

183 if(
l2
 =
C
)

185 
l2
 =Ü2->
lök
;

186 if(
l2
 =
C
)

188 
l1
 =Ü1->
lök
;

191 
l2
 = 
l1
->
lök
;

192 
l1
->
lök
 = 
C
;

193 
l1
 = 
	`cs‹t
(
l
, 
f
);

194 
l2
 = 
	`cs‹t
÷2, 
f
);

197 if((*
f
)(
l1
, 
l2
) < 0) {

198 
l
 = 
l1
;

199 
l1
 =Ü1->
lök
;

201 
l
 = 
l2
;

202 
l2
 =Ü2->
lök
;

204 
À
 = 
l
;

207 if(
l1
 =
C
) {

208 
l2
) {

209 
À
->
lök
 = 
l2
;

210 
À
 = 
l2
;

211 
l2
 =Ü2->
lök
;

213 
À
->
lök
 = 
C
;

216 if(
l2
 =
C
) {

217 
l1
) {

218 
À
->
lök
 = 
l1
;

219 
À
 = 
l1
;

220 
l1
 =Ü1->
lök
;

224 if((*
f
)(
l1
, 
l2
) < 0) {

225 
À
->
lök
 = 
l1
;

226 
À
 = 
l1
;

227 
l1
 =Ü1->
lök
;

229 
À
->
lök
 = 
l2
;

230 
À
 = 
l2
;

231 
l2
 =Ü2->
lök
;

234 
À
->
lök
 = 
C
;

235  
l
;

236 
	}
}

238 
Node
*

239 
	$√wœbñ
()

241 
œbñ
;

243 
œbñ
++;

244 
	`¢¥öt
(
«mebuf
, “amebuf), "%.6d", 
œbñ
);

245  
	`√w«me
(
	`lookup
(
«mebuf
));

246 
	}
}

254 
	$ˇ£body
(
Node
 *
sw
, Nodê*
ty≥swv¨
)

256 
Node
 *
n
, *
c
, *
œ°
;

257 
Node
 *
def
;

258 
NodeLi°
 *
ˇs
, *
°©
, *
l
, *
lc
;

259 
Node
 *
go
, *
br
;

260 
öt32
 
 o
, 
√edv¨
;

262 
 o
 = 
	`£éöío
(
sw
);

263 if(
sw
->
li°
 =
nû
)

266 
ˇs
 = 
nû
;

267 
°©
 = 
nû
;

268 
def
 = 
N
;

269 
br
 = 
	`nod
(
OBREAK
, 
N
, N);

271 
l
=
sw
->
li°
;Ü;Üˆ->
√xt
) {

272 
n
 = 
l
->n;

273 
 o
 = 
	`£éöío
(
n
);

274 if(
n
->
›
 !
OXCASE
)

275 
	`Áèl
("ˇ£body %O", 
n
->
›
);

276 
n
->
›
 = 
OCASE
;

277 
√edv¨
 = 
	`cou¡
(
n
->
li°
Ë!1 ||Ç->li°->n->
›
 =
OLITERAL
;

279 
go
 = 
	`nod
(
OGOTO
, 
	`√wœbñ
(), 
N
);

280 if(
n
->
li°
 =
nû
) {

281 if(
def
 !
N
)

282 
	`yyîr‹
("moreÅhan one default case");

284 
n
->
right
 = 
go
;

285 
def
 = 
n
;

288 if(
n
->
li°
 !
nû
 &&Ç->li°->
√xt
 ==Çil) {

290 
c
 = 
n
->
li°
->n;

291 
n
->
À·
 = 
c
;

292 
n
->
right
 = 
go
;

293 
n
->
li°
 = 
nû
;

294 
ˇs
 = 
	`li°
(ˇs, 
n
);

297 
lc
=
n
->
li°
;Üc;Ücˆc->
√xt
) {

298 
c
 = 
lc
->
n
;

299 
ˇs
 = 
	`li°
(ˇs, 
	`nod
(
OCASE
, 
c
, 
go
));

303 
°©
 = 
	`li°
(°©, 
	`nod
(
OLABEL
, 
go
->
À·
, 
N
));

304 if(
ty≥swv¨
 && 
√edv¨
 && 
n
->
¬ame
 !
N
) {

305 
NodeLi°
 *
l
;

307 
l
 = 
	`li°1
(
	`nod
(
ODCL
, 
n
->
¬ame
, 
N
));

308 
l
 = 
	`li°
÷, 
	`nod
(
OAS
, 
n
->
¬ame
, 
ty≥swv¨
));

309 
	`ty≥checkli°
(
l
, 
Et›
);

310 
°©
 = 
	`c⁄ˇt
(°©, 
l
);

312 
°©
 = 
	`c⁄ˇt
(°©, 
n
->
nbody
);

315 
œ°
 = 
°©
->
íd
->
n
;

316 if(
œ°
->
›
 =
OXFALL
) {

317 if(
ty≥swv¨
) {

318 
	`£éöío
(
œ°
);

319 
	`yyîr‹
("cannot fallthrough inÅype switch");

321 
œ°
->
›
 = 
OFALL
;

323 
°©
 = 
	`li°
(°©, 
br
);

326 
°©
 = 
	`li°
(°©, 
br
);

327 if(
def
)

328 
ˇs
 = 
	`li°
(ˇs, 
def
);

330 
sw
->
li°
 = 
ˇs
;

331 
sw
->
nbody
 = 
°©
;

332 
löío
 = 
 o
;

333 
	}
}

335 
Ca£
*

336 
	$mkˇ£li°
(
Node
 *
sw
, 
¨g
)

338 
Node
 *
n
;

339 
Ca£
 *
c
, *
c1
, *
c2
;

340 
NodeLi°
 *
l
;

341 
‹d
;

343 
c
 = 
C
;

344 
‹d
 = 0;

346 
l
=
sw
->
li°
;Ü;Üˆ->
√xt
) {

347 
n
 = 
l
->n;

348 
c1
 = 
	`mÆ
((*c1));

349 
c1
->
lök
 = 
c
;

350 
c
 = 
c1
;

352 
‹d
++;

353 
c
->
‹döÆ
 = 
‹d
;

354 
c
->
node
 = 
n
;

356 if(
n
->
À·
 =
N
) {

357 
c
->
ty≥
 = 
TdeÁu…
;

361 
¨g
) {

362 
Sty≥
:

363 
c
->
hash
 = 0;

364 if(
n
->
À·
->
›
 =
OLITERAL
) {

365 
c
->
ty≥
 = 
Tty≥nû
;

368 if(
	`i°y≥
(
n
->
À·
->
ty≥
, 
TINTER
)) {

369 
c
->
ty≥
 = 
Tty≥v¨
;

373 
c
->
hash
 = 
	`ty≥hash
(
n
->
À·
->
ty≥
);

374 
c
->
ty≥
 = 
Tty≥c⁄°
;

377 
Sn‹m
:

378 
Såue
:

379 
SÁl£
:

380 
c
->
ty≥
 = 
Tex¥v¨
;

381 
	`c⁄°ty≥
(
n
->
À·
)) {

382 
CTFLT
:

383 
CTINT
:

384 
CTRUNE
:

385 
CTSTR
:

386 
c
->
ty≥
 = 
Tex¥c⁄°
;

392 if(
c
 =
C
)

393  
C
;

396 
¨g
) {

397 
Sty≥
:

398 
c
 = 
	`cs‹t
(c, 
ty≥cmp
);

399 
c1
=
c
; c1!=
C
; c1=c1->
lök
) {

400 
c2
=
c1
->
lök
; c2!=
C
 && c2->
hash
==c1->hash; c2=c2->link) {

401 if(
c1
->
ty≥
 =
Tty≥nû
 || c1->ty≥ =
TdeÁu…
)

403 if(
c2
->
ty≥
 =
Tty≥nû
 || c2->ty≥ =
TdeÁu…
)

405 if(!
	`eqty≥
(
c1
->
node
->
À·
->
ty≥
, 
c2
->node->left->type))

407 
	`yyîr‹l
(
c2
->
node
->
löío
, "du∂iˇã ca£ i¿swôch\n\çªviou†ˇ£áà%L", 
c1
->node->lineno);

411 
Sn‹m
:

412 
Såue
:

413 
SÁl£
:

414 
c
 = 
	`cs‹t
(c, 
ex¥cmp
);

415 
c1
=
c
; c1->
lök
!=
C
; c1=c1->link) {

416 if(
	`ex¥cmp
(
c1
, c1->
lök
) != 0)

418 
	`£éöío
(
c1
->
lök
->
node
);

419 
	`yyîr‹
("du∂iˇã ca£ i¿swôch\n\çªviou†ˇ£áà%L", 
c1
->
node
->
löío
);

425 
c
 = 
	`cs‹t
(c, 
‹dlcmp
);

426  
c
;

427 
	}
}

429 
Node
* 
	gex¥«me
;

431 
Node
*

432 
	$ex¥bsw
(
Ca£
 *
c0
, 
nˇ£
, 
¨g
)

434 
NodeLi°
 *
ˇs
;

435 
Node
 *
a
, *
n
;

436 
Ca£
 *
c
;

437 
i
, 
hÆf
, 
 o
;

439 
ˇs
 = 
nû
;

440 if(
nˇ£
 < 
Nˇ£
) {

441 
i
=0; i<
nˇ£
; i++) {

442 
n
 = 
c0
->
node
;

443 
 o
 = 
	`£éöío
(
n
);

445 
¨g
) {

446 
Såue
:

447 
a
 = 
	`nod
(
OIF
, 
N
, N);

448 
a
->
¡e°
 = 
n
->
À·
;

449 
a
->
nbody
 = 
	`li°1
(
n
->
right
);

452 
SÁl£
:

453 
a
 = 
	`nod
(
OIF
, 
N
, N);

454 
a
->
¡e°
 = 
	`nod
(
ONOT
, 
n
->
À·
, 
N
);

455 
	`ty≥check
(&
a
->
¡e°
, 
Erv
);

456 
a
->
nbody
 = 
	`li°1
(
n
->
right
);

460 
a
 = 
	`nod
(
OIF
, 
N
, N);

461 
a
->
¡e°
 = 
	`nod
(
OEQ
, 
ex¥«me
, 
n
->
À·
);

462 
	`ty≥check
(&
a
->
¡e°
, 
Erv
);

463 
a
->
nbody
 = 
	`li°1
(
n
->
right
);

467 
ˇs
 = 
	`li°
(ˇs, 
a
);

468 
c0
 = c0->
lök
;

469 
löío
 = 
 o
;

471  
	`li°°mt
(
ˇs
);

475 
c
 = 
c0
;

476 
hÆf
 = 
nˇ£
>>1;

477 
i
=1; i<
hÆf
; i++)

478 
c
 = c->
lök
;

479 
a
 = 
	`nod
(
OIF
, 
N
, N);

480 
a
->
¡e°
 = 
	`nod
(
OLE
, 
ex¥«me
, 
c
->
node
->
À·
);

481 
	`ty≥check
(&
a
->
¡e°
, 
Erv
);

482 
a
->
nbody
 = 
	`li°1
(
	`ex¥bsw
(
c0
, 
hÆf
, 
¨g
));

483 
a
->
√l£
 = 
	`li°1
(
	`ex¥bsw
(
c
->
lök
, 
nˇ£
-
hÆf
, 
¨g
));

484  
a
;

485 
	}
}

492 
	$ex¥swôch
(
Node
 *
sw
)

494 
Node
 *
def
;

495 
NodeLi°
 *
ˇs
;

496 
Node
 *
a
;

497 
Ca£
 *
c0
, *
c
, *
c1
;

498 
Ty≥
 *
t
;

499 
¨g
, 
nˇ£
;

501 
	`ˇ£body
(
sw
, 
N
);

503 
¨g
 = 
Sn‹m
;

504 if(
	`isc⁄°
(
sw
->
¡e°
, 
CTBOOL
)) {

505 
¨g
 = 
Såue
;

506 if(
sw
->
¡e°
->
vÆ
.
u
.
bvÆ
 == 0)

507 
¨g
 = 
SÁl£
;

509 
	`wÆkex¥
(&
sw
->
¡e°
, &sw->
nöô
);

510 
t
 = 
sw
->
ty≥
;

511 if(
t
 =
T
)

517 
ex¥«me
 = 
N
;

518 
ˇs
 = 
nû
;

519 if(
¨g
 !
Såue
 &&árg !
SÁl£
) {

520 
ex¥«me
 = 
	`ãmp
(
sw
->
¡e°
->
ty≥
);

521 
ˇs
 = 
	`li°1
(
	`nod
(
OAS
, 
ex¥«me
, 
sw
->
¡e°
));

522 
	`ty≥checkli°
(
ˇs
, 
Et›
);

525 
c0
 = 
	`mkˇ£li°
(
sw
, 
¨g
);

526 if(
c0
 !
C
 && c0->
ty≥
 =
TdeÁu…
) {

527 
def
 = 
c0
->
node
->
right
;

528 
c0
 = c0->
lök
;

530 
def
 = 
	`nod
(
OBREAK
, 
N
, N);

533 
lo›
:

534 if(
c0
 =
C
) {

535 
ˇs
 = 
	`li°
(ˇs, 
def
);

536 
sw
->
nbody
 = 
	`c⁄ˇt
(
ˇs
, sw->nbody);

537 
sw
->
li°
 = 
nû
;

538 
	`wÆk°méi°
(
sw
->
nbody
);

543 if(!
okf‹cmp
[
t
->
ëy≥
] || 
c0
->
ty≥
 !
Tex¥c⁄°
) {

544 
a
 = 
	`ex¥bsw
(
c0
, 1, 
¨g
);

545 
ˇs
 = 
	`li°
(ˇs, 
a
);

546 
c0
 = c0->
lök
;

547 
lo›
;

551 
nˇ£
 = 1;

552 
c
=
c0
; c->
lök
!=
C
; c=c->link) {

553 if(
c
->
lök
->
ty≥
 !
Tex¥c⁄°
)

555 
nˇ£
++;

559 
c1
 = 
c
->
lök
;

560 
c
->
lök
 = 
C
;

563 
c0
 = 
	`cs‹t
(c0, 
ex¥cmp
);

564 
a
 = 
	`ex¥bsw
(
c0
, 
nˇ£
, 
¨g
);

565 
ˇs
 = 
	`li°
(ˇs, 
a
);

567 
c0
 = 
c1
;

568 
lo›
;

570 
	}
}

572 
Node
* 
	ghash«me
;

573 
Node
* 
	gÁ˚«me
;

574 
Node
* 
	gboﬁ«me
;

576 
Node
*

577 
	$ty≥⁄e
(
Node
 *
t
)

579 
NodeLi°
 *
öô
;

580 
Node
 *
a
, *
b
, *
v¨
;

582 
v¨
 = 
t
->
¬ame
;

583 
öô
 = 
nû
;

584 if(
v¨
 =
N
) {

585 
	`ty≥check
(&
nbœnk
, 
Erv
 | 
Easgn
);

586 
v¨
 = 
nbœnk
;

588 
öô
 = 
	`li°1
(
	`nod
(
ODCL
, 
v¨
, 
N
));

590 
a
 = 
	`nod
(
OAS2
, 
N
, N);

591 
a
->
li°
 = 
	`li°
(
	`li°1
(
v¨
), 
boﬁ«me
);

592 
b
 = 
	`nod
(
ODOTTYPE
, 
Á˚«me
, 
N
);

593 
b
->
ty≥
 = 
t
->
À·
->type;

594 
a
->
æi°
 = 
	`li°1
(
b
);

595 
	`ty≥check
(&
a
, 
Et›
);

596 
öô
 = 
	`li°
(öô, 
a
);

598 
b
 = 
	`nod
(
OIF
, 
N
, N);

599 
b
->
¡e°
 = 
boﬁ«me
;

600 
b
->
nbody
 = 
	`li°1
(
t
->
right
);

601 
a
 = 
	`li°°mt
(
	`li°
(
öô
, 
b
));

602  
a
;

603 
	}
}

605 
Node
*

606 
	$ty≥bsw
(
Ca£
 *
c0
, 
nˇ£
)

608 
NodeLi°
 *
ˇs
;

609 
Node
 *
a
, *
n
;

610 
Ca£
 *
c
;

611 
i
, 
hÆf
;

613 
ˇs
 = 
nû
;

615 if(
nˇ£
 < 
Nˇ£
) {

616 
i
=0; i<
nˇ£
; i++) {

617 
n
 = 
c0
->
node
;

618 if(
c0
->
ty≥
 !
Tty≥c⁄°
)

619 
	`Áèl
("typebsw");

620 
a
 = 
	`nod
(
OIF
, 
N
, N);

621 
a
->
¡e°
 = 
	`nod
(
OEQ
, 
hash«me
, 
	`nodötc⁄°
(
c0
->
hash
));

622 
	`ty≥check
(&
a
->
¡e°
, 
Erv
);

623 
a
->
nbody
 = 
	`li°1
(
n
->
right
);

624 
ˇs
 = 
	`li°
(ˇs, 
a
);

625 
c0
 = c0->
lök
;

627  
	`li°°mt
(
ˇs
);

631 
c
 = 
c0
;

632 
hÆf
 = 
nˇ£
>>1;

633 
i
=1; i<
hÆf
; i++)

634 
c
 = c->
lök
;

635 
a
 = 
	`nod
(
OIF
, 
N
, N);

636 
a
->
¡e°
 = 
	`nod
(
OLE
, 
hash«me
, 
	`nodötc⁄°
(
c
->
hash
));

637 
	`ty≥check
(&
a
->
¡e°
, 
Erv
);

638 
a
->
nbody
 = 
	`li°1
(
	`ty≥bsw
(
c0
, 
hÆf
));

639 
a
->
√l£
 = 
	`li°1
(
	`ty≥bsw
(
c
->
lök
, 
nˇ£
-
hÆf
));

640  
a
;

641 
	}
}

649 
	$ty≥swôch
(
Node
 *
sw
)

651 
Node
 *
def
;

652 
NodeLi°
 *
ˇs
, *
hash
;

653 
Node
 *
a
, *
n
;

654 
Ca£
 *
c
, *
c0
, *
c1
;

655 
nˇ£
;

656 
Ty≥
 *
t
;

657 
VÆ
 
v
;

659 if(
sw
->
¡e°
 =
nû
)

661 if(
sw
->
¡e°
->
right
 =
nû
) {

662 
	`£éöío
(
sw
);

663 
	`yyîr‹
("type switch must haveánássignment");

666 
	`wÆkex¥
(&
sw
->
¡e°
->
right
, &sw->
nöô
);

667 if(!
	`i°y≥
(
sw
->
¡e°
->
right
->
ty≥
, 
TINTER
)) {

668 
	`yyîr‹
("type switch must be onán interface");

671 
ˇs
 = 
nû
;

677 
Á˚«me
 = 
	`ãmp
(
sw
->
¡e°
->
right
->
ty≥
);

678 
a
 = 
	`nod
(
OAS
, 
Á˚«me
, 
sw
->
¡e°
->
right
);

679 
	`ty≥check
(&
a
, 
Et›
);

680 
ˇs
 = 
	`li°
(ˇs, 
a
);

682 
	`ˇ£body
(
sw
, 
Á˚«me
);

684 
boﬁ«me
 = 
	`ãmp
(
ty≥s
[
TBOOL
]);

685 
	`ty≥check
(&
boﬁ«me
, 
Erv
);

687 
hash«me
 = 
	`ãmp
(
ty≥s
[
TUINT32
]);

688 
	`ty≥check
(&
hash«me
, 
Erv
);

690 
t
 = 
sw
->
¡e°
->
right
->
ty≥
;

691 if(
	`i¢ûöãr
(
t
))

692 
a
 = 
	`sy¶ook
("efacethash", 1);

694 
a
 = 
	`sy¶ook
("ifacethash", 1);

695 
	`¨gty≥
(
a
, 
t
);

696 
a
 = 
	`nod
(
OCALL
,á, 
N
);

697 
a
->
li°
 = 
	`li°1
(
Á˚«me
);

698 
a
 = 
	`nod
(
OAS
, 
hash«me
,á);

699 
	`ty≥check
(&
a
, 
Et›
);

700 
ˇs
 = 
	`li°
(ˇs, 
a
);

702 
c0
 = 
	`mkˇ£li°
(
sw
, 
Sty≥
);

703 if(
c0
 !
C
 && c0->
ty≥
 =
TdeÁu…
) {

704 
def
 = 
c0
->
node
->
right
;

705 
c0
 = c0->
lök
;

707 
def
 = 
	`nod
(
OBREAK
, 
N
, N);

713 
c
=
c0
; c!=
C
; c=c->
lök
) {

714 
n
 = 
c
->
node
;

715 
c
->
ty≥
) {

717 
Tty≥nû
:

718 
v
.
˘y≥
 = 
CTNIL
;

719 
a
 = 
	`nod
(
OIF
, 
N
, N);

720 
a
->
¡e°
 = 
	`nod
(
OEQ
, 
Á˚«me
, 
	`nodlô
(
v
));

721 
	`ty≥check
(&
a
->
¡e°
, 
Erv
);

722 
a
->
nbody
 = 
	`li°1
(
n
->
right
);

723 
n
->
right
 = 
a
;

726 
Tty≥v¨
:

727 
Tty≥c⁄°
:

728 
n
->
right
 = 
	`ty≥⁄e
(n);

736 
c0
 !
C
) {

737 if(
c0
->
ty≥
 !
Tty≥c⁄°
) {

738 
n
 = 
c0
->
node
;

739 
ˇs
 = 
	`li°
(ˇs, 
n
->
right
);

740 
c0
=c0->
lök
;

745 
c1
 = 
c
 = 
c0
;

746 
c
->
lök
!=
C
 && c->lök->
ty≥
==
Tty≥c⁄°
)

747 
c
 = c->
lök
;

748 
c0
 = 
c
->
lök
;

749 
c
->
lök
 = 
nû
;

752 
c1
 = 
	`cs‹t
(c1, 
ty≥cmp
);

756 
c
=
c1
; c!=
C
; c=c->
lök
) {

757 
n
 = 
c
->
node
;

758 
ˇs
 = 
	`li°
(ˇs, 
n
->
right
);

764 
nˇ£
 = 0;

765 
c
=
c1
; c!=
C
; c=c->
lök
) {

766 
nˇ£
++;

767 
hash
 = 
	`li°1
(
c
->
node
->
right
);

768 
c
->
lök
 !
C
 && c->lök->
hash
 == c->hash) {

769 
hash
 = 
	`li°
(hash, 
c
->
lök
->
node
->
right
);

770 
c
->
lök
 = c->link->link;

772 
c
->
node
->
right
 = 
	`li°°mt
(
hash
);

776 
ˇs
 = 
	`li°
(ˇs, 
	`ty≥bsw
(
c1
, 
nˇ£
));

778 if(
√º‹s
 == 0) {

779 
ˇs
 = 
	`li°
(ˇs, 
def
);

780 
sw
->
nbody
 = 
	`c⁄ˇt
(
ˇs
, sw->nbody);

781 
sw
->
li°
 = 
nû
;

782 
	`wÆk°méi°
(
sw
->
nbody
);

784 
	}
}

787 
	$wÆkswôch
(
Node
 *
sw
)

795 if(
sw
->
¡e°
 =
N
) {

796 
sw
->
¡e°
 = 
	`nodboﬁ
(1);

797 
	`ty≥check
(&
sw
->
¡e°
, 
Erv
);

800 if(
sw
->
¡e°
->
›
 =
OTYPESW
) {

801 
	`ty≥swôch
(
sw
);

805 
	`ex¥swôch
(
sw
);

806 
	}
}

812 
	$ty≥checkswôch
(
Node
 *
n
)

814 
t›
, 
 o
, 
±r
;

815 *
nû⁄ly
;

816 
Ty≥
 *
t
, *
missög
, *
have
;

817 
NodeLi°
 *
l
, *
Œ
;

818 
Node
 *
nˇ£
, *
nv¨
;

819 
Node
 *
def
;

821 
 o
 = 
löío
;

822 
	`ty≥checkli°
(
n
->
nöô
, 
Et›
);

823 
nû⁄ly
 = 
nû
;

825 if(
n
->
¡e°
 !
N
 &&Ç->¡e°->
›
 =
OTYPESW
) {

827 
t›
 = 
Ety≥
;

828 
	`ty≥check
(&
n
->
¡e°
->
right
, 
Erv
);

829 
t
 = 
n
->
¡e°
->
right
->
ty≥
;

830 if(
t
 !
T
 &&Å->
ëy≥
 !
TINTER
)

831 
	`yyîr‹
("ˇ¬ŸÅy≥ swôch o¿n⁄-öãrÁ˚ vÆuê%lN", 
n
->
¡e°
->
right
);

834 
t›
 = 
Erv
;

835 if(
n
->
¡e°
) {

836 
	`ty≥check
(&
n
->
¡e°
, 
Erv
);

837 
	`deÁu…lô
(&
n
->
¡e°
, 
T
);

838 
t
 = 
n
->
¡e°
->
ty≥
;

840 
t
 = 
ty≥s
[
TBOOL
];

841 if(
t
) {

842 if(!
okf‹eq
[
t
->
ëy≥
] || 
	`isfixed¨øy
(t))

843 
	`yyîr‹
("ˇ¬Ÿ swôch o¿%lN", 
n
->
¡e°
);

844 if(
t
->
ëy≥
 =
TARRAY
)

845 
nû⁄ly
 = "slice";

846 if(
t
->
ëy≥
 =
TFUNC
)

847 
nû⁄ly
 = "func";

848 if(
t
->
ëy≥
 =
TMAP
)

849 
nû⁄ly
 = "map";

852 
n
->
ty≥
 = 
t
;

854 
def
 = 
N
;

855 
l
=
n
->
li°
;Ü;Üˆ->
√xt
) {

856 
nˇ£
 = 
l
->
n
;

857 
	`£éöío
(
n
);

858 if(
nˇ£
->
li°
 =
nû
) {

860 if(
def
 !
N
)

861 
	`yyîr‹
("mu…ùÀ deÁu…†ö swôch (fú°áà%L)", 
def
->
löío
);

863 
def
 = 
nˇ£
;

865 
Œ
=
nˇ£
->
li°
;Ül;Ülˆl->
√xt
) {

866 
	`£éöío
(
Œ
->
n
);

867 
	`ty≥check
(&
Œ
->
n
, 
Erv
 | 
Ety≥
);

868 if(
Œ
->
n
->
ty≥
 =
T
 || 
t
 == T)

870 
	`£éöío
(
nˇ£
);

871 
t›
) {

872 
Erv
:

873 
	`deÁu…lô
(&
Œ
->
n
, 
t
);

874 if(
Œ
->
n
->
›
 =
OTYPE
)

875 
	`yyîr‹
("ty≥ %T i†nŸá¿ex¥essi⁄", 
Œ
->
n
->
ty≥
);

876 if(
Œ
->
n
->
ty≥
 !
T
 && !
	`assign›
÷l->n->ty≥, 
t
, 
nû
) && !assignop(t,Ül->n->type,Çil)) {

877 if(
n
->
¡e°
)

878 
	`yyîr‹
("övÆid ca£ %N i¿swôch o¿%N (mism©chedÅy≥†%Tánd %T)", 
Œ
->
n
,Ç->
¡e°
,Ül->n->
ty≥
, 
t
);

880 
	`yyîr‹
("övÆid ca£ %N i¿swôch (mism©chedÅy≥†%Tánd boﬁ)", 
Œ
->
n
,Ül->n->
ty≥
);

881 } if(
nû⁄ly
 && !
	`isc⁄°
(
Œ
->
n
, 
CTNIL
)) {

882 
	`yyîr‹
("övÆid ca£ %N i¿swôch (ˇ¿⁄ly com∑ª %†%NÅÿnû)", 
Œ
->
n
, 
nû⁄ly
,Ç->
¡e°
);

885 
Ety≥
:

886 if(
Œ
->
n
->
›
 =
OLITERAL
 && 
	`i°y≥
÷l->n->
ty≥
, 
TNIL
)) {

888 } if(
Œ
->
n
->
›
 !
OTYPE
 &&Ül->n->
ty≥
 !
T
) {

889 
	`yyîr‹
("%lN i†nŸáÅy≥", 
Œ
->
n
);

891 
Œ
->
n
 =Ç->
¡e°
->
right
;

892 } if(
Œ
->
n
->
ty≥
->
ëy≥
 !
TINTER
 && !
	`im∂emíts
÷l->n->ty≥, 
t
, &
missög
, &
have
, &
±r
)) {

893 if(
have
 && !
missög
->
broke
 && !have->broke)

894 
	`yyîr‹
("impossibleÅype switch case: %lN cannot have dynamicÅype %T"

896 
n
->
¡e°
->
right
, 
Œ
->n->
ty≥
, 
missög
->
sym
, 
have
->sym, have->type,

897 
missög
->
sym
, missög->
ty≥
);

898 if(!
missög
->
broke
)

899 
	`yyîr‹
("impossibleÅype switch case: %lN cannot have dynamicÅype %T"

900 " (missög %S mëhod)", 
n
->
¡e°
->
right
, 
Œ
->n->
ty≥
, 
missög
->
sym
);

906 if(
t›
 =
Ety≥
 && 
n
->
ty≥
 !
T
) {

907 
Œ
 = 
nˇ£
->
li°
;

908 
nv¨
 = 
nˇ£
->
¬ame
;

909 if(
nv¨
 !
N
) {

910 if(
Œ
 &&Ül->
√xt
 =
nû
 &&Ül->
n
->
ty≥
 !
T
 && !
	`i°y≥
÷l->n->ty≥, 
TNIL
)) {

912 
nv¨
->
¡y≥
 = 
	`ty≥nod
(
Œ
->
n
->
ty≥
);

915 
nv¨
->
¡y≥
 = 
	`ty≥nod
(
n
->
ty≥
);

919 
	`ty≥checkli°
(
nˇ£
->
nbody
, 
Et›
);

922 
löío
 = 
 o
;

923 
	}
}

	@typecheck.c

13 
	~<u.h
>

14 
	~<libc.h
>

15 
	~"go.h
"

17 
im∂icô°¨
(
Node
**);

18 
⁄órg
(
Node
*, *, ...);

19 
twﬂrg
(
Node
*);

20 
lookdŸ
(
Node
*, 
Ty≥
*, );

21 
lookty≥dŸ
(
Node
*, 
Ty≥
*, );

22 
ty≥checka°e
(, 
Node
*, , 
Ty≥
*, 
NodeLi°
*, *);

23 
Ty≥
* 
lookdŸ1
(
Node
*, 
Sym
 *
s
, Ty≥ *
t
, Ty≥ *
f
, );

24 
nokeys
(
NodeLi°
*);

25 
ty≥checkcom∂ô
(
Node
**);

26 
ty≥checkas2
(
Node
*);

27 
ty≥checkas
(
Node
*);

28 
ty≥checkfunc
(
Node
*);

29 
checklvÆue
(
Node
*, *);

30 
checkassign
(
Node
*);

31 
checkassig∆i°
(
NodeLi°
*);

32 
°rögtﬂºaylô
(
Node
**);

33 
Node
* 
ªsﬁve
(Node*);

35 
NodeLi°
* 
	gty≥checkdef°ack
;

40 
Node
*

41 
	$ªsﬁve
(
Node
 *
n
)

43 
Node
 *
r
;

45 if(
n
 !
N
 &&Ç->
›
 =
ONONAME
 &&Ç->
sym
 !
S
 && (
r
 =Ç->sym->
def
) != N) {

46 if(
r
->
›
 !
OIOTA
)

47 
n
 = 
r
;

48 if(
n
->
iŸa
 >= 0)

49 
n
 = 
	`nodötc⁄°
“->
iŸa
);

51  
n
;

52 
	}
}

55 
	$ty≥checkli°
(
NodeLi°
 *
l
, 
t›
)

57 ; 
l
;Üˆ->
√xt
)

58 
	`ty≥check
(&
l
->
n
, 
t›
);

59 
	}
}

61 * 
	g_ty≥köd
[] = {

62 [
TINT
] = "int",

63 [
TUINT
] = "uint",

64 [
TINT8
] = "int8",

65 [
TUINT8
] = "uint8",

66 [
TINT16
] = "int16",

67 [
TUINT16
] = "uint16",

68 [
TINT32
] = "int32",

69 [
TUINT32
] = "uint32",

70 [
TINT64
] = "int64",

71 [
TUINT64
] = "uint64",

72 [
TUINTPTR
] = "uintptr",

73 [
TCOMPLEX64
] = "complex64",

74 [
TCOMPLEX128
] = "complex128",

75 [
TFLOAT32
] = "float32",

76 [
TFLOAT64
] = "float64",

77 [
TBOOL
] = "bool",

78 [
TSTRING
] = "string",

79 [
TPTR32
] = "pointer",

80 [
TPTR64
] = "pointer",

81 [
TUNSAFEPTR
] = "unsafe.Pointer",

82 [
TSTRUCT
] = "struct",

83 [
TINTER
] = "interface",

84 [
TCHAN
] = "chan",

85 [
TMAP
] = "map",

86 [
TARRAY
] = "array",

87 [
TFUNC
] = "func",

88 [
TNIL
] = "nil",

89 [
TIDEAL
] = "idealÇumber",

93 
	$ty≥köd
(
Ty≥
 *
t
)

95 
ë
;

96 
buf
[50];

97 *
s
;

99 if(
	`is¶i˚
(
t
))

101 
ë
 = 
t
->
ëy≥
;

102 if(0 <
ë
 &&Éà< 
	`√Àm
(
_ty≥köd
Ë&& (
s
=_ty≥köd[ë]Ë!
nû
)

103  
s
;

104 
	`¢¥öt
(
buf
,  buf, "ëy≥=%d", 
ë
);

105  
buf
;

106 
	}
}

113 
ty≥check1
(
Node
 **, );

114 
Node
*

115 
	$ty≥check
(
Node
 **
≈
, 
t›
)

117 
Node
 *
n
;

118 
 o
;

119 
Fmt
 
fmt
;

120 
NodeLi°
 *
l
;

121 
NodeLi°
 *
tc°ack
, *
tc‰ì
;

124 if(!
ty≥checkok
)

125 
	`Áèl
("earlyÅypecheck");

127 
n
 = *
≈
;

128 if(
n
 =
N
)

129  
N
;

131 
 o
 = 
	`£éöío
(
n
);

134 
n
->
›
 =
OPAREN
)

135 
n
 =Ç->
À·
;

138 
n
 = 
	`ªsﬁve
(n);

140 *
≈
 = 
n
;

144 if(
n
->
ty≥check
 == 1) {

145 
n
->
›
) {

146 
ONAME
:

147 
OTYPE
:

148 
OLITERAL
:

149 
OPACK
:

152 
löío
 = 
 o
;

153  
n
;

157 if(
n
->
ty≥check
 == 2) {

158 if(
nßvedîr‹s
+
√º‹s
 == 0) {

159 
	`fmt°röô
(&
fmt
);

160 
l
=
tc°ack
;Ü;Üˆ->
√xt
)

161 
	`fmçröt
(&
fmt
, "\n\t%L %N", 
l
->
n
->
löío
,Ü->n);

162 
	`yyîr‹
("ty≥checkögÜo› invﬁvög %N%s", 
n
, 
	`fmt°rÊush
(&
fmt
));

164 
löío
 = 
 o
;

165  
n
;

167 
n
->
ty≥check
 = 2;

169 if(
tc‰ì
 !
nû
) {

170 
l
 = 
tc‰ì
;

171 
tc‰ì
 = 
l
->
√xt
;

173 
l
 = 
	`mÆ
( *l);

174 
l
->
√xt
 = 
tc°ack
;

175 
l
->
n
 =Ç;

176 
tc°ack
 = 
l
;

178 
	`ty≥check1
(&
n
, 
t›
);

179 *
≈
 = 
n
;

180 
n
->
ty≥check
 = 1;

182 if(
tc°ack
 !
l
)

183 
	`Áèl
("typecheck stack out of sync");

184 
tc°ack
 = 
l
->
√xt
;

185 
l
->
√xt
 = 
tc‰ì
;

186 
tc‰ì
 = 
l
;

188 
löío
 = 
 o
;

189  
n
;

190 
	}
}

195 
ˇŒªcvli°
(
NodeLi°
*);

198 
	$ˇŒªcv
(
Node
 *
n
)

200 if(
n
 =
nû
)

203 
n
->
›
) {

204 
OCALL
:

205 
OCALLMETH
:

206 
OCALLINTER
:

207 
OCALLFUNC
:

208 
ORECV
:

212  
	`ˇŒªcv
(
n
->
À·
) ||

213 
	`ˇŒªcv
(
n
->
right
) ||

214 
	`ˇŒªcv
(
n
->
¡e°
) ||

215 
	`ˇŒªcv
(
n
->
nö¸
) ||

216 
	`ˇŒªcvli°
(
n
->
nöô
) ||

217 
	`ˇŒªcvli°
(
n
->
nbody
) ||

218 
	`ˇŒªcvli°
(
n
->
√l£
) ||

219 
	`ˇŒªcvli°
(
n
->
li°
) ||

220 
	`ˇŒªcvli°
(
n
->
æi°
);

221 
	}
}

224 
	$ˇŒªcvli°
(
NodeLi°
 *
l
)

226 ; 
l
;Üˆ->
√xt
)

227 if(
	`ˇŒªcv
(
l
->
n
))

230 
	}
}

233 
	$ty≥check1
(
Node
 **
≈
, 
t›
)

235 
ë
, 
a›
, 
›
, 
±r
;

236 
Node
 *
n
, *
l
, *
r
;

237 
NodeLi°
 *
¨gs
;

238 
ok
, 
¡›
;

239 
Ty≥
 *
t
, *
ç
, *
missög
, *
have
, *
badty≥
;

240 
VÆ
 
v
;

241 *
why
;

243 
n
 = *
≈
;

245 if(
n
->
sym
) {

246 if(
n
->
›
 =
ONAME
 &&Ç->
ëy≥
 !0 && !(
t›
 & 
EˇŒ
)) {

247 
	`yyîr‹
("u£ o‡buûtö %SÇŸ i¿fun˘i⁄ cÆl", 
n
->
sym
);

248 
îr‹
;

251 
	`ty≥checkdef
(
n
);

252 
n
->
ªÆty≥
 =Ç->
ty≥
;

253 if(
n
->
›
 =
ONONAME
)

254 
îr‹
;

256 *
≈
 = 
n
;

258 
ªswôch
:

259 
ok
 = 0;

260 
n
->
›
) {

263 
	`dump
("ty≥check", 
n
);

264 
	`Áèl
("ty≥check %O", 
n
->
›
);

269 
OLITERAL
:

270 
ok
 |
Erv
;

271 if(
n
->
ty≥
 =
T
 &&Ç->
vÆ
.
˘y≥
 =
CTSTR
)

272 
n
->
ty≥
 = 
idól°rög
;

273 
ªt
;

275 
ONONAME
:

276 
ok
 |
Erv
;

277 
ªt
;

279 
ONAME
:

280 if(
n
->
ëy≥
 != 0) {

281 
ok
 |
EˇŒ
;

282 
ªt
;

284 if(!(
t›
 & 
Easgn
)) {

286 if(
	`isbœnk
(
n
)) {

287 
	`yyîr‹
("cannot use _ás value");

288 
îr‹
;

290 
n
->
u£d
 = 1;

292 if(!(
t›
 &
EˇŒ
Ë&& 
	`isunß„buûtö
(
n
)) {

293 
	`yyîr‹
("%N i†nŸá¿ex¥essi⁄, mu° bêˇŒed", 
n
);

294 
îr‹
;

296 
ok
 |
Erv
;

297 
ªt
;

299 
OPACK
:

300 
	`yyîr‹
("u£ o‡∑ckagê%SÇŸ i¿£À˘‹", 
n
->
sym
);

301 
îr‹
;

303 
ODDD
:

309 
OTYPE
:

310 
ok
 |
Ety≥
;

311 if(
n
->
ty≥
 =
T
)

312 
îr‹
;

315 
OTPAREN
:

316 
ok
 |
Ety≥
;

317 
l
 = 
	`ty≥check
(&
n
->
À·
, 
Ety≥
);

318 if(
l
->
ty≥
 =
T
)

319 
îr‹
;

320 
n
->
›
 = 
OTYPE
;

321 
n
->
ty≥
 = 
l
->type;

322 
n
->
À·
 = 
N
;

325 
OTARRAY
:

326 
ok
 |
Ety≥
;

327 
t
 = 
	`typ
(
TARRAY
);

328 
l
 = 
n
->
À·
;

329 
r
 = 
n
->
right
;

330 if(
l
 =
nû
) {

331 
t
->
bound
 = -1;

332 } if(
l
->
›
 =
ODDD
) {

333 
t
->
bound
 = -100;

334 if(!(
t›
&
Ecom∂ô
))

335 
	`yyîr‹
("use of [...]árray outside ofárrayÜiteral");

337 
l
 = 
	`ty≥check
(&
n
->
À·
, 
Erv
);

338 
	`c⁄°ty≥
(
l
)) {

339 
CTINT
:

340 
CTRUNE
:

341 
v
 = 
l
->
vÆ
;

343 
CTFLT
:

344 
v
 = 
	`toöt
(
l
->
vÆ
);

347 
	`yyîr‹
("övÆidáºay bound %N", 
l
);

348 
îr‹
;

350 
t
->
bound
 = 
	`mpgëfix
(
v
.
u
.
xvÆ
);

351 if(
t
->
bound
 < 0) {

352 
	`yyîr‹
("array bound must beÇon-negative");

353 
îr‹
;

355 
	`ovîÊow
(
v
, 
ty≥s
[
TINT
]);

357 
	`ty≥check
(&
r
, 
Ety≥
);

358 if(
r
->
ty≥
 =
T
)

359 
îr‹
;

360 
t
->
ty≥
 = 
r
->type;

361 
n
->
›
 = 
OTYPE
;

362 
n
->
ty≥
 = 
t
;

363 
n
->
À·
 = 
N
;

364 
n
->
right
 = 
N
;

365 if(
t
->
bound
 != -100)

366 
	`checkwidth
(
t
);

369 
OTMAP
:

370 
ok
 |
Ety≥
;

371 
l
 = 
	`ty≥check
(&
n
->
À·
, 
Ety≥
);

372 
r
 = 
	`ty≥check
(&
n
->
right
, 
Ety≥
);

373 if(
l
->
ty≥
 =
T
 || 
r
->type == T)

374 
îr‹
;

375 
n
->
›
 = 
OTYPE
;

376 
n
->
ty≥
 = 
	`m≠ty≥
(
l
->ty≥, 
r
->type);

377 
n
->
À·
 = 
N
;

378 
n
->
right
 = 
N
;

381 
OTCHAN
:

382 
ok
 |
Ety≥
;

383 
l
 = 
	`ty≥check
(&
n
->
À·
, 
Ety≥
);

384 if(
l
->
ty≥
 =
T
)

385 
îr‹
;

386 
t
 = 
	`typ
(
TCHAN
);

387 
t
->
ty≥
 = 
l
->type;

388 
t
->
ch™
 = 
n
->
ëy≥
;

389 
n
->
›
 = 
OTYPE
;

390 
n
->
ty≥
 = 
t
;

391 
n
->
À·
 = 
N
;

392 
n
->
ëy≥
 = 0;

395 
OTSTRUCT
:

396 
ok
 |
Ety≥
;

397 
n
->
›
 = 
OTYPE
;

398 
n
->
ty≥
 = 
	`to°ru˘
“->
li°
);

399 if(
n
->
ty≥
 =
T
)

400 
îr‹
;

401 
n
->
li°
 = 
nû
;

404 
OTINTER
:

405 
ok
 |
Ety≥
;

406 
n
->
›
 = 
OTYPE
;

407 
n
->
ty≥
 = 
	`toöãrÁ˚
“->
li°
);

408 if(
n
->
ty≥
 =
T
)

409 
îr‹
;

412 
OTFUNC
:

413 
ok
 |
Ety≥
;

414 
n
->
›
 = 
OTYPE
;

415 
n
->
ty≥
 = 
	`fun˘y≥
“->
À·
,Ç->
li°
,Ç->
æi°
);

416 if(
n
->
ty≥
 =
T
)

417 
îr‹
;

423 
OIND
:

424 
¡›
 = 
Erv
 | 
Ety≥
;

425 if(!(
t›
 & 
Eaddr
))

426 
¡›
 |
Eödú
;

427 
¡›
 |
t›
 & 
Ecom∂ô
;

428 
l
 = 
	`ty≥check
(&
n
->
À·
, 
¡›
);

429 if((
t
 = 
l
->
ty≥
Ë=
T
)

430 
îr‹
;

431 if(
l
->
›
 =
OTYPE
) {

432 
ok
 |
Ety≥
;

433 
n
->
›
 = 
OTYPE
;

434 
n
->
ty≥
 = 
	`±πo
(
l
->type);

435 
n
->
À·
 = 
N
;

436 
ªt
;

438 if(!
i•å
[
t
->
ëy≥
]) {

439 
	`yyîr‹
("övÆid indúe˘ o‡%lN", 
n
->
À·
);

440 
îr‹
;

442 
ok
 |
Erv
;

443 
n
->
ty≥
 = 
t
->type;

444 
ªt
;

449 
OASOP
:

450 
ok
 |
Et›
;

451 
l
 = 
	`ty≥check
(&
n
->
À·
, 
Erv
);

452 
	`checkassign
(
n
->
À·
);

453 
r
 = 
	`ty≥check
(&
n
->
right
, 
Erv
);

454 if(
l
->
ty≥
 =
T
 || 
r
->type == T)

455 
îr‹
;

456 
›
 = 
n
->
ëy≥
;

457 
¨ôh
;

459 
OADD
:

460 
OAND
:

461 
OANDAND
:

462 
OANDNOT
:

463 
ODIV
:

464 
OEQ
:

465 
OGE
:

466 
OGT
:

467 
OLE
:

468 
OLT
:

469 
OLSH
:

470 
ORSH
:

471 
OMOD
:

472 
OMUL
:

473 
ONE
:

474 
OOR
:

475 
OOROR
:

476 
OSUB
:

477 
OXOR
:

478 
ok
 |
Erv
;

479 
l
 = 
	`ty≥check
(&
n
->
À·
, 
Erv
 | (
t›
 & 
EiŸa
));

480 
r
 = 
	`ty≥check
(&
n
->
right
, 
Erv
 | (
t›
 & 
EiŸa
));

481 if(
l
->
ty≥
 =
T
 || 
r
->type == T)

482 
îr‹
;

483 
›
 = 
n
->op;

484 
¨ôh
:

485 if(
›
 =
OLSH
 || o∞=
ORSH
)

486 
shi·
;

488 
	`deÁu…lô2
(&
l
, &
r
, 0);

489 
n
->
À·
 = 
l
;

490 
n
->
right
 = 
r
;

491 if(
l
->
ty≥
 =
T
 || 
r
->type == T)

492 
îr‹
;

493 
t
 = 
l
->
ty≥
;

494 if(
t
->
ëy≥
 =
TIDEAL
)

495 
t
 = 
r
->
ty≥
;

496 
ë
 = 
t
->
ëy≥
;

497 if(
ë
 =
TIDEAL
)

498 
ë
 = 
TINT
;

499 if(
iscmp
[
n
->
›
] && 
t
->
ëy≥
 !
TIDEAL
 && !
	`eqty≥
(
l
->
ty≥
, 
r
->type)) {

506 if(
r
->
ty≥
->
ëy≥
 !
TBLANK
 && (
a›
 = 
	`assign›
(
l
->ty≥,Ñ->ty≥, 
nû
)) != 0) {

507 if(
	`isöãr
(
r
->
ty≥
Ë&& !isöãr(
l
->ty≥Ë&& 
	`Ægty≥1
÷->ty≥, 
nû
Ë=
ANOEQ
) {

508 
	`yyîr‹
("övÆid o≥øti⁄: %N (›î©‹ %OÇŸ deföed o¿%s)", 
n
, 
›
, 
	`ty≥köd
(
l
->
ty≥
));

509 
îr‹
;

511 
l
 = 
	`nod
(
a›
,Ü, 
N
);

512 
l
->
ty≥
 = 
r
->type;

513 
l
->
ty≥check
 = 1;

514 
n
->
À·
 = 
l
;

515 
t
 = 
l
->
ty≥
;

516 } if(
l
->
ty≥
->
ëy≥
 !
TBLANK
 && (
a›
 = 
	`assign›
(
r
->ty≥,Ü->ty≥, 
nû
)) != 0) {

517 if(
	`isöãr
(
l
->
ty≥
Ë&& !isöãr(
r
->ty≥Ë&& 
	`Ægty≥1
‘->ty≥, 
nû
Ë=
ANOEQ
) {

518 
	`yyîr‹
("övÆid o≥øti⁄: %N (›î©‹ %OÇŸ deföed o¿%s)", 
n
, 
›
, 
	`ty≥köd
(
r
->
ty≥
));

519 
îr‹
;

521 
r
 = 
	`nod
(
a›
,Ñ, 
N
);

522 
r
->
ty≥
 = 
l
->type;

523 
r
->
ty≥check
 = 1;

524 
n
->
right
 = 
r
;

525 
t
 = 
r
->
ty≥
;

527 
ë
 = 
t
->
ëy≥
;

529 if(
t
->
ëy≥
 !
TIDEAL
 && !
	`eqty≥
(
l
->
ty≥
, 
r
->type)) {

530 
	`deÁu…lô2
(&
l
, &
r
, 1);

531 
	`yyîr‹
("övÆid o≥øti⁄: %N (mism©chedÅy≥†%Tánd %T)", 
n
, 
l
->
ty≥
, 
r
->type);

532 
îr‹
;

534 if(!
okf‹
[
›
][
ë
]) {

535 
	`yyîr‹
("övÆid o≥øti⁄: %N (›î©‹ %OÇŸ deföed o¿%s)", 
n
, 
›
, 
	`ty≥köd
(
t
));

536 
îr‹
;

540 if(
	`isfixed¨øy
(
l
->
ty≥
Ë&& 
	`Ægty≥1
÷->ty≥, 
nû
Ë=
ANOEQ
) {

541 
	`yyîr‹
("övÆid o≥øti⁄: %N (%T c™nŸ bêcom∑ªd)", 
n
, 
l
->
ty≥
);

542 
îr‹
;

544 if(
	`is¶i˚
(
l
->
ty≥
Ë&& !
	`i¢û
÷Ë&& !i¢û(
r
)) {

545 
	`yyîr‹
("övÆid o≥øti⁄: %N (¶i˚ c™ o∆y bêcom∑ªdÅÿnû)", 
n
);

546 
îr‹
;

548 if(
l
->
ty≥
->
ëy≥
 =
TMAP
 && !
	`i¢û
÷Ë&& !i¢û(
r
)) {

549 
	`yyîr‹
("övÆid o≥øti⁄: %N (m≠ c™ o∆y bêcom∑ªdÅÿnû)", 
n
);

550 
îr‹
;

552 if(
l
->
ty≥
->
ëy≥
 =
TFUNC
 && !
	`i¢û
÷Ë&& !i¢û(
r
)) {

553 
	`yyîr‹
("övÆid o≥øti⁄: %N (fun¯ˇ¿⁄ly bêcom∑ªdÅÿnû)", 
n
);

554 
îr‹
;

556 if(
l
->
ty≥
->
ëy≥
 =
TSTRUCT
 && 
	`Ægty≥1
÷->ty≥, &
badty≥
Ë=
ANOEQ
) {

557 
	`yyîr‹
("övÆid o≥øti⁄: %N (°ru˘ c⁄èöög %T c™nŸ bêcom∑ªd)", 
n
, 
badty≥
);

558 
îr‹
;

561 
t
 = 
l
->
ty≥
;

562 if(
iscmp
[
n
->
›
]) {

563 
	`evc⁄°
(
n
);

564 
t
 = 
idólboﬁ
;

565 if(
n
->
›
 !
OLITERAL
) {

566 
	`deÁu…lô2
(&
l
, &
r
, 1);

567 
n
->
À·
 = 
l
;

568 
n
->
right
 = 
r
;

571 if(
ë
 =
TSTRING
) {

572 if(
iscmp
[
n
->
›
]) {

573 
n
->
ëy≥
 =Ç->
›
;

574 
n
->
›
 = 
OCMPSTR
;

575 } if(
n
->
›
 =
OADD
)

576 
n
->
›
 = 
OADDSTR
;

578 if(
ë
 =
TINTER
) {

579 if(
l
->
›
 =
OLITERAL
 &&Ü->
vÆ
.
˘y≥
 =
CTNIL
) {

581 
n
->
À·
 = 
r
;

582 
n
->
right
 = 
l
;

583 } if(
r
->
›
 =
OLITERAL
 &&Ñ->
vÆ
.
˘y≥
 =
CTNIL
) {

586 
n
->
ëy≥
 =Ç->
›
;

587 
n
->
›
 = 
OCMPIFACE
;

590 
n
->
ty≥
 = 
t
;

591 
ªt
;

593 
shi·
:

594 
	`deÁu…lô
(&
r
, 
ty≥s
[
TUINT
]);

595 
n
->
right
 = 
r
;

596 
t
 = 
r
->
ty≥
;

597 if(!
isöt
[
t
->
ëy≥
] || 
issig√d
[t->etype]) {

598 
	`yyîr‹
("övÆid o≥øti⁄: %N (shi· cou¡Åy≥ %T, mu° bêunsig√d i¡egî)", 
n
, 
r
->
ty≥
);

599 
îr‹
;

601 
t
 = 
l
->
ty≥
;

602 if(
t
 !
T
 &&Å->
ëy≥
 !
TIDEAL
 && !
isöt
[t->etype]) {

603 
	`yyîr‹
("övÆid o≥øti⁄: %N (shi· o‡ty≥ %T)", 
n
, 
t
);

604 
îr‹
;

608 
n
->
ty≥
 = 
l
->type;

609 
ªt
;

611 
OCOM
:

612 
OMINUS
:

613 
ONOT
:

614 
OPLUS
:

615 
ok
 |
Erv
;

616 
l
 = 
	`ty≥check
(&
n
->
À·
, 
Erv
 | (
t›
 & 
EiŸa
));

617 if((
t
 = 
l
->
ty≥
Ë=
T
)

618 
îr‹
;

619 if(!
okf‹
[
n
->
›
][
t
->
ëy≥
]) {

620 
	`yyîr‹
("övÆid o≥øti⁄: %O %T", 
n
->
›
, 
t
);

621 
îr‹
;

623 
n
->
ty≥
 = 
t
;

624 
ªt
;

629 
OADDR
:

630 
ok
 |
Erv
;

631 
	`ty≥check
(&
n
->
À·
, 
Erv
 | 
Eaddr
);

632 if(
n
->
À·
->
ty≥
 =
T
)

633 
îr‹
;

634 
	`checklvÆue
(
n
->
À·
, "takeÅheáddress of");

635 
l
=
n
->
À·
;Ü->
›
 =
ODOT
;Ü=l->left)

636 
l
->
addπakí
 = 1;

637 
l
->
addπakí
 = 1;

638 
	`deÁu…lô
(&
n
->
À·
, 
T
);

639 
l
 = 
n
->
À·
;

640 if((
t
 = 
l
->
ty≥
Ë=
T
)

641 
îr‹
;

644 if(
debug
['N'] && !(
t›
 & 
Eödú
Ë&& !
n
->
ëy≥
)

645 
	`addªsˇ≥s
(
n
->
À·
);

646 
n
->
ty≥
 = 
	`±πo
(
t
);

647 
ªt
;

649 
OCOMPLIT
:

650 
ok
 |
Erv
;

651 
	`ty≥checkcom∂ô
(&
n
);

652 if(
n
->
ty≥
 =
T
)

653 
îr‹
;

654 
ªt
;

656 
OXDOT
:

657 
n
 = 
	`adddŸ
(n);

658 
n
->
›
 = 
ODOT
;

659 if(
n
->
À·
 =
N
)

660 
îr‹
;

662 
ODOT
:

663 
	`ty≥check
(&
n
->
À·
, 
Erv
|
Ety≥
);

664 
	`deÁu…lô
(&
n
->
À·
, 
T
);

665 if((
t
 = 
n
->
À·
->
ty≥
Ë=
T
)

666 
îr‹
;

667 if(
n
->
right
->
›
 !
ONAME
) {

668 
	`yyîr‹
("rhs of . must beáÇame");

669 
îr‹
;

672 if(
n
->
À·
->
›
 =
OTYPE
) {

673 if(!
	`lookty≥dŸ
(
n
, 
t
, 0)) {

674 if(
	`lookty≥dŸ
(
n
, 
t
, 1))

675 
	`yyîr‹
("%N undeföed (ˇ¬ŸÑe„∏tÿu√xp‹ãd mëhod %S)", 
n
,Ç->
right
->
sym
);

677 
	`yyîr‹
("%N undeföed (ty≥ %T ha†nÿmëhod %S)", 
n
, 
t
,Ç->
right
->
sym
);

678 
îr‹
;

680 if(
n
->
ty≥
->
ëy≥
 !
TFUNC
 ||Ç->ty≥->
thi°u∂e
 != 1) {

681 
	`yyîr‹
("ty≥ %T ha†nÿmëhod %hS", 
n
->
À·
->
ty≥
,Ç->
right
->
sym
);

682 
n
->
ty≥
 = 
T
;

683 
îr‹
;

685 
n
->
›
 = 
ONAME
;

686 
n
->
sym
 =Ç->
right
->sym;

687 
n
->
ty≥
 = 
	`mëhodfunc
“->ty≥,Ç->
À·
->type);

688 
n
->
xoff£t
 = 0;

689 
n
->
˛ass
 = 
PFUNC
;

690 
ok
 = 
Erv
;

691 
ªt
;

693 if(
i•å
[
t
->
ëy≥
] &&Å->
ty≥
->ëy≥ !
TINTER
) {

694 
t
 =Å->
ty≥
;

695 if(
t
 =
T
)

696 
îr‹
;

697 
n
->
›
 = 
ODOTPTR
;

698 
	`checkwidth
(
t
);

700 if(!
	`lookdŸ
(
n
, 
t
, 0)) {

701 if(
	`lookdŸ
(
n
, 
t
, 1))

702 
	`yyîr‹
("%N undeföed (ˇ¬ŸÑe„∏tÿu√xp‹ãd fõld o∏mëhod %S)", 
n
,Ç->
right
->
sym
);

704 
	`yyîr‹
("%N undeföed (ty≥ %T ha†nÿfõld o∏mëhod %S)", 
n
,Ç->
À·
->
ty≥
,Ç->
right
->
sym
);

705 
îr‹
;

707 
n
->
›
) {

708 
ODOTINTER
:

709 
ODOTMETH
:

710 
ok
 |
EˇŒ
;

713 
ok
 |
Erv
;

716 
ªt
;

718 
ODOTTYPE
:

719 
ok
 |
Erv
;

720 
	`ty≥check
(&
n
->
À·
, 
Erv
);

721 
	`deÁu…lô
(&
n
->
À·
, 
T
);

722 
l
 = 
n
->
À·
;

723 if((
t
 = 
l
->
ty≥
Ë=
T
)

724 
îr‹
;

725 if(!
	`isöãr
(
t
)) {

726 
	`yyîr‹
("övÆidÅy≥ás£πi⁄: %N (n⁄-öãrÁ˚Åy≥ %T o¿À·)", 
n
, 
t
);

727 
îr‹
;

729 if(
n
->
right
 !
N
) {

730 
	`ty≥check
(&
n
->
right
, 
Ety≥
);

731 
n
->
ty≥
 =Ç->
right
->type;

732 
n
->
right
 = 
N
;

733 if(
n
->
ty≥
 =
T
)

734 
îr‹
;

736 if(
n
->
ty≥
 !
T
 &&Ç->ty≥->
ëy≥
 !
TINTER
)

737 if(!
	`im∂emíts
(
n
->
ty≥
, 
t
, &
missög
, &
have
, &
±r
)) {

738 if(
have
)

739 
	`yyîr‹
("impossibleÅypeássertion: %lN cannot have dynamicÅype %T"

741 
l
, 
n
->
ty≥
, 
missög
->
sym
, 
have
->sym, have->type,

742 
missög
->
sym
, missög->
ty≥
);

744 
	`yyîr‹
("impossibleÅypeássertion: %lN cannot have dynamicÅype %T"

745 " (missög %S mëhod)", 
l
, 
n
->
ty≥
, 
missög
->
sym
);

746 
îr‹
;

748 
ªt
;

750 
OINDEX
:

751 
ok
 |
Erv
;

752 
	`ty≥check
(&
n
->
À·
, 
Erv
);

753 
	`deÁu…lô
(&
n
->
À·
, 
T
);

754 
	`im∂icô°¨
(&
n
->
À·
);

755 
l
 = 
n
->
À·
;

756 
	`ty≥check
(&
n
->
right
, 
Erv
);

757 
r
 = 
n
->
right
;

758 if((
t
 = 
l
->
ty≥
Ë=
T
 || 
r
->type == T)

759 
îr‹
;

760 
t
->
ëy≥
) {

762 
	`yyîr‹
("övÆid o≥øti⁄: %N (ödex o‡ty≥ %T)", 
n
, 
t
);

763 
îr‹
;

765 
TARRAY
:

766 
	`deÁu…lô
(&
n
->
right
, 
T
);

767 if(
n
->
right
->
ty≥
 !
T
 && !
isöt
[n->right->ty≥->
ëy≥
])

768 
	`yyîr‹
("n⁄-öãgîáºay index %N", 
n
->
right
);

769 
n
->
ty≥
 = 
t
->type;

772 
TMAP
:

773 
n
->
ëy≥
 = 0;

774 
	`deÁu…lô
(&
n
->
right
, 
t
->
down
);

775 if(
n
->
right
->
ty≥
 !
T
)

776 
n
->
right
 = 
	`assignc⁄v
“->right, 
t
->
down
, "map index");

777 
n
->
ty≥
 = 
t
->type;

778 
n
->
›
 = 
OINDEXMAP
;

781 
TSTRING
:

782 
	`deÁu…lô
(&
n
->
right
, 
ty≥s
[
TUINT
]);

783 if(
n
->
right
->
ty≥
 !
T
 && !
isöt
[n->right->ty≥->
ëy≥
])

784 
	`yyîr‹
("n⁄-öãgî såög index %N", 
n
->
right
);

785 
n
->
ty≥
 = 
ty≥s
[
TUINT8
];

788 
ªt
;

790 
ORECV
:

791 
ok
 |
Et›
 | 
Erv
;

792 
	`ty≥check
(&
n
->
À·
, 
Erv
);

793 
	`deÁu…lô
(&
n
->
À·
, 
T
);

794 
l
 = 
n
->
À·
;

795 if((
t
 = 
l
->
ty≥
Ë=
T
)

796 
îr‹
;

797 if(
t
->
ëy≥
 !
TCHAN
) {

798 
	`yyîr‹
("övÆid o≥øti⁄: %N (ª˚ivê‰omÇ⁄-ch™Åy≥ %T)", 
n
, 
t
);

799 
îr‹
;

801 if(!(
t
->
ch™
 & 
Cªcv
)) {

802 
	`yyîr‹
("övÆid o≥øti⁄: %N (ª˚ivê‰om síd-⁄lyÅy≥ %T)", 
n
, 
t
);

803 
îr‹
;

805 
n
->
ty≥
 = 
t
->type;

806 
ªt
;

808 
OSEND
:

809 if(
t›
 & 
Erv
) {

810 
	`yyîr‹
("£nd sèãmíà%N u£dá†vÆue; u£ sñe˘ f‹Ç⁄-blockög síd", 
n
);

811 
îr‹
;

813 
ok
 |
Et›
 | 
Erv
;

814 
l
 = 
	`ty≥check
(&
n
->
À·
, 
Erv
);

815 
	`ty≥check
(&
n
->
right
, 
Erv
);

816 
	`deÁu…lô
(&
n
->
À·
, 
T
);

817 
l
 = 
n
->
À·
;

818 if((
t
 = 
l
->
ty≥
Ë=
T
)

819 
îr‹
;

820 if(
t
->
ëy≥
 !
TCHAN
) {

821 
	`yyîr‹
("övÆid o≥øti⁄: %N (£ndÅÿn⁄-ch™Åy≥ %T)", 
n
, 
t
);

822 
îr‹
;

824 if(!(
t
->
ch™
 & 
C£nd
)) {

825 
	`yyîr‹
("övÆid o≥øti⁄: %N (£ndÅÿª˚ive-⁄lyÅy≥ %T)", 
n
, 
t
);

826 
îr‹
;

828 
	`deÁu…lô
(&
n
->
right
, 
t
->
ty≥
);

829 
r
 = 
n
->
right
;

830 if(
r
->
ty≥
 =
T
)

831 
îr‹
;

832 
r
 = 
	`assignc⁄v
‘, 
l
->
ty≥
->type, "send");

834 
n
->
ëy≥
 = 0;

835 
n
->
ty≥
 = 
T
;

836 
ªt
;

838 
OSLICE
:

839 
ok
 |
Erv
;

840 
	`ty≥check
(&
n
->
À·
, 
t›
);

841 
	`ty≥check
(&
n
->
right
->
À·
, 
Erv
);

842 
	`ty≥check
(&
n
->
right
->right, 
Erv
);

843 
	`deÁu…lô
(&
n
->
À·
, 
T
);

844 
	`deÁu…lô
(&
n
->
right
->
À·
, 
T
);

845 
	`deÁu…lô
(&
n
->
right
->right, 
T
);

846 if(
	`isfixed¨øy
(
n
->
À·
->
ty≥
)) {

847 if(!
	`i¶vÆue
(
n
->
À·
)) {

848 
	`yyîr‹
("övÆid o≥øti⁄ %N (¶i˚ o‡u«ddªsßbÀ vÆue)", 
n
);

849 
îr‹
;

851 
n
->
À·
 = 
	`nod
(
OADDR
,Ç->À·, 
N
);

852 
n
->
À·
->
im∂icô
 = 1;

853 
	`ty≥check
(&
n
->
À·
, 
Erv
);

855 if(
n
->
right
->
À·
 !
N
) {

856 if((
t
 = 
n
->
right
->
À·
->
ty≥
Ë=
T
)

857 
îr‹
;

858 if(!
isöt
[
t
->
ëy≥
]) {

859 
	`yyîr‹
("övÆid sli˚ index %N (ty≥ %T)", 
n
->
right
->
À·
, 
t
);

860 
îr‹
;

863 if(
n
->
right
->righà!
N
) {

864 if((
t
 = 
n
->
right
->right->
ty≥
Ë=
T
)

865 
îr‹
;

866 if(!
isöt
[
t
->
ëy≥
]) {

867 
	`yyîr‹
("övÆid sli˚ index %N (ty≥ %T)", 
n
->
right
->right, 
t
);

868 
îr‹
;

871 
l
 = 
n
->
À·
;

872 if((
t
 = 
l
->
ty≥
Ë=
T
)

873 
îr‹
;

874 if(
	`i°y≥
(
t
, 
TSTRING
)) {

875 
n
->
ty≥
 = 
t
;

876 
n
->
›
 = 
OSLICESTR
;

877 
ªt
;

879 if(
i•å
[
t
->
ëy≥
] && 
	`isfixed¨øy
—->
ty≥
)) {

880 
n
->
ty≥
 = 
	`typ
(
TARRAY
);

881 
n
->
ty≥
->ty≥ = 
t
->type->type;

882 
n
->
ty≥
->
bound
 = -1;

883 
	`dowidth
(
n
->
ty≥
);

884 
n
->
›
 = 
OSLICEARR
;

885 
ªt
;

887 if(
	`is¶i˚
(
t
)) {

888 
n
->
ty≥
 = 
t
;

889 
ªt
;

891 
	`yyîr‹
("ˇ¬Ÿ sli˚ %N (ty≥ %T)", 
l
, 
t
);

892 
îr‹
;

897 
OCALL
:

898 
l
 = 
n
->
À·
;

899 if(
l
->
›
 =
ONAME
 && (
r
 = 
	`unß„nmagic
(
n
)Ë!
N
) {

900 if(
n
->
isddd
)

901 
	`yyîr‹
("övÆid u£ o‡... wôh buûtö %N", 
l
);

902 
n
 = 
r
;

903 
ªswôch
;

905 
	`ty≥check
(&
n
->
À·
, 
Erv
 | 
Ety≥
 | 
EˇŒ
 |(
t›
&
E¥oc
));

906 
l
 = 
n
->
À·
;

907 if(
l
->
›
 =
ONAME
 &&Ü->
ëy≥
 != 0) {

908 if(
n
->
isddd
 && 
l
->
ëy≥
 !
OAPPEND
)

909 
	`yyîr‹
("övÆid u£ o‡... wôh buûtö %N", 
l
);

911 
n
->
›
 = 
l
->
ëy≥
;

912 
n
->
À·
 =Ç->
right
;

913 
n
->
right
 = 
N
;

914 
ªswôch
;

916 
	`deÁu…lô
(&
n
->
À·
, 
T
);

917 
l
 = 
n
->
À·
;

918 if(
l
->
›
 =
OTYPE
) {

919 if(
n
->
isddd
 || 
l
->
ty≥
->
bound
 == -100)

920 
	`yyîr‹
("övÆid u£ o‡... i¿ty≥ c⁄vîsi⁄", 
l
);

922 
ok
 |
Erv
;

924 
n
->
À·
 = 
N
;

925 
n
->
›
 = 
OCONV
;

926 
n
->
ty≥
 = 
l
->type;

927 if(
	`⁄órg
(
n
, "c⁄vîsi⁄Åÿ%T", 
l
->
ty≥
) < 0)

928 
îr‹
;

929 
doc⁄v
;

932 if(
	`cou¡
(
n
->
li°
) == 1)

933 
	`ty≥check
(&
n
->
li°
->n, 
Erv
 | 
E‚°ru˘
);

935 
	`ty≥checkli°
(
n
->
li°
, 
Erv
);

936 if((
t
 = 
l
->
ty≥
Ë=
T
)

937 
îr‹
;

938 
	`checkwidth
(
t
);

940 
l
->
›
) {

941 
ODOTINTER
:

942 
n
->
›
 = 
OCALLINTER
;

945 
ODOTMETH
:

946 
n
->
›
 = 
OCALLMETH
;

951 
ç
 = 
	`gëthisx
(
t
)->
ty≥
->type;

952 if(
l
->
À·
 =
N
 || !
	`eqty≥
÷->À·->
ty≥
, 
ç
))

953 
	`Áèl
("methodÑeceiver");

957 
n
->
›
 = 
OCALLFUNC
;

958 if(
t
->
ëy≥
 !
TFUNC
) {

959 
	`yyîr‹
("ˇ¬Ÿ cÆ»n⁄-fun˘i⁄ %N (ty≥ %T)", 
l
, 
t
);

960 
îr‹
;

964 
	`ty≥checka°e
(
OCALL
, 
n
->
À·
,Ç->
isddd
, 
	`gëö¨gx
(
t
),Ç->
li°
, "functionárgument");

965 
ok
 |
Et›
;

966 if(
t
->
ouâu∂e
 == 0)

967 
ªt
;

968 
ok
 |
Erv
;

969 if(
t
->
ouâu∂e
 == 1) {

970 
t
 = 
	`gëouèrgx
(
l
->
ty≥
)->type;

971 if(
t
 =
T
)

972 
îr‹
;

973 if(
t
->
ëy≥
 =
TFIELD
)

974 
t
 =Å->
ty≥
;

975 
n
->
ty≥
 = 
t
;

976 
ªt
;

979 if(!(
t›
 & (
E‚°ru˘
 | 
Et›
))) {

980 
	`yyîr‹
("mu…ùÀ-vÆuê%N(Ëö sögÀ-vÆuêc⁄ãxt", 
l
);

981 
ªt
;

983 
n
->
ty≥
 = 
	`gëouèrgx
(
l
->type);

984 
ªt
;

986 
OCAP
:

987 
OLEN
:

988 
OREAL
:

989 
OIMAG
:

990 
ok
 |
Erv
;

991 if(
	`⁄órg
(
n
, "%O",Ç->
›
) < 0)

992 
îr‹
;

993 
	`ty≥check
(&
n
->
À·
, 
Erv
);

994 
	`deÁu…lô
(&
n
->
À·
, 
T
);

995 
	`im∂icô°¨
(&
n
->
À·
);

996 
l
 = 
n
->
À·
;

997 
t
 = 
l
->
ty≥
;

998 if(
t
 =
T
)

999 
îr‹
;

1000 
n
->
›
) {

1001 
OCAP
:

1002 if(!
okf‹ˇp
[
t
->
ëy≥
])

1003 
badˇŒ1
;

1005 
OLEN
:

1006 if(!
okf‹Àn
[
t
->
ëy≥
])

1007 
badˇŒ1
;

1009 
OREAL
:

1010 
OIMAG
:

1011 if(!
iscom∂ex
[
t
->
ëy≥
])

1012 
badˇŒ1
;

1013 if(
	`isc⁄°
(
l
, 
CTCPLX
)){

1014 if(
n
->
›
 =
OREAL
)

1015 
n
 = 
	`nodÊtc⁄°
(&
l
->
vÆ
.
u
.
cvÆ
->
ªÆ
);

1017 
n
 = 
	`nodÊtc⁄°
(&
l
->
vÆ
.
u
.
cvÆ
->
imag
);

1019 
n
->
ty≥
 = 
ty≥s
[
	`˝lxsubty≥
(
t
->
ëy≥
)];

1020 
ªt
;

1023 
t
->
ëy≥
) {

1024 
TSTRING
:

1025 if(
	`isc⁄°
(
l
, 
CTSTR
)) {

1026 
r
 = 
	`nod
(
OXXX
, 
N
, N);

1027 
	`nodc⁄°
(
r
, 
ty≥s
[
TINT
], 
l
->
vÆ
.
u
.
svÆ
->
Àn
);

1028 
r
->
‹ig
 = 
n
;

1029 
n
 = 
r
;

1032 
TARRAY
:

1033 if(
t
->
bound
 < 0)

1035 if(
	`ˇŒªcv
(
l
))

1037 
r
 = 
	`nod
(
OXXX
, 
N
, N);

1038 
	`nodc⁄°
(
r
, 
ty≥s
[
TINT
], 
t
->
bound
);

1039 
r
->
‹ig
 = 
n
;

1040 
n
 = 
r
;

1043 
n
->
ty≥
 = 
ty≥s
[
TINT
];

1044 
ªt
;

1046 
OCOMPLEX
:

1047 
ok
 |
Erv
;

1048 if(
	`twﬂrg
(
n
) < 0)

1049 
îr‹
;

1050 
l
 = 
	`ty≥check
(&
n
->
À·
, 
Erv
 | (
t›
 & 
EiŸa
));

1051 
r
 = 
	`ty≥check
(&
n
->
right
, 
Erv
 | (
t›
 & 
EiŸa
));

1052 if(
l
->
ty≥
 =
T
 || 
r
->type == T)

1053 
îr‹
;

1054 
	`deÁu…lô2
(&
l
, &
r
, 0);

1055 
n
->
À·
 = 
l
;

1056 
n
->
right
 = 
r
;

1057 if(
l
->
ty≥
->
ëy≥
 !
r
->type->etype) {

1058 
badcm∂x
:

1059 
	`yyîr‹
("övÆid o≥øti⁄: %N (com∂ex o‡ty≥†%T, %T)", 
n
, 
l
->
ty≥
, 
r
->type);

1060 
îr‹
;

1062 
l
->
ty≥
->
ëy≥
) {

1064 
badcm∂x
;

1065 
TIDEAL
:

1066 
t
 = 
ty≥s
[
TIDEAL
];

1068 
TFLOAT32
:

1069 
t
 = 
ty≥s
[
TCOMPLEX64
];

1071 
TFLOAT64
:

1072 
t
 = 
ty≥s
[
TCOMPLEX128
];

1075 if(
l
->
›
 =
OLITERAL
 && 
r
->op == OLITERAL) {

1077 
n
 = 
	`nod˝lxlô
(
l
->
vÆ
, 
r
->val);

1079 
n
->
ty≥
 = 
t
;

1080 
ªt
;

1082 
OCLOSE
:

1083 if(
	`⁄órg
(
n
, "%O",Ç->
›
) < 0)

1084 
îr‹
;

1085 
	`ty≥check
(&
n
->
À·
, 
Erv
);

1086 
	`deÁu…lô
(&
n
->
À·
, 
T
);

1087 
l
 = 
n
->
À·
;

1088 if((
t
 = 
l
->
ty≥
Ë=
T
)

1089 
îr‹
;

1090 if(
t
->
ëy≥
 !
TCHAN
) {

1091 
	`yyîr‹
("övÆid o≥øti⁄: %N (n⁄-ch™Åy≥ %T)", 
n
, 
t
);

1092 
îr‹
;

1094 if(!(
t
->
ch™
 & 
C£nd
)) {

1095 
	`yyîr‹
("övÆid o≥øti⁄: %N (ˇ¬Ÿ clo£Ñe˚ive-⁄ly ch™√l)", 
n
);

1096 
îr‹
;

1098 
ok
 |
Et›
;

1099 
ªt
;

1101 
ODELETE
:

1102 
¨gs
 = 
n
->
li°
;

1103 if(
¨gs
 =
nû
) {

1104 
	`yyîr‹
("missingárgumentsÅo delete");

1105 
îr‹
;

1107 if(
¨gs
->
√xt
 =
nû
) {

1108 
	`yyîr‹
("missing second (key)árgumentÅo delete");

1109 
îr‹
;

1111 if(
¨gs
->
√xt
->√xà!
nû
) {

1112 
	`yyîr‹
("too manyárgumentsÅo delete");

1113 
îr‹
;

1115 
ok
 |
Et›
;

1116 
	`ty≥checkli°
(
¨gs
, 
Erv
);

1117 
l
 = 
¨gs
->
n
;

1118 
r
 = 
¨gs
->
√xt
->
n
;

1119 if(
l
->
ty≥
 !
T
 &&Ü->ty≥->
ëy≥
 !
TMAP
) {

1120 
	`yyîr‹
("fú°árgumíàtÿdñëêmu° bêm≠; havê%lT", 
l
->
ty≥
);

1121 
îr‹
;

1123 
¨gs
->
√xt
->
n
 = 
	`assignc⁄v
(
r
, 
l
->
ty≥
->
down
, "delete");

1124 
ªt
;

1126 
OAPPEND
:

1127 
ok
 |
Erv
;

1128 
¨gs
 = 
n
->
li°
;

1129 if(
¨gs
 =
nû
) {

1130 
	`yyîr‹
("missingárgumentsÅoáppend");

1131 
îr‹
;

1133 
	`ty≥checkli°
(
¨gs
, 
Erv
);

1134 if((
t
 = 
¨gs
->
n
->
ty≥
Ë=
T
)

1135 
îr‹
;

1136 
n
->
ty≥
 = 
t
;

1137 if(!
	`is¶i˚
(
t
)) {

1138 if(
	`isc⁄°
(
¨gs
->
n
, 
CTNIL
)) {

1139 
	`yyîr‹
("fú°árgumíàtÿ≠≥nd mu° bêty≥d sli˚; havêu¡y≥dÇû", 
t
);

1140 
îr‹
;

1142 
	`yyîr‹
("fú°árgumíàtÿ≠≥nd mu° bê¶i˚; havê%lT", 
t
);

1143 
îr‹
;

1146 if(
n
->
isddd
) {

1147 if(
¨gs
->
√xt
 =
nû
) {

1148 
	`yyîr‹
("cannot use ... on firstárgumentÅoáppend");

1149 
îr‹
;

1151 if(
¨gs
->
√xt
->√xà!
nû
) {

1152 
	`yyîr‹
("too manyárgumentsÅoáppend");

1153 
îr‹
;

1155 if(
	`i°y≥
(
t
->
ty≥
, 
TUINT8
Ë&& i°y≥(
¨gs
->
√xt
->
n
->ty≥, 
TSTRING
)) {

1156 
	`deÁu…lô
(&
¨gs
->
√xt
->
n
, 
ty≥s
[
TSTRING
]);

1157 
ªt
;

1159 
¨gs
->
√xt
->
n
 = 
	`assignc⁄v
◊rgs->√xt->n, 
t
->
‹ig
, "append");

1160 
ªt
;

1162 
¨gs
˜rgs->
√xt
;árg†!
nû
;árgs=args->next) {

1163 if(
¨gs
->
n
->
ty≥
 =
T
)

1165 
¨gs
->
n
 = 
	`assignc⁄v
◊rgs->n, 
t
->
ty≥
, "append");

1167 
ªt
;

1169 
OCOPY
:

1170 
ok
 |
Et›
|
Erv
;

1171 
¨gs
 = 
n
->
li°
;

1172 if(
¨gs
 =
nû
 ||árgs->
√xt
 ==Çil) {

1173 
	`yyîr‹
("missingárgumentsÅo copy");

1174 
îr‹
;

1176 if(
¨gs
->
√xt
->√xà!
nû
) {

1177 
	`yyîr‹
("too manyárgumentsÅo copy");

1178 
îr‹
;

1180 
n
->
À·
 = 
¨gs
->n;

1181 
n
->
right
 = 
¨gs
->
√xt
->n;

1182 
n
->
li°
 = 
nû
;

1183 
n
->
ty≥
 = 
ty≥s
[
TINT
];

1184 
	`ty≥check
(&
n
->
À·
, 
Erv
);

1185 
	`ty≥check
(&
n
->
right
, 
Erv
);

1186 if(
n
->
À·
->
ty≥
 =
T
 ||Ç->
right
->type == T)

1187 
îr‹
;

1188 
	`deÁu…lô
(&
n
->
À·
, 
T
);

1189 
	`deÁu…lô
(&
n
->
right
, 
T
);

1192 if(
	`is¶i˚
(
n
->
À·
->
ty≥
Ë&&Ç->
right
->ty≥->
ëy≥
 =
TSTRING
) {

1193 if(
	`eqty≥
(
n
->
À·
->
ty≥
->ty≥, 
byãty≥
))

1194 
ªt
;

1195 
	`yyîr‹
("¨gumít†tÿc›y havêdif„ª¡ÉÀmíàty≥s: %lTánd såög", 
n
->
À·
->
ty≥
);

1196 
îr‹
;

1199 if(!
	`is¶i˚
(
n
->
À·
->
ty≥
Ë|| !is¶i˚“->
right
->type)) {

1200 if(!
	`is¶i˚
(
n
->
À·
->
ty≥
Ë&& !is¶i˚“->
right
->type))

1201 
	`yyîr‹
("¨gumít†tÿc›y mu° bê¶i˚s; havê%lT, %lT", 
n
->
À·
->
ty≥
,Ç->
right
->type);

1202 if(!
	`is¶i˚
(
n
->
À·
->
ty≥
))

1203 
	`yyîr‹
("fú°árgumíàtÿc›y should bê¶i˚; havê%lT", 
n
->
À·
->
ty≥
);

1205 
	`yyîr‹
("£c⁄dárgumíàtÿc›y should bê¶i˚ o∏°rög; havê%lT", 
n
->
right
->
ty≥
);

1206 
îr‹
;

1208 if(!
	`eqty≥
(
n
->
À·
->
ty≥
->ty≥,Ç->
right
->type->type)) {

1209 
	`yyîr‹
("¨gumít†tÿc›y havêdif„ª¡ÉÀmíàty≥s: %lTánd %lT", 
n
->
À·
->
ty≥
,Ç->
right
->type);

1210 
îr‹
;

1212 
ªt
;

1214 
OCONV
:

1215 
doc⁄v
:

1216 
ok
 |
Erv
;

1217 
	`ty≥check
(&
n
->
À·
, 
Erv
 | (
t›
 & (
Eödú
 | 
EiŸa
)));

1218 
	`c⁄vlô1
(&
n
->
À·
,Ç->
ty≥
, 1);

1219 if((
t
 = 
n
->
À·
->
ty≥
Ë=
T
 ||Ç->type == T)

1220 
îr‹
;

1221 if((
n
->
›
 = 
	`c⁄vît›
(
t
,Ç->
ty≥
, &
why
)) == 0) {

1222 
	`yyîr‹
("ˇ¬Ÿ c⁄vîà%lNÅÿty≥ %T%s", 
n
->
À·
,Ç->
ty≥
, 
why
);

1223 
n
->
›
 = 
OCONV
;

1225 
n
->
›
) {

1226 
OCONVNOP
:

1227 if(
n
->
À·
->
›
 =
OLITERAL
) {

1228 
n
->
›
 = 
OLITERAL
;

1229 
n
->
vÆ
 =Ç->
À·
->val;

1232 
OSTRARRAYBYTE
:

1233 
OSTRARRAYRUNE
:

1234 if(
n
->
À·
->
›
 =
OLITERAL
)

1235 
	`°rögtﬂºaylô
(&
n
);

1238 
ªt
;

1240 
OMAKE
:

1241 
ok
 |
Erv
;

1242 
¨gs
 = 
n
->
li°
;

1243 if(
¨gs
 =
nû
) {

1244 
	`yyîr‹
("missingárgumentÅo make");

1245 
îr‹
;

1247 
n
->
li°
 = 
nû
;

1248 
l
 = 
¨gs
->
n
;

1249 
¨gs
 =árgs->
√xt
;

1250 
	`ty≥check
(&
l
, 
Ety≥
);

1251 if((
t
 = 
l
->
ty≥
Ë=
T
)

1252 
îr‹
;

1254 
t
->
ëy≥
) {

1256 
badmake
:

1257 
	`yyîr‹
("ˇ¬Ÿ makêty≥ %T", 
t
);

1258 
îr‹
;

1260 
TARRAY
:

1261 if(!
	`is¶i˚
(
t
))

1262 
badmake
;

1263 if(
¨gs
 =
nû
) {

1264 
	`yyîr‹
("missögÜíárgumíàtÿmake(%T)", 
t
);

1265 
îr‹
;

1267 
l
 = 
¨gs
->
n
;

1268 
¨gs
 =árgs->
√xt
;

1269 
	`ty≥check
(&
l
, 
Erv
);

1270 
	`deÁu…lô
(&
l
, 
ty≥s
[
TINT
]);

1271 
r
 = 
N
;

1272 if(
¨gs
 !
nû
) {

1273 
r
 = 
¨gs
->
n
;

1274 
¨gs
 =árgs->
√xt
;

1275 
	`ty≥check
(&
r
, 
Erv
);

1276 
	`deÁu…lô
(&
r
, 
ty≥s
[
TINT
]);

1278 if(
l
->
ty≥
 =
T
 || (
r
 &&Ñ->type == T))

1279 
îr‹
;

1280 if(!
isöt
[
l
->
ty≥
->
ëy≥
]) {

1281 
	`yyîr‹
("n⁄-öãgîÜíárgumíàtÿmake(%T)", 
t
);

1282 
îr‹
;

1284 if(
r
 && !
isöt
[r->
ty≥
->
ëy≥
]) {

1285 
	`yyîr‹
("n⁄-öãgî c≠árgumíàtÿmake(%T)", 
t
);

1286 
îr‹
;

1288 
n
->
À·
 = 
l
;

1289 
n
->
right
 = 
r
;

1290 
n
->
›
 = 
OMAKESLICE
;

1293 
TMAP
:

1294 if(
¨gs
 !
nû
) {

1295 
l
 = 
¨gs
->
n
;

1296 
¨gs
 =árgs->
√xt
;

1297 
	`ty≥check
(&
l
, 
Erv
);

1298 
	`deÁu…lô
(&
l
, 
ty≥s
[
TINT
]);

1299 if(
l
->
ty≥
 =
T
)

1300 
îr‹
;

1301 if(!
isöt
[
l
->
ty≥
->
ëy≥
]) {

1302 
	`yyîr‹
("n⁄-öãgî sizê¨gumíàtÿmake(%T)", 
t
);

1303 
îr‹
;

1305 
n
->
À·
 = 
l
;

1307 
n
->
À·
 = 
	`nodötc⁄°
(0);

1308 
n
->
›
 = 
OMAKEMAP
;

1311 
TCHAN
:

1312 
l
 = 
N
;

1313 if(
¨gs
 !
nû
) {

1314 
l
 = 
¨gs
->
n
;

1315 
¨gs
 =árgs->
√xt
;

1316 
	`ty≥check
(&
l
, 
Erv
);

1317 
	`deÁu…lô
(&
l
, 
ty≥s
[
TINT
]);

1318 if(
l
->
ty≥
 =
T
)

1319 
îr‹
;

1320 if(!
isöt
[
l
->
ty≥
->
ëy≥
]) {

1321 
	`yyîr‹
("n⁄-öãgî buf„∏¨gumíàtÿmake(%T)", 
t
);

1322 
îr‹
;

1324 
n
->
À·
 = 
l
;

1326 
n
->
À·
 = 
	`nodötc⁄°
(0);

1327 
n
->
›
 = 
OMAKECHAN
;

1330 if(
¨gs
 !
nû
) {

1331 
	`yyîr‹
("toÿm™yárgumít†tÿmake(%T)", 
t
);

1332 
n
->
›
 = 
OMAKE
;

1333 
îr‹
;

1335 
n
->
ty≥
 = 
t
;

1336 
ªt
;

1338 
ONEW
:

1339 
ok
 |
Erv
;

1340 
¨gs
 = 
n
->
li°
;

1341 if(
¨gs
 =
nû
) {

1342 
	`yyîr‹
("missingárgumentÅoÇew");

1343 
îr‹
;

1345 
l
 = 
¨gs
->
n
;

1346 
	`ty≥check
(&
l
, 
Ety≥
);

1347 if((
t
 = 
l
->
ty≥
Ë=
T
)

1348 
îr‹
;

1349 if(
¨gs
->
√xt
 !
nû
) {

1350 
	`yyîr‹
("toÿm™yárgumít†tÿ√w(%T)", 
t
);

1351 
îr‹
;

1353 
n
->
À·
 = 
l
;

1354 
n
->
ty≥
 = 
	`±πo
(
t
);

1355 
ªt
;

1357 
OPRINT
:

1358 
OPRINTN
:

1359 
ok
 |
Et›
;

1360 
	`ty≥checkli°
(
n
->
li°
, 
Erv
 | 
Eödú
);

1361 
¨gs
=
n
->
li°
;árgs;árgs˜rgs->
√xt
) {

1363 if(
	`isc⁄°
(
¨gs
->
n
, 
CTINT
))

1364 
	`deÁu…lô
(&
¨gs
->
n
, 
ty≥s
[
TINT64
]);

1366 
	`deÁu…lô
(&
¨gs
->
n
, 
T
);

1368 
ªt
;

1370 
OPANIC
:

1371 
ok
 |
Et›
;

1372 if(
	`⁄órg
(
n
, "panic") < 0)

1373 
îr‹
;

1374 
	`ty≥check
(&
n
->
À·
, 
Erv
);

1375 
	`deÁu…lô
(&
n
->
À·
, 
ty≥s
[
TINTER
]);

1376 if(
n
->
À·
->
ty≥
 =
T
)

1377 
îr‹
;

1378 
ªt
;

1380 
ORECOVER
:

1381 
ok
 |
Erv
|
Et›
;

1382 if(
n
->
li°
 !
nû
) {

1383 
	`yyîr‹
("too manyárgumentsÅoÑecover");

1384 
îr‹
;

1386 
n
->
ty≥
 = 
ty≥s
[
TINTER
];

1387 
ªt
;

1389 
OCLOSURE
:

1390 
ok
 |
Erv
;

1391 
	`ty≥check˛osuª
(
n
, 
t›
);

1392 if(
n
->
ty≥
 =
T
)

1393 
îr‹
;

1394 
ªt
;

1396 
OITAB
:

1397 
ok
 |
Erv
;

1398 
	`ty≥check
(&
n
->
À·
, 
Erv
);

1399 if((
t
 = 
n
->
À·
->
ty≥
Ë=
T
)

1400 
îr‹
;

1401 if(
t
->
ëy≥
 !
TINTER
)

1402 
	`Áèl
("OITAB o‡%T", 
t
);

1403 
n
->
ty≥
 = 
	`±πo
(
ty≥s
[
TUINTPTR
]);

1404 
ªt
;

1409 
OAS
:

1410 
ok
 |
Et›
;

1411 
	`ty≥checkas
(
n
);

1412 
ªt
;

1414 
OAS2
:

1415 
ok
 |
Et›
;

1416 
	`ty≥checkas2
(
n
);

1417 
ªt
;

1419 
OBREAK
:

1420 
OCONTINUE
:

1421 
ODCL
:

1422 
OEMPTY
:

1423 
OGOTO
:

1424 
OLABEL
:

1425 
OXFALL
:

1426 
ok
 |
Et›
;

1427 
ªt
;

1429 
ODEFER
:

1430 
ok
 |
Et›
;

1431 
	`ty≥check
(&
n
->
À·
, 
Et›
);

1432 
ªt
;

1434 
OPROC
:

1435 
ok
 |
Et›
;

1436 
	`ty≥check
(&
n
->
À·
, 
Et›
|
E¥oc
);

1437 
ªt
;

1439 
OFOR
:

1440 
ok
 |
Et›
;

1441 
	`ty≥checkli°
(
n
->
nöô
, 
Et›
);

1442 
	`ty≥check
(&
n
->
¡e°
, 
Erv
);

1443 if(
n
->
¡e°
 !
N
 && (
t
 =Ç->¡e°->
ty≥
Ë!
T
 &&Å->
ëy≥
 !
TBOOL
)

1444 
	`yyîr‹
("n⁄-boﬁ %lN u£dá†f‹ c⁄dôi⁄", 
n
->
¡e°
);

1445 
	`ty≥check
(&
n
->
nö¸
, 
Et›
);

1446 
	`ty≥checkli°
(
n
->
nbody
, 
Et›
);

1447 
ªt
;

1449 
OIF
:

1450 
ok
 |
Et›
;

1451 
	`ty≥checkli°
(
n
->
nöô
, 
Et›
);

1452 
	`ty≥check
(&
n
->
¡e°
, 
Erv
);

1453 if(
n
->
¡e°
 !
N
 && (
t
 =Ç->¡e°->
ty≥
Ë!
T
 &&Å->
ëy≥
 !
TBOOL
)

1454 
	`yyîr‹
("n⁄-boﬁ %lN u£dá†i‡c⁄dôi⁄", 
n
->
¡e°
);

1455 
	`ty≥checkli°
(
n
->
nbody
, 
Et›
);

1456 
	`ty≥checkli°
(
n
->
√l£
, 
Et›
);

1457 
ªt
;

1459 
ORETURN
:

1460 
ok
 |
Et›
;

1461 if(
	`cou¡
(
n
->
li°
) == 1)

1462 
	`ty≥checkli°
(
n
->
li°
, 
Erv
 | 
E‚°ru˘
);

1464 
	`ty≥checkli°
(
n
->
li°
, 
Erv
);

1465 if(
cur‚
 =
N
) {

1466 
	`yyîr‹
("return outside function");

1467 
îr‹
;

1469 if(
cur‚
->
ty≥
->
ouäamed
 && 
n
->
li°
 =
nû
)

1470 
ªt
;

1471 
	`ty≥checka°e
(
ORETURN
, 
nû
, 0, 
	`gëouèrgx
(
cur‚
->
ty≥
), 
n
->
li°
, "returnárgument");

1472 
ªt
;

1474 
OSELECT
:

1475 
ok
 |
Et›
;

1476 
	`ty≥check£À˘
(
n
);

1477 
ªt
;

1479 
OSWITCH
:

1480 
ok
 |
Et›
;

1481 
	`ty≥checkswôch
(
n
);

1482 
ªt
;

1484 
ORANGE
:

1485 
ok
 |
Et›
;

1486 
	`ty≥checkønge
(
n
);

1487 
ªt
;

1489 
OTYPESW
:

1490 
	`yyîr‹
("use of .(type) outsideÅype switch");

1491 
îr‹
;

1493 
OXCASE
:

1494 
ok
 |
Et›
;

1495 
	`ty≥checkli°
(
n
->
li°
, 
Erv
);

1496 
	`ty≥checkli°
(
n
->
nbody
, 
Et›
);

1497 
ªt
;

1499 
ODCLFUNC
:

1500 
ok
 |
Et›
;

1501 
	`ty≥checkfunc
(
n
);

1502 
ªt
;

1504 
ODCLCONST
:

1505 
ok
 |
Et›
;

1506 
	`ty≥check
(&
n
->
À·
, 
Erv
);

1507 
ªt
;

1509 
ODCLTYPE
:

1510 
ok
 |
Et›
;

1511 
	`ty≥check
(&
n
->
À·
, 
Ety≥
);

1512 if(!
öˇ¬edimp‹t
)

1513 
	`checkwidth
(
n
->
À·
->
ty≥
);

1514 
ªt
;

1517 
ªt
:

1518 
t
 = 
n
->
ty≥
;

1519 if(
t
 && !t->
fu«rg
 && 
n
->
›
 !
OTYPE
) {

1520 
t
->
ëy≥
) {

1521 
TFUNC
:

1522 
TANY
:

1523 
TFORW
:

1524 
TIDEAL
:

1525 
TNIL
:

1526 
TBLANK
:

1529 
	`checkwidth
(
t
);

1535 if(
ß„mode
 && !
öˇ¬edimp‹t
 && !
imp‹çkg
 && 
t
 &&Å->
ëy≥
 =
TUNSAFEPTR
)

1536 
	`yyîr‹
("cannot use unsafe.Pointer");

1538 
	`evc⁄°
(
n
);

1539 if(
n
->
›
 =
OTYPE
 && !(
t›
 & 
Ety≥
)) {

1540 
	`yyîr‹
("ty≥ %T i†nŸá¿ex¥essi⁄", 
n
->
ty≥
);

1541 
îr‹
;

1543 if((
t›
 & (
Erv
|
Ety≥
)Ë=Ety≥ && 
n
->
›
 !
OTYPE
) {

1544 
	`yyîr‹
("%N i†nŸáÅy≥", 
n
);

1545 
îr‹
;

1547 if((
ok
 & 
EˇŒ
Ë&& !(
t›
 & Ecall)) {

1548 
	`yyîr‹
("mëhod %N i†nŸá¿ex¥essi⁄, mu° bêˇŒed", 
n
);

1549 
îr‹
;

1552 if((
t›
 & (
EˇŒ
|
Erv
|
Ety≥
)Ë&& !—› & 
Et›
Ë&& !(
ok
 & (Erv|Etype|Ecall))) {

1553 
	`yyîr‹
("%N u£dá†vÆue", 
n
);

1554 
îr‹
;

1556 if((
t›
 & 
Et›
Ë&& !—› & (
EˇŒ
|
Erv
|
Ety≥
)Ë&& !(
ok
 & Etop)) {

1557 if(
n
->
düg
 == 0) {

1558 
	`yyîr‹
("%NÇŸ u£d", 
n
);

1559 
n
->
düg
 = 1;

1561 
îr‹
;

1568 
out
;

1570 
badˇŒ1
:

1571 
	`yyîr‹
("övÆidárgumíà%lN f‹ %O", 
n
->
À·
,Ç->
›
);

1572 
îr‹
;

1574 
îr‹
:

1575 
n
->
ty≥
 = 
T
;

1577 
out
:

1578 *
≈
 = 
n
;

1579 
	}
}

1582 
	$im∂icô°¨
(
Node
 **
¬
)

1584 
Ty≥
 *
t
;

1585 
Node
 *
n
;

1588 
n
 = *
¬
;

1589 
t
 = 
n
->
ty≥
;

1590 if(
t
 =
T
 || !
i•å
[t->
ëy≥
])

1592 
t
 =Å->
ty≥
;

1593 if(
t
 =
T
)

1595 if(!
	`isfixed¨øy
(
t
))

1597 
n
 = 
	`nod
(
OIND
,Ç, 
N
);

1598 
n
->
im∂icô
 = 1;

1599 
	`ty≥check
(&
n
, 
Erv
);

1600 *
¬
 = 
n
;

1601 
	}
}

1604 
	$⁄órg
(
Node
 *
n
, *
f
, ...)

1606 
va_li°
 
¨g
;

1607 *
p
;

1609 if(
n
->
À·
 !
N
)

1611 if(
n
->
li°
 =
nû
) {

1612 
	`va_°¨t
(
¨g
, 
f
);

1613 
p
 = 
	`vsm¥öt
(
f
, 
¨g
);

1614 
	`va_íd
(
¨g
);

1615 
	`yyîr‹
("missögárgumíàtÿ%s: %N", 
p
, 
n
);

1618 if(
n
->
li°
->
√xt
 !
nû
) {

1619 
	`va_°¨t
(
¨g
, 
f
);

1620 
p
 = 
	`vsm¥öt
(
f
, 
¨g
);

1621 
	`va_íd
(
¨g
);

1622 
	`yyîr‹
("toÿm™yárgumít†tÿ%s: %N", 
p
, 
n
);

1623 
n
->
À·
 =Ç->
li°
->n;

1624 
n
->
li°
 = 
nû
;

1627 
n
->
À·
 =Ç->
li°
->n;

1628 
n
->
li°
 = 
nû
;

1630 
	}
}

1633 
	$twﬂrg
(
Node
 *
n
)

1635 if(
n
->
À·
 !
N
)

1637 if(
n
->
li°
 =
nû
) {

1638 
	`yyîr‹
("missögárgumíàtÿ%O - %N", 
n
->
›
,Ç);

1641 
n
->
À·
 =Ç->
li°
->n;

1642 if(
n
->
li°
->
√xt
 =
nû
) {

1643 
	`yyîr‹
("missögárgumíàtÿ%O - %N", 
n
->
›
,Ç);

1644 
n
->
li°
 = 
nû
;

1647 if(
n
->
li°
->
√xt
->√xà!
nû
) {

1648 
	`yyîr‹
("toÿm™yárgumít†tÿ%O - %N", 
n
->
›
,Ç);

1649 
n
->
li°
 = 
nû
;

1652 
n
->
right
 =Ç->
li°
->
√xt
->n;

1653 
n
->
li°
 = 
nû
;

1655 
	}
}

1657 
Ty≥
*

1658 
	$lookdŸ1
(
Node
 *
î∫ode
, 
Sym
 *
s
, 
Ty≥
 *
t
, Ty≥ *
f
, 
do°rcmp
)

1660 
Ty≥
 *
r
;

1662 
r
 = 
T
;

1663 ; 
f
!=
T
; f=f->
down
) {

1664 if(
do°rcmp
 && 
	`°rcmp
(
f
->
sym
->
«me
, 
s
->name) == 0)

1665  
f
;

1666 if(
f
->
sym
 !
s
)

1668 if(
r
 !
T
) {

1669 if(
î∫ode
)

1670 
	`yyîr‹
("ambiguou†£À˘‹ %N", 
î∫ode
);

1671 if(
i•å
[
t
->
ëy≥
])

1672 
	`yyîr‹
("ambiguou†£À˘‹ (%T).%S", 
t
, 
s
);

1674 
	`yyîr‹
("ambiguou†£À˘‹ %T.%S", 
t
, 
s
);

1677 
r
 = 
f
;

1679  
r
;

1680 
	}
}

1683 
	$lookty≥dŸ
(
Node
 *
n
, 
Ty≥
 *
t
, 
do°rcmp
)

1685 
Ty≥
 *
f1
, *
f2
, *
â
;

1686 
Sym
 *
s
;

1688 
s
 = 
n
->
right
->
sym
;

1690 if(
t
->
ëy≥
 =
TINTER
) {

1691 
f1
 = 
	`lookdŸ1
(
n
, 
s
, 
t
,Å->
ty≥
, 
do°rcmp
);

1692 if(
f1
 =
T
)

1695 if(
f1
->
width
 =
BADWIDTH
)

1696 
	`Áèl
("lookdŸ badwidth %T %p", 
f1
, f1);

1697 
n
->
right
 = 
	`mëhod«me
“->right, 
t
);

1698 
n
->
xoff£t
 = 
f1
->
width
;

1699 
n
->
ty≥
 = 
f1
->type;

1700 
n
->
›
 = 
ODOTINTER
;

1704 
â
 = 
t
;

1705 if(
t
->
sym
 =
S
 && 
i•å
[t->
ëy≥
])

1706 
â
 = 
t
->
ty≥
;

1708 
f2
 = 
	`mëhty≥
(
â
, 0);

1709 if(
f2
 =
T
)

1712 
	`ex∑ndmëh
(
f2
);

1713 
f2
 = 
	`lookdŸ1
(
n
, 
s
, f2, f2->
xmëhod
, 
do°rcmp
);

1714 if(
f2
 =
T
)

1718 if(
i•å
[
	`gëthisx
(
f2
->
ty≥
)->ty≥->ty≥->
ëy≥
]

1719 && !
i•å
[
t
->
ëy≥
]

1720 && 
f2
->
embedded
 != 2

1721 && !
	`isiÁ˚mëhod
(
f2
->
ty≥
)) {

1722 
	`yyîr‹
("övÆid mëhodÉx¥essi⁄ %N (√ed†poöã∏ª˚ivî: (*%T).%hS)", 
n
, 
t
, 
f2
->
sym
);

1726 
n
->
right
 = 
	`mëhod«me
“->right, 
t
);

1727 
n
->
xoff£t
 = 
f2
->
width
;

1728 
n
->
ty≥
 = 
f2
->type;

1729 
n
->
›
 = 
ODOTMETH
;

1731 
	}
}

1733 
Ty≥
*

1734 
	$dîeÁŒ
(
Ty≥
* 
t
)

1736 
t
 &&Å->
ëy≥
 =
çå
)

1737 
t
 =Å->
ty≥
;

1738  
t
;

1739 
	}
}

1742 
	$lookdŸ
(
Node
 *
n
, 
Ty≥
 *
t
, 
do°rcmp
)

1744 
Ty≥
 *
f1
, *
f2
, *
â
, *
rcvr
;

1745 
Sym
 *
s
;

1747 
s
 = 
n
->
right
->
sym
;

1749 
	`dowidth
(
t
);

1750 
f1
 = 
T
;

1751 if(
t
->
ëy≥
 =
TSTRUCT
 ||Å->ëy≥ =
TINTER
)

1752 
f1
 = 
	`lookdŸ1
(
n
, 
s
, 
t
,Å->
ty≥
, 
do°rcmp
);

1754 
f2
 = 
T
;

1755 if(
n
->
À·
->
ty≥
 =
t
 ||Ç->À·->ty≥->
sym
 =
S
) {

1756 
f2
 = 
	`mëhty≥
(
t
, 0);

1757 if(
f2
 !
T
) {

1760 
f2
 = 
	`lookdŸ1
(
n
, 
s
, f2, f2->
mëhod
, 
do°rcmp
);

1764 if(
f1
 !
T
) {

1765 if(
f2
 !
T
)

1766 
	`yyîr‹
("%S is both fieldánd method",

1767 
n
->
right
->
sym
);

1768 if(
f1
->
width
 =
BADWIDTH
)

1769 
	`Áèl
("lookdŸ badwidth %T %p", 
f1
, f1);

1770 
n
->
xoff£t
 = 
f1
->
width
;

1771 
n
->
ty≥
 = 
f1
->type;

1772 if(
t
->
ëy≥
 =
TINTER
) {

1773 if(
i•å
[
n
->
À·
->
ty≥
->
ëy≥
]) {

1774 
n
->
À·
 = 
	`nod
(
OIND
,Ç->À·, 
N
);

1775 
n
->
À·
->
im∂icô
 = 1;

1776 
	`ty≥check
(&
n
->
À·
, 
Erv
);

1778 
n
->
›
 = 
ODOTINTER
;

1783 if(
f2
 !
T
) {

1784 
â
 = 
n
->
À·
->
ty≥
;

1785 
	`dowidth
(
â
);

1786 
rcvr
 = 
	`gëthisx
(
f2
->
ty≥
)->type->type;

1787 if(!
	`eqty≥
(
rcvr
, 
â
)) {

1788 if(
rcvr
->
ëy≥
 =
çå
 && 
	`eqty≥
‘cvr->
ty≥
, 
â
)) {

1789 
	`checklvÆue
(
n
->
À·
, "callÖointer method on");

1790 if(
debug
['N'])

1791 
	`addªsˇ≥s
(
n
->
À·
);

1792 
n
->
À·
 = 
	`nod
(
OADDR
,Ç->À·, 
N
);

1793 
n
->
À·
->
im∂icô
 = 1;

1794 
	`ty≥check
(&
n
->
À·
, 
Ety≥
|
Erv
);

1795 } if(
â
->
ëy≥
 =
çå
 && 
	`eqty≥
—t->
ty≥
, 
rcvr
)) {

1796 
n
->
À·
 = 
	`nod
(
OIND
,Ç->À·, 
N
);

1797 
n
->
À·
->
im∂icô
 = 1;

1798 
	`ty≥check
(&
n
->
À·
, 
Ety≥
|
Erv
);

1799 } if(
â
->
ëy≥
 =
çå
 &&Åt->
ty≥
->ëy≥ =çå && 
	`eqty≥
(
	`dîeÁŒ
—t), 
rcvr
)) {

1800 
	`yyîr‹
("ˇŒög mëhod %N wôhÑe˚ivî %lNÑequúe†ex∂icô dîe„ªn˚", 
n
->
right
,Ç->
À·
);

1801 
â
->
ëy≥
 =
çå
) {

1802 
n
->
À·
 = 
	`nod
(
OIND
,Ç->À·, 
N
);

1803 
n
->
À·
->
im∂icô
 = 1;

1804 
	`ty≥check
(&
n
->
À·
, 
Ety≥
|
Erv
);

1805 
â
 =Åt->
ty≥
;

1808 
	`Áèl
("mëhod mism©ch: %T f‹ %T", 
rcvr
, 
â
);

1811 
n
->
right
 = 
	`mëhod«me
“->right,Ç->
À·
->
ty≥
);

1812 
n
->
xoff£t
 = 
f2
->
width
;

1813 
n
->
ty≥
 = 
f2
->type;

1815 
n
->
›
 = 
ODOTMETH
;

1820 
	}
}

1823 
	$nokeys
(
NodeLi°
 *
l
)

1825 ; 
l
;Üˆ->
√xt
)

1826 if(
l
->
n
->
›
 =
OKEY
)

1829 
	}
}

1835 
	$ty≥checka°e
(
›
, 
Node
 *
ˇŒ
, 
isddd
, 
Ty≥
 *
t°ru˘
, 
NodeLi°
 *
∆
, *
desc
)

1837 
Ty≥
 *
t
, *
é
, *
ä
;

1838 
Node
 *
n
;

1839 
 o
;

1840 *
why
;

1842 
 o
 = 
löío
;

1844 if(
t°ru˘
->
broke
)

1845 
out
;

1847 if(
∆
 !
nû
 &&Çl->
√xt
 =nû && (
n
 =Çl->n)->
ty≥
 !
T
)

1848 if(
n
->
ty≥
->
ëy≥
 =
TSTRUCT
 &&Ç->ty≥->
fu«rg
) {

1849 
ä
 = 
n
->
ty≥
->type;

1850 
é
=
t°ru˘
->
ty≥
;Ål;ÅlÒl->
down
) {

1851 if(
é
->
isddd
) {

1852 ; 
ä
;ÅnÒn->
down
) {

1853 if(
	`assign›
(
ä
->
ty≥
, 
é
->ty≥->ty≥, &
why
) == 0) {

1854 if(
ˇŒ
 !
N
)

1855 
	`yyîr‹
("ˇ¬Ÿ u£ %Tá†ty≥ %T i¿¨gumíàtÿ%N%s", 
ä
->
ty≥
, 
é
->ty≥, 
ˇŒ
, 
why
);

1857 
	`yyîr‹
("ˇ¬Ÿ u£ %Tá†ty≥ %T i¿%s%s", 
ä
->
ty≥
, 
é
->ty≥, 
desc
, 
why
);

1860 
out
;

1862 if(
ä
 =
T
)

1863 
nŸíough
;

1864 if(
	`assign›
(
ä
->
ty≥
, 
é
->ty≥, &
why
) == 0) {

1865 if(
ˇŒ
 !
N
)

1866 
	`yyîr‹
("ˇ¬Ÿ u£ %Tá†ty≥ %T i¿¨gumíàtÿ%N%s", 
ä
->
ty≥
, 
é
->ty≥, 
ˇŒ
, 
why
);

1868 
	`yyîr‹
("ˇ¬Ÿ u£ %Tá†ty≥ %T i¿%s%s", 
ä
->
ty≥
, 
é
->ty≥, 
desc
, 
why
);

1870 
ä
 =Ån->
down
;

1872 if(
ä
 !
T
)

1873 
toom™y
;

1874 
out
;

1877 
é
=
t°ru˘
->
ty≥
;Ål;ÅlÒl->
down
) {

1878 
t
 = 
é
->
ty≥
;

1879 if(
é
->
isddd
) {

1880 if(
isddd
) {

1881 if(
∆
 =
nû
)

1882 
nŸíough
;

1883 if(
∆
->
√xt
 !
nû
)

1884 
toom™y
;

1885 
n
 = 
∆
->n;

1886 
	`£éöío
(
n
);

1887 if(
n
->
ty≥
 !
T
)

1888 
∆
->
n
 = 
	`assignc⁄v
“, 
t
, 
desc
);

1889 
out
;

1891 ; 
∆
;ÇlÚl->
√xt
) {

1892 
n
 = 
∆
->n;

1893 
	`£éöío
(
∆
->
n
);

1894 if(
n
->
ty≥
 !
T
)

1895 
∆
->
n
 = 
	`assignc⁄v
“, 
t
->
ty≥
, 
desc
);

1897 
out
;

1899 if(
∆
 =
nû
)

1900 
nŸíough
;

1901 
n
 = 
∆
->n;

1902 
	`£éöío
(
n
);

1903 if(
n
->
ty≥
 !
T
)

1904 
∆
->
n
 = 
	`assignc⁄v
“, 
t
, 
desc
);

1905 
∆
 =Çl->
√xt
;

1907 if(
∆
 !
nû
)

1908 
toom™y
;

1909 if(
isddd
) {

1910 if(
ˇŒ
 !
N
)

1911 
	`yyîr‹
("övÆid u£ o‡... i¿ˇŒÅÿ%N", 
ˇŒ
);

1913 
	`yyîr‹
("övÆid u£ o‡... i¿%O", 
›
);

1916 
out
:

1917 
löío
 = 
 o
;

1920 
nŸíough
:

1921 if(
ˇŒ
 !
N
)

1922 
	`yyîr‹
("nŸÉnoughárgumít†ö cÆ»tÿ%N", 
ˇŒ
);

1924 
	`yyîr‹
("nŸÉnoughárgumít†tÿ%O", 
›
);

1925 
out
;

1927 
toom™y
:

1928 if(
ˇŒ
 !
N
)

1929 
	`yyîr‹
("toÿm™yárgumít†ö cÆ»tÿ%N", 
ˇŒ
);

1931 
	`yyîr‹
("toÿm™yárgumít†tÿ%O", 
›
);

1932 
out
;

1933 
	}
}

1940 
	$fõlddup
(
Node
 *
n
, Nodê*
hash
[], 
ul⁄g
 
nhash
)

1942 
uöt
 
h
;

1943 *
s
;

1944 
Node
 *
a
;

1946 if(
n
->
›
 !
ONAME
)

1947 
	`Áèl
("fielddup:Çot ONAME");

1948 
s
 = 
n
->
sym
->
«me
;

1949 
h
 = 
	`°röghash
(
s
)%
nhash
;

1950 
a
=
hash
[
h
];á!=
N
;á˜->
¡e°
) {

1951 if(
	`°rcmp
(
a
->
sym
->
«me
, 
s
) == 0) {

1952 
	`yyîr‹
("du∂iˇã fõldÇamêö såu˘ÜôîÆ: %s", 
s
);

1956 
n
->
¡e°
 = 
hash
[
h
];

1957 
hash
[
h
] = 
n
;

1958 
	}
}

1961 
	$keydup
(
Node
 *
n
, Nodê*
hash
[], 
ul⁄g
 
nhash
)

1963 
uöt
 
h
;

1964 
ul⁄g
 
b
;

1965 
d
;

1966 
i
;

1967 
Node
 *
a
;

1968 
Node
 
cmp
;

1969 *
s
;

1971 
	`evc⁄°
(
n
);

1972 if(
n
->
›
 !
OLITERAL
)

1975 
n
->
vÆ
.
˘y≥
) {

1977 
b
 = 23;

1979 
CTINT
:

1980 
CTRUNE
:

1981 
b
 = 
	`mpgëfix
(
n
->
vÆ
.
u
.
xvÆ
);

1983 
CTFLT
:

1984 
d
 = 
	`mpgëÊt
(
n
->
vÆ
.
u
.
fvÆ
);

1985 
s
 = (*)&
d
;

1986 
b
 = 0;

1987 
i
=(
d
); i>0; i--)

1988 
b
 = b*
PRIME1
 + *
s
++;

1990 
CTSTR
:

1991 
b
 = 0;

1992 
s
 = 
n
->
vÆ
.
u
.
svÆ
->s;

1993 
i
=
n
->
vÆ
.
u
.
svÆ
->
Àn
; i>0; i--)

1994 
b
 = b*
PRIME1
 + *
s
++;

1998 
h
 = 
b
%
nhash
;

1999 
	`mem£t
(&
cmp
, 0, (cmp));

2000 
a
=
hash
[
h
];á!=
N
;á˜->
¡e°
) {

2001 
cmp
.
›
 = 
OEQ
;

2002 
cmp
.
À·
 = 
n
;

2003 
cmp
.
right
 = 
a
;

2004 
	`evc⁄°
(&
cmp
);

2005 
b
 = 
cmp
.
vÆ
.
u
.
bvÆ
;

2006 if(
b
) {

2008 
	`yyîr‹
("du∂iˇã key %N i¿m≠ÜôîÆ", 
n
);

2012 
n
->
¡e°
 = 
hash
[
h
];

2013 
hash
[
h
] = 
n
;

2014 
	}
}

2017 
	$ödexdup
(
Node
 *
n
, Nodê*
hash
[], 
ul⁄g
 
nhash
)

2019 
uöt
 
h
;

2020 
Node
 *
a
;

2021 
ul⁄g
 
b
, 
c
;

2023 if(
n
->
›
 !
OLITERAL
)

2024 
	`Áèl
("indexdup:Çot OLITERAL");

2026 
b
 = 
	`mpgëfix
(
n
->
vÆ
.
u
.
xvÆ
);

2027 
h
 = 
b
%
nhash
;

2028 
a
=
hash
[
h
];á!=
N
;á˜->
¡e°
) {

2029 
c
 = 
	`mpgëfix
(
a
->
vÆ
.
u
.
xvÆ
);

2030 if(
b
 =
c
) {

2031 
	`yyîr‹
("du∂iˇã index i¿¨øyÜôîÆ: %ld", 
b
);

2035 
n
->
¡e°
 = 
hash
[
h
];

2036 
hash
[
h
] = 
n
;

2037 
	}
}

2040 
	$¥ime
(
ul⁄g
 
h
, ul⁄g 
§
)

2042 
ul⁄g
 
n
;

2044 
n
=3;Ç<=
§
;Ç+=2)

2045 if(
h
%
n
 == 0)

2048 
	}
}

2050 
ul⁄g


2051 
	$öôhash
(
Node
 *
n
, Nodê***
hash
, Nodê**
autohash
, 
ul⁄g
 
«utohash
)

2053 
ul⁄g
 
h
, 
§
;

2054 
NodeLi°
 *
Œ
;

2055 
i
;

2058 
h
 = 0;

2059 
Œ
=
n
->
li°
;Ül;Ülˆl->
√xt
)

2060 
h
++;

2064 if(
h
 <
«utohash
) {

2065 *
hash
 = 
autohash
;

2066 
	`mem£t
(*
hash
, 0, 
«utohash
 * (**hash));

2067  
«utohash
;

2071 
h
 += h/8;

2072 
h
 |= 1;

2075 
§
 = 
h
/2;

2076 
i
=0; i<5; i++)

2077 
§
 = (§ + 
h
/sr)/2;

2080 !
	`¥ime
(
h
, 
§
))

2081 
h
 += 2;

2084 *
hash
 = 
	`mÆ
(
h
 * (**hash));

2085 
	`mem£t
(*
hash
, 0, 
h
 * (**hash));

2086  
h
;

2087 
	}
}

2090 
	$iscom±y≥
(
Ty≥
 *
t
)

2092 
t
->
ëy≥
) {

2093 
TARRAY
:

2094 
TSTRUCT
:

2095 
TMAP
:

2097 
TPTR32
:

2098 
TPTR64
:

2099 
t
->
ty≥
->
ëy≥
) {

2100 
TARRAY
:

2101 
TSTRUCT
:

2102 
TMAP
:

2108 
	}
}

2111 
	$pushty≥
(
Node
 *
n
, 
Ty≥
 *
t
)

2113 if(
n
 =
N
 ||Ç->
›
 !
OCOMPLIT
 || !
	`iscom±y≥
(
t
))

2116 if(
n
->
right
 =
N
) {

2117 
n
->
right
 = 
	`ty≥nod
(
t
);

2118 
n
->
im∂icô
 = 1;

2119 
n
->
right
->
im∂icô
 = 1;

2121 if(
debug
['s']) {

2122 
	`ty≥check
(&
n
->
right
, 
Ety≥
);

2123 if(
n
->
right
->
ty≥
 !
T
 && 
	`eqty≥
“->right->ty≥, 
t
))

2124 
	`¥öt
("%lL:Ñedund™àty≥: %T\n", 
n
->
löío
, 
t
);

2126 
	}
}

2129 
	$ty≥checkcom∂ô
(
Node
 **
≈
)

2131 
bad
, 
i
, 
Àn
, 
√º
;

2132 
Node
 *
l
, *
n
, *
r
, **
hash
;

2133 
NodeLi°
 *
Œ
;

2134 
Ty≥
 *
t
, *
f
;

2135 
Sym
 *
s
;

2136 
öt32
 
 o
;

2137 
ul⁄g
 
nhash
;

2138 
Node
 *
autohash
[101];

2140 
n
 = *
≈
;

2141 
 o
 = 
löío
;

2143 if(
n
->
right
 =
N
) {

2144 if(
n
->
li°
 !
nû
)

2145 
	`£éöío
(
n
->
li°
->n);

2146 
	`yyîr‹
("missingÅype in compositeÜiteral");

2147 
îr‹
;

2150 
	`£éöío
(
n
->
right
);

2151 
l
 = 
	`ty≥check
(&
n
->
right
 , 
Ety≥
|
Ecom∂ô
);

2152 if((
t
 = 
l
->
ty≥
Ë=
T
)

2153 
îr‹
;

2154 
√º
 = 
√º‹s
;

2155 
n
->
ty≥
 = 
t
;

2157 if(
i•å
[
t
->
ëy≥
]) {

2160 if(!
n
->
right
->
im∂icô
) {

2161 
	`yyîr‹
("övÆidÖoöã∏ty≥ %T f‹ composôêlôîÆ (u£ &%T in°ód)", 
t
,Å->
ty≥
);

2162 
îr‹
;

2166 if(!
	`iscom±y≥
(
t
)) {

2167 
	`yyîr‹
("övÆidÖoöã∏ty≥ %T f‹ composôêlôîÆ", 
t
);

2168 
îr‹
;

2170 
t
 =Å->
ty≥
;

2173 
t
->
ëy≥
) {

2175 
	`yyîr‹
("övÆidÅy≥ f‹ composôêlôîÆ: %T", 
t
);

2176 
n
->
ty≥
 = 
T
;

2179 
TARRAY
:

2180 
nhash
 = 
	`öôhash
(
n
, &
hash
, 
autohash
, 
	`√Àm
(autohash));

2182 
Àn
 = 0;

2183 
i
 = 0;

2184 
Œ
=
n
->
li°
;Ül;Ülˆl->
√xt
) {

2185 
l
 = 
Œ
->
n
;

2186 
	`£éöío
(
l
);

2187 if(
l
->
›
 !
OKEY
) {

2188 
l
 = 
	`nod
(
OKEY
, 
	`nodötc⁄°
(
i
),Ü);

2189 
l
->
À·
->
ty≥
 = 
ty≥s
[
TINT
];

2190 
l
->
À·
->
ty≥check
 = 1;

2191 
Œ
->
n
 = 
l
;

2194 
	`ty≥check
(&
l
->
À·
, 
Erv
);

2195 
	`evc⁄°
(
l
->
À·
);

2196 
i
 = 
	`n⁄√gc⁄°
(
l
->
À·
);

2197 if(
i
 < 0) {

2198 
	`yyîr‹
("array index must beÇon-negative integer constant");

2199 
i
 = -(1<<30);

2201 if(
i
 >= 0)

2202 
	`ödexdup
(
l
->
À·
, 
hash
, 
nhash
);

2203 
i
++;

2204 if(
i
 > 
Àn
) {

2205 
Àn
 = 
i
;

2206 if(
t
->
bound
 >0 && 
Àn
 >Å->bound) {

2207 
	`£éöío
(
l
);

2208 
	`yyîr‹
("¨øy index %d ouào‡bound†[0:%d]", 
Àn
, 
t
->
bound
);

2209 
t
->
bound
 = -1;

2213 
r
 = 
l
->
right
;

2214 
	`pushty≥
(
r
, 
t
->
ty≥
);

2215 
	`ty≥check
(&
r
, 
Erv
);

2216 
	`deÁu…lô
(&
r
, 
t
->
ty≥
);

2217 
l
->
right
 = 
	`assignc⁄v
(
r
, 
t
->
ty≥
, "arrayÉlement");

2219 if(
t
->
bound
 == -100)

2220 
t
->
bound
 = 
Àn
;

2221 if(
t
->
bound
 < 0)

2222 
n
->
right
 = 
	`nodötc⁄°
(
Àn
);

2223 
n
->
›
 = 
OARRAYLIT
;

2226 
TMAP
:

2227 
nhash
 = 
	`öôhash
(
n
, &
hash
, 
autohash
, 
	`√Àm
(autohash));

2229 
Œ
=
n
->
li°
;Ül;Ülˆl->
√xt
) {

2230 
l
 = 
Œ
->
n
;

2231 
	`£éöío
(
l
);

2232 if(
l
->
›
 !
OKEY
) {

2233 
	`ty≥check
(&
Œ
->
n
, 
Erv
);

2234 
	`yyîr‹
("missing key in mapÜiteral");

2238 
	`ty≥check
(&
l
->
À·
, 
Erv
);

2239 
	`deÁu…lô
(&
l
->
À·
, 
t
->
down
);

2240 
l
->
À·
 = 
	`assignc⁄v
÷->À·, 
t
->
down
, "map key");

2241 i‡(
l
->
À·
->
›
 !
OCONV
)

2242 
	`keydup
(
l
->
À·
, 
hash
, 
nhash
);

2244 
r
 = 
l
->
right
;

2245 
	`pushty≥
(
r
, 
t
->
ty≥
);

2246 
	`ty≥check
(&
r
, 
Erv
);

2247 
	`deÁu…lô
(&
r
, 
t
->
ty≥
);

2248 
l
->
right
 = 
	`assignc⁄v
(
r
, 
t
->
ty≥
, "map value");

2250 
n
->
›
 = 
OMAPLIT
;

2253 
TSTRUCT
:

2254 
bad
 = 0;

2255 if(
n
->
li°
 !
nû
 && 
	`nokeys
(n->list)) {

2257 
f
 = 
t
->
ty≥
;

2258 
Œ
=
n
->
li°
;Ül;Ülˆl->
√xt
) {

2259 
	`£éöío
(
Œ
->
n
);

2260 
	`ty≥check
(&
Œ
->
n
, 
Erv
);

2261 if(
f
 =
nû
) {

2262 if(!
bad
++)

2263 
	`yyîr‹
("too many values in struct initializer");

2266 
s
 = 
f
->
sym
;

2267 if(
s
 !
nû
 && !
	`exp‹äame
(s->
«me
Ë&& s->
pkg
 !
loˇÕkg
)

2268 
	`yyîr‹
("im∂icôássignmíào‡u√xp‹ãd fõld '%s' i¿%TÜôîÆ", 
s
->
«me
, 
t
);

2270 
Œ
->
n
 = 
	`assignc⁄v
÷l->n, 
f
->
ty≥
, "field value");

2271 
Œ
->
n
 = 
	`nod
(
OKEY
, 
	`√w«me
(
f
->
sym
),Ül->n);

2272 
Œ
->
n
->
À·
->
ty≥
 = 
f
;

2273 
Œ
->
n
->
À·
->
ty≥check
 = 1;

2274 
f
 = f->
down
;

2276 if(
f
 !
nû
)

2277 
	`yyîr‹
("too few values in struct initializer");

2279 
nhash
 = 
	`öôhash
(
n
, &
hash
, 
autohash
, 
	`√Àm
(autohash));

2282 
Œ
=
n
->
li°
;Ül;Ülˆl->
√xt
) {

2283 
l
 = 
Œ
->
n
;

2284 
	`£éöío
(
l
);

2285 if(
l
->
›
 !
OKEY
) {

2286 if(!
bad
++)

2287 
	`yyîr‹
("mixture of field:valueánd value initializers");

2288 
	`ty≥check
(&
Œ
->
n
, 
Erv
);

2291 
s
 = 
l
->
À·
->
sym
;

2292 if(
s
 =
S
) {

2293 
	`yyîr‹
("övÆid fõldÇamê%N i¿°ru˘ inôülizî", 
l
->
À·
);

2294 
	`ty≥check
(&
l
->
right
, 
Erv
);

2301 if(
s
->
pkg
 !
loˇÕkg
 && 
	`exp‹äame
(s->
«me
))

2302 
s
 = 
	`lookup
(s->
«me
);

2304 
f
 = 
	`lookdŸ1
(
nû
, 
s
, 
t
,Å->
ty≥
, 0);

2305 if(
f
 =
nû
) {

2306 
	`yyîr‹
("unknow¿%T fõld '%S' i¿°ru˘ÜôîÆ", 
t
, 
s
);

2309 
l
->
À·
 = 
	`√w«me
(
s
);

2310 
l
->
À·
->
ty≥check
 = 1;

2311 
l
->
À·
->
ty≥
 = 
f
;

2312 
s
 = 
f
->
sym
;

2313 
	`fõlddup
(
	`√w«me
(
s
), 
hash
, 
nhash
);

2314 
r
 = 
l
->
right
;

2316 
	`ty≥check
(&
r
, 
Erv
);

2317 
l
->
right
 = 
	`assignc⁄v
(
r
, 
f
->
ty≥
, "field value");

2320 
n
->
›
 = 
OSTRUCTLIT
;

2323 if(
√º
 !
√º‹s
)

2324 
îr‹
;

2326 if(
i•å
[
n
->
ty≥
->
ëy≥
]) {

2327 
n
 = 
	`nod
(
OPTRLIT
,Ç, 
N
);

2328 
n
->
ty≥check
 = 1;

2329 
n
->
ty≥
 =Ç->
À·
->type;

2330 
n
->
À·
->
ty≥
 = 
t
;

2331 
n
->
À·
->
ty≥check
 = 1;

2334 *
≈
 = 
n
;

2335 
löío
 = 
 o
;

2338 
îr‹
:

2339 
n
->
ty≥
 = 
T
;

2340 *
≈
 = 
n
;

2341 
löío
 = 
 o
;

2342 
	}
}

2348 
	$i¶vÆue
(
Node
 *
n
)

2350 
n
->
›
) {

2351 
OINDEX
:

2352 if(
	`isfixed¨øy
(
n
->
À·
->
ty≥
))

2353  
	`i¶vÆue
(
n
->
À·
);

2354 if(
n
->
À·
->
ty≥
 !
T
 &&Ç->À·->ty≥->
ëy≥
 =
TSTRING
)

2357 
OIND
:

2358 
ODOTPTR
:

2360 
ODOT
:

2361  
	`i¶vÆue
(
n
->
À·
);

2362 
ONAME
:

2363 if(
n
->
˛ass
 =
PFUNC
)

2368 
	}
}

2371 
	$checklvÆue
(
Node
 *
n
, *
vîb
)

2373 if(!
	`i¶vÆue
(
n
))

2374 
	`yyîr‹
("ˇ¬Ÿ %†%N", 
vîb
, 
n
);

2375 
	}
}

2378 
	$checkassign
(
Node
 *
n
)

2380 if(
	`i¶vÆue
(
n
))

2382 if(
n
->
›
 =
OINDEXMAP
) {

2383 
n
->
ëy≥
 = 1;

2386 
	`yyîr‹
("ˇ¬Ÿássig¿tÿ%N", 
n
);

2387 
	}
}

2390 
	$checkassig∆i°
(
NodeLi°
 *
l
)

2392 ; 
l
;Üˆ->
√xt
)

2393 
	`checkassign
(
l
->
n
);

2394 
	}
}

2403 
	$ty≥checkas
(
Node
 *
n
)

2412 
n
->
À·
 = 
	`ªsﬁve
(n->left);

2413 if(
n
->
À·
->
de‚
 !¿||Ç->À·->
¡y≥
)

2414 
	`ty≥check
(&
n
->
À·
, 
Erv
 | 
Easgn
);

2416 
	`checkassign
(
n
->
À·
);

2417 
	`ty≥check
(&
n
->
right
, 
Erv
);

2418 if(
n
->
right
 &&Ç->right->
ty≥
 !
T
) {

2419 if(
n
->
À·
->
ty≥
 !
T
)

2420 
n
->
right
 = 
	`assignc⁄v
“->right,Ç->
À·
->
ty≥
, "assignment");

2422 if(
n
->
À·
->
de‚
 =¿&&Ç->À·->
¡y≥
 =
N
) {

2423 
	`deÁu…lô
(&
n
->
right
, 
T
);

2424 
n
->
À·
->
ty≥
 =Ç->
right
->type;

2430 
n
->
ty≥check
 = 1;

2431 if(
n
->
À·
->
ty≥check
 == 0)

2432 
	`ty≥check
(&
n
->
À·
, 
Erv
 | 
Easgn
);

2433 
	}
}

2436 
	$checkassig¡o
(
Ty≥
 *
§c
, 
Node
 *
d°
)

2438 *
why
;

2440 if(
	`assign›
(
§c
, 
d°
->
ty≥
, &
why
) == 0) {

2441 
	`yyîr‹
("ˇ¬Ÿássig¿%TÅÿ%lN i¿mu…ùÀássignmít%s", 
§c
, 
d°
, 
why
);

2444 
	}
}

2447 
	$ty≥checkas2
(
Node
 *
n
)

2449 
˛
, 
¸
;

2450 
NodeLi°
 *
Œ
, *
Ã
;

2451 
Node
 *
l
, *
r
;

2452 
Iãr
 
s
;

2453 
Ty≥
 *
t
;

2455 
Œ
=
n
->
li°
;Ül;Ülˆl->
√xt
) {

2457 
Œ
->
n
 = 
	`ªsﬁve
(ll->n);

2458 if(
Œ
->
n
->
de‚
 !¿||Ül->n->
¡y≥
)

2459 
	`ty≥check
(&
Œ
->
n
, 
Erv
 | 
Easgn
);

2461 
˛
 = 
	`cou¡
(
n
->
li°
);

2462 
¸
 = 
	`cou¡
(
n
->
æi°
);

2463 
	`checkassig∆i°
(
n
->
li°
);

2464 if(
˛
 > 1 && 
¸
 == 1)

2465 
	`ty≥check
(&
n
->
æi°
->n, 
Erv
 | 
E‚°ru˘
);

2467 
	`ty≥checkli°
(
n
->
æi°
, 
Erv
);

2469 if(
˛
 =
¸
) {

2471 
Œ
=
n
->
li°
, 
Ã
Ú->
æi°
;Ül;Ülˆl->
√xt
,Ür=lr->next) {

2472 if(
Œ
->
n
->
ty≥
 !
T
 && 
Ã
->n->type != T)

2473 
Ã
->
n
 = 
	`assignc⁄v
÷r->n, 
Œ
->n->
ty≥
, "assignment");

2474 if(
Œ
->
n
->
de‚
 =¿&&Ül->n->
¡y≥
 =
N
) {

2475 
	`deÁu…lô
(&
Ã
->
n
, 
T
);

2476 
Œ
->
n
->
ty≥
 = 
Ã
->n->type;

2479 
out
;

2483 
l
 = 
n
->
li°
->n;

2484 
r
 = 
n
->
æi°
->n;

2487 if(
˛
 =1 && 
¸
 =2 && 
l
->
›
 =
OINDEXMAP
) {

2488 if(
l
->
ty≥
 =
T
)

2489 
out
;

2490 
	`yyîr‹
("assignmíàcou¡ mism©ch: %d = %d (u£ dñëe)", 
˛
, 
¸
);

2491 
out
;

2495 if(
¸
 == 1) {

2496 if(
r
->
ty≥
 =
T
)

2497 
out
;

2498 
r
->
›
) {

2499 
OCALLMETH
:

2500 
OCALLINTER
:

2501 
OCALLFUNC
:

2502 if(
r
->
ty≥
->
ëy≥
 !
TSTRUCT
 ||Ñ->ty≥->
fu«rg
 == 0)

2504 
¸
 = 
	`°ru˘cou¡
(
r
->
ty≥
);

2505 if(
¸
 !
˛
)

2506 
mism©ch
;

2507 
n
->
›
 = 
OAS2FUNC
;

2508 
t
 = 
	`°ru˘fú°
(&
s
, &
r
->
ty≥
);

2509 
Œ
=
n
->
li°
;Ül;Ülˆl->
√xt
) {

2510 if(
Œ
->
n
->
ty≥
 !
T
)

2511 
	`checkassig¡o
(
t
->
ty≥
, 
Œ
->
n
);

2512 if(
Œ
->
n
->
de‚
 =¿&&Ül->n->
¡y≥
 =
N
)

2513 
Œ
->
n
->
ty≥
 = 
t
->type;

2514 
t
 = 
	`°ru˘√xt
(&
s
);

2516 
out
;

2521 if(
˛
 =2 && 
¸
 == 1) {

2522 if(
r
->
ty≥
 =
T
)

2523 
out
;

2524 
r
->
›
) {

2525 
OINDEXMAP
:

2526 
n
->
›
 = 
OAS2MAPR
;

2527 
comm⁄
;

2528 
ORECV
:

2529 
n
->
›
 = 
OAS2RECV
;

2530 
n
->
right
 =Ç->
æi°
->n;

2531 
comm⁄
;

2532 
ODOTTYPE
:

2533 
n
->
›
 = 
OAS2DOTTYPE
;

2534 
r
->
›
 = 
ODOTTYPE2
;

2535 
comm⁄
:

2536 if(
l
->
ty≥
 !
T
)

2537 
	`checkassig¡o
(
r
->
ty≥
, 
l
);

2538 if(
l
->
de‚
 =
n
)

2539 
l
->
ty≥
 = 
r
->type;

2540 
l
 = 
n
->
li°
->
√xt
->n;

2541 if(
l
->
ty≥
 !
T
)

2542 
	`checkassig¡o
(
ty≥s
[
TBOOL
], 
l
);

2543 if(
l
->
de‚
 =
n
 &&Ü->
¡y≥
 =
N
)

2544 
l
->
ty≥
 = 
ty≥s
[
TBOOL
];

2545 
out
;

2549 
mism©ch
:

2550 
	`yyîr‹
("assignmíàcou¡ mism©ch: %d = %d", 
˛
, 
¸
);

2552 
out
:

2554 
n
->
ty≥check
 = 1;

2555 
Œ
=
n
->
li°
;Ül;Ülˆl->
√xt
)

2556 if(
Œ
->
n
->
ty≥check
 == 0)

2557 
	`ty≥check
(&
Œ
->
n
, 
Erv
 | 
Easgn
);

2558 
	}
}

2564 
	$ty≥checkfunc
(
Node
 *
n
)

2566 
Ty≥
 *
t
, *
rcvr
;

2568 
	`ty≥check
(&
n
->
¬ame
, 
Erv
 | 
Easgn
);

2569 if((
t
 = 
n
->
¬ame
->
ty≥
Ë=
T
)

2571 
n
->
ty≥
 = 
t
;

2572 
t
->
¬ame
 = 
n
->nname;

2573 
rcvr
 = 
	`gëthisx
(
t
)->
ty≥
;

2574 if(
rcvr
 !
nû
 && 
n
->
sh‹äame
 !
N
 && !
	`isbœnk
(n->shortname))

2575 
	`addmëhod
(
n
->
sh‹äame
->
sym
, 
t
, 1);

2576 
	}
}

2579 
	$°rögtﬂºaylô
(
Node
 **
≈
)

2581 
öt32
 
i
;

2582 
NodeLi°
 *
l
;

2583 
Sålô
 *
s
;

2584 *
p
, *
ï
;

2585 
Ru√
 
r
;

2586 
Node
 *
¬
, *
n
;

2588 
n
 = *
≈
;

2589 if(
n
->
À·
->
›
 !
OLITERAL
 ||Ç->À·->
vÆ
.
˘y≥
 !
CTSTR
)

2590 
	`Áèl
("°rögtﬂºaylô %N", 
n
);

2592 
s
 = 
n
->
À·
->
vÆ
.
u
.
svÆ
;

2593 
l
 = 
nû
;

2594 
p
 = 
s
->s;

2595 
ï
 = 
s
->†+ s->
Àn
;

2596 
i
 = 0;

2597 if(
n
->
ty≥
->ty≥->
ëy≥
 =
TUINT8
) {

2599 
p
 < 
ï
)

2600 
l
 = 
	`li°
÷, 
	`nod
(
OKEY
, 
	`nodötc⁄°
(
i
++),Çodötc⁄°((
uch¨
)*
p
++)));

2603 
p
 < 
ï
) {

2604 
p
 +
	`ch¨t‹u√
(&
r
,Ö);

2605 
l
 = 
	`li°
÷, 
	`nod
(
OKEY
, 
	`nodötc⁄°
(
i
++),Çodötc⁄°(
r
)));

2608 
¬
 = 
	`nod
(
OCOMPLIT
, 
N
, 
	`ty≥nod
(
n
->
ty≥
));

2609 
¬
->
li°
 = 
l
;

2610 
	`ty≥check
(&
¬
, 
Erv
);

2611 *
≈
 = 
¬
;

2612 
	}
}

2615 
	g¡y≥checkde·y≥
;

2616 
NodeLi°
 *
	gmëhodqueue
;

2619 
	$domëhod
(
Node
 *
n
)

2621 
Node
 *
¡
;

2622 
Ty≥
 *
t
;

2624 
¡
 = 
n
->
ty≥
->
¬ame
;

2625 
	`ty≥check
(&
¡
, 
Ety≥
);

2626 if(
¡
->
ty≥
 =
T
) {

2628 
n
->
ty≥
->
ëy≥
 = 
TFUNC
;

2629 
n
->
ty≥
->
nod
 = 
N
;

2641 
t
=
	`gëö¨gx
(
¡
->
ty≥
)->ty≥;Å;ÅÒ->
down
) {

2642 if(
t
->
sym
 !
nû
 && 
	`°rcmp
—->sym->
«me
, "_") == 0)

2643 
t
->
sym
 = 
nû
;

2646 *
n
->
ty≥
 = *
¡
->type;

2647 
n
->
ty≥
->
nod
 = 
N
;

2648 
	`checkwidth
(
n
->
ty≥
);

2649 
	}
}

2651 
NodeLi°
 *
	gm≠queue
;

2654 
	$c›yty≥
(
Node
 *
n
, 
Ty≥
 *
t
)

2656 
m≠löío
, 
embedlöío
, 
 o
;

2657 
NodeLi°
 *
l
;

2659 if(
t
->
ëy≥
 =
TFORW
) {

2661 
t
->
c›yto
 = 
	`li°
—->c›yto, 
n
);

2665 
m≠löío
 = 
n
->
ty≥
->maplineno;

2666 
embedlöío
 = 
n
->
ty≥
->embedlineno;

2668 
l
 = 
n
->
ty≥
->
c›yto
;

2669 *
n
->
ty≥
 = *
t
;

2671 
t
 = 
n
->
ty≥
;

2672 
t
->
sym
 = 
n
->sym;

2673 
t
->
loˇl
 = 
n
->local;

2674 
t
->
v¨gí
 = 
n
->vargen;

2675 
t
->
siggí
 = 0;

2676 
t
->
mëhod
 = 
nû
;

2677 
t
->
xmëhod
 = 
nû
;

2678 
t
->
nod
 = 
N
;

2679 
t
->
¥öãd
 = 0;

2680 
t
->
de„rwidth
 = 0;

2681 
t
->
c›yto
 = 
nû
;

2684 ; 
l
;Üˆ->
√xt
)

2685 
	`c›yty≥
(
l
->
n
, 
t
);

2688 
 o
 = 
löío
;

2689 if(
embedlöío
) {

2690 
löío
 = 
embedlöío
;

2691 if(
i•å
[
t
->
ëy≥
])

2692 
	`yyîr‹
("embeddedÅype cannot beáÖointer");

2694 
löío
 = 
 o
;

2697 if(
m≠löío
) {

2698 
t
->
m≠löío
 = maplineno;

2699 
m≠queue
 = 
	`li°
(m≠queue, 
n
);

2701 
	}
}

2704 
	$ty≥checkde·y≥
(
Node
 *
n
)

2706 
 o
;

2707 
Ty≥
 *
t
;

2708 
NodeLi°
 *
l
;

2710 
¡y≥checkde·y≥
++;

2711 
 o
 = 
löío
;

2712 
	`£éöío
(
n
);

2713 
n
->
ty≥
->
sym
 =Ç->sym;

2714 
n
->
ty≥check
 = 1;

2715 
	`ty≥check
(&
n
->
¡y≥
, 
Ety≥
);

2716 if((
t
 = 
n
->
¡y≥
->
ty≥
Ë=
T
) {

2717 
n
->
düg
 = 1;

2718 
ªt
;

2720 if(
n
->
ty≥
 =
T
) {

2721 
n
->
düg
 = 1;

2722 
ªt
;

2729 
	`c›yty≥
(
n
, 
t
);

2731 
ªt
:

2732 
löío
 = 
 o
;

2737 if(
¡y≥checkde·y≥
 == 1) {

2738 (
l
 = 
mëhodqueue
Ë!
nû
) {

2739 
mëhodqueue
 = 
nû
;

2740 ; 
l
;Üˆ->
√xt
)

2741 
	`domëhod
(
l
->
n
);

2743 
l
=
m≠queue
;Ü;Üˆ->
√xt
) {

2744 
löío
 = 
l
->
n
->
ty≥
->
m≠löío
;

2745 
	`m≠ty≥
(
l
->
n
->
ty≥
, 
ty≥s
[
TBOOL
]);

2747 
löío
 = 
 o
;

2749 
¡y≥checkde·y≥
--;

2750 
	}
}

2753 
	$queuemëhod
(
Node
 *
n
)

2755 if(
¡y≥checkde·y≥
 == 0) {

2756 
	`domëhod
(
n
);

2759 
mëhodqueue
 = 
	`li°
(mëhodqueue, 
n
);

2760 
	}
}

2762 
Node
*

2763 
	$ty≥checkdef
(
Node
 *
n
)

2765 
 o
;

2766 
Node
 *
e
;

2767 
Ty≥
 *
t
;

2768 
NodeLi°
 *
l
;

2770 
 o
 = 
löío
;

2771 
	`£éöío
(
n
);

2773 if(
n
->
›
 =
ONONAME
) {

2774 if(!
n
->
düg
) {

2775 
n
->
düg
 = 1;

2776 if(
n
->
löío
 != 0)

2777 
löío
 = 
n
->lineno;

2778 
	`yyîr‹
("undeföed: %S", 
n
->
sym
);

2780  
n
;

2783 if(
n
->
wÆkdef
 == 1)

2784  
n
;

2786 
l
 = 
	`mÆ
( *l);

2787 
l
->
n
 =Ç;

2788 
l
->
√xt
 = 
ty≥checkdef°ack
;

2789 
ty≥checkdef°ack
 = 
l
;

2791 if(
n
->
wÆkdef
 == 2) {

2792 
	`Êushîr‹s
();

2793 
	`¥öt
("typecheckdefÜoop:");

2794 
l
=
ty≥checkdef°ack
;Ü;Üˆ->
√xt
)

2795 
	`¥öt
(" %S", 
l
->
n
->
sym
);

2796 
	`¥öt
("\n");

2797 
	`Áèl
("typecheckdefÜoop");

2799 
n
->
wÆkdef
 = 2;

2801 if(
n
->
ty≥
 !
T
 ||Ç->
sym
 =
S
)

2802 
ªt
;

2804 
n
->
›
) {

2806 
	`Áèl
("ty≥checkde‡%O", 
n
->
›
);

2808 
OGOTO
:

2809 
OLABEL
:

2813 
OLITERAL
:

2814 if(
n
->
¡y≥
 !
N
) {

2815 
	`ty≥check
(&
n
->
¡y≥
, 
Ety≥
);

2816 
n
->
ty≥
 =Ç->
¡y≥
->type;

2817 
n
->
¡y≥
 = 
N
;

2818 if(
n
->
ty≥
 =
T
) {

2819 
n
->
düg
 = 1;

2820 
ªt
;

2823 
e
 = 
n
->
de‚
;

2824 
n
->
de‚
 = 
N
;

2825 if(
e
 =
N
) {

2826 
löío
 = 
n
->lineno;

2827 
	`dump
("ty≥checkde‡nû de‚", 
n
);

2828 
	`yyîr‹
("xxx");

2830 
	`ty≥check
(&
e
, 
Erv
 | 
EiŸa
);

2831 if(
e
->
ty≥
 !
T
 &&É->
›
 !
OLITERAL
) {

2832 
	`yyîr‹
("const initializer must be constant");

2833 
ªt
;

2835 if(
	`isc⁄°
(
e
, 
CTNIL
)) {

2836 
	`yyîr‹
("const initializer cannot beÇil");

2837 
ªt
;

2839 
t
 = 
n
->
ty≥
;

2840 if(
t
 !
T
) {

2841 if(!
okf‹c⁄°
[
t
->
ëy≥
]) {

2842 
	`yyîr‹
("övÆid c⁄°™àty≥ %T", 
t
);

2843 
ªt
;

2845 if(!
	`isidól
(
e
->
ty≥
Ë&& !
	`eqty≥
(
t
,É->type)) {

2846 
	`yyîr‹
("ˇ¬Ÿ u£ %lNá†ty≥ %T i¿c⁄° inôülizî", 
e
, 
t
);

2847 
ªt
;

2849 
	`c⁄vlô
(&
e
, 
t
);

2851 
n
->
vÆ
 = 
e
->val;

2852 
n
->
ty≥
 = 
e
->type;

2855 
ONAME
:

2856 if(
n
->
¡y≥
 !
N
) {

2857 
	`ty≥check
(&
n
->
¡y≥
, 
Ety≥
);

2858 
n
->
ty≥
 =Ç->
¡y≥
->type;

2860 if(
n
->
ty≥
 =
T
) {

2861 
n
->
düg
 = 1;

2862 
ªt
;

2865 if(
n
->
ty≥
 !
T
)

2867 if(
n
->
de‚
 =
N
) {

2868 if(
n
->
ëy≥
 != 0)

2870 if(
nßvedîr‹s
+
√º‹s
 > 0) {

2877 
	`Áèl
("v¨ wôhouàty≥, inô: %S", 
n
->
sym
);

2879 if(
n
->
de‚
->
›
 =
ONAME
) {

2880 
	`ty≥check
(&
n
->
de‚
, 
Erv
);

2881 
n
->
ty≥
 =Ç->
de‚
->type;

2884 
	`ty≥check
(&
n
->
de‚
, 
Et›
);

2887 
OTYPE
:

2888 if(
cur‚
)

2889 
	`de„rcheckwidth
();

2890 
n
->
wÆkdef
 = 1;

2891 
n
->
ty≥
 = 
	`typ
(
TFORW
);

2892 
n
->
ty≥
->
sym
 =Ç->sym;

2893 
	`ty≥checkde·y≥
(
n
);

2894 if(
cur‚
)

2895 
	`ªsumecheckwidth
();

2898 
OPACK
:

2903 
ªt
:

2904 if(
n
->
›
 !
OLITERAL
 &&Ç->
ty≥
 !
T
 && 
	`isidól
(n->type))

2905 
	`Áèl
("gŸ %T f‹ %N", 
n
->
ty≥
,Ç);

2906 if(
ty≥checkdef°ack
->
n
 !=Ç)

2907 
	`Áèl
("typecheckdefstack mismatch");

2908 
l
 = 
ty≥checkdef°ack
;

2909 
ty≥checkdef°ack
 = 
l
->
√xt
;

2911 
löío
 = 
 o
;

2912 
n
->
wÆkdef
 = 1;

2913  
n
;

2914 
	}
}

	@unsafe.c

5 
	~<u.h
>

6 
	~<libc.h
>

7 
	~"go.h
"

16 
Node
*

17 
	$unß„nmagic
(
Node
 *
¬
)

19 
Node
 *
r
, *
n
;

20 
Sym
 *
s
;

21 
Ty≥
 *
t
, *
å
;

22 
v
;

23 
VÆ
 
vÆ
;

24 
Node
 *
‚
;

25 
NodeLi°
 *
¨gs
;

27 
‚
 = 
¬
->
À·
;

28 
¨gs
 = 
¬
->
li°
;

30 if(
ß„mode
 || 
‚
 =
N
 || fn->
›
 !
ONAME
 || (
s
 = fn->
sym
Ë=
S
)

31 
no
;

32 if(
s
->
pkg
 !
unß„pkg
)

33 
no
;

35 if(
¨gs
 =
nû
) {

36 
	`yyîr‹
("missögárgumíàf‹ %S", 
s
);

37 
no
;

39 
r
 = 
¨gs
->
n
;

41 if(
	`°rcmp
(
s
->
«me
, "Sizeof") == 0) {

42 
	`ty≥check
(&
r
, 
Erv
);

43 
	`deÁu…lô
(&
r
, 
T
);

44 
å
 = 
r
->
ty≥
;

45 if(
å
 =
T
)

46 
bad
;

47 
	`dowidth
(
å
);

48 
v
 = 
å
->
width
;

49 
yes
;

51 if(
	`°rcmp
(
s
->
«me
, "Offsetof") == 0) {

52 
	`ty≥check
(&
r
, 
Erv
);

53 if(
r
->
›
 !
ODOT
 &&Ñ->› !
ODOTPTR
)

54 
bad
;

55 
	`ty≥check
(&
r
, 
Erv
);

56 
v
 = 
r
->
xoff£t
;

57 
yes
;

59 if(
	`°rcmp
(
s
->
«me
, "Alignof") == 0) {

60 
	`ty≥check
(&
r
, 
Erv
);

61 
	`deÁu…lô
(&
r
, 
T
);

62 
å
 = 
r
->
ty≥
;

63 if(
å
 =
T
)

64 
bad
;

67 
t
 = 
	`typ
(
TSTRUCT
);

68 
t
->
ty≥
 = 
	`typ
(
TFIELD
);

69 
t
->
ty≥
->ty≥ = 
ty≥s
[
TUINT8
];

70 
t
->
ty≥
->
down
 = 
	`typ
(
TFIELD
);

71 
t
->
ty≥
->
down
->ty≥ = 
å
;

73 
	`dowidth
(
t
);

76 
v
 = 
t
->
ty≥
->
down
->
width
;

77 
yes
;

80 
no
:

81  
N
;

83 
bad
:

84 
	`yyîr‹
("övÆidÉx¥essi⁄ %N", 
¬
);

85 
v
 = 0;

86 
ªt
;

88 
yes
:

89 if(
¨gs
->
√xt
 !
nû
)

90 
	`yyîr‹
("exå®¨gumít†f‹ %S", 
s
);

91 
ªt
:

93 
vÆ
.
˘y≥
 = 
CTINT
;

94 
vÆ
.
u
.
xvÆ
 = 
	`mÆ
((*
n
->val.u.xval));

95 
	`mpmovecfix
(
vÆ
.
u
.
xvÆ
, 
v
);

96 
n
 = 
	`nod
(
OLITERAL
, 
N
, N);

97 
n
->
‹ig
 = 
¬
;

98 
n
->
vÆ
 = val;

99 
n
->
ty≥
 = 
ty≥s
[
TUINTPTR
];

100 
¬
->
ty≥
 = 
ty≥s
[
TUINTPTR
];

101  
n
;

102 
	}
}

105 
	$isunß„buûtö
(
Node
 *
n
)

107 if(
n
 =
N
 ||Ç->
›
 !
ONAME
 ||Ç->
sym
 =
S
 ||Ç->sym->
pkg
 !
unß„pkg
)

109 if(
	`°rcmp
(
n
->
sym
->
«me
, "Sizeof") == 0)

111 if(
	`°rcmp
(
n
->
sym
->
«me
, "Offsetof") == 0)

113 if(
	`°rcmp
(
n
->
sym
->
«me
, "Alignof") == 0)

116 
	}
}

	@walk.c

5 
	~<u.h
>

6 
	~<libc.h
>

7 
	~"go.h
"

9 
Node
* 
wÆk¥öt
(Node*, 
NodeLi°
**, );

10 
Node
* 
m≠‚
(*, 
Ty≥
*);

11 
Node
* 
m≠‚dñ
(*, 
Ty≥
*);

12 
Node
* 
ascom∑ãe1
(, Node*, Node*, 
NodeLi°
**);

13 
NodeLi°
* 
ascom∑ãe
(, NodeList*, NodeList*, NodeList**);

14 
NodeLi°
* 
ascom∑ãt
(, NodeLi°*, 
Ty≥
**, , NodeList**);

15 
NodeLi°
* 
ascom∑âe
(, 
Node
*, , 
Ty≥
**, NodeList*, , NodeList**);

16 
Node
* 
c⁄vas
(Node*, 
NodeLi°
**);

17 
hópmoves
();

18 
NodeLi°
* 
∑øm°ohóp
(
Ty≥
 **
¨gö
, 
out
);

19 
NodeLi°
* 
ª‹dî1
(NodeList*);

20 
NodeLi°
* 
ª‹dî3
(NodeList*);

21 
Node
* 
add°r
(Node*, 
NodeLi°
**);

22 
Node
* 
≠≥nd¶i˚
(Node*, 
NodeLi°
**);

23 
Node
* 
≠≥nd
(Node*, 
NodeLi°
**);

24 
wÆkcom∑ª
(
Node
**, 
NodeLi°
**);

30 
	$wÆkªt
(
NodeLi°
 *
l
)

32 
Node
 *
n
;

34 
lo›
:

35 
l
 &&Ü->
√xt
)

36 
l
 =Ü->
√xt
;

37 if(
l
 =
nû
)

42 
n
 = 
l
->n;

43 
n
->
›
) {

44 
OBLOCK
:

45 
l
 = 
n
->
li°
;

46 
lo›
;

48 
OGOTO
:

49 
ORETURN
:

50 
OPANIC
:

58 
	}
}

61 
	$wÆk
(
Node
 *
‚
)

63 
s
[50];

64 
NodeLi°
 *
l
;

65 
 o
;

67 
cur‚
 = 
‚
;

69 if(
debug
['W']) {

70 
	`¢¥öt
(
s
, (s), "\nbef‹ê%S", 
cur‚
->
¬ame
->
sym
);

71 
	`dum∂i°
(
s
, 
cur‚
->
nbody
);

73 if(
cur‚
->
ty≥
->
ouâu∂e
)

74 if(
	`wÆkªt
(
cur‚
->
nbody
))

75 
	`yyîr‹
("functionÉnds withoutáÑeturn statement");

77 
 o
 = 
löío
;

81 
l
=
‚
->
d˛
;Ü;Üˆ->
√xt
)

82 if(
l
->
n
->
›
 =
ONAME
 && (l->n->
˛ass
&~
PHEAP
Ë=
PAUTO
)

83 
	`ty≥check
(&
l
->
n
, 
Erv
 | 
Easgn
);

86 
l
=
‚
->
d˛
;Ü;Üˆ->
√xt
)

87 if(
l
->
n
->
›
 =
ONAME
 && (l->n->
˛ass
&~
PHEAP
Ë=
PAUTO
 &&Ü->n->
de‚
 &&Ü->n->de‚->› =
OTYPESW
 &&Ü->n->
u£d
)

88 
l
->
n
->
de‚
->
À·
->
u£d
++;

90 
l
=
‚
->
d˛
;Ü;Üˆ->
√xt
) {

91 if(
l
->
n
->
›
 !
ONAME
 || (l->n->
˛ass
&~
PHEAP
Ë!
PAUTO
 ||Ü->n->
sym
->
«me
[0] ='&' ||Ü->n->
u£d
)

93 if(
l
->
n
->
de‚
 &&Ü->n->de‚->
›
 =
OTYPESW
) {

94 if(
l
->
n
->
de‚
->
À·
->
u£d
)

96 
löío
 = 
l
->
n
->
de‚
->
À·
->lineno;

97 
	`yyîr‹
("%S de˛¨edándÇŸ u£d", 
l
->
n
->
sym
);

98 
l
->
n
->
de‚
->
À·
->
u£d
 = 1;

100 
löío
 = 
l
->
n
->lineno;

101 
	`yyîr‹
("%S de˛¨edándÇŸ u£d", 
l
->
n
->
sym
);

105 
löío
 = 
 o
;

106 if(
√º‹s
 != 0)

108 
	`wÆk°méi°
(
cur‚
->
nbody
);

109 if(
debug
['W']) {

110 
	`¢¥öt
(
s
, (s), "a·î wÆk %S", 
cur‚
->
¬ame
->
sym
);

111 
	`dum∂i°
(
s
, 
cur‚
->
nbody
);

113 
	`hópmoves
();

114 if(
debug
['W'] && 
cur‚
->
íãr
 !
nû
) {

115 
	`¢¥öt
(
s
, (s), "íã∏%S", 
cur‚
->
¬ame
->
sym
);

116 
	`dum∂i°
(
s
, 
cur‚
->
íãr
);

118 
	}
}

122 
	$wÆk°méi°
(
NodeLi°
 *
l
)

124 ; 
l
;Üˆ->
√xt
)

125 
	`wÆk°mt
(&
l
->
n
);

126 
	}
}

129 
	$ßmñi°
(
NodeLi°
 *
a
, NodeLi° *
b
)

131 ; 
a
 && 
b
;á˜->
√xt
, b=b->next)

132 if(
a
->
n
 !
b
->n)

134  
a
 =
b
;

135 
	}
}

138 
	$∑ømouthóp
(
Node
 *
‚
)

140 
NodeLi°
 *
l
;

142 
l
=
‚
->
d˛
;Ü;Üˆ->
√xt
) {

143 
l
->
n
->
˛ass
) {

144 
PPARAMOUT
:

145 
PPARAMOUT
|
PHEAP
:

146  
l
->
n
->
addπakí
;

147 
PAUTO
:

148 
PAUTO
|
PHEAP
:

154 
	}
}

157 
	$wÆk°mt
(
Node
 **
≈
)

159 
NodeLi°
 *
öô
;

160 
NodeLi°
 *
Œ
, *
æ
;

161 
˛
;

162 
Node
 *
n
, *
f
;

164 
n
 = *
≈
;

165 if(
n
 =
N
)

168 
	`£éöío
(
n
);

170 
	`wÆk°méi°
(
n
->
nöô
);

172 
n
->
›
) {

174 if(
n
->
›
 =
ONAME
)

175 
	`yyîr‹
("%S i†nŸáÅ›Üevñ sèãmít", 
n
->
sym
);

177 
	`yyîr‹
("%O i†nŸáÅ›Üevñ sèãmít", 
n
->
›
);

178 
	`dump
("nŸt›", 
n
);

181 
OASOP
:

182 
OAS
:

183 
OAS2
:

184 
OAS2DOTTYPE
:

185 
OAS2RECV
:

186 
OAS2FUNC
:

187 
OAS2MAPR
:

188 
OCLOSE
:

189 
OCOPY
:

190 
OCALLMETH
:

191 
OCALLINTER
:

192 
OCALL
:

193 
OCALLFUNC
:

194 
ODELETE
:

195 
OSEND
:

196 
ORECV
:

197 
OPRINT
:

198 
OPRINTN
:

199 
OPANIC
:

200 
OEMPTY
:

201 
ORECOVER
:

202 if(
n
->
ty≥check
 == 0)

203 
	`Áèl
("missögÅy≥check: %+N", 
n
);

204 
öô
 = 
n
->
nöô
;

205 
n
->
nöô
 = 
nû
;

206 
	`wÆkex¥
(&
n
, &
öô
);

207 
	`addöô
(&
n
, 
öô
);

210 
OBREAK
:

211 
ODCL
:

212 
OCONTINUE
:

213 
OFALL
:

214 
OGOTO
:

215 
OLABEL
:

216 
ODCLCONST
:

217 
ODCLTYPE
:

220 
OBLOCK
:

221 
	`wÆk°méi°
(
n
->
li°
);

224 
OXCASE
:

225 
	`yyîr‹
("case statement out ofÖlace");

226 
n
->
›
 = 
OCASE
;

227 
OCASE
:

228 
	`wÆk°mt
(&
n
->
right
);

231 
ODEFER
:

232 
hasde„r
 = 1;

233 
n
->
À·
->
›
) {

234 
OPRINT
:

235 
OPRINTN
:

236 
	`wÆkex¥li°
(
n
->
À·
->
li°
, &n->
nöô
);

237 
n
->
À·
 = 
	`wÆk¥öt
“->À·, &n->
nöô
, 1);

240 
	`wÆkex¥
(&
n
->
À·
, &n->
nöô
);

245 
OFOR
:

246 if(
n
->
¡e°
 !
N
) {

247 
	`wÆk°méi°
(
n
->
¡e°
->
nöô
);

248 
öô
 = 
n
->
¡e°
->
nöô
;

249 
n
->
¡e°
->
nöô
 = 
nû
;

250 
	`wÆkex¥
(&
n
->
¡e°
, &
öô
);

251 
	`addöô
(&
n
->
¡e°
, 
öô
);

253 
	`wÆk°mt
(&
n
->
nö¸
);

254 
	`wÆk°méi°
(
n
->
nbody
);

257 
OIF
:

258 
	`wÆkex¥
(&
n
->
¡e°
, &n->
nöô
);

259 
	`wÆk°méi°
(
n
->
nbody
);

260 
	`wÆk°méi°
(
n
->
√l£
);

263 
OPROC
:

264 
n
->
À·
->
›
) {

265 
OPRINT
:

266 
OPRINTN
:

267 
	`wÆkex¥li°
(
n
->
À·
->
li°
, &n->
nöô
);

268 
n
->
À·
 = 
	`wÆk¥öt
“->À·, &n->
nöô
, 1);

271 
	`wÆkex¥
(&
n
->
À·
, &n->
nöô
);

276 
ORETURN
:

277 
	`wÆkex¥li°
(
n
->
li°
, &n->
nöô
);

278 if(
n
->
li°
 =
nû
)

280 if((
cur‚
->
ty≥
->
ouäamed
 && 
	`cou¡
(
n
->
li°
Ë> 1Ë|| 
	`∑ømouthóp
(curfn)) {

283 
æ
 = 
nû
;

284 
Œ
=
cur‚
->
d˛
;Ü»!
nû
;Ülˆl->
√xt
) {

285 
˛
 = 
Œ
->
n
->
˛ass
 & ~
PHEAP
;

286 if(
˛
 =
PAUTO
)

288 if(
˛
 =
PPARAMOUT
)

289 
æ
 = 
	`li°
‘l, 
Œ
->
n
);

291 if(
	`ßmñi°
(
æ
, 
n
->
li°
)) {

293 
n
->
li°
 = 
nû
;

296 if(
	`cou¡
(
n
->
li°
Ë=1 && cou¡(
æ
) > 1) {

298 
f
 = 
n
->
li°
->n;

299 if(
f
->
›
 !
OCALLFUNC
 && f->› !
OCALLMETH
 && f->› !
OCALLINTER
)

300 
	`Áèl
("ex≥˘edÑëu∫ o‡ˇŒ, havê%N", 
f
);

301 
n
->
li°
 = 
	`c⁄ˇt
(
	`li°1
(
f
), 
	`ascom∑ãt
“->
›
, 
æ
, &f->
ty≥
, 0, &n->
nöô
));

306 
	`wÆkex¥li°ß„
(
n
->
li°
, &n->
nöô
);

307 
Œ
 = 
	`ascom∑ãe
(
n
->
›
, 
æ
,Ç->
li°
, &n->
nöô
);

308 
n
->
li°
 = 
	`ª‹dî3
(
Œ
);

311 
Œ
 = 
	`ascom∑âe
(
n
->
›
, 
nû
, 0, 
	`gëouèrg
(
cur‚
->
ty≥
),Ç->
li°
, 1, &n->
nöô
);

312 
n
->
li°
 = 
Œ
;

315 
OSELECT
:

316 
	`wÆk£À˘
(
n
);

319 
OSWITCH
:

320 
	`wÆkswôch
(
n
);

323 
ORANGE
:

324 
	`wÆkønge
(
n
);

327 
OXFALL
:

328 
	`yyîr‹
("fallthrough statement out ofÖlace");

329 
n
->
›
 = 
OFALL
;

333 if(
n
->
›
 =
ONAME
)

334 
	`Áèl
("wÆk°màíded u∞wôhÇame: %+N", 
n
);

336 *
≈
 = 
n
;

337 
	}
}

349 
	$wÆkex¥li°
(
NodeLi°
 *
l
, NodeLi° **
öô
)

351 ; 
l
;Üˆ->
√xt
)

352 
	`wÆkex¥
(&
l
->
n
, 
öô
);

353 
	}
}

356 
	$wÆkex¥li°ß„
(
NodeLi°
 *
l
, NodeLi° **
öô
)

358 ; 
l
;Üˆ->
√xt
) {

359 
l
->
n
 = 
	`ß„ex¥
÷->n, 
öô
);

360 
	`wÆkex¥
(&
l
->
n
, 
öô
);

362 
	}
}

365 
	$wÆkex¥
(
Node
 **
≈
, 
NodeLi°
 **
öô
)

367 
Node
 *
r
, *
l
, *
v¨
, *
a
;

368 
NodeLi°
 *
Œ
, *
Ã
, *
Õo°
;

369 
Ty≥
 *
t
;

370 
ë
;

371 
öt64
 
v
, 
v1
, 
v2
, 
Àn
;

372 
öt32
 
 o
;

373 
Node
 *
n
, *
‚
;

374 
buf
[100], *
p
;

376 
n
 = *
≈
;

378 if(
n
 =
N
)

381 if(
öô
 =&
n
->
nöô
) {

385 
	`Áèl
("walkexpr init == &n->ninit");

388 if(
n
->
nöô
 !
nû
) {

389 
	`wÆk°méi°
(
n
->
nöô
);

390 *
öô
 = 
	`c⁄ˇt
(*öô, 
n
->
nöô
);

391 
n
->
nöô
 = 
nû
;

395 if(
n
->
›
 =
OKEY
) {

396 
	`wÆkex¥
(&
n
->
À·
, 
öô
);

397 
	`wÆkex¥
(&
n
->
right
, 
öô
);

401 
 o
 = 
	`£éöío
(
n
);

403 if(
debug
['w'] > 1)

404 
	`dump
("wÆk-bef‹e", 
n
);

406 if(
n
->
ty≥check
 != 1)

407 
	`Áèl
("mis£dÅy≥check: %+N\n", 
n
);

409 
n
->
›
) {

411 
	`dump
("wÆk", 
n
);

412 
	`Áèl
("wÆkex¥: swôch 1 unknow¿› %N", 
n
);

415 
OTYPE
:

416 
ONONAME
:

417 
OINDREG
:

418 
OEMPTY
:

419 
ªt
;

421 
ONOT
:

422 
OMINUS
:

423 
OPLUS
:

424 
OCOM
:

425 
OREAL
:

426 
OIMAG
:

427 
ODOT
:

428 
ODOTPTR
:

429 
ODOTMETH
:

430 
ODOTINTER
:

431 
OIND
:

432 
	`wÆkex¥
(&
n
->
À·
, 
öô
);

433 
ªt
;

435 
OITAB
:

436 
	`wÆkex¥
(&
n
->
À·
, 
öô
);

437 
ªt
;

439 
OLEN
:

440 
OCAP
:

441 
	`wÆkex¥
(&
n
->
À·
, 
öô
);

445 
t
 = 
n
->
À·
->
ty≥
;

446 if(
i•å
[
t
->
ëy≥
])

447 
t
 =Å->
ty≥
;

448 if(
	`isfixed¨øy
(
t
)) {

449 
	`ß„ex¥
(
n
->
À·
, 
öô
);

450 
	`nodc⁄°
(
n
,Ç->
ty≥
, 
t
->
bound
);

451 
n
->
ty≥check
 = 1;

453 
ªt
;

455 
OLSH
:

456 
ORSH
:

457 
OAND
:

458 
OOR
:

459 
OXOR
:

460 
OSUB
:

461 
OMUL
:

462 
OLT
:

463 
OLE
:

464 
OGE
:

465 
OGT
:

466 
OADD
:

467 
OCOMPLEX
:

468 
	`wÆkex¥
(&
n
->
À·
, 
öô
);

469 
	`wÆkex¥
(&
n
->
right
, 
öô
);

470 
ªt
;

472 
OEQ
:

473 
ONE
:

474 
	`wÆkex¥
(&
n
->
À·
, 
öô
);

475 
	`wÆkex¥
(&
n
->
right
, 
öô
);

476 
	`wÆkcom∑ª
(&
n
, 
öô
);

477 
ªt
;

479 
OANDAND
:

480 
OOROR
:

481 
	`wÆkex¥
(&
n
->
À·
, 
öô
);

485 
Œ
 = 
nû
;

486 
	`wÆkex¥
(&
n
->
right
, &
Œ
);

487 
	`addöô
(&
n
->
right
, 
Œ
);

488 
ªt
;

490 
OPRINT
:

491 
OPRINTN
:

492 
	`wÆkex¥li°
(
n
->
li°
, 
öô
);

493 
n
 = 
	`wÆk¥öt
“, 
öô
, 0);

494 
ªt
;

496 
OPANIC
:

497 
n
 = 
	`mkˇŒ
("∑nic", 
T
, 
öô
,Ç->
À·
);

498 
ªt
;

500 
ORECOVER
:

501 
n
 = 
	`mkˇŒ
("ªcovî",Ç->
ty≥
, 
öô
, 
	`nod
(
OADDR
, 
nodÂ
, 
N
));

502 
ªt
;

504 
OLITERAL
:

505 
n
->
addabÀ
 = 1;

506 
ªt
;

508 
ONAME
:

509 if(!(
n
->
˛ass
 & 
PHEAP
Ë&&Ç->˛as†!
PPARAMREF
)

510 
n
->
addabÀ
 = 1;

511 
ªt
;

513 
OCALLINTER
:

514 
t
 = 
n
->
À·
->
ty≥
;

515 if(
n
->
li°
 &&Ç->li°->n->
›
 =
OAS
)

516 
ªt
;

517 
	`wÆkex¥
(&
n
->
À·
, 
öô
);

518 
	`wÆkex¥li°
(
n
->
li°
, 
öô
);

519 
Œ
 = 
	`ascom∑âe
(
n
->
›
,Ç,Ç->
isddd
, 
	`gëö¨g
(
t
),Ç->
li°
, 0, 
öô
);

520 
n
->
li°
 = 
	`ª‹dî1
(
Œ
);

521 
ªt
;

523 
OCALLFUNC
:

524 
t
 = 
n
->
À·
->
ty≥
;

525 if(
n
->
li°
 &&Ç->li°->n->
›
 =
OAS
)

526 
ªt
;

528 if(
n
->
À·
->
›
 =
OCLOSURE
) {

529 
	`wÆkˇŒ˛osuª
(
n
, 
öô
);

530 
t
 = 
n
->
À·
->
ty≥
;

533 
	`wÆkex¥
(&
n
->
À·
, 
öô
);

534 
	`wÆkex¥li°
(
n
->
li°
, 
öô
);

536 
Œ
 = 
	`ascom∑âe
(
n
->
›
,Ç,Ç->
isddd
, 
	`gëö¨g
(
t
),Ç->
li°
, 0, 
öô
);

537 
n
->
li°
 = 
	`ª‹dî1
(
Œ
);

538 
ªt
;

540 
OCALLMETH
:

541 
t
 = 
n
->
À·
->
ty≥
;

542 if(
n
->
li°
 &&Ç->li°->n->
›
 =
OAS
)

543 
ªt
;

544 
	`wÆkex¥
(&
n
->
À·
, 
öô
);

545 
	`wÆkex¥li°
(
n
->
li°
, 
öô
);

546 
Œ
 = 
	`ascom∑âe
(
n
->
›
,Ç, 0, 
	`gëthis
(
t
), 
	`li°1
“->
À·
->À·), 0, 
öô
);

547 
Ã
 = 
	`ascom∑âe
(
n
->
›
,Ç,Ç->
isddd
, 
	`gëö¨g
(
t
),Ç->
li°
, 0, 
öô
);

548 
Œ
 = 
	`c⁄ˇt
÷l, 
Ã
);

549 
n
->
À·
->À· = 
N
;

550 
	`uŒm™ˇlc
(
n
->
À·
);

551 
n
->
li°
 = 
	`ª‹dî1
(
Œ
);

552 
ªt
;

554 
OAS
:

555 *
öô
 = 
	`c⁄ˇt
(*öô, 
n
->
nöô
);

556 
n
->
nöô
 = 
nû
;

557 
	`wÆkex¥
(&
n
->
À·
, 
öô
);

558 
n
->
À·
 = 
	`ß„ex¥
“->À·, 
öô
);

560 if(
	`ﬂ¶ô
(
n
, 
öô
))

561 
ªt
;

563 
	`wÆkex¥
(&
n
->
right
, 
öô
);

564 if(
n
->
À·
 !
N
 &&Ç->
right
 != N) {

565 
r
 = 
	`c⁄vas
(
	`nod
(
OAS
, 
n
->
À·
,Ç->
right
), 
öô
);

566 
r
->
dod©a
 = 
n
->dodata;

567 
n
 = 
r
;

570 
ªt
;

572 
OAS2
:

573 *
öô
 = 
	`c⁄ˇt
(*öô, 
n
->
nöô
);

574 
n
->
nöô
 = 
nû
;

575 
	`wÆkex¥li°ß„
(
n
->
li°
, 
öô
);

576 
	`wÆkex¥li°ß„
(
n
->
æi°
, 
öô
);

577 
Œ
 = 
	`ascom∑ãe
(
OAS
, 
n
->
li°
,Ç->
æi°
, 
öô
);

578 
Œ
 = 
	`ª‹dî3
(ll);

579 
n
 = 
	`li°°mt
(
Œ
);

580 
ªt
;

582 
OAS2FUNC
:

583 
as2func
:

585 *
öô
 = 
	`c⁄ˇt
(*öô, 
n
->
nöô
);

586 
n
->
nöô
 = 
nû
;

587 
r
 = 
n
->
æi°
->n;

588 
	`wÆkex¥li°ß„
(
n
->
li°
, 
öô
);

589 
	`wÆkex¥
(&
r
, 
öô
);

590 
l
 = 
n
->
li°
->n;

598 
Õo°
 = 
nû
;

599 if(
l
->
›
 =
OINDEXMAP
) {

600 
v¨
 = 
	`ãmp
(
l
->
ty≥
);

601 
n
->
li°
->¿
v¨
;

602 
a
 = 
	`nod
(
OAS
, 
l
, 
v¨
);

603 
	`ty≥check
(&
a
, 
Et›
);

604 
Õo°
 = 
	`li°
÷po°, 
a
);

606 
l
 = 
n
->
li°
->
√xt
->n;

607 if(
l
->
›
 =
OINDEXMAP
) {

608 
v¨
 = 
	`ãmp
(
l
->
ty≥
);

609 
n
->
li°
->
√xt
->¿
v¨
;

610 
a
 = 
	`nod
(
OAS
, 
l
, 
v¨
);

611 
	`ty≥check
(&
a
, 
Et›
);

612 
Õo°
 = 
	`li°
÷po°, 
a
);

614 
Œ
 = 
	`ascom∑ãt
(
n
->
›
,Ç->
li°
, &
r
->
ty≥
, 0, 
öô
);

615 
	`wÆkex¥li°
(
Õo°
, 
öô
);

616 
n
 = 
	`li°°mt
(
	`c⁄ˇt
(c⁄ˇt(
	`li°1
(
r
), 
Œ
), 
Õo°
));

617 
ªt
;

619 
OAS2RECV
:

620 *
öô
 = 
	`c⁄ˇt
(*öô, 
n
->
nöô
);

621 
n
->
nöô
 = 
nû
;

622 
r
 = 
n
->
æi°
->n;

623 
	`wÆkex¥li°ß„
(
n
->
li°
, 
öô
);

624 
	`wÆkex¥
(&
r
->
À·
, 
öô
);

625 
‚
 = 
	`ch™‚
("ch™ªcv2", 2, 
r
->
À·
->
ty≥
);

626 
r
 = 
	`mkˇŒ1
(
‚
, 
	`gëouèrgx
(‚->
ty≥
), 
öô
, 
	`ty≥«me
‘->
À·
->type),Ñ->left);

627 
n
->
æi°
->¿
r
;

628 
n
->
›
 = 
OAS2FUNC
;

629 
as2func
;

631 
OAS2MAPR
:

633 *
öô
 = 
	`c⁄ˇt
(*öô, 
n
->
nöô
);

634 
n
->
nöô
 = 
nû
;

635 
r
 = 
n
->
æi°
->n;

636 
	`wÆkex¥li°ß„
(
n
->
li°
, 
öô
);

637 
	`wÆkex¥
(&
r
->
À·
, 
öô
);

638 
‚
 = 
	`m≠‚
("m≠ac˚ss2", 
r
->
À·
->
ty≥
);

639 
r
 = 
	`mkˇŒ1
(
‚
, 
	`gëouèrgx
(‚->
ty≥
), 
öô
, 
	`ty≥«me
‘->
À·
->ty≥),Ñ->À·,Ñ->
right
);

640 
n
->
æi°
 = 
	`li°1
(
r
);

641 
n
->
›
 = 
OAS2FUNC
;

642 
as2func
;

644 
ODELETE
:

645 *
öô
 = 
	`c⁄ˇt
(*öô, 
n
->
nöô
);

646 
n
->
nöô
 = 
nû
;

647 
l
 = 
n
->
li°
->n;

648 
r
 = 
n
->
li°
->
√xt
->n;

649 
t
 = 
l
->
ty≥
;

650 
n
 = 
	`mkˇŒ1
(
	`m≠‚dñ
("m≠dñëe", 
t
),Å->
down
, 
öô
, 
	`ty≥«me
—), 
l
, 
r
);

651 
ªt
;

653 
OAS2DOTTYPE
:

655 *
öô
 = 
	`c⁄ˇt
(*öô, 
n
->
nöô
);

656 
n
->
nöô
 = 
nû
;

657 
r
 = 
n
->
æi°
->n;

658 
	`wÆkex¥li°ß„
(
n
->
li°
, 
öô
);

659 
r
->
›
 = 
ODOTTYPE2
;

660 
	`wÆkex¥
(&
r
, 
öô
);

661 
Œ
 = 
	`ascom∑ãt
(
n
->
›
,Ç->
li°
, &
r
->
ty≥
, 0, 
öô
);

662 
n
 = 
	`li°°mt
(
	`c⁄ˇt
(
	`li°1
(
r
), 
Œ
));

663 
ªt
;

665 
ODOTTYPE
:

666 
ODOTTYPE2
:

668 
	`°r˝y
(
buf
, "assert");

669 
p
 = 
buf
+
	`°æí
(buf);

670 if(
	`i¢ûöãr
(
n
->
À·
->
ty≥
))

671 *
p
++ = 'E';

673 *
p
++ = 'I';

674 *
p
++ = '2';

675 if(
	`i¢ûöãr
(
n
->
ty≥
))

676 *
p
++ = 'E';

677 if(
	`isöãr
(
n
->
ty≥
))

678 *
p
++ = 'I';

680 *
p
++ = 'T';

681 if(
n
->
›
 =
ODOTTYPE2
)

682 *
p
++ = '2';

683 *
p
 = '\0';

685 
‚
 = 
	`sy¶ook
(
buf
, 1);

686 
Œ
 = 
	`li°1
(
	`ty≥«me
(
n
->
ty≥
));

687 
Œ
 = 
	`li°
÷l, 
n
->
À·
);

688 
	`¨gty≥
(
‚
, 
n
->
À·
->
ty≥
);

689 
	`¨gty≥
(
‚
, 
n
->
ty≥
);

690 
n
 = 
	`nod
(
OCALL
, 
‚
, 
N
);

691 
n
->
li°
 = 
Œ
;

692 
	`ty≥check
(&
n
, 
Erv
 | 
E‚°ru˘
);

693 
	`wÆkex¥
(&
n
, 
öô
);

694 
ªt
;

696 
OCONVIFACE
:

700 
	`wÆkex¥
(&
n
->
À·
, 
öô
);

701 
	`°r˝y
(
buf
, "conv");

702 
p
 = 
buf
+
	`°æí
(buf);

703 if(
	`i¢ûöãr
(
n
->
À·
->
ty≥
))

704 *
p
++ = 'E';

705 if(
	`isöãr
(
n
->
À·
->
ty≥
))

706 *
p
++ = 'I';

708 *
p
++ = 'T';

709 *
p
++ = '2';

710 if(
	`i¢ûöãr
(
n
->
ty≥
))

711 *
p
++ = 'E';

713 *
p
++ = 'I';

714 *
p
 = '\0';

716 
‚
 = 
	`sy¶ook
(
buf
, 1);

717 
Œ
 = 
nû
;

718 if(!
	`isöãr
(
n
->
À·
->
ty≥
))

719 
Œ
 = 
	`li°
÷l, 
	`ty≥«me
(
n
->
À·
->
ty≥
));

720 if(!
	`i¢ûöãr
(
n
->
ty≥
))

721 
Œ
 = 
	`li°
÷l, 
	`ty≥«me
(
n
->
ty≥
));

722 
Œ
 = 
	`li°
÷l, 
n
->
À·
);

723 
	`¨gty≥
(
‚
, 
n
->
À·
->
ty≥
);

724 
	`¨gty≥
(
‚
, 
n
->
ty≥
);

725 
	`dowidth
(
‚
->
ty≥
);

726 
n
 = 
	`nod
(
OCALL
, 
‚
, 
N
);

727 
n
->
li°
 = 
Œ
;

728 
	`ty≥check
(&
n
, 
Erv
);

729 
	`wÆkex¥
(&
n
, 
öô
);

730 
ªt
;

732 
OCONV
:

733 
OCONVNOP
:

734 if(
thech¨
 == '5') {

735 if(
isÊﬂt
[
n
->
À·
->
ty≥
->
ëy≥
]) {

736 if(
n
->
ty≥
->
ëy≥
 =
TINT64
) {

737 
n
 = 
	`mkˇŒ
("Êﬂt64toöt64",Ç->
ty≥
, 
öô
, 
	`c⁄v
“->
À·
, 
ty≥s
[
TFLOAT64
]));

738 
ªt
;

740 if(
n
->
ty≥
->
ëy≥
 =
TUINT64
) {

741 
n
 = 
	`mkˇŒ
("Êﬂt64touöt64",Ç->
ty≥
, 
öô
, 
	`c⁄v
“->
À·
, 
ty≥s
[
TFLOAT64
]));

742 
ªt
;

745 if(
isÊﬂt
[
n
->
ty≥
->
ëy≥
]) {

746 if(
n
->
À·
->
ty≥
->
ëy≥
 =
TINT64
) {

747 
n
 = 
	`mkˇŒ
("öt64toÊﬂt64",Ç->
ty≥
, 
öô
, 
	`c⁄v
“->
À·
, 
ty≥s
[
TINT64
]));

748 
ªt
;

750 if(
n
->
À·
->
ty≥
->
ëy≥
 =
TUINT64
) {

751 
n
 = 
	`mkˇŒ
("uöt64toÊﬂt64",Ç->
ty≥
, 
öô
, 
	`c⁄v
“->
À·
, 
ty≥s
[
TUINT64
]));

752 
ªt
;

756 
	`wÆkex¥
(&
n
->
À·
, 
öô
);

757 
ªt
;

759 
OASOP
:

760 if(
n
->
ëy≥
 =
OANDNOT
) {

761 
n
->
ëy≥
 = 
OAND
;

762 
n
->
right
 = 
	`nod
(
OCOM
,Ç->right, 
N
);

763 
	`ty≥check
(&
n
->
right
, 
Erv
);

765 
n
->
À·
 = 
	`ß„ex¥
“->À·, 
öô
);

766 
	`wÆkex¥
(&
n
->
À·
, 
öô
);

767 
l
 = 
n
->
À·
;

768 
	`wÆkex¥
(&
n
->
right
, 
öô
);

778 
ë
 = 
n
->
À·
->
ty≥
->
ëy≥
;

779 if((
width±r
 =4 && (
ë
 =
TUINT64
 ||Éà=
TINT64
)) ||

780 (
thech¨
 ='8' && 
isÊﬂt
[
ë
]) ||

781 
l
->
›
 =
OINDEXMAP
 ||

782 
ë
 =
TSTRING
 ||

783 (
iscom∂ex
[
ë
] && 
n
->
ëy≥
 =
ODIV
)) {

784 
l
 = 
	`ß„ex¥
(
n
->
À·
, 
öô
);

785 
a
 = 
l
;

786 if(
a
->
›
 =
OINDEXMAP
) {

789 
a
 = 
	`nod
(
OXXX
, 
N
, N);

790 *
a
 = *
l
;

791 
a
->
ëy≥
 = 0;

793 
r
 = 
	`nod
(
OAS
, 
l
,Çod(
n
->
ëy≥
, 
a
,Ç->
right
));

794 
	`ty≥check
(&
r
, 
Et›
);

795 
	`wÆkex¥
(&
r
, 
öô
);

796 
n
 = 
r
;

798 
ªt
;

800 
OANDNOT
:

801 
	`wÆkex¥
(&
n
->
À·
, 
öô
);

802 
	`wÆkex¥
(&
n
->
right
, 
öô
);

803 
n
->
›
 = 
OAND
;

804 
n
->
right
 = 
	`nod
(
OCOM
,Ç->right, 
N
);

805 
	`ty≥check
(&
n
->
right
, 
Erv
);

806 
ªt
;

808 
ODIV
:

809 
OMOD
:

810 
	`wÆkex¥
(&
n
->
À·
, 
öô
);

811 
	`wÆkex¥
(&
n
->
right
, 
öô
);

815 
ë
 = 
n
->
À·
->
ty≥
->
ëy≥
;

816 if(
iscom∂ex
[
ë
] && 
n
->
›
 =
ODIV
) {

817 
t
 = 
n
->
ty≥
;

818 
n
 = 
	`mkˇŒ
("com∂ex128div", 
ty≥s
[
TCOMPLEX128
], 
öô
,

819 
	`c⁄v
(
n
->
À·
, 
ty≥s
[
TCOMPLEX128
]),

820 
	`c⁄v
(
n
->
right
, 
ty≥s
[
TCOMPLEX128
]));

821 
n
 = 
	`c⁄v
“, 
t
);

822 
ªt
;

828 if(
width±r
 > 4 || (
ë
 !
TUINT64
 &&Éà!
TINT64
))

829 
ªt
;

830 if(
ë
 =
TINT64
)

831 
	`°r˝y
(
«mebuf
, "int64");

833 
	`°r˝y
(
«mebuf
, "uint64");

834 if(
n
->
›
 =
ODIV
)

835 
	`°rˇt
(
«mebuf
, "div");

837 
	`°rˇt
(
«mebuf
, "mod");

838 
n
 = 
	`mkˇŒ
(
«mebuf
,Ç->
ty≥
, 
öô
,

839 
	`c⁄v
(
n
->
À·
, 
ty≥s
[
ë
]), c⁄v“->
right
,Åypes[et]));

840 
ªt
;

842 
OINDEX
:

843 
	`wÆkex¥
(&
n
->
À·
, 
öô
);

844 
	`wÆkex¥
(&
n
->
right
, 
öô
);

848 if(
	`isfixed¨øy
(
n
->
À·
->
ty≥
))

849 if(!
issig√d
[
n
->
right
->
ty≥
->
ëy≥
])

850 if(
n
->
right
->
ty≥
->
width
 < 4)

851 if((1<<(8*
n
->
right
->
ty≥
->
width
)Ë<n->
À·
->ty≥->
bound
)

852 
n
->
ëy≥
 = 1;

854 if(
	`isc⁄°
(
n
->
À·
, 
CTSTR
))

855 if(!
issig√d
[
n
->
right
->
ty≥
->
ëy≥
])

856 if(
n
->
right
->
ty≥
->
width
 < 4)

857 if((1<<(8*
n
->
right
->
ty≥
->
width
)Ë<n->
À·
->
vÆ
.
u
.
svÆ
->
Àn
)

858 
n
->
ëy≥
 = 1;

861 if(
	`isc⁄°
(
n
->
right
, 
CTINT
Ë&& !n->
ëy≥
) {

862 
v
 = 
	`mpgëfix
(
n
->
right
->
vÆ
.
u
.
xvÆ
);

863 
Àn
 = 1LL<<60;

864 
t
 = 
n
->
À·
->
ty≥
;

865 if(
	`isc⁄°
(
n
->
À·
, 
CTSTR
))

866 
Àn
 = 
n
->
À·
->
vÆ
.
u
.
svÆ
->len;

867 if(
t
 !
T
 && 
i•å
[t->
ëy≥
])

868 
t
 =Å->
ty≥
;

869 if(
	`isfixed¨øy
(
t
))

870 
Àn
 = 
t
->
bound
;

871 if(
v
 < 0 || v >(1LL<<31Ë|| v >
Àn
)

872 
	`yyîr‹
("index out of bounds");

873 if(
	`isc⁄°
(
n
->
À·
, 
CTSTR
)) {

877 
	`nodc⁄°
(
n
,Ç->
ty≥
,Ç->
À·
->
vÆ
.
u
.
svÆ
->
s
[
v
]);

878 
n
->
ty≥check
 = 1;

881 
ªt
;

883 
OINDEXMAP
:

884 if(
n
->
ëy≥
 == 1)

885 
ªt
;

887 
t
 = 
n
->
À·
->
ty≥
;

888 
n
 = 
	`mkˇŒ1
(
	`m≠‚
("m≠ac˚ss1", 
t
),Å->
ty≥
, 
öô
, 
	`ty≥«me
—),Ç->
À·
,Ç->
right
);

889 
ªt
;

891 
ORECV
:

892 
	`wÆkex¥
(&
n
->
À·
, 
öô
);

893 
	`wÆkex¥
(&
n
->
right
, 
öô
);

894 
n
 = 
	`mkˇŒ1
(
	`ch™‚
("ch™ªcv1", 2,Ç->
À·
->
ty≥
),Ç->ty≥, 
öô
, 
	`ty≥«me
(n->left->type),Ç->left);

895 
ªt
;

897 
OSLICE
:

898 
OSLICEARR
:

899 
	`wÆkex¥
(&
n
->
À·
, 
öô
);

900 
n
->
À·
 = 
	`ß„ex¥
“->À·, 
öô
);

901 
	`wÆkex¥
(&
n
->
right
->
À·
, 
öô
);

902 
n
->
right
->
À·
 = 
	`ß„ex¥
“->right->À·, 
öô
);

903 
	`wÆkex¥
(&
n
->
right
->right, 
öô
);

904 
n
->
right
->righà
	`ß„ex¥
“->right->right, 
öô
);

906 
Àn
 = 1LL<<60;

907 
t
 = 
n
->
À·
->
ty≥
;

908 if(
t
 !
T
 && 
i•å
[t->
ëy≥
])

909 
t
 =Å->
ty≥
;

910 if(
	`isfixed¨øy
(
t
))

911 
Àn
 = 
t
->
bound
;

915 
v1
 = -1;

916 
v2
 = -1;

917 if(
	`isc⁄°
(
n
->
right
->
À·
, 
CTINT
)) {

918 
v1
 = 
	`mpgëfix
(
n
->
right
->
À·
->
vÆ
.
u
.
xvÆ
);

919 if(
v1
 < 0 || v1 >(1LL<<31Ë|| v1 > 
Àn
) {

920 
	`yyîr‹
("slice index out of bounds");

921 
v1
 = -1;

924 if(
	`isc⁄°
(
n
->
right
->right, 
CTINT
)) {

925 
v2
 = 
	`mpgëfix
(
n
->
right
->right->
vÆ
.
u
.
xvÆ
);

926 if(
v2
 < 0 || v2 >(1LL<<31Ë|| v2 > 
Àn
) {

927 
	`yyîr‹
("slice index out of bounds");

928 
v2
 = -1;

931 if(
v1
 >0 && 
v2
 >= 0 && v1 > v2)

932 
	`yyîr‹
("inverted sliceÑange");

934 if(
n
->
›
 =
OSLICEARR
)

935 
¶i˚¨øy
;

940 
t
 = 
n
->
ty≥
;

941 
ë
 = 
n
->
ëy≥
;

942 if(
n
->
right
->
À·
 =
N
)

943 
l
 = 
	`nodötc⁄°
(0);

945 
l
 = 
	`c⁄v
(
n
->
right
->
À·
, 
ty≥s
[
TUINT64
]);

946 if(
n
->
right
->righà!
N
) {

947 
‚
 = 
	`sy¶ook
("sliceslice", 1);

948 
	`¨gty≥
(
‚
, 
t
->
ty≥
);

949 
	`¨gty≥
(
‚
, 
t
->
ty≥
);

950 
n
 = 
	`mkˇŒ1
(
‚
, 
t
, 
öô
,

951 
n
->
À·
,

952 
l
,

953 
	`c⁄v
(
n
->
right
->right, 
ty≥s
[
TUINT64
]),

954 
	`nodötc⁄°
(
t
->
ty≥
->
width
));

956 
‚
 = 
	`sy¶ook
("sliceslice1", 1);

957 
	`¨gty≥
(
‚
, 
t
->
ty≥
);

958 
	`¨gty≥
(
‚
, 
t
->
ty≥
);

959 
n
 = 
	`mkˇŒ1
(
‚
, 
t
, 
öô
,

960 
n
->
À·
,

961 
l
,

962 
	`nodötc⁄°
(
t
->
ty≥
->
width
));

964 
n
->
ëy≥
 = 
ë
;

965 
ªt
;

967 
¶i˚¨øy
:

970 
t
 = 
n
->
ty≥
;

971 
‚
 = 
	`sy¶ook
("slicearray", 1);

972 
	`¨gty≥
(
‚
, 
n
->
À·
->
ty≥
->type);

973 
	`¨gty≥
(
‚
, 
t
->
ty≥
);

974 if(
n
->
right
->
À·
 =
N
)

975 
l
 = 
	`nodötc⁄°
(0);

977 
l
 = 
	`c⁄v
(
n
->
right
->
À·
, 
ty≥s
[
TUINT64
]);

978 if(
n
->
right
->righà=
N
)

979 
r
 = 
	`nodötc⁄°
(
n
->
À·
->
ty≥
->ty≥->
bound
);

981 
r
 = 
	`c⁄v
(
n
->
right
->right, 
ty≥s
[
TUINT64
]);

982 
n
 = 
	`mkˇŒ1
(
‚
, 
t
, 
öô
,

983 
n
->
À·
, 
	`nodötc⁄°
“->À·->
ty≥
->ty≥->
bound
),

984 
l
,

985 
r
,

986 
	`nodötc⁄°
(
t
->
ty≥
->
width
));

987 
ªt
;

989 
OADDR
:

990 
	`wÆkex¥
(&
n
->
À·
, 
öô
);

991 
ªt
;

993 
ONEW
:

994 if(
n
->
esc
 =
EscN⁄e
 &&Ç->
ty≥
->ty≥->
width
 < (1<<16)) {

995 
r
 = 
	`ãmp
(
n
->
ty≥
->type);

996 
r
 = 
	`nod
(
OAS
,Ñ, 
N
);

997 
	`ty≥check
(&
r
, 
Et›
);

998 *
öô
 = 
	`li°
(*öô, 
r
);

999 
r
 = 
	`nod
(
OADDR
,Ñ->
À·
, 
N
);

1000 
	`ty≥check
(&
r
, 
Erv
);

1001 
n
 = 
r
;

1003 
n
 = 
	`ˇŒ√w
“->
ty≥
->type);

1005 
ªt
;

1007 
OCMPSTR
:

1011 if((
	`isc⁄°
(
n
->
À·
, 
CTSTR
Ë&&Ç->À·->
vÆ
.
u
.
svÆ
->
Àn
 == 0) ||

1012 (
	`isc⁄°
(
n
->
right
, 
CTSTR
Ë&&Ç->right->
vÆ
.
u
.
svÆ
->
Àn
 == 0)) {

1013 
r
 = 
	`nod
(
n
->
ëy≥
,Çod(
OLEN
,Ç->
À·
, 
N
),Çod(OLEN,Ç->
right
, N));

1014 
	`ty≥check
(&
r
, 
Erv
);

1015 
	`wÆkex¥
(&
r
, 
öô
);

1016 
r
->
ty≥
 = 
n
->type;

1017 
n
 = 
r
;

1018 
ªt
;

1022 if((
n
->
ëy≥
 =
OEQ
 ||Ç->ëy≥ =
ONE
) &&

1023 
	`isc⁄°
(
n
->
right
, 
CTSTR
) &&

1024 
n
->
À·
->
›
 =
OADDSTR
 && 
	`isc⁄°
“->À·->
right
, 
CTSTR
) &&

1025 
	`cmp¶ô
(
n
->
right
,Ç->
À·
->right) == 0) {

1026 
r
 = 
	`nod
(
n
->
ëy≥
,Çod(
OLEN
,Ç->
À·
->À·, 
N
), 
	`nodötc⁄°
(0));

1027 
	`ty≥check
(&
r
, 
Erv
);

1028 
	`wÆkex¥
(&
r
, 
öô
);

1029 
r
->
ty≥
 = 
n
->type;

1030 
n
 = 
r
;

1031 
ªt
;

1035 if(
n
->
ëy≥
 =
OEQ
 ||Ç->ëy≥ =
ONE
) {

1036 
n
->
À·
 = 
	`chó≥x¥
“->À·, 
öô
);

1037 
n
->
right
 = 
	`chó≥x¥
“->right, 
öô
);

1041 
r
 = 
	`mkˇŒ
("cmp°rög", 
ty≥s
[
TINT
], 
öô
,

1042 
	`c⁄v
(
n
->
À·
, 
ty≥s
[
TSTRING
]),

1043 
	`c⁄v
(
n
->
right
, 
ty≥s
[
TSTRING
]));

1044 
r
 = 
	`nod
(
n
->
ëy≥
,Ñ, 
	`nodötc⁄°
(0));

1047 if(
n
->
ëy≥
 =
OEQ
 ||Ç->ëy≥ =
ONE
) {

1048 if(
n
->
ëy≥
 =
OEQ
)

1049 
r
 = 
	`nod
(
OANDAND
,Çod(
OEQ
,Çod(
OLEN
, 
n
->
À·
, 
N
),Çod(OLEN,Ç->
right
, N)),Ñ);

1051 
r
 = 
	`nod
(
OOROR
,Çod(
ONE
,Çod(
OLEN
, 
n
->
À·
, 
N
),Çod(OLEN,Ç->
right
, N)),Ñ);

1052 
	`ty≥check
(&
r
, 
Erv
);

1053 
	`wÆkex¥
(&
r
, 
nû
);

1055 
	`ty≥check
(&
r
, 
Erv
);

1056 if(
n
->
ty≥
->
ëy≥
 !
TBOOL
Ë
	`Áèl
("cmp %T",Ç->type);

1057 
r
->
ty≥
 = 
n
->type;

1058 
n
 = 
r
;

1059 
ªt
;

1061 
OADDSTR
:

1062 
n
 = 
	`add°r
“, 
öô
);

1063 
ªt
;

1065 
OSLICESTR
:

1067 if(
n
->
right
->
À·
 =
N
)

1068 
l
 = 
	`nodötc⁄°
(0);

1070 
l
 = 
	`c⁄v
(
n
->
right
->
À·
, 
ty≥s
[
TINT
]);

1071 if(
n
->
right
->right) {

1072 
n
 = 
	`mkˇŒ
("¶i˚°rög",Ç->
ty≥
, 
öô
,

1073 
	`c⁄v
(
n
->
À·
, 
ty≥s
[
TSTRING
]),

1074 
l
,

1075 
	`c⁄v
(
n
->
right
->right, 
ty≥s
[
TINT
]));

1077 
n
 = 
	`mkˇŒ
("¶i˚°rög1",Ç->
ty≥
, 
öô
,

1078 
	`c⁄v
(
n
->
À·
, 
ty≥s
[
TSTRING
]),

1079 
l
);

1081 
ªt
;

1083 
OAPPEND
:

1084 if(
n
->
isddd
) {

1085 if(
	`i°y≥
(
n
->
ty≥
->ty≥, 
TUINT8
Ë&& i°y≥“->
li°
->
√xt
->n->ty≥, 
TSTRING
))

1086 
n
 = 
	`mkˇŒ
("≠≥nd°r",Ç->
ty≥
, 
öô
, 
	`ty≥«me
“->ty≥),Ç->
li°
->n,Ç->li°->
√xt
->n);

1088 
n
 = 
	`≠≥nd¶i˚
“, 
öô
);

1091 
n
 = 
	`≠≥nd
“, 
öô
);

1092 
ªt
;

1094 
OCOPY
:

1095 if(
n
->
right
->
ty≥
->
ëy≥
 =
TSTRING
)

1096 
‚
 = 
	`sy¶ook
("slicestringcopy", 1);

1098 
‚
 = 
	`sy¶ook
("copy", 1);

1099 
	`¨gty≥
(
‚
, 
n
->
À·
->
ty≥
);

1100 
	`¨gty≥
(
‚
, 
n
->
right
->
ty≥
);

1101 
n
 = 
	`mkˇŒ1
(
‚
,Ç->
ty≥
, 
öô
,

1102 
n
->
À·
,Ç->
right
,

1103 
	`nodötc⁄°
(
n
->
À·
->
ty≥
->ty≥->
width
));

1104 
ªt
;

1106 
OCLOSE
:

1108 
‚
 = 
	`sy¶ook
("closechan", 1);

1109 
	`¨gty≥
(
‚
, 
n
->
À·
->
ty≥
);

1110 
n
 = 
	`mkˇŒ1
(
‚
, 
T
, 
öô
,Ç->
À·
);

1111 
ªt
;

1113 
OMAKECHAN
:

1114 
n
 = 
	`mkˇŒ1
(
	`ch™‚
("makech™", 1,Ç->
ty≥
),Ç->ty≥, 
öô
,

1115 
	`ty≥«me
(
n
->
ty≥
),

1116 
	`c⁄v
(
n
->
À·
, 
ty≥s
[
TINT64
]));

1117 
ªt
;

1119 
OMAKEMAP
:

1120 
t
 = 
n
->
ty≥
;

1122 
‚
 = 
	`sy¶ook
("makemap", 1);

1123 
	`¨gty≥
(
‚
, 
t
->
down
);

1124 
	`¨gty≥
(
‚
, 
t
->
ty≥
);

1126 
n
 = 
	`mkˇŒ1
(
‚
,Ç->
ty≥
, 
öô
,

1127 
	`ty≥«me
(
n
->
ty≥
),

1128 
	`c⁄v
(
n
->
À·
, 
ty≥s
[
TINT64
]));

1129 
ªt
;

1131 
OMAKESLICE
:

1133 
l
 = 
n
->
À·
;

1134 
r
 = 
n
->
right
;

1135 if(
r
 =
nû
)

1136 
l
 = 
r
 = 
	`ß„ex¥
÷, 
öô
);

1137 
t
 = 
n
->
ty≥
;

1138 
‚
 = 
	`sy¶ook
("makeslice", 1);

1139 
	`¨gty≥
(
‚
, 
t
->
ty≥
);

1140 
n
 = 
	`mkˇŒ1
(
‚
,Ç->
ty≥
, 
öô
,

1141 
	`ty≥«me
(
n
->
ty≥
),

1142 
	`c⁄v
(
l
, 
ty≥s
[
TINT64
]),

1143 
	`c⁄v
(
r
, 
ty≥s
[
TINT64
]));

1144 
ªt
;

1146 
ORUNESTR
:

1148 
n
 = 
	`mkˇŒ
("öt°rög",Ç->
ty≥
, 
öô
,

1149 
	`c⁄v
(
n
->
À·
, 
ty≥s
[
TINT64
]));

1150 
ªt
;

1152 
OARRAYBYTESTR
:

1154 
n
 = 
	`mkˇŒ
("¶i˚byãto°rög",Ç->
ty≥
, 
öô
,Ç->
À·
);

1155 
ªt
;

1157 
OARRAYRUNESTR
:

1159 
n
 = 
	`mkˇŒ
("¶i˚ru√to°rög",Ç->
ty≥
, 
öô
,Ç->
À·
);

1160 
ªt
;

1162 
OSTRARRAYBYTE
:

1164 
n
 = 
	`mkˇŒ
("°rögto¶i˚byã",Ç->
ty≥
, 
öô
, 
	`c⁄v
“->
À·
, 
ty≥s
[
TSTRING
]));

1165 
ªt
;

1167 
OSTRARRAYRUNE
:

1169 
n
 = 
	`mkˇŒ
("°rögto¶i˚ru√",Ç->
ty≥
, 
öô
,Ç->
À·
);

1170 
ªt
;

1172 
OCMPIFACE
:

1174 if(!
	`eqty≥
(
n
->
À·
->
ty≥
,Ç->
right
->type))

1175 
	`Áèl
("iÁ˚eq %O %T %T", 
n
->
›
,Ç->
À·
->
ty≥
,Ç->
right
->type);

1176 if(
	`i¢ûöãr
(
n
->
À·
->
ty≥
))

1177 
‚
 = 
	`sy¶ook
("efaceeq", 1);

1179 
‚
 = 
	`sy¶ook
("ifaceeq", 1);

1180 
	`¨gty≥
(
‚
, 
n
->
right
->
ty≥
);

1181 
	`¨gty≥
(
‚
, 
n
->
À·
->
ty≥
);

1182 
r
 = 
	`mkˇŒ1
(
‚
, 
n
->
ty≥
, 
öô
,Ç->
À·
,Ç->
right
);

1183 if(
n
->
ëy≥
 =
ONE
)

1184 
r
 = 
	`nod
(
ONOT
,Ñ, 
N
);

1187 if(
n
->
ëy≥
 =
OEQ
)

1188 
r
 = 
	`nod
(
OANDAND
,Çod(
OEQ
,Çod(
OITAB
, 
n
->
À·
, 
N
),Çod(OITAB,Ç->
right
, N)),Ñ);

1190 
r
 = 
	`nod
(
OOROR
,Çod(
ONE
,Çod(
OITAB
, 
n
->
À·
, 
N
),Çod(OITAB,Ç->
right
, N)),Ñ);

1191 
	`ty≥check
(&
r
, 
Erv
);

1192 
	`wÆkex¥
(&
r
, 
nû
);

1193 
r
->
ty≥
 = 
n
->type;

1194 
n
 = 
r
;

1195 
ªt
;

1197 
OARRAYLIT
:

1198 
OMAPLIT
:

1199 
OSTRUCTLIT
:

1200 
OPTRLIT
:

1201 
v¨
 = 
	`ãmp
(
n
->
ty≥
);

1202 
	`™ylô
(0, 
n
, 
v¨
, 
öô
);

1203 
n
 = 
v¨
;

1204 
ªt
;

1206 
OSEND
:

1207 
n
 = 
	`mkˇŒ1
(
	`ch™‚
("ch™£nd1", 2,Ç->
À·
->
ty≥
), 
T
, 
öô
, 
	`ty≥«me
“->À·->ty≥),Ç->À·,Ç->
right
);

1208 
ªt
;

1210 
OCLOSURE
:

1211 
n
 = 
	`wÆk˛osuª
“, 
öô
);

1212 
ªt
;

1214 
	`Áèl
("missög swôch %O", 
n
->
›
);

1216 
ªt
:

1217 
	`uŒm™ˇlc
(
n
);

1219 if(
debug
['w'] && 
n
 !
N
)

1220 
	`dump
("wÆk", 
n
);

1222 
löío
 = 
 o
;

1223 *
≈
 = 
n
;

1224 
	}
}

1226 
Node
*

1227 
	$ascom∑ãe1
(
›
, 
Node
 *
l
, Nodê*
r
, 
NodeLi°
 **
öô
)

1229 
	`USED
(
›
);

1231  
	`c⁄vas
(
	`nod
(
OAS
, 
l
, 
r
), 
öô
);

1232 
	}
}

1234 
NodeLi°
*

1235 
	$ascom∑ãe
(
›
, 
NodeLi°
 *
∆
, NodeLi° *
ƒ
, NodeLi° **
öô
)

1237 
NodeLi°
 *
Œ
, *
Ã
, *
¬
;

1246 
Œ
=
∆
;Ül;Ülˆl->
√xt
)

1247 
Œ
->
n
 = 
	`ß„ex¥
÷l->n, 
öô
);

1248 
Ã
=
ƒ
;Ür;Ürˆr->
√xt
)

1249 
Ã
->
n
 = 
	`ß„ex¥
÷r->n, 
öô
);

1251 
¬
 = 
nû
;

1252 
Œ
=
∆
, 
Ã
=
ƒ
;Ü»&&Ür;Ülˆl->
√xt
,Ür=lr->next)

1253 
¬
 = 
	`li°
“n, 
	`ascom∑ãe1
(
›
, 
Œ
->
n
, 
Ã
->n, 
öô
));

1256 if(
Œ
 || 
Ã
)

1257 
	`yyîr‹
("îr‹ i¿sh≠êa¸os†%+H %O %+H", 
∆
, 
›
, 
ƒ
);

1258  
¬
;

1259 
	}
}

1268 
	$‚ˇŒ
(
Node
 *
l
, 
Ty≥
 *
π
)

1270 if(
l
->
uŒm™
 >
UINF
 ||Ü->
›
 =
OINDEXMAP
)

1272 if(
	`eqty≥
(
l
->
ty≥
, 
π
))

1275 
	}
}

1277 
NodeLi°
*

1278 
	$ascom∑ãt
(
›
, 
NodeLi°
 *
∆
, 
Ty≥
 **
ƒ
, 
Â
, NodeLi° **
öô
)

1280 
Node
 *
l
, *
tmp
, *
a
;

1281 
NodeLi°
 *
Œ
;

1282 
Ty≥
 *
r
;

1283 
Iãr
 
ßvî
;

1284 
ucou¡
;

1285 
NodeLi°
 *
¬
, *
mm
;

1287 
	`USED
(
›
);

1294 
r
 = 
	`°ru˘fú°
(&
ßvî
, 
ƒ
);

1295 
¬
 = 
nû
;

1296 
mm
 = 
nû
;

1297 
ucou¡
 = 0;

1298 
Œ
=
∆
;Ül;Ülˆl->
√xt
) {

1299 if(
r
 =
T
)

1301 
l
 = 
Œ
->
n
;

1302 if(
	`isbœnk
(
l
)) {

1303 
r
 = 
	`°ru˘√xt
(&
ßvî
);

1310 if(
	`‚ˇŒ
(
l
, 
r
->
ty≥
)) {

1311 
tmp
 = 
	`ãmp
(
r
->
ty≥
);

1312 
	`ty≥check
(&
tmp
, 
Erv
);

1313 
a
 = 
	`nod
(
OAS
, 
l
, 
tmp
);

1314 
a
 = 
	`c⁄vas
◊, 
öô
);

1315 
mm
 = 
	`li°
(mm, 
a
);

1316 
l
 = 
tmp
;

1319 
a
 = 
	`nod
(
OAS
, 
l
, 
	`nod¨g
(
r
, 
Â
));

1320 
a
 = 
	`c⁄vas
◊, 
öô
);

1321 
	`uŒm™ˇlc
(
a
);

1322 if(
a
->
uŒm™
 >
UINF
)

1323 
ucou¡
++;

1324 
¬
 = 
	`li°
“n, 
a
);

1325 
r
 = 
	`°ru˘√xt
(&
ßvî
);

1328 if(
Œ
 !
nû
 || 
r
 !
T
)

1329 
	`yyîr‹
("ascompatet:ássignment count mismatch: %d = %d",

1330 
	`cou¡
(
∆
), 
	`°ru˘cou¡
(*
ƒ
));

1332 if(
ucou¡
)

1333 
	`Áèl
("ascompatet:Åoo many function callsÉvaluatingÖarameters");

1334  
	`c⁄ˇt
(
¬
, 
mm
);

1335 
	}
}

1340 
NodeLi°
*

1341 
	$mkdŸ¨g¶i˚
(
NodeLi°
 *
Ã0
, NodeLi° *
¬
, 
Ty≥
 *
l
, 
Â
, NodeLi° **
öô
, 
esc
)

1343 
Node
 *
a
, *
n
;

1344 
Ty≥
 *
t¶i˚
;

1346 
t¶i˚
 = 
	`typ
(
TARRAY
);

1347 
t¶i˚
->
ty≥
 = 
l
->type->type;

1348 
t¶i˚
->
bound
 = -1;

1350 if(
	`cou¡
(
Ã0
) == 0) {

1351 
n
 = 
	`nodnû
();

1352 
n
->
ty≥
 = 
t¶i˚
;

1354 
n
 = 
	`nod
(
OCOMPLIT
, 
N
, 
	`ty≥nod
(
t¶i˚
));

1355 
n
->
li°
 = 
Ã0
;

1356 
n
->
esc
 =Ésc;

1357 
	`ty≥check
(&
n
, 
Erv
);

1358 if(
n
->
ty≥
 =
T
)

1359 
	`Áèl
("mkdotargslice:Åypecheck failed");

1360 
	`wÆkex¥
(&
n
, 
öô
);

1363 
a
 = 
	`nod
(
OAS
, 
	`nod¨g
(
l
, 
Â
), 
n
);

1364 
¬
 = 
	`li°
“n, 
	`c⁄vas
(
a
, 
öô
));

1365  
¬
;

1366 
	}
}

1372 
	$dum±y≥s
(
Ty≥
 **
∆
, *
wh©
)

1374 
fú°
;

1375 
Ty≥
 *
l
;

1376 
Iãr
 
ßvñ
;

1377 
Fmt
 
fmt
;

1379 
	`fmt°röô
(&
fmt
);

1380 
	`fmçröt
(&
fmt
, "\t");

1381 
fú°
 = 1;

1382 
l
 = 
	`°ru˘fú°
(&
ßvñ
, 
∆
);Ü !
T
;Ü = 
	`°ru˘√xt
(&savel)) {

1383 if(
fú°
)

1384 
fú°
 = 0;

1386 
	`fmçröt
(&
fmt
, ", ");

1387 
	`fmçröt
(&
fmt
, "%T", 
l
);

1389 if(
fú°
)

1390 
	`fmçröt
(&
fmt
, "[nÿ¨gumít†%s]", 
wh©
);

1391  
	`fmt°rÊush
(&
fmt
);

1392 
	}
}

1395 
	$dum≤odëy≥s
(
NodeLi°
 *
l
, *
wh©
)

1397 
fú°
;

1398 
Node
 *
r
;

1399 
Fmt
 
fmt
;

1401 
	`fmt°röô
(&
fmt
);

1402 
	`fmçröt
(&
fmt
, "\t");

1403 
fú°
 = 1;

1404 ; 
l
;Üˆ->
√xt
) {

1405 
r
 = 
l
->
n
;

1406 if(
fú°
)

1407 
fú°
 = 0;

1409 
	`fmçröt
(&
fmt
, ", ");

1410 
	`fmçröt
(&
fmt
, "%T", 
r
->
ty≥
);

1412 if(
fú°
)

1413 
	`fmçröt
(&
fmt
, "[nÿ¨gumít†%s]", 
wh©
);

1414  
	`fmt°rÊush
(&
fmt
);

1415 
	}
}

1423 
NodeLi°
*

1424 
	$ascom∑âe
(
›
, 
Node
 *
ˇŒ
, 
isddd
, 
Ty≥
 **
∆
, 
NodeLi°
 *
Ã
, 
Â
, NodeLi° **
öô
)

1426 
esc
;

1427 
Ty≥
 *
l
, *
Œ
;

1428 
Node
 *
r
, *
a
;

1429 
NodeLi°
 *
¬
, *
Ã0
, *
Æi°
;

1430 
Iãr
 
ßvñ
;

1431 *
l1
, *
l2
;

1433 
Ã0
 = 
Ã
;

1434 
l
 = 
	`°ru˘fú°
(&
ßvñ
, 
∆
);

1435 
r
 = 
N
;

1436 if(
Ã
)

1437 
r
 = 
Ã
->
n
;

1438 
¬
 = 
nû
;

1441 if(
r
 !
N
 && 
Ã
->
√xt
 =
nû
 &&Ñ->
ty≥
->
ëy≥
 =
TSTRUCT
 &&Ñ->ty≥->
fu«rg
) {

1443 if(
	`eqty≥n⁄ame
(
r
->
ty≥
, *
∆
)) {

1444 
a
 = 
	`nod¨g
(*
∆
, 
Â
);

1445 
a
->
ty≥
 = 
r
->type;

1446 
¬
 = 
	`li°1
(
	`c⁄vas
(
	`nod
(
OAS
, 
a
, 
r
), 
öô
));

1447 
ªt
;

1452 
Æi°
 = 
nû
;

1453 
l
=
	`°ru˘fú°
(&
ßvñ
, &
r
->
ty≥
);Ü;Ü=
	`°ru˘√xt
(&savel)) {

1454 
a
 = 
	`ãmp
(
l
->
ty≥
);

1455 
Æi°
 = 
	`li°
◊li°, 
a
);

1457 
a
 = 
	`nod
(
OAS2
, 
N
, N);

1458 
a
->
li°
 = 
Æi°
;

1459 
a
->
æi°
 = 
Ã
;

1460 
	`ty≥check
(&
a
, 
Et›
);

1461 
	`wÆk°mt
(&
a
);

1462 *
öô
 = 
	`li°
(*öô, 
a
);

1463 
Ã
 = 
Æi°
;

1464 
r
 = 
Ã
->
n
;

1465 
l
 = 
	`°ru˘fú°
(&
ßvñ
, 
∆
);

1468 
lo›
:

1469 if(
l
 !
T
 &&Ü->
isddd
) {

1471 
Œ
 = 
	`°ru˘√xt
(&
ßvñ
);

1472 if(
Œ
 !
T
)

1473 
	`yyîr‹
("... must beÜastárgument");

1479 if(
r
 !
N
 && 
Ã
->
√xt
 =
nû
 && 
isddd
 && 
	`eqty≥
(
l
->
ty≥
,Ñ->type)) {

1480 
a
 = 
	`nod
(
OAS
, 
	`nod¨g
(
l
, 
Â
), 
r
);

1481 
a
 = 
	`c⁄vas
◊, 
öô
);

1482 
¬
 = 
	`li°
“n, 
a
);

1483 
ªt
;

1489 
esc
 = 
EscUnknown
;

1490 if(
ˇŒ
->
right
)

1491 
esc
 = 
ˇŒ
->
right
->esc;

1492 
¬
 = 
	`mkdŸ¨g¶i˚
(
Ã
,Çn, 
l
, 
Â
, 
öô
, 
esc
);

1493 
ªt
;

1496 if(
l
 =
T
 || 
r
 =
N
) {

1497 if(
l
 !
T
 || 
r
 !
N
) {

1498 
l1
 = 
	`dum±y≥s
(
∆
, "expected");

1499 
l2
 = 
	`dum≤odëy≥s
(
Ã0
, "given");

1500 if(
l
 !
T
)

1501 
	`yyîr‹
("nŸÉnoughárgumít†tÿ%O\n%s\n%s", 
›
, 
l1
, 
l2
);

1503 
	`yyîr‹
("toÿm™yárgumít†tÿ%O\n%s\n%s", 
›
, 
l1
, 
l2
);

1505 
ªt
;

1508 
a
 = 
	`nod
(
OAS
, 
	`nod¨g
(
l
, 
Â
), 
r
);

1509 
a
 = 
	`c⁄vas
◊, 
öô
);

1510 
¬
 = 
	`li°
“n, 
a
);

1512 
l
 = 
	`°ru˘√xt
(&
ßvñ
);

1513 
r
 = 
N
;

1514 
Ã
 =Ür->
√xt
;

1515 if(
Ã
 !
nû
)

1516 
r
 = 
Ã
->
n
;

1517 
lo›
;

1519 
ªt
:

1520 
Ã
=
¬
;Ür;Ürˆr->
√xt
)

1521 
Ã
->
n
->
ty≥check
 = 1;

1522  
¬
;

1523 
	}
}

1526 
Node
*

1527 
	$wÆk¥öt
(
Node
 *
¬
, 
NodeLi°
 **
öô
, 
de„r
)

1529 
Node
 *
r
;

1530 
Node
 *
n
;

1531 
NodeLi°
 *
l
, *
Æl
;

1532 
Node
 *
⁄
;

1533 
Ty≥
 *
t
;

1534 
nŸfú°
, 
ë
, 
›
;

1535 
NodeLi°
 *
ˇŒs
, *
öty≥s
, *
¨gs
;

1536 
Fmt
 
fmt
;

1538 
⁄
 = 
nû
;

1539 
›
 = 
¬
->op;

1540 
Æl
 = 
¬
->
li°
;

1541 
ˇŒs
 = 
nû
;

1542 
nŸfú°
 = 0;

1543 
öty≥s
 = 
nû
;

1544 
¨gs
 = 
nû
;

1546 
	`mem£t
(&
fmt
, 0,  fmt);

1547 if(
de„r
) {

1549 
	`fmt°röô
(&
fmt
);

1550 
öty≥s
 = 
	`li°
(öty≥s, 
	`nod
(
ODCLFIELD
, 
N
, 
	`ty≥nod
(
ty≥s
[
TSTRING
])));

1551 
¨gs
 = 
	`li°1
(
	`nod
(
OXXX
, 
N
, N));

1554 
l
=
Æl
;Ü;Üˆ->
√xt
) {

1555 if(
nŸfú°
) {

1556 if(
de„r
)

1557 
	`fmçröt
(&
fmt
, " ");

1559 
ˇŒs
 = 
	`li°
(ˇŒs, 
	`mkˇŒ
("¥öt•", 
T
, 
öô
));

1561 
nŸfú°
 = 
›
 =
OPRINTN
;

1563 
n
 = 
l
->n;

1564 if(
n
->
›
 =
OLITERAL
) {

1565 
n
->
vÆ
.
˘y≥
) {

1566 
CTRUNE
:

1567 
	`deÁu…lô
(&
n
, 
ru√ty≥
);

1569 
CTINT
:

1570 
	`deÁu…lô
(&
n
, 
ty≥s
[
TINT64
]);

1572 
CTFLT
:

1573 
	`deÁu…lô
(&
n
, 
ty≥s
[
TFLOAT64
]);

1577 if(
n
->
›
 !
OLITERAL
 &&Ç->
ty≥
 &&Ç->ty≥->
ëy≥
 =
TIDEAL
)

1578 
	`deÁu…lô
(&
n
, 
ty≥s
[
TINT64
]);

1579 
	`deÁu…lô
(&
n
, 
nû
);

1580 
l
->
n
 =Ç;

1581 if(
n
->
ty≥
 =
T
 ||Ç->ty≥->
ëy≥
 =
TFORW
)

1584 
t
 = 
n
->
ty≥
;

1585 
ë
 = 
n
->
ty≥
->
ëy≥
;

1586 if(
	`isöãr
(
n
->
ty≥
)) {

1587 if(
de„r
) {

1588 if(
	`i¢ûöãr
(
n
->
ty≥
))

1589 
	`fmçröt
(&
fmt
, "%%e");

1591 
	`fmçröt
(&
fmt
, "%%i");

1593 if(
	`i¢ûöãr
(
n
->
ty≥
))

1594 
⁄
 = 
	`sy¶ook
("printeface", 1);

1596 
⁄
 = 
	`sy¶ook
("printiface", 1);

1597 
	`¨gty≥
(
⁄
, 
n
->
ty≥
);

1599 } if(
i•å
[
ë
] ||Éà=
TCHAN
 ||Éà=
TMAP
 ||Éà=
TFUNC
 ||Éà=
TUNSAFEPTR
) {

1600 if(
de„r
) {

1601 
	`fmçröt
(&
fmt
, "%%p");

1603 
⁄
 = 
	`sy¶ook
("printpointer", 1);

1604 
	`¨gty≥
(
⁄
, 
n
->
ty≥
);

1606 } if(
	`is¶i˚
(
n
->
ty≥
)) {

1607 if(
de„r
) {

1608 
	`fmçröt
(&
fmt
, "%%a");

1610 
⁄
 = 
	`sy¶ook
("printslice", 1);

1611 
	`¨gty≥
(
⁄
, 
n
->
ty≥
);

1613 } if(
isöt
[
ë
]) {

1614 if(
de„r
) {

1615 if(
ë
 =
TUINT64
)

1616 
	`fmçröt
(&
fmt
, "%%U");

1618 
	`fmçröt
(&
fmt
, "%%D");

1619 
t
 = 
ty≥s
[
TINT64
];

1622 if(
ë
 =
TUINT64
)

1623 
⁄
 = 
	`sy¶ook
("printuint", 0);

1625 
⁄
 = 
	`sy¶ook
("printint", 0);

1627 } if(
isÊﬂt
[
ë
]) {

1628 if(
de„r
) {

1629 
	`fmçröt
(&
fmt
, "%%f");

1630 
t
 = 
ty≥s
[
TFLOAT64
];

1632 
⁄
 = 
	`sy¶ook
("printfloat", 0);

1633 } if(
iscom∂ex
[
ë
]) {

1634 if(
de„r
) {

1635 
	`fmçröt
(&
fmt
, "%%C");

1636 
t
 = 
ty≥s
[
TCOMPLEX128
];

1638 
⁄
 = 
	`sy¶ook
("printcomplex", 0);

1639 } if(
ë
 =
TBOOL
) {

1640 if(
de„r
)

1641 
	`fmçröt
(&
fmt
, "%%t");

1643 
⁄
 = 
	`sy¶ook
("printbool", 0);

1644 } if(
ë
 =
TSTRING
) {

1645 if(
de„r
)

1646 
	`fmçröt
(&
fmt
, "%%S");

1648 
⁄
 = 
	`sy¶ook
("printstring", 0);

1650 
	`badty≥
(
OPRINT
, 
n
->
ty≥
, 
T
);

1654 if(!
de„r
) {

1655 
t
 = *
	`gëö¨g
(
⁄
->
ty≥
);

1656 if(
t
 !
nû
)

1657 
t
 =Å->
ty≥
;

1658 if(
t
 !
nû
)

1659 
t
 =Å->
ty≥
;

1662 if(!
	`eqty≥
(
t
, 
n
->
ty≥
)) {

1663 
n
 = 
	`nod
(
OCONV
,Ç, 
N
);

1664 
n
->
ty≥
 = 
t
;

1667 if(
de„r
) {

1668 
öty≥s
 = 
	`li°
(öty≥s, 
	`nod
(
ODCLFIELD
, 
N
, 
	`ty≥nod
(
t
)));

1669 
¨gs
 = 
	`li°
◊rgs, 
n
);

1671 
r
 = 
	`nod
(
OCALL
, 
⁄
, 
N
);

1672 
r
->
li°
 = 
	`li°1
(
n
);

1673 
ˇŒs
 = 
	`li°
(ˇŒs, 
r
);

1677 if(
de„r
) {

1678 if(
›
 =
OPRINTN
)

1679 
	`fmçröt
(&
fmt
, "\n");

1680 
⁄
 = 
	`sy¶ook
("goprintf", 1);

1681 
⁄
->
ty≥
 = 
	`fun˘y≥
(
nû
, 
öty≥s
,Çil);

1682 
¨gs
->
n
 = 
	`nod
(
OLITERAL
, 
N
, N);

1683 
¨gs
->
n
->
vÆ
.
˘y≥
 = 
CTSTR
;

1684 
¨gs
->
n
->
vÆ
.
u
.
svÆ
 = 
	`°æô
(
	`fmt°rÊush
(&
fmt
));

1685 
r
 = 
	`nod
(
OCALL
, 
⁄
, 
N
);

1686 
r
->
li°
 = 
¨gs
;

1687 
	`ty≥check
(&
r
, 
Et›
);

1688 
	`wÆkex¥
(&
r
, 
öô
);

1690 if(
›
 =
OPRINTN
)

1691 
ˇŒs
 = 
	`li°
(ˇŒs, 
	`mkˇŒ
("¥öäl", 
T
, 
nû
));

1692 
	`ty≥checkli°
(
ˇŒs
, 
Et›
);

1693 
	`wÆkex¥li°
(
ˇŒs
, 
öô
);

1695 
r
 = 
	`nod
(
OEMPTY
, 
N
, N);

1696 
	`ty≥check
(&
r
, 
Et›
);

1697 
	`wÆkex¥
(&
r
, 
öô
);

1698 
r
->
nöô
 = 
ˇŒs
;

1700  
r
;

1701 
	}
}

1703 
Node
*

1704 
	$ˇŒ√w
(
Ty≥
 *
t
)

1706 
Node
 *
‚
;

1708 
	`dowidth
(
t
);

1709 
‚
 = 
	`sy¶ook
("new", 1);

1710 
	`¨gty≥
(
‚
, 
t
);

1711  
	`mkˇŒ1
(
‚
, 
	`±πo
(
t
), 
nû
, 
	`ty≥«me
(t));

1712 
	}
}

1714 
Node
*

1715 
	$c⁄vas
(
Node
 *
n
, 
NodeLi°
 **
öô
)

1717 
Ty≥
 *
…
, *
π
;

1719 if(
n
->
›
 !
OAS
)

1720 
	`Áèl
("c⁄vas:ÇŸ OAS %O", 
n
->
›
);

1722 
n
->
ty≥check
 = 1;

1724 if(
n
->
À·
 =
N
 ||Ç->
right
 == N)

1725 
out
;

1727 
…
 = 
n
->
À·
->
ty≥
;

1728 
π
 = 
n
->
right
->
ty≥
;

1729 if(
…
 =
T
 || 
π
 == T)

1730 
out
;

1732 if(
	`isbœnk
(
n
->
À·
)) {

1733 
	`deÁu…lô
(&
n
->
right
, 
T
);

1734 
out
;

1737 if(
n
->
À·
->
›
 =
OINDEXMAP
) {

1738 
n
 = 
	`mkˇŒ1
(
	`m≠‚
("m≠assign1",Ç->
À·
->À·->
ty≥
), 
T
, 
öô
,

1739 
	`ty≥«me
(
n
->
À·
->À·->
ty≥
),

1740 
n
->
À·
->À·,Ç->À·->
right
,Ç->right);

1741 
out
;

1744 if(
	`eqty≥
(
…
, 
π
))

1745 
out
;

1747 
n
->
right
 = 
	`assignc⁄v
“->right, 
…
, "assignment");

1748 
	`wÆkex¥
(&
n
->
right
, 
öô
);

1750 
out
:

1751 
	`uŒm™ˇlc
(
n
);

1752  
n
;

1753 
	}
}

1763 
NodeLi°
*

1764 
	$ª‹dî1
(
NodeLi°
 *
Æl
)

1766 
Node
 *
f
, *
a
, *
n
;

1767 
NodeLi°
 *
l
, *
r
, *
g
;

1768 
c
, 
d
, 
t
;

1770 
c
 = 0;

1771 
t
 = 0;

1773 
l
=
Æl
;Ü;Üˆ->
√xt
) {

1774 
n
 = 
l
->n;

1775 
t
++;

1776 
	`uŒm™ˇlc
(
n
);

1777 if(
n
->
uŒm™
 >
UINF
)

1778 
c
++;

1780 if(
c
 =0 || 
t
 == 1)

1781  
Æl
;

1783 
g
 = 
nû
;

1784 
f
 = 
N
;

1785 
r
 = 
nû
;

1786 
d
 = 0;

1787 
l
=
Æl
;Ü;Üˆ->
√xt
) {

1788 
n
 = 
l
->n;

1789 if(
n
->
uŒm™
 < 
UINF
) {

1790 
r
 = 
	`li°
‘, 
n
);

1793 
d
++;

1794 if(
d
 =
c
) {

1795 
f
 = 
n
;

1800 
a
 = 
	`ãmp
(
n
->
right
->
ty≥
);

1801 
a
 = 
	`nod
(
OAS
,á, 
n
->
right
);

1802 
g
 = 
	`li°
(g, 
a
);

1806 
n
->
right
 = 
a
->
À·
;

1807 
r
 = 
	`li°
‘, 
n
);

1810 if(
f
 !
N
)

1811 
g
 = 
	`li°
(g, 
f
);

1812  
	`c⁄ˇt
(
g
, 
r
);

1813 
	}
}

1815 
ª‹dî3ßve
(
Node
**, 
NodeLi°
*, NodeList*, NodeList**);

1816 
Æü£d
(
Node
*, 
NodeLi°
*, NodeList*);

1826 
NodeLi°
*

1827 
	$ª‹dî3
(
NodeLi°
 *
Æl
)

1829 
NodeLi°
 *
li°
, *
óæy
;

1830 
Node
 *
l
;

1835 
óæy
 = 
nû
;

1836 
li°
=
Æl
;Üi°;Üi°ˆi°->
√xt
) {

1837 
l
 = 
li°
->
n
->
À·
;

1842 if(
l
->
›
 =
ODOT
 ||Ü->› =
OPAREN
) {

1843 
l
 =Ü->
À·
;

1846 if(
l
->
›
 =
OINDEX
 && 
	`isfixed¨øy
÷->
À·
->
ty≥
)) {

1847 
	`ª‹dî3ßve
(&
l
->
right
, 
Æl
, 
li°
, &
óæy
);

1848 
l
 =Ü->
À·
;

1853 
l
->
›
) {

1855 
	`Áèl
("ª‹dî3 u√x≥˘edÜvÆuê%#O", 
l
->
›
);

1856 
ONAME
:

1858 
OINDEX
:

1859 
	`ª‹dî3ßve
(&
l
->
À·
, 
Æl
, 
li°
, &
óæy
);

1860 
	`ª‹dî3ßve
(&
l
->
right
, 
Æl
, 
li°
, &
óæy
);

1862 
OIND
:

1863 
ODOTPTR
:

1864 
	`ª‹dî3ßve
(&
l
->
À·
, 
Æl
, 
li°
, &
óæy
);

1868 
	`ª‹dî3ßve
(&
li°
->
n
->
right
, 
Æl
,Üi°, &
óæy
);

1871  
	`c⁄ˇt
(
óæy
, 
Æl
);

1872 
	}
}

1874 
vm©ch2
(
Node
*, Node*);

1875 
v¨ex¥
(
Node
*);

1884 
	$ª‹dî3ßve
(
Node
 **
≈
, 
NodeLi°
 *
Æl
, NodeLi° *
°›
, NodeLi° **
óæy
)

1886 
Node
 *
n
, *
q
;

1888 
n
 = *
≈
;

1889 if(!
	`Æü£d
(
n
, 
Æl
, 
°›
))

1892 
q
 = 
	`ãmp
(
n
->
ty≥
);

1893 
q
 = 
	`nod
(
OAS
, q, 
n
);

1894 
	`ty≥check
(&
q
, 
Et›
);

1895 *
óæy
 = 
	`li°
(*óæy, 
q
);

1896 *
≈
 = 
q
->
À·
;

1897 
	}
}

1903 
Node
*

1904 
	$ouãrvÆue
(
Node
 *
n
)

1907 if(
n
->
›
 =
ODOT
 ||Ç->› =
OPAREN
) {

1908 
n
 =Ç->
À·
;

1911 if(
n
->
›
 =
OINDEX
 && 
	`isfixed¨øy
“->
À·
->
ty≥
)) {

1912 
n
 =Ç->
À·
;

1917  
n
;

1918 
	}
}

1925 
	$Æü£d
(
Node
 *
n
, 
NodeLi°
 *
Æl
, NodeLi° *
°›
)

1927 
memwrôe
, 
v¨wrôe
;

1928 
Node
 *
a
;

1929 
NodeLi°
 *
l
;

1931 if(
n
 =
N
)

1939 
memwrôe
 = 0;

1940 
v¨wrôe
 = 0;

1941 
l
=
Æl
;Ü!=
°›
;Üˆ->
√xt
) {

1942 
a
 = 
	`ouãrvÆue
(
l
->
n
->
À·
);

1943 if(
a
->
›
 !
ONAME
) {

1944 
memwrôe
 = 1;

1947 
n
->
˛ass
) {

1949 
v¨wrôe
 = 1;

1951 
PAUTO
:

1952 
PPARAM
:

1953 
PPARAMOUT
:

1954 if(
n
->
addπakí
) {

1955 
v¨wrôe
 = 1;

1958 if(
	`vm©ch2
(
a
, 
n
)) {

1970 if(!
memwrôe
 && !
v¨wrôe
)

1976 if(
	`v¨ex¥
(
n
))

1982 
	}
}

1990 
	$v¨ex¥
(
Node
 *
n
)

1992 if(
n
 =
N
)

1995 
n
->
›
) {

1996 
OLITERAL
:

1998 
ONAME
:

1999 
n
->
˛ass
) {

2000 
PAUTO
:

2001 
PPARAM
:

2002 
PPARAMOUT
:

2003 if(!
n
->
addπakí
)

2008 
OADD
:

2009 
OSUB
:

2010 
OOR
:

2011 
OXOR
:

2012 
OMUL
:

2013 
ODIV
:

2014 
OMOD
:

2015 
OLSH
:

2016 
ORSH
:

2017 
OAND
:

2018 
OANDNOT
:

2019 
OPLUS
:

2020 
OMINUS
:

2021 
OCOM
:

2022 
OPAREN
:

2023 
OANDAND
:

2024 
OOROR
:

2025 
ODOT
:

2026 
OCONV
:

2027 
OCONVNOP
:

2028 
OCONVIFACE
:

2029 
ODOTTYPE
:

2030  
	`v¨ex¥
(
n
->
À·
Ë&& v¨ex¥“->
right
);

2035 
	}
}

2041 
	$vm©ch2
(
Node
 *
l
, Nodê*
r
)

2043 
NodeLi°
 *
Œ
;

2045 if(
r
 =
N
)

2047 
r
->
›
) {

2048 
ONAME
:

2050  
l
 =
r
;

2051 
OLITERAL
:

2054 if(
	`vm©ch2
(
l
, 
r
->
À·
))

2056 if(
	`vm©ch2
(
l
, 
r
->
right
))

2058 
Œ
=
r
->
li°
;Ül;Ülˆl->
√xt
)

2059 if(
	`vm©ch2
(
l
, 
Œ
->
n
))

2062 
	}
}

2069 
	$vm©ch1
(
Node
 *
l
, Nodê*
r
)

2071 
NodeLi°
 *
Œ
;

2076 if(
l
 =
N
 || 
r
 == N)

2078 
l
->
›
) {

2079 
ONAME
:

2080 
l
->
˛ass
) {

2081 
PPARAM
:

2082 
PPARAMREF
:

2083 
PAUTO
:

2088 if(
r
->
uŒm™
 >
UINF
)

2092  
	`vm©ch2
(
l
, 
r
);

2093 
OLITERAL
:

2096 if(
	`vm©ch1
(
l
->
À·
, 
r
))

2098 if(
	`vm©ch1
(
l
->
right
, 
r
))

2100 
Œ
=
l
->
li°
;Ül;Ülˆl->
√xt
)

2101 if(
	`vm©ch1
(
Œ
->
n
, 
r
))

2104 
	}
}

2111 
NodeLi°
*

2112 
	$∑øm°ohóp
(
Ty≥
 **
¨gö
, 
out
)

2114 
Ty≥
 *
t
;

2115 
Iãr
 
ßvë
;

2116 
Node
 *
v
;

2117 
NodeLi°
 *
¬
;

2119 
¬
 = 
nû
;

2120 
t
 = 
	`°ru˘fú°
(&
ßvë
, 
¨gö
);Å !
T
;Å = 
	`°ru˘√xt
(&savet)) {

2121 
v
 = 
t
->
¬ame
;

2122 if(
v
 =
N
 && 
out
 && 
hasde„r
) {

2126 
¬
 = 
	`li°
“n, 
	`nod
(
OAS
, 
	`nod¨g
(
t
, 1), 
N
));

2128 if(
v
 =
N
 || !(v->
˛ass
 & 
PHEAP
))

2132 if(
v
->
Æloc
 =
nû
)

2133 
v
->
Æloc
 = 
	`ˇŒ√w
(v->
ty≥
);

2134 
¬
 = 
	`li°
“n, 
	`nod
(
OAS
, 
v
->
hó∑ddr
, v->
Æloc
));

2135 if((
v
->
˛ass
 & ~
PHEAP
Ë!
PPARAMOUT
)

2136 
¬
 = 
	`li°
“n, 
	`nod
(
OAS
, 
v
, v->
°ack∑øm
));

2138  
¬
;

2139 
	}
}

2144 
NodeLi°
*

2145 
	$ªtu∫s‰omhóp
(
Ty≥
 **
¨gö
)

2147 
Ty≥
 *
t
;

2148 
Iãr
 
ßvë
;

2149 
Node
 *
v
;

2150 
NodeLi°
 *
¬
;

2152 
¬
 = 
nû
;

2153 
t
 = 
	`°ru˘fú°
(&
ßvë
, 
¨gö
);Å !
T
;Å = 
	`°ru˘√xt
(&savet)) {

2154 
v
 = 
t
->
¬ame
;

2155 if(
v
 =
N
 || v->
˛ass
 !(
PHEAP
|
PPARAMOUT
))

2157 
¬
 = 
	`li°
“n, 
	`nod
(
OAS
, 
v
->
°ack∑øm
, v));

2159  
¬
;

2160 
	}
}

2168 
	$hópmoves
()

2170 
NodeLi°
 *
¬
;

2171 
öt32
 
 o
;

2173 
 o
 = 
löío
;

2174 
löío
 = 
cur‚
->lineno;

2175 
¬
 = 
	`∑øm°ohóp
(
	`gëthis
(
cur‚
->
ty≥
), 0);

2176 
¬
 = 
	`c⁄ˇt
“n, 
	`∑øm°ohóp
(
	`gëö¨g
(
cur‚
->
ty≥
), 0));

2177 
¬
 = 
	`c⁄ˇt
“n, 
	`∑øm°ohóp
(
	`gëouèrg
(
cur‚
->
ty≥
), 1));

2178 
cur‚
->
íãr
 = 
	`c⁄ˇt
(cur‚->íãr, 
¬
);

2179 
löío
 = 
cur‚
->
ídlöío
;

2180 
cur‚
->
exô
 = 
	`ªtu∫s‰omhóp
(
	`gëouèrg
(cur‚->
ty≥
));

2181 
löío
 = 
 o
;

2182 
	}
}

2184 
Node
*

2185 
	$vmkˇŒ
(
Node
 *
‚
, 
Ty≥
 *
t
, 
NodeLi°
 **
öô
, 
va_li°
 
va
)

2187 
i
, 
n
;

2188 
Node
 *
r
;

2189 
NodeLi°
 *
¨gs
;

2191 if(
‚
->
ty≥
 =
T
 || fn->ty≥->
ëy≥
 !
TFUNC
)

2192 
	`Áèl
("mkˇŒ %N %T", 
‚
, fn->
ty≥
);

2194 
¨gs
 = 
nû
;

2195 
n
 = 
‚
->
ty≥
->
ötu∂e
;

2196 
i
=0; i<
n
; i++)

2197 
¨gs
 = 
	`li°
◊rgs, 
	`va_¨g
(
va
, 
Node
*));

2199 
r
 = 
	`nod
(
OCALL
, 
‚
, 
N
);

2200 
r
->
li°
 = 
¨gs
;

2201 if(
‚
->
ty≥
->
ouâu∂e
 > 0)

2202 
	`ty≥check
(&
r
, 
Erv
 | 
E‚°ru˘
);

2204 
	`ty≥check
(&
r
, 
Et›
);

2205 
	`wÆkex¥
(&
r
, 
öô
);

2206 
r
->
ty≥
 = 
t
;

2207  
r
;

2208 
	}
}

2210 
Node
*

2211 
	$mkˇŒ
(*
«me
, 
Ty≥
 *
t
, 
NodeLi°
 **
öô
, ...)

2213 
Node
 *
r
;

2214 
va_li°
 
va
;

2216 
	`va_°¨t
(
va
, 
öô
);

2217 
r
 = 
	`vmkˇŒ
(
	`sy¶ook
(
«me
, 0), 
t
, 
öô
, 
va
);

2218 
	`va_íd
(
va
);

2219  
r
;

2220 
	}
}

2222 
Node
*

2223 
	$mkˇŒ1
(
Node
 *
‚
, 
Ty≥
 *
t
, 
NodeLi°
 **
öô
, ...)

2225 
Node
 *
r
;

2226 
va_li°
 
va
;

2228 
	`va_°¨t
(
va
, 
öô
);

2229 
r
 = 
	`vmkˇŒ
(
‚
, 
t
, 
öô
, 
va
);

2230 
	`va_íd
(
va
);

2231  
r
;

2232 
	}
}

2234 
Node
*

2235 
	$c⁄v
(
Node
 *
n
, 
Ty≥
 *
t
)

2237 if(
	`eqty≥
(
n
->
ty≥
, 
t
))

2238  
n
;

2239 
n
 = 
	`nod
(
OCONV
,Ç, 
N
);

2240 
n
->
ty≥
 = 
t
;

2241 
	`ty≥check
(&
n
, 
Erv
);

2242  
n
;

2243 
	}
}

2245 
Node
*

2246 
	$ch™‚
(*
«me
, 
n
, 
Ty≥
 *
t
)

2248 
Node
 *
‚
;

2249 
i
;

2251 if(
t
->
ëy≥
 !
TCHAN
)

2252 
	`Áèl
("ch™‚ %T", 
t
);

2253 
‚
 = 
	`sy¶ook
(
«me
, 1);

2254 
i
=0; i<
n
; i++)

2255 
	`¨gty≥
(
‚
, 
t
->
ty≥
);

2256  
‚
;

2257 
	}
}

2259 
Node
*

2260 
	$m≠‚
(*
«me
, 
Ty≥
 *
t
)

2262 
Node
 *
‚
;

2264 if(
t
->
ëy≥
 !
TMAP
)

2265 
	`Áèl
("m≠‚ %T", 
t
);

2266 
‚
 = 
	`sy¶ook
(
«me
, 1);

2267 
	`¨gty≥
(
‚
, 
t
->
down
);

2268 
	`¨gty≥
(
‚
, 
t
->
ty≥
);

2269 
	`¨gty≥
(
‚
, 
t
->
down
);

2270 
	`¨gty≥
(
‚
, 
t
->
ty≥
);

2271  
‚
;

2272 
	}
}

2274 
Node
*

2275 
	$m≠‚dñ
(*
«me
, 
Ty≥
 *
t
)

2277 
Node
 *
‚
;

2279 if(
t
->
ëy≥
 !
TMAP
)

2280 
	`Áèl
("m≠‚ %T", 
t
);

2281 
‚
 = 
	`sy¶ook
(
«me
, 1);

2282 
	`¨gty≥
(
‚
, 
t
->
down
);

2283 
	`¨gty≥
(
‚
, 
t
->
ty≥
);

2284 
	`¨gty≥
(
‚
, 
t
->
down
);

2285  
‚
;

2286 
	}
}

2288 
Node
*

2289 
	$add°r
(
Node
 *
n
, 
NodeLi°
 **
öô
)

2291 
Node
 *
r
, *
ˇt
, *
typ°r
;

2292 
NodeLi°
 *
ö
, *
¨gs
;

2293 
i
, 
cou¡
;

2295 
cou¡
 = 0;

2296 
r
=
n
;Ñ->
›
 =
OADDSTR
;ÑÙ->
À·
)

2297 
cou¡
++;

2298 
cou¡
++;

2302 
ˇt
 = 
	`sy¶ook
("concatstring", 1);

2303 
ˇt
->
ty≥
 = 
T
;

2304 
ˇt
->
¡y≥
 = 
	`nod
(
OTFUNC
, 
N
, N);

2305 
ö
 = 
	`li°1
(
	`nod
(
ODCLFIELD
, 
N
, 
	`ty≥nod
(
ty≥s
[
TINT
])));

2306 
typ°r
 = 
	`ty≥nod
(
ty≥s
[
TSTRING
]);

2307 
i
=0; i<
cou¡
; i++)

2308 
ö
 = 
	`li°
(ö, 
	`nod
(
ODCLFIELD
, 
N
, 
typ°r
));

2309 
ˇt
->
¡y≥
->
li°
 = 
ö
;

2310 
ˇt
->
¡y≥
->
æi°
 = 
	`li°1
(
	`nod
(
ODCLFIELD
, 
N
, 
typ°r
));

2312 
¨gs
 = 
nû
;

2313 
r
=
n
;Ñ->
›
 =
OADDSTR
;ÑÙ->
À·
)

2314 
¨gs
 = 
	`c⁄ˇt
(
	`li°1
(
	`c⁄v
(
r
->
right
, 
ty≥s
[
TSTRING
])),árgs);

2315 
¨gs
 = 
	`c⁄ˇt
(
	`li°1
(
	`c⁄v
(
r
, 
ty≥s
[
TSTRING
])),árgs);

2316 
¨gs
 = 
	`c⁄ˇt
(
	`li°1
(
	`nodötc⁄°
(
cou¡
)),árgs);

2318 
r
 = 
	`nod
(
OCALL
, 
ˇt
, 
N
);

2319 
r
->
li°
 = 
¨gs
;

2320 
	`ty≥check
(&
r
, 
Erv
);

2321 
	`wÆkex¥
(&
r
, 
öô
);

2322 
r
->
ty≥
 = 
n
->type;

2324  
r
;

2325 
	}
}

2327 
Node
*

2328 
	$≠≥nd¶i˚
(
Node
 *
n
, 
NodeLi°
 **
öô
)

2330 
Node
 *
f
;

2332 
f
 = 
	`sy¶ook
("appendslice", 1);

2333 
	`¨gty≥
(
f
, 
n
->
ty≥
);

2334 
	`¨gty≥
(
f
, 
n
->
ty≥
->type);

2335 
	`¨gty≥
(
f
, 
n
->
ty≥
);

2336  
	`mkˇŒ1
(
f
, 
n
->
ty≥
, 
öô
, 
	`ty≥«me
“->ty≥),Ç->
li°
->n,Ç->li°->
√xt
->n);

2337 
	}
}

2354 
Node
*

2355 
	$≠≥nd
(
Node
 *
n
, 
NodeLi°
 **
öô
)

2357 
NodeLi°
 *
l
, *
a
;

2358 
Node
 *
n§c
, *
ns
, *
¬
, *
«
, *
nx
, *
‚
;

2359 
¨gc
;

2361 
	`wÆkex¥li°ß„
(
n
->
li°
, 
öô
);

2366 
l
=
n
->
li°
;Ü;Üˆ->
√xt
)

2367 
l
->
n
 = 
	`chó≥x¥
÷->n, 
öô
);

2369 
n§c
 = 
n
->
li°
->n;

2370 
¨gc
 = 
	`cou¡
(
n
->
li°
) - 1;

2371 i‡(
¨gc
 < 1) {

2372  
n§c
;

2375 
l
 = 
nû
;

2377 
ns
 = 
	`ãmp
(
n§c
->
ty≥
);

2378 
l
 = 
	`li°
÷, 
	`nod
(
OAS
, 
ns
, 
n§c
));

2380 
«
 = 
	`nodötc⁄°
(
¨gc
);

2381 
nx
 = 
	`nod
(
OIF
, 
N
, N);

2382 
nx
->
¡e°
 = 
	`nod
(
OLT
,Çod(
OSUB
,Çod(
OCAP
, 
ns
, 
N
),Çod(
OLEN
,Çs, N)), 
«
);

2384 
‚
 = 
	`sy¶ook
("growslice", 1);

2385 
	`¨gty≥
(
‚
, 
ns
->
ty≥
->type);

2386 
	`¨gty≥
(
‚
, 
ns
->
ty≥
->type);

2388 
nx
->
nbody
 = 
	`li°1
(
	`nod
(
OAS
, 
ns
, 
	`mkˇŒ1
(
‚
,Çs->
ty≥
, &nx->
nöô
,

2389 
	`ty≥«me
(
ns
->
ty≥
),

2390 
ns
,

2391 
	`c⁄v
(
«
, 
ty≥s
[
TINT64
]))));

2392 
l
 = 
	`li°
÷, 
nx
);

2394 
¬
 = 
	`ãmp
(
ty≥s
[
TINT
]);

2395 
l
 = 
	`li°
÷, 
	`nod
(
OAS
, 
¬
,Çod(
OLEN
, 
ns
, 
N
)));

2397 
nx
 = 
	`nod
(
OSLICE
, 
ns
,Çod(
OKEY
, 
N
,Çod(
OADD
, 
¬
, 
«
)));

2398 
nx
->
ëy≥
 = 1;

2399 
l
 = 
	`li°
÷, 
	`nod
(
OAS
, 
ns
, 
nx
));

2401 
a
 = 
n
->
li°
->
√xt
;á !
nû
;á =á->next) {

2402 
nx
 = 
	`nod
(
OINDEX
, 
ns
, 
¬
);

2403 
nx
->
ëy≥
 = 1;

2404 
l
 = 
	`li°
÷, 
	`nod
(
OAS
, 
nx
, 
a
->
n
));

2405 i‡(
a
->
√xt
 !
nû
)

2406 
l
 = 
	`li°
÷, 
	`nod
(
OAS
, 
¬
,Çod(
OADD
,Çn, 
	`nodötc⁄°
(1))));

2409 
	`ty≥checkli°
(
l
, 
Et›
);

2410 
	`wÆk°méi°
(
l
);

2411 *
öô
 = 
	`c⁄ˇt
(*öô, 
l
);

2412  
ns
;

2413 
	}
}

2415 
Node
*

2416 
	$eqf‹
(
Ty≥
 *
t
)

2418 
a
;

2419 
Node
 *
n
;

2420 
Node
 *
¡y≥
;

2421 
Sym
 *
sym
;

2427 
a
 = 
	`Ægty≥1
(
t
, 
nû
);

2428 if(
a
 !
AMEM
 &&á != -1)

2429 
	`Áèl
("eqf‹ %T", 
t
);

2431 if(
a
 =
AMEM
) {

2432 
n
 = 
	`sy¶ook
("memequal", 1);

2433 
	`¨gty≥
(
n
, 
t
);

2434 
	`¨gty≥
(
n
, 
t
);

2435  
n
;

2438 
sym
 = 
	`ty≥sym¥efix
(".eq", 
t
);

2439 
n
 = 
	`√w«me
(
sym
);

2440 
n
->
˛ass
 = 
PFUNC
;

2441 
¡y≥
 = 
	`nod
(
OTFUNC
, 
N
, N);

2442 
¡y≥
->
li°
 = 
	`li°
“ty≥->li°, 
	`nod
(
ODCLFIELD
, 
N
, 
	`ty≥nod
(
	`±πo
(
ty≥s
[
TBOOL
]))));

2443 
¡y≥
->
li°
 = 
	`li°
“ty≥->li°, 
	`nod
(
ODCLFIELD
, 
N
, 
	`ty≥nod
(
ty≥s
[
TUINTPTR
])));

2444 
¡y≥
->
li°
 = 
	`li°
“ty≥->li°, 
	`nod
(
ODCLFIELD
, 
N
, 
	`ty≥nod
(
	`±πo
(
t
))));

2445 
¡y≥
->
li°
 = 
	`li°
“ty≥->li°, 
	`nod
(
ODCLFIELD
, 
N
, 
	`ty≥nod
(
	`±πo
(
t
))));

2446 
	`ty≥check
(&
¡y≥
, 
Ety≥
);

2447 
n
->
ty≥
 = 
¡y≥
->type;

2448  
n
;

2449 
	}
}

2452 
	$cou¡fõld
(
Ty≥
 *
t
)

2454 
Ty≥
 *
t1
;

2455 
n
;

2457 
n
 = 0;

2458 
t1
=
t
->
ty≥
;Å1!=
T
;Å1Ò1->
down
)

2459 
n
++;

2460  
n
;

2461 
	}
}

2464 
	$wÆkcom∑ª
(
Node
 **
≈
, 
NodeLi°
 **
öô
)

2466 
Node
 *
n
, *
l
, *
r
, *
‚
, *
ˇŒ
, *
a
, *
li
, *
ri
, *
ex¥
;

2467 
™d‹
, 
i
;

2468 
Ty≥
 *
t
, *
t1
;

2469 
Node
 *
ãmpboﬁ
;

2471 
n
 = *
≈
;

2475 
t
 = 
n
->
À·
->
ty≥
;

2476 
t
->
ëy≥
) {

2479 
TARRAY
:

2480 if(
	`is¶i˚
(
t
))

2483 
TSTRUCT
:

2487 if(!
	`i¶vÆue
(
n
->
À·
Ë|| !i¶vÆue“->
right
))

2488 
h¨d
;

2490 
l
 = 
	`ãmp
(
	`±πo
(
t
));

2491 
a
 = 
	`nod
(
OAS
, 
l
,Çod(
OADDR
, 
n
->
À·
, 
N
));

2492 
a
->
right
->
ëy≥
 = 1;

2493 
	`ty≥check
(&
a
, 
Et›
);

2494 *
öô
 = 
	`li°
(*öô, 
a
);

2496 
r
 = 
	`ãmp
(
	`±πo
(
t
));

2497 
a
 = 
	`nod
(
OAS
, 
r
,Çod(
OADDR
, 
n
->
right
, 
N
));

2498 
a
->
right
->
ëy≥
 = 1;

2499 
	`ty≥check
(&
a
, 
Et›
);

2500 *
öô
 = 
	`li°
(*öô, 
a
);

2502 
ex¥
 = 
N
;

2503 
™d‹
 = 
OANDAND
;

2504 if(
n
->
›
 =
ONE
)

2505 
™d‹
 = 
OOROR
;

2507 if(
t
->
ëy≥
 =
TARRAY
 &&

2508 
t
->
bound
 <= 4 &&

2509 
issim∂e
[
t
->
ty≥
->
ëy≥
]) {

2512 
i
=0; i<
t
->
bound
; i++) {

2513 
li
 = 
	`nod
(
OINDEX
, 
l
, 
	`nodötc⁄°
(
i
));

2514 
ri
 = 
	`nod
(
OINDEX
, 
r
, 
	`nodötc⁄°
(
i
));

2515 
a
 = 
	`nod
(
n
->
›
, 
li
, 
ri
);

2516 if(
ex¥
 =
N
)

2517 
ex¥
 = 
a
;

2519 
ex¥
 = 
	`nod
(
™d‹
,Éx¥, 
a
);

2521 if(
ex¥
 =
N
)

2522 
ex¥
 = 
	`nodboﬁ
(
n
->
›
 =
OEQ
);

2523 
	`ty≥check
(&
ex¥
, 
Erv
);

2524 
	`wÆkex¥
(&
ex¥
, 
öô
);

2525 
ex¥
->
ty≥
 = 
n
->type;

2526 *
≈
 = 
ex¥
;

2530 if(
t
->
ëy≥
 =
TSTRUCT
 && 
	`cou¡fõld
(t) <= 4) {

2533 
t1
=
t
->
ty≥
;Å1;Å1Ò1->
down
) {

2534 
li
 = 
	`nod
(
OXDOT
, 
l
, 
	`√w«me
(
t1
->
sym
));

2535 
ri
 = 
	`nod
(
OXDOT
, 
r
, 
	`√w«me
(
t1
->
sym
));

2536 
a
 = 
	`nod
(
n
->
›
, 
li
, 
ri
);

2537 if(
ex¥
 =
N
)

2538 
ex¥
 = 
a
;

2540 
ex¥
 = 
	`nod
(
™d‹
,Éx¥, 
a
);

2542 if(
ex¥
 =
N
)

2543 
ex¥
 = 
	`nodboﬁ
(
n
->
›
 =
OEQ
);

2544 
	`ty≥check
(&
ex¥
, 
Erv
);

2545 
	`wÆkex¥
(&
ex¥
, 
öô
);

2546 
ex¥
->
ty≥
 = 
n
->type;

2547 *
≈
 = 
ex¥
;

2557 if(
ãmpboﬁ
 =
N
 ||Åempboﬁ->
cur‚
 != curfn)

2558 
ãmpboﬁ
 = 
	`ãmp
(
ty≥s
[
TBOOL
]);

2560 
ˇŒ
 = 
	`nod
(
OCALL
, 
	`eqf‹
(
t
), 
N
);

2561 
a
 = 
	`nod
(
OADDR
, 
ãmpboﬁ
, 
N
);

2562 
a
->
ëy≥
 = 1;

2563 
ˇŒ
->
li°
 = 
	`li°
(ˇŒ->li°, 
a
);

2564 
ˇŒ
->
li°
 = 
	`li°
(ˇŒ->li°, 
	`nodötc⁄°
(
t
->
width
));

2565 
ˇŒ
->
li°
 = 
	`li°
(ˇŒ->li°, 
l
);

2566 
ˇŒ
->
li°
 = 
	`li°
(ˇŒ->li°, 
r
);

2567 
	`ty≥check
(&
ˇŒ
, 
Et›
);

2568 
	`wÆk°mt
(&
ˇŒ
);

2569 *
öô
 = 
	`li°
(*öô, 
ˇŒ
);

2571 if(
n
->
›
 =
OEQ
)

2572 
r
 = 
ãmpboﬁ
;

2574 
r
 = 
	`nod
(
ONOT
, 
ãmpboﬁ
, 
N
);

2575 
	`ty≥check
(&
r
, 
Erv
);

2576 
	`wÆkex¥
(&
r
, 
öô
);

2577 *
≈
 = 
r
;

2580 
h¨d
:

2586 
‚
 = 
	`sy¶ook
("equal", 1);

2587 
l
 = 
n
->
À·
;

2588 
r
 = 
n
->
right
;

2589 
	`¨gty≥
(
‚
, 
n
->
À·
->
ty≥
);

2590 
	`¨gty≥
(
‚
, 
n
->
À·
->
ty≥
);

2591 
r
 = 
	`mkˇŒ1
(
‚
, 
n
->
ty≥
, 
öô
, 
	`ty≥«me
“->
À·
->ty≥), 
l
,Ñ);

2592 if(
n
->
›
 =
ONE
) {

2593 
r
 = 
	`nod
(
ONOT
,Ñ, 
N
);

2594 
	`ty≥check
(&
r
, 
Erv
);

2596 *
≈
 = 
r
;

2598 
	}
}

	@y.tab.c

44 
	#YYBISON
 1

	)

47 
	#YYBISON_VERSION
 "2.5"

	)

50 
	#YYSKELETON_NAME
 "yacc.c"

	)

53 
	#YYPURE
 0

	)

56 
	#YYPUSH
 0

	)

59 
	#YYPULL
 1

	)

62 
	#YYLSP_NEEDED
 0

	)

71 
	~<u.h
>

72 
	~<°dio.h
>

73 
	~<libc.h
>

74 
	~"go.h
"

76 
fixlbø˚
();

83 #i‚de‡
YYDEBUG


84 
	#YYDEBUG
 0

	)

88 #ifde‡
YYERROR_VERBOSE


89 #unde‡
YYERROR_VERBOSE


90 
	#YYERROR_VERBOSE
 1

	)

92 
	#YYERROR_VERBOSE
 1

	)

96 #i‚de‡
YYTOKEN_TABLE


97 
	#YYTOKEN_TABLE
 0

	)

102 #i‚de‡
YYTOKENTYPE


103 
	#YYTOKENTYPE


	)

106 
	eyytokíty≥
 {

107 
	mLLITERAL
 = 258,

108 
	mLASOP
 = 259,

109 
	mLBREAK
 = 260,

110 
	mLCASE
 = 261,

111 
	mLCHAN
 = 262,

112 
	mLCOLAS
 = 263,

113 
	mLCONST
 = 264,

114 
	mLCONTINUE
 = 265,

115 
	mLDDD
 = 266,

116 
	mLDEFAULT
 = 267,

117 
	mLDEFER
 = 268,

118 
	mLELSE
 = 269,

119 
	mLFALL
 = 270,

120 
	mLFOR
 = 271,

121 
	mLFUNC
 = 272,

122 
	mLGO
 = 273,

123 
	mLGOTO
 = 274,

124 
	mLIF
 = 275,

125 
	mLIMPORT
 = 276,

126 
	mLINTERFACE
 = 277,

127 
	mLMAP
 = 278,

128 
	mLNAME
 = 279,

129 
	mLPACKAGE
 = 280,

130 
	mLRANGE
 = 281,

131 
	mLRETURN
 = 282,

132 
	mLSELECT
 = 283,

133 
	mLSTRUCT
 = 284,

134 
	mLSWITCH
 = 285,

135 
	mLTYPE
 = 286,

136 
	mLVAR
 = 287,

137 
	mLANDAND
 = 288,

138 
	mLANDNOT
 = 289,

139 
	mLBODY
 = 290,

140 
	mLCOMM
 = 291,

141 
	mLDEC
 = 292,

142 
	mLEQ
 = 293,

143 
	mLGE
 = 294,

144 
	mLGT
 = 295,

145 
	mLIGNORE
 = 296,

146 
	mLINC
 = 297,

147 
	mLLE
 = 298,

148 
	mLLSH
 = 299,

149 
	mLLT
 = 300,

150 
	mLNE
 = 301,

151 
	mLOROR
 = 302,

152 
	mLRSH
 = 303,

153 
	mNŸPackage
 = 304,

154 
	mNŸP¨í
 = 305,

155 
	mPª„rToRightP¨í
 = 306

159 
	#LLITERAL
 258

	)

160 
	#LASOP
 259

	)

161 
	#LBREAK
 260

	)

162 
	#LCASE
 261

	)

163 
	#LCHAN
 262

	)

164 
	#LCOLAS
 263

	)

165 
	#LCONST
 264

	)

166 
	#LCONTINUE
 265

	)

167 
	#LDDD
 266

	)

168 
	#LDEFAULT
 267

	)

169 
	#LDEFER
 268

	)

170 
	#LELSE
 269

	)

171 
	#LFALL
 270

	)

172 
	#LFOR
 271

	)

173 
	#LFUNC
 272

	)

174 
	#LGO
 273

	)

175 
	#LGOTO
 274

	)

176 
	#LIF
 275

	)

177 
	#LIMPORT
 276

	)

178 
	#LINTERFACE
 277

	)

179 
	#LMAP
 278

	)

180 
	#LNAME
 279

	)

181 
	#LPACKAGE
 280

	)

182 
	#LRANGE
 281

	)

183 
	#LRETURN
 282

	)

184 
	#LSELECT
 283

	)

185 
	#LSTRUCT
 284

	)

186 
	#LSWITCH
 285

	)

187 
	#LTYPE
 286

	)

188 
	#LVAR
 287

	)

189 
	#LANDAND
 288

	)

190 
	#LANDNOT
 289

	)

191 
	#LBODY
 290

	)

192 
	#LCOMM
 291

	)

193 
	#LDEC
 292

	)

194 
	#LEQ
 293

	)

195 
	#LGE
 294

	)

196 
	#LGT
 295

	)

197 
	#LIGNORE
 296

	)

198 
	#LINC
 297

	)

199 
	#LLE
 298

	)

200 
	#LLSH
 299

	)

201 
	#LLT
 300

	)

202 
	#LNE
 301

	)

203 
	#LOROR
 302

	)

204 
	#LRSH
 303

	)

205 
	#NŸPackage
 304

	)

206 
	#NŸP¨í
 305

	)

207 
	#Pª„rToRightP¨í
 306

	)

212 #i‡! 
deföed
 
YYSTYPE
 && ! deföed 
YYSTYPE_IS_DECLARED


213 
	uYYSTYPE


219 
Node
* 
	mnode
;

220 
NodeLi°
* 
	mli°
;

221 
Ty≥
* 
	mty≥
;

222 
Sym
* 
	msym
;

223 
VÆ
 
	mvÆ
;

224 
	mi
;

230 } 
	tYYSTYPE
;

231 
	#YYSTYPE_IS_TRIVIAL
 1

	)

232 
	#yy°y≥
 
YYSTYPE


	)

233 
	#YYSTYPE_IS_DECLARED
 1

	)

247 #ifde‡
YYTYPE_UINT8


248 
YYTYPE_UINT8
 
	tyyty≥_uöt8
;

250 
	tyyty≥_uöt8
;

253 #ifde‡
YYTYPE_INT8


254 
YYTYPE_INT8
 
	tyyty≥_öt8
;

255 #ñi‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

256 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

257 sig√d 
	tyyty≥_öt8
;

259 
	tyyty≥_öt8
;

262 #ifde‡
YYTYPE_UINT16


263 
YYTYPE_UINT16
 
	tyyty≥_uöt16
;

265 
	tyyty≥_uöt16
;

268 #ifde‡
YYTYPE_INT16


269 
YYTYPE_INT16
 
	tyyty≥_öt16
;

271 
	tyyty≥_öt16
;

274 #i‚de‡
YYSIZE_T


275 #ifde‡
__SIZE_TYPE__


276 
	#YYSIZE_T
 
__SIZE_TYPE__


	)

277 #ñi‡
deföed
 
size_t


278 
	#YYSIZE_T
 
size_t


	)

279 #ñi‡! 
deföed
 
YYSIZE_T
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

280 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

281 
	~<°ddef.h
>

282 
	#YYSIZE_T
 
size_t


	)

284 
	#YYSIZE_T
 

	)

288 
	#YYSIZE_MAXIMUM
 ((
YYSIZE_T
Ë-1)

	)

290 #i‚de‡
YY_


291 #i‡
deföed
 
YYENABLE_NLS
 && YYENABLE_NLS

292 #i‡
ENABLE_NLS


293 
	~<liböé.h
>

294 
	#YY_
(
msgid
Ë
	`dgëãxt
 ("bis⁄-ru¡ime", msgid)

	)

297 #i‚de‡
YY_


298 
	#YY_
(
msgid
Ë
	)
msgid

303 #i‡! 
deföed
 
löt
 || deföed 
__GNUC__


304 
	#YYUSE
(
e
Ë((Ë”))

	)

306 
	#YYUSE
(
e
Ë

	)

310 #i‚de‡
löt


311 
	#YYID
(
n
Ë“)

	)

313 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

314 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

316 
	$YYID
 (
yyi
)

319 
	$YYID
 (
yyi
)

320 
yyi
;

323  
yyi
;

324 
	}
}

327 #i‡! 
deföed
 
yyovîÊow
 || 
YYERROR_VERBOSE


331 #ifde‡
YYSTACK_USE_ALLOCA


332 #i‡
YYSTACK_USE_ALLOCA


333 #ifde‡
__GNUC__


334 
	#YYSTACK_ALLOC
 
__buûtö_Æloˇ


	)

335 #ñi‡
deföed
 
__BUILTIN_VA_ARG_INCR


336 
	~<Æloˇ.h
>

337 #ñi‡
deföed
 
_AIX


338 
	#YYSTACK_ALLOC
 
__Æloˇ


	)

339 #ñi‡
deföed
 
_MSC_VER


340 
	~<mÆloc.h
>

341 
	#Æloˇ
 
_Æloˇ


	)

343 
	#YYSTACK_ALLOC
 
Æloˇ


	)

344 #i‡! 
deföed
 
_ALLOCA_H
 && ! deföed 
EXIT_SUCCESS
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

345 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

346 
	~<°dlib.h
>

347 #i‚de‡
EXIT_SUCCESS


348 
	#EXIT_SUCCESS
 0

	)

355 #ifde‡
YYSTACK_ALLOC


357 
	#YYSTACK_FREE
(
På
Ëdÿ{ ; } 
	`YYID
 (0))

	)

358 #i‚de‡
YYSTACK_ALLOC_MAXIMUM


363 
	#YYSTACK_ALLOC_MAXIMUM
 4032

	)

366 
	#YYSTACK_ALLOC
 
YYMALLOC


	)

367 
	#YYSTACK_FREE
 
YYFREE


	)

368 #i‚de‡
YYSTACK_ALLOC_MAXIMUM


369 
	#YYSTACK_ALLOC_MAXIMUM
 
YYSIZE_MAXIMUM


	)

371 #i‡(
deföed
 
__˝lu•lus
 && ! deföed 
EXIT_SUCCESS
 \

372 && ! ((
deföed
 
	gYYMALLOC
 || deföed 
	gmÆloc
) \

373 && (
deföed
 
	gYYFREE
 || deföed 
	g‰ì
)))

374 
	~<°dlib.h
>

375 #i‚de‡
EXIT_SUCCESS


376 
	#EXIT_SUCCESS
 0

	)

379 #i‚de‡
YYMALLOC


380 
	#YYMALLOC
 
mÆloc


	)

381 #i‡! 
deföed
 
mÆloc
 && ! deföed 
EXIT_SUCCESS
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

382 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

383 *
mÆloc
 (
YYSIZE_T
);

386 #i‚de‡
YYFREE


387 
	#YYFREE
 
‰ì


	)

388 #i‡! 
deföed
 
‰ì
 && ! deföed 
EXIT_SUCCESS
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

389 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

390 
‰ì
 (*);

397 #i‡(! 
deföed
 
yyovîÊow
 \

398 && (! 
deföed
 
	g__˝lu•lus
 \

399 || (
deföed
 
	gYYSTYPE_IS_TRIVIAL
 && YYSTYPE_IS_TRIVIAL)))

402 
	uyyÆloc


404 
yyty≥_öt16
 
	myyss_Æloc
;

405 
YYSTYPE
 
	myyvs_Æloc
;

409 
	#YYSTACK_GAP_MAXIMUM
 ( (
yyÆloc
Ë- 1)

	)

413 
	#YYSTACK_BYTES
(
N
) \

414 ((
N
Ë* ( (
yyty≥_öt16
Ë+  (
YYSTYPE
)) \

415 + 
YYSTACK_GAP_MAXIMUM
)

	)

417 
	#YYCOPY_NEEDED
 1

	)

424 
	#YYSTACK_RELOCATE
(
Sèck_Æloc
, 
Sèck
) \

427 
YYSIZE_T
 
yy√wbyãs
; \

428 
	`YYCOPY
 (&
yy±r
->
Sèck_Æloc
, 
Sèck
, 
yysize
); \

429 
Sèck
 = &
yy±r
->
Sèck_Æloc
; \

430 
yy√wbyãs
 = 
yy°acksize
 *  (*
Sèck
Ë+ 
YYSTACK_GAP_MAXIMUM
; \

431 
yy±r
 +
yy√wbyãs
 /  (*yyptr); \

433 
	`YYID
 (0))

	)

437 #i‡
deföed
 
YYCOPY_NEEDED
 && YYCOPY_NEEDED

440 #i‚de‡
YYCOPY


441 #i‡
deföed
 
__GNUC__
 && 1 < __GNUC__

442 
	#YYCOPY
(
To
, 
From
, 
Cou¡
) \

443 
	`__buûtö_mem˝y
 (
To
, 
From
, (
Cou¡
Ë*  (*(From)))

	)

445 
	#YYCOPY
(
To
, 
From
, 
Cou¡
) \

448 
YYSIZE_T
 
yyi
; \

449 
yyi
 = 0; yyò< (
Cou¡
); yyi++) \

450 (
To
)[
yyi
] = (
From
)[yyi]; \

452 
	`YYID
 (0))

	)

458 
	#YYFINAL
 4

	)

460 
	#YYLAST
 2131

	)

463 
	#YYNTOKENS
 76

	)

465 
	#YYNNTS
 138

	)

467 
	#YYNRULES
 344

	)

469 
	#YYNSTATES
 653

	)

472 
	#YYUNDEFTOK
 2

	)

473 
	#YYMAXUTOK
 306

	)

475 
	#YYTRANSLATE
(
YYX
) \

476 ((Ë(
YYX
Ë<
YYMAXUTOK
 ? 
yyå™¶©e
[YYX] : 
YYUNDEFTOK
)

	)

479 c⁄° 
yyty≥_uöt8
 
	gyyå™¶©e
[] =

514 #i‡
YYDEBUG


517 c⁄° 
yyty≥_uöt16
 
	gyy¥hs
[] =

557 c⁄° 
yyty≥_öt16
 
	gyyrhs
[] =

672 c⁄° 
yyty≥_uöt16
 
	gyyæöe
[] =

712 #i‡
YYDEBUG
 || 
YYERROR_VERBOSE
 || 
YYTOKEN_TABLE


715 c⁄° *
	gyyäame
[] =

760 #ifde‡
YYPRINT


763 c⁄° 
yyty≥_uöt16
 
	gyytoknum
[] =

777 c⁄° 
yyty≥_uöt8
 
	gyyr1
[] =

817 c⁄° 
yyty≥_uöt8
 
	gyyr2
[] =

859 c⁄° 
yyty≥_uöt16
 
	gyydeÁ˘
[] =

930 c⁄° 
yyty≥_öt16
 
	gyydefgŸo
[] =

950 
	#YYPACT_NINF
 -551

	)

951 c⁄° 
yyty≥_öt16
 
	gyy∑˘
[] =

1022 c⁄° 
yyty≥_öt16
 
	gyypgŸo
[] =

1043 
	#YYTABLE_NINF
 -270

	)

1044 c⁄° 
yyty≥_öt16
 
	gyyèbÀ
[] =

1262 
	#yy∑˘_vÆue_is_deÁu…
(
yy°©e
) \

1263 ((
yy°©e
Ë=(-551))

	)

1265 
	#yyèbÀ_vÆue_is_îr‹
(
yyèbÀ_vÆue
) \

1266 
	`YYID
 (0)

	)

1268 c⁄° 
yyty≥_öt16
 
	gyycheck
[] =

1488 c⁄° 
yyty≥_uöt8
 
	gyy°os
[] =

1558 
	#yyîrok
 (
yyîr°©us
 = 0)

	)

1559 
	#yy˛órö
 (
yych¨
 = 
YYEMPTY
)

	)

1560 
	#YYEMPTY
 (-2)

	)

1561 
	#YYEOF
 0

	)

1563 
	#YYACCEPT
 
yyac˚±œb


	)

1564 
	#YYABORT
 
yyab‹éab


	)

1565 
	#YYERROR
 
yyîr‹œb


	)

1575 
	#YYFAIL
 
yyîæab


	)

1576 #i‡
deföed
 
YYFAIL


1583 
	#YYRECOVERING
(Ë(!!
yyîr°©us
)

	)

1585 
	#YYBACKUP
(
Tokí
, 
VÆue
) \

1587 i‡(
yych¨
 =
YYEMPTY
 && 
yyÀn
 == 1) \

1589 
yych¨
 = (
Tokí
); \

1590 
yylvÆ
 = (
VÆue
); \

1591 
	`YYPOPSTACK
 (1); \

1592 
yybackup
; \

1596 
	`yyîr‹
 (
	`YY_
("syntaxÉrror: cannot back up")); \

1597 
YYERROR
; \

1599 
	`YYID
 (0))

	)

1602 
	#YYTERROR
 1

	)

1603 
	#YYERRCODE
 256

	)

1610 
	#YYRHSLOC
(
Rhs
, 
K
Ë((Rhs)[K])

	)

1611 #i‚de‡
YYLLOC_DEFAULT


1612 
	#YYLLOC_DEFAULT
(
Cuºít
, 
Rhs
, 
N
) \

1614 i‡(
	`YYID
 (
N
)) \

1616 (
Cuºít
).
fú°_löe
 = 
	`YYRHSLOC
 (
Rhs
, 1).first_line; \

1617 (
Cuºít
).
fú°_cﬁumn
 = 
	`YYRHSLOC
 (
Rhs
, 1).first_column; \

1618 (
Cuºít
).
œ°_löe
 = 
	`YYRHSLOC
 (
Rhs
, 
N
).last_line; \

1619 (
Cuºít
).
œ°_cﬁumn
 = 
	`YYRHSLOC
 (
Rhs
, 
N
).last_column; \

1623 (
Cuºít
).
fú°_löe
 = (Cuºít).
œ°_löe
 = \

1624 
	`YYRHSLOC
 (
Rhs
, 0).
œ°_löe
; \

1625 (
Cuºít
).
fú°_cﬁumn
 = (Cuºít).
œ°_cﬁumn
 = \

1626 
	`YYRHSLOC
 (
Rhs
, 0).
œ°_cﬁumn
; \

1628 
	`YYID
 (0))

	)

1634 #i‚de‡
YY_LOCATION_PRINT


1635 
	#YY_LOCATION_PRINT
(
Fûe
, 
Loc
Ë((Ë0)

	)

1641 #ifde‡
YYLEX_PARAM


1642 
	#YYLEX
 
	`yyÀx
 (
YYLEX_PARAM
)

	)

1644 
	#YYLEX
 
	`yyÀx
 ()

	)

1648 #i‡
YYDEBUG


1650 #i‚de‡
YYFPRINTF


1651 
	~<°dio.h
>

1652 
	#YYFPRINTF
 
Ârötf


	)

1655 
	#YYDPRINTF
(
Args
) \

1657 i‡(
yydebug
) \

1658 
YYFPRINTF
 
Args
; \

1659 } 
	`YYID
 (0))

	)

1661 
	#YY_SYMBOL_PRINT
(
TôÀ
, 
Ty≥
, 
VÆue
, 
Loˇti⁄
) \

1663 i‡(
yydebug
) \

1665 
	`YYFPRINTF
 (
°dîr
, "%†", 
TôÀ
); \

1666 
	`yy_symbﬁ_¥öt
 (
°dîr
, \

1667 
Ty≥
, 
VÆue
); \

1668 
	`YYFPRINTF
 (
°dîr
, "\n"); \

1670 } 
	`YYID
 (0))

	)

1678 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1679 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1681 
	$yy_symbﬁ_vÆue_¥öt
 (
FILE
 *
yyouçut
, 
yyty≥
, 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
)

1684 
	$yy_symbﬁ_vÆue_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
)

1685 
FILE
 *
yyouçut
;

1686 
yyty≥
;

1687 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
;

1690 i‡(!
yyvÆuï
)

1692 #ifde‡
YYPRINT


1693 i‡(
yyty≥
 < 
YYNTOKENS
)

1694 
	`YYPRINT
 (
yyouçut
, 
yytoknum
[
yyty≥
], *
yyvÆuï
);

1696 
	`YYUSE
 (
yyouçut
);

1698 
yyty≥
)

1703 
	}
}

1710 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1711 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1713 
	$yy_symbﬁ_¥öt
 (
FILE
 *
yyouçut
, 
yyty≥
, 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
)

1716 
	$yy_symbﬁ_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
)

1717 
FILE
 *
yyouçut
;

1718 
yyty≥
;

1719 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
;

1722 i‡(
yyty≥
 < 
YYNTOKENS
)

1723 
	`YYFPRINTF
 (
yyouçut
, "tokí %†(", 
yyäame
[
yyty≥
]);

1725 
	`YYFPRINTF
 (
yyouçut
, "¡îm %†(", 
yyäame
[
yyty≥
]);

1727 
	`yy_symbﬁ_vÆue_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
);

1728 
	`YYFPRINTF
 (
yyouçut
, ")");

1729 
	}
}

1736 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1737 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1739 
	$yy_°ack_¥öt
 (
yyty≥_öt16
 *
yybŸtom
, yyty≥_öt16 *
yyt›
)

1742 
	$yy_°ack_¥öt
 (
yybŸtom
, 
yyt›
)

1743 
yyty≥_öt16
 *
yybŸtom
;

1744 
yyty≥_öt16
 *
yyt›
;

1747 
	`YYFPRINTF
 (
°dîr
, "StackÇow");

1748 ; 
yybŸtom
 <
yyt›
; yybottom++)

1750 
yybŸ
 = *
yybŸtom
;

1751 
	`YYFPRINTF
 (
°dîr
, " %d", 
yybŸ
);

1753 
	`YYFPRINTF
 (
°dîr
, "\n");

1754 
	}
}

1756 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
) \

1758 i‡(
yydebug
) \

1759 
	`yy_°ack_¥öt
 ((
BŸtom
), (
T›
)); \

1760 } 
	`YYID
 (0))

	)

1767 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1768 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1770 
	$yy_ªdu˚_¥öt
 (
YYSTYPE
 *
yyv•
, 
yyruÀ
)

1773 
	$yy_ªdu˚_¥öt
 (
yyv•
, 
yyruÀ
)

1774 
YYSTYPE
 *
yyv•
;

1775 
yyruÀ
;

1778 
yyƒhs
 = 
yyr2
[
yyruÀ
];

1779 
yyi
;

1780 
yy o
 = 
yyæöe
[
yyruÀ
];

1781 
	`YYFPRINTF
 (
°dîr
, "Reducing stack byÑule %d (line %lu):\n",

1782 
yyruÀ
 - 1, 
yy o
);

1784 
yyi
 = 0; yyò< 
yyƒhs
; yyi++)

1786 
	`YYFPRINTF
 (
°dîr
, " $%d = ", 
yyi
 + 1);

1787 
	`yy_symbﬁ_¥öt
 (
°dîr
, 
yyrhs
[
yy¥hs
[
yyruÀ
] + 
yyi
],

1788 &(
yyv•
[(
yyi
 + 1Ë- (
yyƒhs
)])

1790 
	`YYFPRINTF
 (
°dîr
, "\n");

1792 
	}
}

1794 
	#YY_REDUCE_PRINT
(
RuÀ
) \

1796 i‡(
yydebug
) \

1797 
	`yy_ªdu˚_¥öt
 (
yyv•
, 
RuÀ
); \

1798 } 
	`YYID
 (0))

	)

1802 
	gyydebug
;

1804 
	#YYDPRINTF
(
Args
)

	)

1805 
	#YY_SYMBOL_PRINT
(
TôÀ
, 
Ty≥
, 
VÆue
, 
Loˇti⁄
)

	)

1806 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
)

	)

1807 
	#YY_REDUCE_PRINT
(
RuÀ
)

	)

1812 #i‚def 
YYINITDEPTH


1813 
	#YYINITDEPTH
 200

	)

1823 #i‚de‡
YYMAXDEPTH


1824 
	#YYMAXDEPTH
 10000

	)

1828 #i‡
YYERROR_VERBOSE


1830 #i‚de‡
yy°æí


1831 #i‡
deföed
 
__GLIBC__
 && deföed 
_STRING_H


1832 
	#yy°æí
 
°æí


	)

1835 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1836 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1837 
YYSIZE_T


1838 
	$yy°æí
 (c⁄° *
yy°r
)

1840 
YYSIZE_T


1841 
	$yy°æí
 (
yy°r
)

1842 c⁄° *
yy°r
;

1845 
YYSIZE_T
 
yyÀn
;

1846 
yyÀn
 = 0; 
yy°r
[yylen]; yylen++)

1848  
yyÀn
;

1849 
	}
}

1853 #i‚de‡
yy°p˝y


1854 #i‡
deföed
 
__GLIBC__
 && deföed 
_STRING_H
 && deföed 
_GNU_SOURCE


1855 
	#yy°p˝y
 
°p˝y


	)

1859 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1860 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1862 
	$yy°p˝y
 (*
yyde°
, c⁄° *
yy§c
)

1865 
	$yy°p˝y
 (
yyde°
, 
yy§c
)

1866 *
yyde°
;

1867 c⁄° *
yy§c
;

1870 *
yyd
 = 
yyde°
;

1871 c⁄° *
yys
 = 
yy§c
;

1873 (*
yyd
++ = *
yys
++) != '\0')

1876  
yyd
 - 1;

1877 
	}
}

1881 #i‚de‡
yyäamîr


1889 
YYSIZE_T


1890 
	$yyäamîr
 (*
yyªs
, c⁄° *
yy°r
)

1892 i‡(*
yy°r
 == '"')

1894 
YYSIZE_T
 
yyn
 = 0;

1895 c⁄° *
yyp
 = 
yy°r
;

1898 *++
yyp
)

1902 
do_nŸ_°rù_quŸes
;

1905 i‡(*++
yyp
 != '\\')

1906 
do_nŸ_°rù_quŸes
;

1909 i‡(
yyªs
)

1910 
yyªs
[
yyn
] = *
yyp
;

1911 
yyn
++;

1915 i‡(
yyªs
)

1916 
yyªs
[
yyn
] = '\0';

1917  
yyn
;

1919 
do_nŸ_°rù_quŸes
: ;

1922 i‡(! 
yyªs
)

1923  
	`yy°æí
 (
yy°r
);

1925  
	`yy°p˝y
 (
yyªs
, 
yy°r
) - yyres;

1926 
	}
}

1938 
	$yysy¡ax_îr‹
 (
YYSIZE_T
 *
yymsg_Æloc
, **
yymsg
,

1939 
yyty≥_öt16
 *
yys•
, 
yytokí
)

1941 
YYSIZE_T
 
yysize0
 = 
	`yyäamîr
 (0, 
yyäame
[
yytokí
]);

1942 
YYSIZE_T
 
yysize
 = 
yysize0
;

1943 
YYSIZE_T
 
yysize1
;

1944 íum { 
YYERROR_VERBOSE_ARGS_MAXIMUM
 = 5 };

1946 c⁄° *
yyf‹m©
 = 0;

1948 c⁄° *
yy¨g
[
YYERROR_VERBOSE_ARGS_MAXIMUM
];

1951 
yycou¡
 = 0;

1980 i‡(
yytokí
 !
YYEMPTY
)

1982 
yyn
 = 
yy∑˘
[*
yys•
];

1983 
yy¨g
[
yycou¡
++] = 
yyäame
[
yytokí
];

1984 i‡(!
	`yy∑˘_vÆue_is_deÁu…
 (
yyn
))

1989 
yyxbegö
 = 
yyn
 < 0 ? -yyn : 0;

1991 
yychecklim
 = 
YYLAST
 - 
yyn
 + 1;

1992 
yyxíd
 = 
yychecklim
 < 
YYNTOKENS
 ? yychecklim : YYNTOKENS;

1993 
yyx
;

1995 
yyx
 = 
yyxbegö
; yyx < 
yyxíd
; ++yyx)

1996 i‡(
yycheck
[
yyx
 + 
yyn
] =yyx && yyx !
YYTERROR


1997 && !
	`yyèbÀ_vÆue_is_îr‹
 (
yyèbÀ
[
yyx
 + 
yyn
]))

1999 i‡(
yycou¡
 =
YYERROR_VERBOSE_ARGS_MAXIMUM
)

2001 
yycou¡
 = 1;

2002 
yysize
 = 
yysize0
;

2005 
yy¨g
[
yycou¡
++] = 
yyäame
[
yyx
];

2006 
yysize1
 = 
yysize
 + 
	`yyäamîr
 (0, 
yyäame
[
yyx
]);

2007 i‡(! (
yysize
 <
yysize1


2008 && 
yysize1
 <
YYSTACK_ALLOC_MAXIMUM
))

2010 
yysize
 = 
yysize1
;

2015 
yycou¡
)

2017 
	#YYCASE_
(
N
, 
S
) \

2018 
N
: \

2019 
yyf‹m©
 = 
S
; \

2020 

	)

2021 
	`YYCASE_
(0, 
	`YY_
("syntaxÉrror"));

2022 
	`YYCASE_
(1, 
	`YY_
("syntaxÉrror, unexpected %s"));

2023 
	`YYCASE_
(2, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s"));

2024 
	`YYCASE_
(3, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s"));

2025 
	`YYCASE_
(4, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s or %s"));

2026 
	`YYCASE_
(5, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s or %s or %s"));

2027 #unde‡
YYCASE_


2030 
yysize1
 = 
yysize
 + 
	`yy°æí
 (
yyf‹m©
);

2031 i‡(! (
yysize
 <
yysize1
 && yysize1 <
YYSTACK_ALLOC_MAXIMUM
))

2033 
yysize
 = 
yysize1
;

2035 i‡(*
yymsg_Æloc
 < 
yysize
)

2037 *
yymsg_Æloc
 = 2 * 
yysize
;

2038 i‡(! (
yysize
 <*
yymsg_Æloc


2039 && *
yymsg_Æloc
 <
YYSTACK_ALLOC_MAXIMUM
))

2040 *
yymsg_Æloc
 = 
YYSTACK_ALLOC_MAXIMUM
;

2048 *
yyp
 = *
yymsg
;

2049 
yyi
 = 0;

2050 (*
yyp
 = *
yyf‹m©
) != '\0')

2051 i‡(*
yyp
 ='%' && 
yyf‹m©
[1] ='s' && 
yyi
 < 
yycou¡
)

2053 
yyp
 +
	`yyäamîr
 (yyp, 
yy¨g
[
yyi
++]);

2054 
yyf‹m©
 += 2;

2058 
yyp
++;

2059 
yyf‹m©
++;

2063 
	}
}

2071 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

2072 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

2074 
	$yyde°ru˘
 (c⁄° *
yymsg
, 
yyty≥
, 
YYSTYPE
 *
yyvÆuï
)

2077 
	$yyde°ru˘
 (
yymsg
, 
yyty≥
, 
yyvÆuï
)

2078 c⁄° *
yymsg
;

2079 
yyty≥
;

2080 
YYSTYPE
 *
yyvÆuï
;

2083 
	`YYUSE
 (
yyvÆuï
);

2085 i‡(!
yymsg
)

2086 
yymsg
 = "Deleting";

2087 
	`YY_SYMBOL_PRINT
 (
yymsg
, 
yyty≥
, 
yyvÆuï
, 
yyloˇti⁄p
);

2089 
yyty≥
)

2095 
	}
}

2099 #ifde‡
YYPARSE_PARAM


2100 #i‡
deföed
 
__STDC__
 || deföed 
__˝lu•lus


2101 
yy∑r£
 (*
YYPARSE_PARAM
);

2103 
yy∑r£
 ();

2106 #i‡
deföed
 
__STDC__
 || deföed 
__˝lu•lus


2107 
yy∑r£
 ();

2109 
yy∑r£
 ();

2115 
	gyych¨
, 
	gyy°©e
;

2118 
YYSTYPE
 
	gyylvÆ
;

2121 
	gyy√ºs
;

2128 #ifde‡
YYPARSE_PARAM


2129 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

2130 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

2132 
	$yy∑r£
 (*
YYPARSE_PARAM
)

2135 
	$yy∑r£
 (
YYPARSE_PARAM
)

2136 *
YYPARSE_PARAM
;

2139 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

2140 || 
deföed
 
__˝lu•lus
 || deföed 
_MSC_VER
)

2142 
	$yy∑r£
 ()

2145 
	$yy∑r£
 ()

2151 
yyîr°©us
;

2161 
yyty≥_öt16
 
yysß
[
YYINITDEPTH
];

2162 
yyty≥_öt16
 *
yyss
;

2163 
yyty≥_öt16
 *
yys•
;

2166 
YYSTYPE
 
yyvß
[
YYINITDEPTH
];

2167 
YYSTYPE
 *
yyvs
;

2168 
YYSTYPE
 *
yyv•
;

2170 
YYSIZE_T
 
yy°acksize
;

2172 
yyn
;

2173 
yyªsu…
;

2175 
yytokí
;

2178 
YYSTYPE
 
yyvÆ
;

2180 #i‡
YYERROR_VERBOSE


2182 
yymsgbuf
[128];

2183 *
yymsg
 = 
yymsgbuf
;

2184 
YYSIZE_T
 
yymsg_Æloc
 =  
yymsgbuf
;

2187 
	#YYPOPSTACK
(
N
Ë(
yyv•
 -(N), 
yys•
 -(N))

	)

2191 
yyÀn
 = 0;

2193 
yytokí
 = 0;

2194 
yyss
 = 
yysß
;

2195 
yyvs
 = 
yyvß
;

2196 
yy°acksize
 = 
YYINITDEPTH
;

2198 
	`YYDPRINTF
 ((
°dîr
, "StartingÖarse\n"));

2200 
yy°©e
 = 0;

2201 
yyîr°©us
 = 0;

2202 
yy√ºs
 = 0;

2203 
yych¨
 = 
YYEMPTY
;

2209 
yys•
 = 
yyss
;

2210 
yyv•
 = 
yyvs
;

2212 
yy£t°©e
;

2217 
yy√w°©e
:

2220 
yys•
++;

2222 
yy£t°©e
:

2223 *
yys•
 = 
yy°©e
;

2225 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

2228 
YYSIZE_T
 
yysize
 = 
yys•
 - 
yyss
 + 1;

2230 #ifde‡
yyovîÊow


2235 
YYSTYPE
 *
yyvs1
 = 
yyvs
;

2236 
yyty≥_öt16
 *
yyss1
 = 
yyss
;

2242 
	`yyovîÊow
 (
	`YY_
("memoryÉxhausted"),

2243 &
yyss1
, 
yysize
 *  (*
yys•
),

2244 &
yyvs1
, 
yysize
 *  (*
yyv•
),

2245 &
yy°acksize
);

2247 
yyss
 = 
yyss1
;

2248 
yyvs
 = 
yyvs1
;

2251 #i‚de‡
YYSTACK_RELOCATE


2252 
yyexhau°edœb
;

2255 i‡(
YYMAXDEPTH
 <
yy°acksize
)

2256 
yyexhau°edœb
;

2257 
yy°acksize
 *= 2;

2258 i‡(
YYMAXDEPTH
 < 
yy°acksize
)

2259 
yy°acksize
 = 
YYMAXDEPTH
;

2262 
yyty≥_öt16
 *
yyss1
 = 
yyss
;

2263 
yyÆloc
 *
yy±r
 =

2264 (
yyÆloc
 *Ë
	`YYSTACK_ALLOC
 (
	`YYSTACK_BYTES
 (
yy°acksize
));

2265 i‡(! 
yy±r
)

2266 
yyexhau°edœb
;

2267 
	`YYSTACK_RELOCATE
 (
yyss_Æloc
, 
yyss
);

2268 
	`YYSTACK_RELOCATE
 (
yyvs_Æloc
, 
yyvs
);

2269 #unde‡
YYSTACK_RELOCATE


2270 i‡(
yyss1
 !
yysß
)

2271 
	`YYSTACK_FREE
 (
yyss1
);

2276 
yys•
 = 
yyss
 + 
yysize
 - 1;

2277 
yyv•
 = 
yyvs
 + 
yysize
 - 1;

2279 
	`YYDPRINTF
 ((
°dîr
, "Stack size increasedÅo %lu\n",

2280 (Ë
yy°acksize
));

2282 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

2283 
YYABORT
;

2286 
	`YYDPRINTF
 ((
°dîr
, "E¡îög sèã %d\n", 
yy°©e
));

2288 i‡(
yy°©e
 =
YYFINAL
)

2289 
YYACCEPT
;

2291 
yybackup
;

2296 
yybackup
:

2302 
yyn
 = 
yy∑˘
[
yy°©e
];

2303 i‡(
	`yy∑˘_vÆue_is_deÁu…
 (
yyn
))

2304 
yydeÁu…
;

2309 i‡(
yych¨
 =
YYEMPTY
)

2311 
	`YYDPRINTF
 ((
°dîr
, "ReadingáÅoken: "));

2312 
yych¨
 = 
YYLEX
;

2315 i‡(
yych¨
 <
YYEOF
)

2317 
yych¨
 = 
yytokí
 = 
YYEOF
;

2318 
	`YYDPRINTF
 ((
°dîr
, "NowátÉnd of input.\n"));

2322 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
);

2323 
	`YY_SYMBOL_PRINT
 ("Nexàtokí is", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

2328 
yyn
 +
yytokí
;

2329 i‡(
yyn
 < 0 || 
YYLAST
 < yy¿|| 
yycheck
[yyn] !
yytokí
)

2330 
yydeÁu…
;

2331 
yyn
 = 
yyèbÀ
[yyn];

2332 i‡(
yyn
 <= 0)

2334 i‡(
	`yyèbÀ_vÆue_is_îr‹
 (
yyn
))

2335 
yyîæab
;

2336 
yyn
 = -yyn;

2337 
yyªdu˚
;

2342 i‡(
yyîr°©us
)

2343 
yyîr°©us
--;

2346 
	`YY_SYMBOL_PRINT
 ("Shi·ög", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

2349 
yych¨
 = 
YYEMPTY
;

2351 
yy°©e
 = 
yyn
;

2352 *++
yyv•
 = 
yylvÆ
;

2354 
yy√w°©e
;

2360 
yydeÁu…
:

2361 
yyn
 = 
yydeÁ˘
[
yy°©e
];

2362 i‡(
yyn
 == 0)

2363 
yyîæab
;

2364 
yyªdu˚
;

2370 
yyªdu˚
:

2372 
yyÀn
 = 
yyr2
[
yyn
];

2382 
yyvÆ
 = 
yyv•
[1-
yyÀn
];

2385 
	`YY_REDUCE_PRINT
 (
yyn
);

2386 
yyn
)

2393 
xt›
 = 
	`c⁄ˇt
(xt›, (
yyv•
[(4Ë- (4)].
li°
));

2402 
¥evlöío
 = 
löío
;

2403 
	`yyîr‹
("package statement must be first");

2404 
	`Êushîr‹s
();

2405 
	`mk∑ckage
("main");

2414 
	`mk∑ckage
((
yyv•
[(2Ë- (3)].
sym
)->
«me
);

2423 
imp‹çkg
 = 
ru¡imïkg
;

2425 if(
debug
['A'])

2426 
	`ˇ¬edimp‹ts
("runtime.builtin", "packageÑuntime\n\n$$\n\n");

2428 
	`ˇ¬edimp‹ts
("ru¡ime.buûtö", 
ru¡imeimp‹t
);

2429 
curio
.
imp‹tß„
 = 1;

2438 
imp‹çkg
 = 
nû
;

2447 
Pkg
 *
ùkg
;

2448 
Sym
 *
my
;

2449 
Node
 *
∑ck
;

2451 
ùkg
 = 
imp‹çkg
;

2452 
my
 = 
imp‹tmy«me
;

2453 
imp‹çkg
 = 
nû
;

2454 
imp‹tmy«me
 = 
S
;

2456 if(
my
 =
nû
)

2457 
my
 = 
	`lookup
(
ùkg
->
«me
);

2459 
∑ck
 = 
	`nod
(
OPACK
, 
N
, N);

2460 
∑ck
->
sym
 = 
my
;

2461 
∑ck
->
pkg
 = 
ùkg
;

2462 
∑ck
->
löío
 = (
yyv•
[(1Ë- (3)].
i
);

2464 if(
my
->
«me
[0] == '.') {

2465 
	`imp‹tdŸ
(
ùkg
, 
∑ck
);

2468 if(
my
->
«me
[0] == '_' && my->name[1] == '\0')

2470 if(
my
->
def
) {

2471 
löío
 = (
yyv•
[(1Ë- (3)].
i
);

2472 
	`ªde˛¨e
(
my
, "as importedÖackageÇame");

2474 
my
->
def
 = 
∑ck
;

2475 
my
->
œ°löío
 = (
yyv•
[(1Ë- (3)].
i
);

2476 
my
->
block
 = 1;

2489 if(
√º‹s
 == 0)

2490 
	`Áèl
("phaseÉrror in import");

2500 (
yyvÆ
.
i
Ë
	`∑r£æöe
();

2501 
imp‹tmy«me
 = 
S
;

2502 
	`imp‹tfûe
(&(
yyv•
[(1Ë- (1)].
vÆ
), (
yyvÆ
.
i
));

2512 (
yyvÆ
.
i
Ë
	`∑r£æöe
();

2513 
imp‹tmy«me
 = (
yyv•
[(1Ë- (2)].
sym
);

2514 
	`imp‹tfûe
(&(
yyv•
[(2Ë- (2)].
vÆ
), (
yyvÆ
.
i
));

2524 (
yyvÆ
.
i
Ë
	`∑r£æöe
();

2525 
imp‹tmy«me
 = 
	`lookup
(".");

2526 
	`imp‹tfûe
(&(
yyv•
[(2Ë- (2)].
vÆ
), (
yyvÆ
.
i
));

2535 if(
imp‹çkg
->
«me
 =
nû
) {

2536 
imp‹çkg
->
«me
 = (
yyv•
[(2Ë- (4)].
sym
)->name;

2537 
	`pkglookup
((
yyv•
[(2Ë- (4)].
sym
)->
«me
, 
nû
)->
≈kg
++;

2538 } if(
	`°rcmp
(
imp‹çkg
->
«me
, (
yyv•
[(2Ë- (4)].
sym
)->name) != 0)

2539 
	`yyîr‹
("c⁄Êi˘ögÇame†%†™d %†f‹Öackagê\"%Z\"", 
imp‹çkg
->
«me
, (
yyv•
[(2Ë- (4)].
sym
)->«me, imp‹çkg->
∑th
);

2540 
imp‹çkg
->
dúe˘
 = 1;

2542 if(
ß„mode
 && !
curio
.
imp‹tß„
)

2543 
	`yyîr‹
("ˇ¬Ÿ imp‹àunß„Öackagê\"%Z\"", 
imp‹çkg
->
∑th
);

2552 if(
	`°rcmp
((
yyv•
[(1Ë- (1)].
sym
)->
«me
, "safe") == 0)

2553 
curio
.
imp‹tß„
 = 1;

2562 
	`de„rcheckwidth
();

2571 
	`ªsumecheckwidth
();

2572 
	`unimp‹tfûe
();

2581 
	`yyîr‹
("emptyÅop-level declaration");

2582 (
yyvÆ
.
li°
Ë
nû
;

2591 (
yyvÆ
.
li°
Ë
	`li°1
((
yyv•
[(1Ë- (1)].
node
));

2600 
	`yyîr‹
("non-declaration statement outside function body");

2601 (
yyvÆ
.
li°
Ë
nû
;

2610 (
yyvÆ
.
li°
Ë
nû
;

2619 (
yyvÆ
.
li°
Ë(
yyv•
[(2) - (2)].list);

2628 (
yyvÆ
.
li°
Ë(
yyv•
[(3) - (5)].list);

2637 (
yyvÆ
.
li°
Ë
nû
;

2646 (
yyvÆ
.
li°
Ë(
yyv•
[(2) - (2)].list);

2647 
iŸa
 = -100000;

2648 
œ°c⁄°
 = 
nû
;

2657 (
yyvÆ
.
li°
Ë(
yyv•
[(3) - (5)].list);

2658 
iŸa
 = -100000;

2659 
œ°c⁄°
 = 
nû
;

2668 (
yyvÆ
.
li°
Ë
	`c⁄ˇt
((
yyv•
[(3) - (7)].list), (yyvsp[(5) - (7)].list));

2669 
iŸa
 = -100000;

2670 
œ°c⁄°
 = 
nû
;

2679 (
yyvÆ
.
li°
Ë
nû
;

2680 
iŸa
 = -100000;

2689 (
yyvÆ
.
li°
Ë
	`li°1
((
yyv•
[(2Ë- (2)].
node
));

2698 (
yyvÆ
.
li°
Ë(
yyv•
[(3) - (5)].list);

2707 (
yyvÆ
.
li°
Ë
nû
;

2716 
iŸa
 = 0;

2725 (
yyvÆ
.
li°
Ë
	`v¨ôî
((
yyv•
[(1Ë- (2)].li°), (yyv•[(2Ë- (2)].
node
), 
nû
);

2734 (
yyvÆ
.
li°
Ë
	`v¨ôî
((
yyv•
[(1Ë- (4)].li°), (yyv•[(2Ë- (4)].
node
), (yyvsp[(4) - (4)].list));

2743 (
yyvÆ
.
li°
Ë
	`v¨ôî
((
yyv•
[(1Ë- (3)].li°), 
nû
, (yyvsp[(3) - (3)].list));

2752 (
yyvÆ
.
li°
Ë
	`c⁄°ôî
((
yyv•
[(1Ë- (4)].li°), (yyv•[(2Ë- (4)].
node
), (yyvsp[(4) - (4)].list));

2761 (
yyvÆ
.
li°
Ë
	`c⁄°ôî
((
yyv•
[(1Ë- (3)].li°), 
N
, (yyvsp[(3) - (3)].list));

2770 (
yyvÆ
.
li°
Ë
	`c⁄°ôî
((
yyv•
[(1Ë- (2)].li°), (yyv•[(2Ë- (2)].
node
), 
nû
);

2779 (
yyvÆ
.
li°
Ë
	`c⁄°ôî
((
yyv•
[(1Ë- (1)].li°), 
N
, 
nû
);

2791 (
yyvÆ
.
node
Ë
	`ty≥d˛0
((
yyv•
[(1Ë- (1)].
sym
));

2800 (
yyvÆ
.
node
Ë
	`ty≥d˛1
((
yyv•
[(1) - (2)].node), (yyvsp[(2) - (2)].node), 1);

2809 (
yyvÆ
.
node
Ë(
yyv•
[(1) - (1)].node);

2818 (
yyvÆ
.
node
Ë
	`nod
(
OASOP
, (
yyv•
[(1) - (3)].node), (yyvsp[(3) - (3)].node));

2819 (
yyvÆ
.
node
)->
ëy≥
 = (
yyv•
[(2Ë- (3)].
i
);

2828 if((
yyv•
[(1Ë- (3)].
li°
)->
√xt
 =
nû
 && (yyvsp[(3) - (3)].list)->next ==Çil) {

2830 (
yyvÆ
.
node
Ë
	`nod
(
OAS
, (
yyv•
[(1Ë- (3)].
li°
)->
n
, (yyvsp[(3) - (3)].list)->n);

2834 (
yyvÆ
.
node
Ë
	`nod
(
OAS2
, 
N
, N);

2835 (
yyvÆ
.
node
)->
li°
 = (
yyv•
[(1) - (3)].list);

2836 (
yyvÆ
.
node
)->
æi°
 = (
yyv•
[(3Ë- (3)].
li°
);

2845 if((
yyv•
[(3Ë- (3)].
li°
)->
n
->
›
 =
OTYPESW
) {

2846 (
yyvÆ
.
node
Ë
	`nod
(
OTYPESW
, 
N
, (
yyv•
[(3Ë- (3)].
li°
)->
n
->
right
);

2847 if((
yyv•
[(3Ë- (3)].
li°
)->
√xt
 !
nû
)

2848 
	`yyîr‹
("expr.(type) must beálone inÜist");

2849 if((
yyv•
[(1Ë- (3)].
li°
)->
√xt
 !
nû
)

2850 
	`yyîr‹
("¨gumíàcou¡ mism©ch: %d = %d", 
	`cou¡
((
yyv•
[(1Ë- (3)].
li°
)), 1);

2851 if(((
yyv•
[(1Ë- (3)].
li°
)->
n
->
›
 !
ONAME
 && (yyv•[(1Ë- (3)].li°)->n->› !
OTYPE
 && (yyv•[(1Ë- (3)].li°)->n->› !
ONONAME
Ë|| 
	`isbœnk
((yyvsp[(1) - (3)].list)->n))

2852 
	`yyîr‹
("övÆid v¨übÀÇamê%N i¿ty≥ swôch", (
yyv•
[(1Ë- (3)].
li°
)->
n
);

2854 (
yyvÆ
.
node
)->
À·
 = 
	`d˛«me
((
yyv•
[(1Ë- (3)].
li°
)->
n
->
sym
);

2857 (
yyvÆ
.
node
Ë
	`cﬁas
((
yyv•
[(1Ë- (3)].
li°
), (yyvsp[(3) - (3)].list));

2866 (
yyvÆ
.
node
Ë
	`nod
(
OASOP
, (
yyv•
[(1Ë- (2)].node), 
	`nodötc⁄°
(1));

2867 (
yyvÆ
.
node
)->
ëy≥
 = 
OADD
;

2876 (
yyvÆ
.
node
Ë
	`nod
(
OASOP
, (
yyv•
[(1Ë- (2)].node), 
	`nodötc⁄°
(1));

2877 (
yyvÆ
.
node
)->
ëy≥
 = 
OSUB
;

2886 
Node
 *
n
, *
¬
;

2891 
	`m¨kd˛
();

2892 (
yyvÆ
.
node
Ë
	`nod
(
OXCASE
, 
N
, N);

2893 (
yyvÆ
.
node
)->
li°
 = (
yyv•
[(2) - (3)].list);

2894 if(
ty≥sw
 !
N
 &&Åy≥sw->
right
 !N && (
n
Òy≥sw->right->
À·
) != N) {

2896 
¬
 = 
	`√w«me
(
n
->
sym
);

2897 
	`de˛¨e
(
¬
, 
d˛c⁄ãxt
);

2898 (
yyvÆ
.
node
)->
¬ame
 = 
¬
;

2901 
¬
->
de‚
 = 
ty≥sw
->
right
;

2911 
Node
 *
n
;

2916 
	`m¨kd˛
();

2917 (
yyvÆ
.
node
Ë
	`nod
(
OXCASE
, 
N
, N);

2918 if((
yyv•
[(2Ë- (5)].
li°
)->
√xt
 =
nû
)

2919 
n
 = 
	`nod
(
OAS
, (
yyv•
[(2Ë- (5)].
li°
)->n, (yyv•[(4Ë- (5)].
node
));

2921 
n
 = 
	`nod
(
OAS2
, 
N
, N);

2922 
n
->
li°
 = (
yyv•
[(2) - (5)].list);

2923 
n
->
æi°
 = 
	`li°1
((
yyv•
[(4Ë- (5)].
node
));

2925 (
yyvÆ
.
node
)->
li°
 = 
	`li°1
(
n
);

2937 
	`m¨kd˛
();

2938 (
yyvÆ
.
node
Ë
	`nod
(
OXCASE
, 
N
, N);

2939 (
yyvÆ
.
node
)->
li°
 = 
	`li°1
(
	`cﬁas
((
yyv•
[(2) - (5)].list),Üist1((yyvsp[(4) - (5)].node))));

2948 
Node
 *
n
, *
¬
;

2950 
	`m¨kd˛
();

2951 (
yyvÆ
.
node
Ë
	`nod
(
OXCASE
, 
N
, N);

2952 if(
ty≥sw
 !
N
 &&Åy≥sw->
right
 !N && (
n
Òy≥sw->right->
À·
) != N) {

2954 
¬
 = 
	`√w«me
(
n
->
sym
);

2955 
	`de˛¨e
(
¬
, 
d˛c⁄ãxt
);

2956 (
yyvÆ
.
node
)->
¬ame
 = 
¬
;

2959 
¬
->
de‚
 = 
ty≥sw
->
right
;

2969 
	`m¨kd˛
();

2978 (
yyvÆ
.
node
Ë
	`li°°mt
((
yyv•
[(3Ë- (4)].
li°
));

2979 
	`p›d˛
();

2994 
yyœ°
 = 
yych¨
;

3003 
œ°
;

3012 
œ°
 = 
yy¥ev
;

3014 if(
œ°
 > 0 &&Üa° !';' && 
yych¨
 != '}')

3015 
	`yyîr‹
("missing statementáfterÜabel");

3016 (
yyvÆ
.
node
Ë(
yyv•
[(1) - (3)].node);

3017 (
yyvÆ
.
node
)->
nbody
 = (
yyv•
[(3Ë- (3)].
li°
);

3018 
	`p›d˛
();

3027 (
yyvÆ
.
li°
Ë
nû
;

3036 (
yyvÆ
.
li°
Ë
	`li°
((
yyv•
[(1Ë- (2)].li°), (yyv•[(2Ë- (2)].
node
));

3045 
	`m¨kd˛
();

3054 (
yyvÆ
.
li°
Ë(
yyv•
[(3) - (4)].list);

3055 
	`p›d˛
();

3064 (
yyvÆ
.
node
Ë
	`nod
(
ORANGE
, 
N
, (
yyv•
[(4) - (4)].node));

3065 (
yyvÆ
.
node
)->
li°
 = (
yyv•
[(1) - (4)].list);

3066 (
yyvÆ
.
node
)->
ëy≥
 = 0;

3075 (
yyvÆ
.
node
Ë
	`nod
(
ORANGE
, 
N
, (
yyv•
[(4) - (4)].node));

3076 (
yyvÆ
.
node
)->
li°
 = (
yyv•
[(1) - (4)].list);

3077 (
yyvÆ
.
node
)->
cﬁas
 = 1;

3078 
	`cﬁasde‚
((
yyv•
[(1Ë- (4)].
li°
), (
yyvÆ
.
node
));

3088 if((
yyv•
[(5Ë- (5)].
node
Ë!
N
 && (yyv•[(5Ë- (5)].node)->
cﬁas
 != 0)

3089 
	`yyîr‹
("cannot declare inÅhe for-increment");

3090 (
yyvÆ
.
node
Ë
	`nod
(
OFOR
, 
N
, N);

3091 if((
yyv•
[(1Ë- (5)].
node
Ë!
N
)

3092 (
yyvÆ
.
node
)->
nöô
 = 
	`li°1
((
yyv•
[(1) - (5)].node));

3093 (
yyvÆ
.
node
)->
¡e°
 = (
yyv•
[(3) - (5)].node);

3094 (
yyvÆ
.
node
)->
nö¸
 = (
yyv•
[(5) - (5)].node);

3104 (
yyvÆ
.
node
Ë
	`nod
(
OFOR
, 
N
, N);

3105 (
yyvÆ
.
node
)->
¡e°
 = (
yyv•
[(1) - (1)].node);

3114 (
yyvÆ
.
node
Ë(
yyv•
[(1) - (2)].node);

3115 (
yyvÆ
.
node
)->
nbody
 = 
	`c⁄ˇt
((yyvÆ.node)->nbody, (
yyv•
[(2Ë- (2)].
li°
));

3124 
	`m¨kd˛
();

3133 (
yyvÆ
.
node
Ë(
yyv•
[(3) - (3)].node);

3134 
	`p›d˛
();

3144 (
yyvÆ
.
node
Ë
	`nod
(
OIF
, 
N
, N);

3145 (
yyvÆ
.
node
)->
¡e°
 = (
yyv•
[(1) - (1)].node);

3155 (
yyvÆ
.
node
Ë
	`nod
(
OIF
, 
N
, N);

3156 if((
yyv•
[(1Ë- (3)].
node
Ë!
N
)

3157 (
yyvÆ
.
node
)->
nöô
 = 
	`li°1
((
yyv•
[(1) - (3)].node));

3158 (
yyvÆ
.
node
)->
¡e°
 = (
yyv•
[(3) - (3)].node);

3167 
	`m¨kd˛
();

3176 if((
yyv•
[(3Ë- (3)].
node
)->
¡e°
 =
N
)

3177 
	`yyîr‹
("missing condition in if statement");

3186 (
yyv•
[(3Ë- (5)].
node
)->
nbody
 = (yyv•[(5Ë- (5)].
li°
);

3195 
	`p›d˛
();

3196 (
yyvÆ
.
node
Ë(
yyv•
[(3) - (7)].node);

3197 if((
yyv•
[(7Ë- (7)].
node
Ë!
N
)

3198 (
yyvÆ
.
node
)->
√l£
 = 
	`li°1
((
yyv•
[(7) - (7)].node));

3207 (
yyvÆ
.
node
Ë
N
;

3216 (
yyvÆ
.
node
Ë(
yyv•
[(2) - (2)].node);

3225 (
yyvÆ
.
node
Ë(
yyv•
[(2) - (2)].node);

3234 
	`m¨kd˛
();

3243 
Node
 *
n
;

3244 
n
 = (
yyv•
[(3Ë- (3)].
node
)->
¡e°
;

3245 if(
n
 !
N
 &&Ç->
›
 !
OTYPESW
)

3246 
n
 = 
N
;

3247 
ty≥sw
 = 
	`nod
(
OXXX
,Åy≥sw, 
n
);

3256 (
yyvÆ
.
node
Ë(
yyv•
[(3) - (7)].node);

3257 (
yyvÆ
.
node
)->
›
 = 
OSWITCH
;

3258 (
yyvÆ
.
node
)->
li°
 = (
yyv•
[(6) - (7)].list);

3259 
ty≥sw
 =Åy≥sw->
À·
;

3260 
	`p›d˛
();

3269 
ty≥sw
 = 
	`nod
(
OXXX
,Åy≥sw, 
N
);

3278 (
yyvÆ
.
node
Ë
	`nod
(
OSELECT
, 
N
, N);

3279 (
yyvÆ
.
node
)->
löío
 = 
ty≥sw
->lineno;

3280 (
yyvÆ
.
node
)->
li°
 = (
yyv•
[(4) - (5)].list);

3281 
ty≥sw
 =Åy≥sw->
À·
;

3290 (
yyvÆ
.
node
Ë
	`nod
(
OOROR
, (
yyv•
[(1) - (3)].node), (yyvsp[(3) - (3)].node));

3299 (
yyvÆ
.
node
Ë
	`nod
(
OANDAND
, (
yyv•
[(1) - (3)].node), (yyvsp[(3) - (3)].node));

3308 (
yyvÆ
.
node
Ë
	`nod
(
OEQ
, (
yyv•
[(1) - (3)].node), (yyvsp[(3) - (3)].node));

3317 (
yyvÆ
.
node
Ë
	`nod
(
ONE
, (
yyv•
[(1) - (3)].node), (yyvsp[(3) - (3)].node));

3326 (
yyvÆ
.
node
Ë
	`nod
(
OLT
, (
yyv•
[(1) - (3)].node), (yyvsp[(3) - (3)].node));

3335 (
yyvÆ
.
node
Ë
	`nod
(
OLE
, (
yyv•
[(1) - (3)].node), (yyvsp[(3) - (3)].node));

3344 (
yyvÆ
.
node
Ë
	`nod
(
OGE
, (
yyv•
[(1) - (3)].node), (yyvsp[(3) - (3)].node));

3353 (
yyvÆ
.
node
Ë
	`nod
(
OGT
, (
yyv•
[(1) - (3)].node), (yyvsp[(3) - (3)].node));

3362 (
yyvÆ
.
node
Ë
	`nod
(
OADD
, (
yyv•
[(1) - (3)].node), (yyvsp[(3) - (3)].node));

3371 (
yyvÆ
.
node
Ë
	`nod
(
OSUB
, (
yyv•
[(1) - (3)].node), (yyvsp[(3) - (3)].node));

3380 (
yyvÆ
.
node
Ë
	`nod
(
OOR
, (
yyv•
[(1) - (3)].node), (yyvsp[(3) - (3)].node));

3389 (
yyvÆ
.
node
Ë
	`nod
(
OXOR
, (
yyv•
[(1) - (3)].node), (yyvsp[(3) - (3)].node));

3398 (
yyvÆ
.
node
Ë
	`nod
(
OMUL
, (
yyv•
[(1) - (3)].node), (yyvsp[(3) - (3)].node));

3407 (
yyvÆ
.
node
Ë
	`nod
(
ODIV
, (
yyv•
[(1) - (3)].node), (yyvsp[(3) - (3)].node));

3416 (
yyvÆ
.
node
Ë
	`nod
(
OMOD
, (
yyv•
[(1) - (3)].node), (yyvsp[(3) - (3)].node));

3425 (
yyvÆ
.
node
Ë
	`nod
(
OAND
, (
yyv•
[(1) - (3)].node), (yyvsp[(3) - (3)].node));

3434 (
yyvÆ
.
node
Ë
	`nod
(
OANDNOT
, (
yyv•
[(1) - (3)].node), (yyvsp[(3) - (3)].node));

3443 (
yyvÆ
.
node
Ë
	`nod
(
OLSH
, (
yyv•
[(1) - (3)].node), (yyvsp[(3) - (3)].node));

3452 (
yyvÆ
.
node
Ë
	`nod
(
ORSH
, (
yyv•
[(1) - (3)].node), (yyvsp[(3) - (3)].node));

3461 (
yyvÆ
.
node
Ë
	`nod
(
OSEND
, (
yyv•
[(1) - (3)].node), (yyvsp[(3) - (3)].node));

3470 (
yyvÆ
.
node
Ë
	`nod
(
OIND
, (
yyv•
[(2Ë- (2)].node), 
N
);

3479 if((
yyv•
[(2Ë- (2)].
node
)->
›
 =
OCOMPLIT
) {

3481 (
yyvÆ
.
node
Ë(
yyv•
[(2) - (2)].node);

3482 (
yyvÆ
.
node
)->
right
 = 
	`nod
(
OIND
, (yyvÆ.node)->right, 
N
);

3483 (
yyvÆ
.
node
)->
right
->
im∂icô
 = 1;

3485 (
yyvÆ
.
node
Ë
	`nod
(
OADDR
, (
yyv•
[(2Ë- (2)].node), 
N
);

3495 (
yyvÆ
.
node
Ë
	`nod
(
OPLUS
, (
yyv•
[(2Ë- (2)].node), 
N
);

3504 (
yyvÆ
.
node
Ë
	`nod
(
OMINUS
, (
yyv•
[(2Ë- (2)].node), 
N
);

3513 (
yyvÆ
.
node
Ë
	`nod
(
ONOT
, (
yyv•
[(2Ë- (2)].node), 
N
);

3522 
	`yyîr‹
("the bitwise complement operator is ^");

3523 (
yyvÆ
.
node
Ë
	`nod
(
OCOM
, (
yyv•
[(2Ë- (2)].node), 
N
);

3532 (
yyvÆ
.
node
Ë
	`nod
(
OCOM
, (
yyv•
[(2Ë- (2)].node), 
N
);

3541 (
yyvÆ
.
node
Ë
	`nod
(
ORECV
, (
yyv•
[(2Ë- (2)].node), 
N
);

3550 (
yyvÆ
.
node
Ë
	`nod
(
OCALL
, (
yyv•
[(1Ë- (3)].node), 
N
);

3559 (
yyvÆ
.
node
Ë
	`nod
(
OCALL
, (
yyv•
[(1Ë- (5)].node), 
N
);

3560 (
yyvÆ
.
node
)->
li°
 = (
yyv•
[(3) - (5)].list);

3569 (
yyvÆ
.
node
Ë
	`nod
(
OCALL
, (
yyv•
[(1Ë- (6)].node), 
N
);

3570 (
yyvÆ
.
node
)->
li°
 = (
yyv•
[(3) - (6)].list);

3571 (
yyvÆ
.
node
)->
isddd
 = 1;

3580 (
yyvÆ
.
node
Ë
	`nodlô
((
yyv•
[(1Ë- (1)].
vÆ
));

3589 if((
yyv•
[(1Ë- (3)].
node
)->
›
 =
OPACK
) {

3590 
Sym
 *
s
;

3591 
s
 = 
	`ª°ri˘lookup
((
yyv•
[(3Ë- (3)].
sym
)->
«me
, (yyv•[(1Ë- (3)].
node
)->
pkg
);

3592 (
yyv•
[(1Ë- (3)].
node
)->
u£d
 = 1;

3593 (
yyvÆ
.
node
Ë
	`ﬁd«me
(
s
);

3596 (
yyvÆ
.
node
Ë
	`nod
(
OXDOT
, (
yyv•
[(1Ë- (3)].node), 
	`√w«me
((yyv•[(3Ë- (3)].
sym
)));

3605 (
yyvÆ
.
node
Ë
	`nod
(
ODOTTYPE
, (
yyv•
[(1) - (5)].node), (yyvsp[(4) - (5)].node));

3614 (
yyvÆ
.
node
Ë
	`nod
(
OTYPESW
, 
N
, (
yyv•
[(1) - (5)].node));

3623 (
yyvÆ
.
node
Ë
	`nod
(
OINDEX
, (
yyv•
[(1) - (4)].node), (yyvsp[(3) - (4)].node));

3632 (
yyvÆ
.
node
Ë
	`nod
(
OSLICE
, (
yyv•
[(1Ë- (6)].node),Çod(
OKEY
, (yyvsp[(3) - (6)].node), (yyvsp[(5) - (6)].node)));

3642 (
yyvÆ
.
node
Ë
	`nod
(
OCALL
, (
yyv•
[(1Ë- (4)].node), 
N
);

3643 (
yyvÆ
.
node
)->
li°
 = 
	`li°1
((
yyv•
[(3) - (4)].node));

3652 (
yyvÆ
.
node
Ë(
yyv•
[(3) - (5)].node);

3653 (
yyvÆ
.
node
)->
right
 = (
yyv•
[(1) - (5)].node);

3654 (
yyvÆ
.
node
)->
li°
 = (
yyv•
[(4) - (5)].list);

3655 
	`fixlbø˚
((
yyv•
[(2Ë- (5)].
i
));

3664 (
yyvÆ
.
node
Ë(
yyv•
[(3) - (5)].node);

3665 (
yyvÆ
.
node
)->
right
 = (
yyv•
[(1) - (5)].node);

3666 (
yyvÆ
.
node
)->
li°
 = (
yyv•
[(4) - (5)].list);

3675 
	`yyîr‹
("cannotÖarenthesizeÅype in compositeÜiteral");

3676 (
yyvÆ
.
node
Ë(
yyv•
[(5) - (7)].node);

3677 (
yyvÆ
.
node
)->
right
 = (
yyv•
[(2) - (7)].node);

3678 (
yyvÆ
.
node
)->
li°
 = (
yyv•
[(6) - (7)].list);

3689 (
yyvÆ
.
node
Ë
	`nod
(
OCOMPLIT
, 
N
, N);

3698 (
yyvÆ
.
node
Ë
	`nod
(
OKEY
, (
yyv•
[(1) - (3)].node), (yyvsp[(3) - (3)].node));

3707 (
yyvÆ
.
node
Ë(
yyv•
[(2) - (4)].node);

3708 (
yyvÆ
.
node
)->
li°
 = (
yyv•
[(3) - (4)].list);

3717 (
yyvÆ
.
node
Ë(
yyv•
[(2) - (3)].node);

3722 (
yyvÆ
.
node
)->
›
) {

3723 
ONAME
:

3724 
ONONAME
:

3725 
OPACK
:

3726 
OTYPE
:

3727 
OLITERAL
:

3728 (
yyvÆ
.
node
Ë
	`nod
(
OPAREN
, (yyvÆ.node), 
N
);

3738 (
yyvÆ
.
i
Ë
LBODY
;

3747 (
yyvÆ
.
i
) = '{';

3756 if((
yyv•
[(1Ë- (1)].
sym
Ë=
S
)

3757 (
yyvÆ
.
node
Ë
N
;

3759 (
yyvÆ
.
node
Ë
	`√w«me
((
yyv•
[(1Ë- (1)].
sym
));

3768 (
yyvÆ
.
node
Ë
	`d˛«me
((
yyv•
[(1Ë- (1)].
sym
));

3777 (
yyvÆ
.
node
Ë
N
;

3786 (
yyvÆ
.
sym
Ë(
yyv•
[(1) - (1)].sym);

3788 if(
imp‹çkg
 !
nû
 && !
	`exp‹äame
((
yyv•
[(1Ë- (1)].
sym
)->
«me
))

3789 (
yyvÆ
.
sym
Ë
	`pkglookup
((
yyv•
[(1Ë- (1)].sym)->
«me
, 
buûtöpkg
);

3798 (
yyvÆ
.
sym
Ë
S
;

3807 if((
yyv•
[(2Ë- (4)].
vÆ
).
u
.
svÆ
->
Àn
 == 0)

3808 (
yyvÆ
.
sym
Ë
	`pkglookup
((
yyv•
[(4Ë- (4)].sym)->
«me
, 
imp‹çkg
);

3810 (
yyvÆ
.
sym
Ë
	`pkglookup
((
yyv•
[(4Ë- (4)].sym)->
«me
, 
	`mkpkg
((yyv•[(2Ë- (4)].
vÆ
).
u
.
svÆ
));

3819 (
yyvÆ
.
node
Ë
	`ﬁd«me
((
yyv•
[(1Ë- (1)].
sym
));

3820 if((
yyvÆ
.
node
)->
∑ck
 !
N
)

3821 (
yyvÆ
.
node
)->
∑ck
->
u£d
 = 1;

3830 
	`yyîr‹
("finalárgument in variadic function missingÅype");

3831 (
yyvÆ
.
node
Ë
	`nod
(
ODDD
, 
	`ty≥nod
(
	`typ
(
TINTER
)), 
N
);

3840 (
yyvÆ
.
node
Ë
	`nod
(
ODDD
, (
yyv•
[(2Ë- (2)].node), 
N
);

3849 (
yyvÆ
.
node
Ë
	`nod
(
OTPAREN
, (
yyv•
[(2Ë- (3)].node), 
N
);

3858 (
yyvÆ
.
node
Ë
	`nod
(
OIND
, (
yyv•
[(2Ë- (2)].node), 
N
);

3867 (
yyvÆ
.
node
Ë
	`nod
(
OTPAREN
, (
yyv•
[(2Ë- (3)].node), 
N
);

3876 if((
yyv•
[(1Ë- (3)].
node
)->
›
 =
OPACK
) {

3877 
Sym
 *
s
;

3878 
s
 = 
	`ª°ri˘lookup
((
yyv•
[(3Ë- (3)].
sym
)->
«me
, (yyv•[(1Ë- (3)].
node
)->
pkg
);

3879 (
yyv•
[(1Ë- (3)].
node
)->
u£d
 = 1;

3880 (
yyvÆ
.
node
Ë
	`ﬁd«me
(
s
);

3883 (
yyvÆ
.
node
Ë
	`nod
(
OXDOT
, (
yyv•
[(1Ë- (3)].node), 
	`√w«me
((yyv•[(3Ë- (3)].
sym
)));

3892 (
yyvÆ
.
node
Ë
	`nod
(
OTARRAY
, (
yyv•
[(2) - (4)].node), (yyvsp[(4) - (4)].node));

3902 (
yyvÆ
.
node
Ë
	`nod
(
OTARRAY
,Çod(
ODDD
, 
N
, N), (
yyv•
[(4) - (4)].node));

3911 (
yyvÆ
.
node
Ë
	`nod
(
OTCHAN
, (
yyv•
[(2Ë- (2)].node), 
N
);

3912 (
yyvÆ
.
node
)->
ëy≥
 = 
CbŸh
;

3921 (
yyvÆ
.
node
Ë
	`nod
(
OTCHAN
, (
yyv•
[(3Ë- (3)].node), 
N
);

3922 (
yyvÆ
.
node
)->
ëy≥
 = 
C£nd
;

3931 (
yyvÆ
.
node
Ë
	`nod
(
OTMAP
, (
yyv•
[(3) - (5)].node), (yyvsp[(5) - (5)].node));

3940 (
yyvÆ
.
node
Ë
	`nod
(
OIND
, (
yyv•
[(2Ë- (2)].node), 
N
);

3949 (
yyvÆ
.
node
Ë
	`nod
(
OTCHAN
, (
yyv•
[(3Ë- (3)].node), 
N
);

3950 (
yyvÆ
.
node
)->
ëy≥
 = 
Cªcv
;

3959 (
yyvÆ
.
node
Ë
	`nod
(
OTSTRUCT
, 
N
, N);

3960 (
yyvÆ
.
node
)->
li°
 = (
yyv•
[(3) - (5)].list);

3961 
	`fixlbø˚
((
yyv•
[(2Ë- (5)].
i
));

3970 (
yyvÆ
.
node
Ë
	`nod
(
OTSTRUCT
, 
N
, N);

3971 
	`fixlbø˚
((
yyv•
[(2Ë- (3)].
i
));

3980 (
yyvÆ
.
node
Ë
	`nod
(
OTINTER
, 
N
, N);

3981 (
yyvÆ
.
node
)->
li°
 = (
yyv•
[(3) - (5)].list);

3982 
	`fixlbø˚
((
yyv•
[(2Ë- (5)].
i
));

3991 (
yyvÆ
.
node
Ë
	`nod
(
OTINTER
, 
N
, N);

3992 
	`fixlbø˚
((
yyv•
[(2Ë- (3)].
i
));

4001 (
yyvÆ
.
node
Ë(
yyv•
[(2) - (3)].node);

4002 if((
yyvÆ
.
node
Ë=
N
)

4004 (
yyvÆ
.
node
)->
nbody
 = (
yyv•
[(3Ë- (3)].
li°
);

4005 (
yyvÆ
.
node
)->
ídlöío
 = 
löío
;

4006 
	`funcbody
((
yyvÆ
.
node
));

4015 
Node
 *
t
;

4017 (
yyvÆ
.
node
Ë
N
;

4018 (
yyv•
[(3Ë- (5)].
li°
Ë
	`check¨gli°
((yyvsp[(3) - (5)].list), 1);

4020 if(
	`°rcmp
((
yyv•
[(1Ë- (5)].
sym
)->
«me
, "init") == 0) {

4021 (
yyv•
[(1Ë- (5)].
sym
Ë
	`ª«meöô
();

4022 if((
yyv•
[(3Ë- (5)].
li°
Ë!
nû
 || (yyvsp[(5) - (5)].list) !=Çil)

4023 
	`yyîr‹
("func init must haveÇoárgumentsándÇoÑeturn values");

4025 if(
	`°rcmp
(
loˇÕkg
->
«me
, "maö"Ë=0 && såcmp((
yyv•
[(1Ë- (5)].
sym
)->name, "main") == 0) {

4026 if((
yyv•
[(3Ë- (5)].
li°
Ë!
nû
 || (yyvsp[(5) - (5)].list) !=Çil)

4027 
	`yyîr‹
("func main must haveÇoárgumentsándÇoÑeturn values");

4030 
t
 = 
	`nod
(
OTFUNC
, 
N
, N);

4031 
t
->
li°
 = (
yyv•
[(3) - (5)].list);

4032 
t
->
æi°
 = (
yyv•
[(5Ë- (5)].
li°
);

4034 (
yyvÆ
.
node
Ë
	`nod
(
ODCLFUNC
, 
N
, N);

4035 (
yyvÆ
.
node
)->
¬ame
 = 
	`√w«me
((
yyv•
[(1Ë- (5)].
sym
));

4036 (
yyvÆ
.
node
)->
¬ame
->
de‚
 = (yyval.node);

4037 (
yyvÆ
.
node
)->
¬ame
->
¡y≥
 = 
t
;

4038 
	`de˛¨e
((
yyvÆ
.
node
)->
¬ame
, 
PFUNC
);

4040 
	`funchdr
((
yyvÆ
.
node
));

4049 
Node
 *
rcvr
, *
t
;

4051 (
yyvÆ
.
node
Ë
N
;

4052 (
yyv•
[(2Ë- (8)].
li°
Ë
	`check¨gli°
((yyvsp[(2) - (8)].list), 0);

4053 (
yyv•
[(6Ë- (8)].
li°
Ë
	`check¨gli°
((yyvsp[(6) - (8)].list), 1);

4055 if((
yyv•
[(2Ë- (8)].
li°
Ë=
nû
) {

4056 
	`yyîr‹
("method hasÇoÑeceiver");

4059 if((
yyv•
[(2Ë- (8)].
li°
)->
√xt
 !
nû
) {

4060 
	`yyîr‹
("method has multipleÑeceivers");

4063 
rcvr
 = (
yyv•
[(2Ë- (8)].
li°
)->
n
;

4064 if(
rcvr
->
›
 !
ODCLFIELD
) {

4065 
	`yyîr‹
("badÑeceiver in method");

4068 if(
rcvr
->
right
->
›
 =
OTPAREN
 || (rcvr->right->› =
OIND
 &&Ñcvr->right->
À·
->op == OTPAREN))

4069 
	`yyîr‹
("cannotÖarenthesizeÑeceiverÅype");

4071 
t
 = 
	`nod
(
OTFUNC
, 
rcvr
, 
N
);

4072 
t
->
li°
 = (
yyv•
[(6) - (8)].list);

4073 
t
->
æi°
 = (
yyv•
[(8Ë- (8)].
li°
);

4075 (
yyvÆ
.
node
Ë
	`nod
(
ODCLFUNC
, 
N
, N);

4076 (
yyvÆ
.
node
)->
sh‹äame
 = 
	`√w«me
((
yyv•
[(4Ë- (8)].
sym
));

4077 (
yyvÆ
.
node
)->
¬ame
 = 
	`mëhod«me1
((yyvÆ.node)->
sh‹äame
, 
rcvr
->
right
);

4078 (
yyvÆ
.
node
)->
¬ame
->
de‚
 = (yyval.node);

4079 (
yyvÆ
.
node
)->
¬ame
->
¡y≥
 = 
t
;

4080 
	`de˛¨e
((
yyvÆ
.
node
)->
¬ame
, 
PFUNC
);

4082 
	`funchdr
((
yyvÆ
.
node
));

4091 
Sym
 *
s
;

4092 
Ty≥
 *
t
;

4094 (
yyvÆ
.
node
Ë
N
;

4096 
s
 = (
yyv•
[(1Ë- (5)].
sym
);

4097 
t
 = 
	`fun˘y≥
(
N
, (
yyv•
[(3Ë- (5)].
li°
), (yyvsp[(5) - (5)].list));

4099 
	`imp‹tsym
(
s
, 
ONAME
);

4100 if(
s
->
def
 !
N
 && s->def->
›
 =
ONAME
) {

4101 if(
	`eqty≥
(
t
, 
s
->
def
->
ty≥
))

4103 
	`yyîr‹
("öc⁄si°íàdeföôi⁄ f‹ fun¯%S durög imp‹t\n\t%T\n\t%T", 
s
, s->
def
->
ty≥
, 
t
);

4106 (
yyvÆ
.
node
Ë
	`√w«me
(
s
);

4107 (
yyvÆ
.
node
)->
ty≥
 = 
t
;

4108 
	`de˛¨e
((
yyvÆ
.
node
), 
PFUNC
);

4110 
	`funchdr
((
yyvÆ
.
node
));

4119 (
yyvÆ
.
node
Ë
	`mëhod«me1
(
	`√w«me
((
yyv•
[(4Ë- (8)].
sym
)), (yyv•[(2Ë- (8)].
li°
)->
n
->
right
);

4120 (
yyvÆ
.
node
)->
ty≥
 = 
	`fun˘y≥
((
yyv•
[(2Ë- (8)].
li°
)->
n
, (yyvsp[(6) - (8)].list), (yyvsp[(8) - (8)].list));

4122 
	`checkwidth
((
yyvÆ
.
node
)->
ty≥
);

4123 
	`addmëhod
((
yyv•
[(4Ë- (8)].
sym
), (
yyvÆ
.
node
)->
ty≥
, 0);

4124 
	`funchdr
((
yyvÆ
.
node
));

4130 (
yyvÆ
.
node
)->
ty≥
->
¬ame
 = (yyval.node);

4139 (
yyv•
[(3Ë- (5)].
li°
Ë
	`check¨gli°
((yyvsp[(3) - (5)].list), 1);

4140 (
yyvÆ
.
node
Ë
	`nod
(
OTFUNC
, 
N
, N);

4141 (
yyvÆ
.
node
)->
li°
 = (
yyv•
[(3) - (5)].list);

4142 (
yyvÆ
.
node
)->
æi°
 = (
yyv•
[(5Ë- (5)].
li°
);

4151 (
yyvÆ
.
li°
Ë
nû
;

4160 (
yyvÆ
.
li°
Ë(
yyv•
[(2) - (3)].list);

4161 if((
yyvÆ
.
li°
Ë=
nû
)

4162 (
yyvÆ
.
li°
Ë
	`li°1
(
	`nod
(
OEMPTY
, 
N
, N));

4171 (
yyvÆ
.
li°
Ë
nû
;

4180 (
yyvÆ
.
li°
Ë
	`li°1
(
	`nod
(
ODCLFIELD
, 
N
, (
yyv•
[(1Ë- (1)].
node
)));

4189 (
yyv•
[(2Ë- (3)].
li°
Ë
	`check¨gli°
((yyvsp[(2) - (3)].list), 0);

4190 (
yyvÆ
.
li°
Ë(
yyv•
[(2) - (3)].list);

4199 
	`˛osuªhdr
((
yyv•
[(1Ë- (1)].
node
));

4208 (
yyvÆ
.
node
Ë
	`˛osuªbody
((
yyv•
[(3Ë- (4)].
li°
));

4209 
	`fixlbø˚
((
yyv•
[(2Ë- (4)].
i
));

4218 (
yyvÆ
.
node
Ë
	`˛osuªbody
(
nû
);

4227 (
yyvÆ
.
li°
Ë
nû
;

4236 (
yyvÆ
.
li°
Ë
	`c⁄ˇt
((
yyv•
[(1) - (3)].list), (yyvsp[(2) - (3)].list));

4237 if(
nsy¡axîr‹s
 == 0)

4238 
	`ã°d˛°ack
();

4247 (
yyvÆ
.
li°
Ë
	`c⁄ˇt
((
yyv•
[(1) - (3)].list), (yyvsp[(3) - (3)].list));

4256 (
yyvÆ
.
li°
Ë
	`c⁄ˇt
((
yyv•
[(1) - (3)].list), (yyvsp[(3) - (3)].list));

4265 (
yyvÆ
.
li°
Ë
	`li°1
((
yyv•
[(1Ë- (1)].
node
));

4274 (
yyvÆ
.
li°
Ë
	`li°
((
yyv•
[(1Ë- (3)].li°), (yyv•[(3Ë- (3)].
node
));

4283 (
yyvÆ
.
li°
Ë
	`c⁄ˇt
((
yyv•
[(1) - (3)].list), (yyvsp[(3) - (3)].list));

4292 (
yyvÆ
.
li°
Ë
	`li°1
((
yyv•
[(1Ë- (1)].
node
));

4301 (
yyvÆ
.
li°
Ë
	`li°
((
yyv•
[(1Ë- (3)].li°), (yyv•[(3Ë- (3)].
node
));

4310 
NodeLi°
 *
l
;

4312 
Node
 *
n
;

4313 
l
 = (
yyv•
[(1Ë- (3)].
li°
);

4314 if(
l
 !
nû
 &&Ü->
√xt
 =nû &&Ü->
n
 ==Çil) {

4316 
n
 = (
yyv•
[(2Ë- (3)].
node
);

4317 if(
n
->
›
 =
OIND
)

4318 
n
 =Ç->
À·
;

4319 
n
 = 
	`embedded
“->
sym
);

4320 
n
->
right
 = (
yyv•
[(2Ë- (3)].
node
);

4321 
n
->
vÆ
 = (
yyv•
[(3) - (3)].val);

4322 (
yyvÆ
.
li°
Ë
	`li°1
(
n
);

4326 
l
=(
yyv•
[(1Ë- (3)].
li°
);Ü;Üˆ->
√xt
) {

4327 
l
->
n
 = 
	`nod
(
ODCLFIELD
,Ü->n, (
yyv•
[(2Ë- (3)].
node
));

4328 
l
->
n
->
vÆ
 = (
yyv•
[(3) - (3)].val);

4338 (
yyv•
[(1Ë- (2)].
node
)->
vÆ
 = (yyvsp[(2) - (2)].val);

4339 (
yyvÆ
.
li°
Ë
	`li°1
((
yyv•
[(1Ë- (2)].
node
));

4348 (
yyv•
[(2Ë- (4)].
node
)->
vÆ
 = (yyvsp[(4) - (4)].val);

4349 (
yyvÆ
.
li°
Ë
	`li°1
((
yyv•
[(2Ë- (4)].
node
));

4350 
	`yyîr‹
("cannotÖarenthesizeÉmbeddedÅype");

4359 (
yyv•
[(2Ë- (3)].
node
)->
right
 = 
	`nod
(
OIND
, (yyv•[(2Ë- (3)].node)->right, 
N
);

4360 (
yyv•
[(2Ë- (3)].
node
)->
vÆ
 = (yyvsp[(3) - (3)].val);

4361 (
yyvÆ
.
li°
Ë
	`li°1
((
yyv•
[(2Ë- (3)].
node
));

4370 (
yyv•
[(3Ë- (5)].
node
)->
right
 = 
	`nod
(
OIND
, (yyv•[(3Ë- (5)].node)->right, 
N
);

4371 (
yyv•
[(3Ë- (5)].
node
)->
vÆ
 = (yyvsp[(5) - (5)].val);

4372 (
yyvÆ
.
li°
Ë
	`li°1
((
yyv•
[(3Ë- (5)].
node
));

4373 
	`yyîr‹
("cannotÖarenthesizeÉmbeddedÅype");

4382 (
yyv•
[(3Ë- (5)].
node
)->
right
 = 
	`nod
(
OIND
, (yyv•[(3Ë- (5)].node)->right, 
N
);

4383 (
yyv•
[(3Ë- (5)].
node
)->
vÆ
 = (yyvsp[(5) - (5)].val);

4384 (
yyvÆ
.
li°
Ë
	`li°1
((
yyv•
[(3Ë- (5)].
node
));

4385 
	`yyîr‹
("cannotÖarenthesizeÉmbeddedÅype");

4394 
Node
 *
n
;

4396 (
yyvÆ
.
sym
Ë(
yyv•
[(1) - (1)].sym);

4397 
n
 = 
	`ﬁd«me
((
yyv•
[(1Ë- (1)].
sym
));

4398 if(
n
->
∑ck
 !
N
)

4399 
n
->
∑ck
->
u£d
 = 1;

4408 
Pkg
 *
pkg
;

4410 if((
yyv•
[(1Ë- (3)].
sym
)->
def
 =
N
 || (yyv•[(1Ë- (3)].sym)->def->
›
 !
OPACK
) {

4411 
	`yyîr‹
("%S i†nŸáÖackage", (
yyv•
[(1Ë- (3)].
sym
));

4412 
pkg
 = 
loˇÕkg
;

4414 (
yyv•
[(1Ë- (3)].
sym
)->
def
->
u£d
 = 1;

4415 
pkg
 = (
yyv•
[(1Ë- (3)].
sym
)->
def
->pkg;

4417 (
yyvÆ
.
sym
Ë
	`ª°ri˘lookup
((
yyv•
[(3Ë- (3)].sym)->
«me
, 
pkg
);

4426 (
yyvÆ
.
node
Ë
	`embedded
((
yyv•
[(1Ë- (1)].
sym
));

4435 (
yyvÆ
.
node
Ë
	`nod
(
ODCLFIELD
, (
yyv•
[(1) - (2)].node), (yyvsp[(2) - (2)].node));

4436 
	`iÁ˚d˛
((
yyvÆ
.
node
));

4445 (
yyvÆ
.
node
Ë
	`nod
(
ODCLFIELD
, 
N
, 
	`ﬁd«me
((
yyv•
[(1Ë- (1)].
sym
)));

4454 (
yyvÆ
.
node
Ë
	`nod
(
ODCLFIELD
, 
N
, 
	`ﬁd«me
((
yyv•
[(2Ë- (3)].
sym
)));

4455 
	`yyîr‹
("cannotÖarenthesizeÉmbeddedÅype");

4465 (
yyv•
[(2Ë- (4)].
li°
Ë
	`check¨gli°
((yyvsp[(2) - (4)].list), 1);

4466 (
yyvÆ
.
node
Ë
	`nod
(
OTFUNC
, 
	`Ákëhis
(), 
N
);

4467 (
yyvÆ
.
node
)->
li°
 = (
yyv•
[(2) - (4)].list);

4468 (
yyvÆ
.
node
)->
æi°
 = (
yyv•
[(4Ë- (4)].
li°
);

4477 (
yyvÆ
.
node
Ë
	`nod
(
ONONAME
, 
N
, N);

4478 (
yyvÆ
.
node
)->
sym
 = (
yyv•
[(1) - (2)].sym);

4479 (
yyvÆ
.
node
Ë
	`nod
(
OKEY
, (yyvÆ.node), (
yyv•
[(2) - (2)].node));

4488 (
yyvÆ
.
node
Ë
	`nod
(
ONONAME
, 
N
, N);

4489 (
yyvÆ
.
node
)->
sym
 = (
yyv•
[(1) - (2)].sym);

4490 (
yyvÆ
.
node
Ë
	`nod
(
OKEY
, (yyvÆ.node), (
yyv•
[(2) - (2)].node));

4499 (
yyvÆ
.
li°
Ë
	`li°1
((
yyv•
[(1Ë- (1)].
node
));

4508 (
yyvÆ
.
li°
Ë
	`li°
((
yyv•
[(1Ë- (3)].li°), (yyv•[(3Ë- (3)].
node
));

4517 (
yyvÆ
.
li°
Ë
nû
;

4526 (
yyvÆ
.
li°
Ë(
yyv•
[(1) - (2)].list);

4535 (
yyvÆ
.
node
Ë
N
;

4544 (
yyvÆ
.
node
Ë
	`li°°mt
((
yyv•
[(1Ë- (1)].
li°
));

4553 (
yyvÆ
.
node
Ë
N
;

4562 (
yyv•
[(1Ë- (2)].
node
Ë
	`nod
(
OLABEL
, (yyv•[(1Ë- (2)].node), 
N
);

4563 (
yyv•
[(1Ë- (2)].
node
)->
sym
 = 
d˛°ack
;

4572 
NodeLi°
 *
l
;

4574 (
yyv•
[(1Ë- (4)].
node
)->
de‚
 = (yyvsp[(4) - (4)].node);

4575 
l
 = 
	`li°1
((
yyv•
[(1Ë- (4)].
node
));

4576 if((
yyv•
[(4Ë- (4)].
node
))

4577 
l
 = 
	`li°
÷, (
yyv•
[(4Ë- (4)].
node
));

4578 (
yyvÆ
.
node
Ë
	`li°°mt
(
l
);

4588 (
yyvÆ
.
node
Ë
	`nod
(
OXFALL
, 
N
, N);

4597 (
yyvÆ
.
node
Ë
	`nod
(
OBREAK
, (
yyv•
[(2Ë- (2)].node), 
N
);

4606 (
yyvÆ
.
node
Ë
	`nod
(
OCONTINUE
, (
yyv•
[(2Ë- (2)].node), 
N
);

4615 (
yyvÆ
.
node
Ë
	`nod
(
OPROC
, (
yyv•
[(2Ë- (2)].node), 
N
);

4624 (
yyvÆ
.
node
Ë
	`nod
(
ODEFER
, (
yyv•
[(2Ë- (2)].node), 
N
);

4633 (
yyvÆ
.
node
Ë
	`nod
(
OGOTO
, (
yyv•
[(2Ë- (2)].node), 
N
);

4634 (
yyvÆ
.
node
)->
sym
 = 
d˛°ack
;

4643 (
yyvÆ
.
node
Ë
	`nod
(
ORETURN
, 
N
, N);

4644 (
yyvÆ
.
node
)->
li°
 = (
yyv•
[(2) - (2)].list);

4645 if((
yyvÆ
.
node
)->
li°
 =
nû
 && 
cur‚
 !
N
) {

4646 
NodeLi°
 *
l
;

4648 
l
=
cur‚
->
d˛
;Ü;Üˆ->
√xt
) {

4649 if(
l
->
n
->
˛ass
 =
PPARAM
)

4651 if(
l
->
n
->
˛ass
 !
PPARAMOUT
)

4653 if(
l
->
n
->
sym
->
def
 !=Ü->n)

4654 
	`yyîr‹
("%†i†shadowed durögÑëu∫", 
l
->
n
->
sym
->
«me
);

4665 (
yyvÆ
.
li°
Ë
nû
;

4666 if((
yyv•
[(1Ë- (1)].
node
Ë!
N
)

4667 (
yyvÆ
.
li°
Ë
	`li°1
((
yyv•
[(1Ë- (1)].
node
));

4676 (
yyvÆ
.
li°
Ë(
yyv•
[(1) - (3)].list);

4677 if((
yyv•
[(3Ë- (3)].
node
Ë!
N
)

4678 (
yyvÆ
.
li°
Ë
	`li°
((yyvÆ.li°), (
yyv•
[(3Ë- (3)].
node
));

4687 (
yyvÆ
.
li°
Ë
	`li°1
((
yyv•
[(1Ë- (1)].
node
));

4696 (
yyvÆ
.
li°
Ë
	`li°
((
yyv•
[(1Ë- (3)].li°), (yyv•[(3Ë- (3)].
node
));

4705 (
yyvÆ
.
li°
Ë
	`li°1
((
yyv•
[(1Ë- (1)].
node
));

4714 (
yyvÆ
.
li°
Ë
	`li°
((
yyv•
[(1Ë- (3)].li°), (yyv•[(3Ë- (3)].
node
));

4723 (
yyvÆ
.
li°
Ë
	`li°1
((
yyv•
[(1Ë- (1)].
node
));

4732 (
yyvÆ
.
li°
Ë
	`li°
((
yyv•
[(1Ë- (3)].li°), (yyv•[(3Ë- (3)].
node
));

4741 (
yyvÆ
.
li°
Ë
	`li°1
((
yyv•
[(1Ë- (1)].
node
));

4750 (
yyvÆ
.
li°
Ë
	`li°
((
yyv•
[(1Ë- (3)].li°), (yyv•[(3Ë- (3)].
node
));

4759 (
yyvÆ
.
li°
Ë
	`li°1
((
yyv•
[(1Ë- (1)].
node
));

4768 (
yyvÆ
.
li°
Ë
	`li°1
((
yyv•
[(1Ë- (1)].
node
));

4777 (
yyvÆ
.
li°
Ë
	`li°
((
yyv•
[(1Ë- (3)].li°), (yyv•[(3Ë- (3)].
node
));

4786 (
yyvÆ
.
li°
Ë
	`li°
((
yyv•
[(1Ë- (3)].li°), (yyv•[(3Ë- (3)].
node
));

4795 (
yyvÆ
.
li°
Ë
nû
;

4804 (
yyvÆ
.
li°
Ë(
yyv•
[(1) - (2)].list);

4813 (
yyvÆ
.
node
Ë
N
;

4822 (
yyvÆ
.
li°
Ë
nû
;

4831 (
yyvÆ
.
node
Ë
N
;

4840 (
yyvÆ
.
li°
Ë
nû
;

4849 (
yyvÆ
.
li°
Ë
nû
;

4858 (
yyvÆ
.
li°
Ë
nû
;

4867 (
yyvÆ
.
vÆ
).
˘y≥
 = 
CTxxx
;

4876 
	`imp‹timp‹t
((
yyv•
[(2Ë- (4)].
sym
), (yyv•[(3Ë- (4)].
vÆ
).
u
.
svÆ
);

4885 
	`imp‹tv¨
((
yyv•
[(2Ë- (4)].
sym
), (yyv•[(3Ë- (4)].
ty≥
));

4894 
	`imp‹tc⁄°
((
yyv•
[(2Ë- (5)].
sym
), 
ty≥s
[
TIDEAL
], (yyv•[(4Ë- (5)].
node
));

4903 
	`imp‹tc⁄°
((
yyv•
[(2Ë- (6)].
sym
), (yyv•[(3Ë- (6)].
ty≥
), (yyv•[(5Ë- (6)].
node
));

4912 
	`imp‹ây≥
((
yyv•
[(2Ë- (4)].
ty≥
), (yyvsp[(3) - (4)].type));

4921 if((
yyv•
[(2Ë- (4)].
node
Ë=
N
)

4924 (
yyv•
[(2Ë- (4)].
node
)->
öl
 = (yyv•[(3Ë- (4)].
li°
);

4926 
	`funcbody
((
yyv•
[(2Ë- (4)].
node
));

4927 
imp‹éi°
 = 
	`li°
(imp‹éi°, (
yyv•
[(2Ë- (4)].
node
));

4929 if(
debug
['E']) {

4930 
	`¥öt
("imp‹à[%Z] fun¯%lN \n", 
imp‹çkg
->
∑th
, (
yyv•
[(2Ë- (4)].
node
));

4931 if(
debug
['l'] > 2 && (
yyv•
[(2Ë- (4)].
node
)->
öl
)

4932 
	`¥öt
("ö»body:%+H\n", (
yyv•
[(2Ë- (4)].
node
)->
öl
);

4942 (
yyvÆ
.
sym
Ë(
yyv•
[(1) - (1)].sym);

4943 
°ru˘pkg
 = (
yyvÆ
.
sym
)->
pkg
;

4952 (
yyvÆ
.
ty≥
Ë
	`pkgty≥
((
yyv•
[(1Ë- (1)].
sym
));

4953 
	`imp‹tsym
((
yyv•
[(1Ë- (1)].
sym
), 
OTYPE
);

4962 (
yyvÆ
.
ty≥
Ë
	`pkgty≥
((
yyv•
[(1Ë- (1)].
sym
));

4972 (
yyv•
[(1Ë- (1)].
sym
Ë
	`pkglookup
((yyv•[(1Ë- (1)].sym)->
«me
, 
buûtöpkg
);

4973 if((
yyv•
[(1Ë- (1)].
sym
)->
def
 =
N
 || (yyv•[(1Ë- (1)].sym)->def->
›
 !
OTYPE
) {

4974 
	`yyîr‹
("%†i†nŸáÅy≥", (
yyv•
[(1Ë- (1)].
sym
)->
«me
);

4975 (
yyvÆ
.
ty≥
Ë
T
;

4977 (
yyvÆ
.
ty≥
Ë(
yyv•
[(1Ë- (1)].
sym
)->
def
->type;

4986 (
yyvÆ
.
ty≥
Ë
	`aödex
(
N
, (
yyv•
[(3) - (3)].type));

4995 (
yyvÆ
.
ty≥
Ë
	`aödex
(
	`nodlô
((
yyv•
[(2Ë- (4)].
vÆ
)), (yyvsp[(4) - (4)].type));

5004 (
yyvÆ
.
ty≥
Ë
	`m≠ty≥
((
yyv•
[(3) - (5)].type), (yyvsp[(5) - (5)].type));

5013 (
yyvÆ
.
ty≥
Ë
	`to°ru˘
((
yyv•
[(3Ë- (4)].
li°
));

5022 (
yyvÆ
.
ty≥
Ë
	`toöãrÁ˚
((
yyv•
[(3Ë- (4)].
li°
));

5031 (
yyvÆ
.
ty≥
Ë
	`±πo
((
yyv•
[(2) - (2)].type));

5040 (
yyvÆ
.
ty≥
Ë
	`typ
(
TCHAN
);

5041 (
yyvÆ
.
ty≥
)->ty≥ = (
yyv•
[(2) - (2)].type);

5042 (
yyvÆ
.
ty≥
)->
ch™
 = 
CbŸh
;

5051 (
yyvÆ
.
ty≥
Ë
	`typ
(
TCHAN
);

5052 (
yyvÆ
.
ty≥
)->ty≥ = (
yyv•
[(3) - (4)].type);

5053 (
yyvÆ
.
ty≥
)->
ch™
 = 
CbŸh
;

5062 (
yyvÆ
.
ty≥
Ë
	`typ
(
TCHAN
);

5063 (
yyvÆ
.
ty≥
)->ty≥ = (
yyv•
[(3) - (3)].type);

5064 (
yyvÆ
.
ty≥
)->
ch™
 = 
C£nd
;

5073 (
yyvÆ
.
ty≥
Ë
	`typ
(
TCHAN
);

5074 (
yyvÆ
.
ty≥
)->ty≥ = (
yyv•
[(3) - (3)].type);

5075 (
yyvÆ
.
ty≥
)->
ch™
 = 
Cªcv
;

5084 (
yyvÆ
.
ty≥
Ë
	`fun˘y≥
(
nû
, (
yyv•
[(3Ë- (5)].
li°
), (yyvsp[(5) - (5)].list));

5093 (
yyvÆ
.
node
Ë
	`nod
(
ODCLFIELD
, 
N
, 
	`ty≥nod
((
yyv•
[(2Ë- (3)].
ty≥
)));

5094 if((
yyv•
[(1Ë- (3)].
sym
))

5095 (
yyvÆ
.
node
)->
À·
 = 
	`√w«me
((
yyv•
[(1Ë- (3)].
sym
));

5096 (
yyvÆ
.
node
)->
vÆ
 = (
yyv•
[(3) - (3)].val);

5105 
Ty≥
 *
t
;

5107 
t
 = 
	`typ
(
TARRAY
);

5108 
t
->
bound
 = -1;

5109 
t
->
ty≥
 = (
yyv•
[(3) - (4)].type);

5111 (
yyvÆ
.
node
Ë
	`nod
(
ODCLFIELD
, 
N
, 
	`ty≥nod
(
t
));

5112 if((
yyv•
[(1Ë- (4)].
sym
))

5113 (
yyvÆ
.
node
)->
À·
 = 
	`√w«me
((
yyv•
[(1Ë- (4)].
sym
));

5114 (
yyvÆ
.
node
)->
isddd
 = 1;

5115 (
yyvÆ
.
node
)->
vÆ
 = (
yyv•
[(4) - (4)].val);

5124 
Sym
 *
s
;

5126 if((
yyv•
[(1Ë- (3)].
sym
Ë!
S
) {

5127 (
yyvÆ
.
node
Ë
	`nod
(
ODCLFIELD
, 
	`√w«me
((
yyv•
[(1Ë- (3)].
sym
)), 
	`ty≥nod
((yyv•[(2Ë- (3)].
ty≥
)));

5128 (
yyvÆ
.
node
)->
vÆ
 = (
yyv•
[(3) - (3)].val);

5130 
s
 = (
yyv•
[(2Ë- (3)].
ty≥
)->
sym
;

5131 if(
s
 =
S
 && 
i•å
[(
yyv•
[(2Ë- (3)].
ty≥
)->
ëy≥
])

5132 
s
 = (
yyv•
[(2Ë- (3)].
ty≥
)->ty≥->
sym
;

5133 (
yyvÆ
.
node
Ë
	`embedded
(
s
);

5134 (
yyvÆ
.
node
)->
right
 = 
	`ty≥nod
((
yyv•
[(2Ë- (3)].
ty≥
));

5135 (
yyvÆ
.
node
)->
vÆ
 = (
yyv•
[(3) - (3)].val);

5145 (
yyvÆ
.
node
Ë
	`nod
(
ODCLFIELD
, 
	`√w«me
((
yyv•
[(1Ë- (5)].
sym
)), 
	`ty≥nod
(
	`fun˘y≥
(
	`Ákëhis
(), (yyv•[(3Ë- (5)].
li°
), (yyvsp[(5) - (5)].list))));

5154 (
yyvÆ
.
node
Ë
	`nod
(
ODCLFIELD
, 
N
, 
	`ty≥nod
((
yyv•
[(1Ë- (1)].
ty≥
)));

5163 (
yyvÆ
.
li°
Ë
nû
;

5172 (
yyvÆ
.
li°
Ë(
yyv•
[(2) - (3)].list);

5181 (
yyvÆ
.
li°
Ë
	`li°1
(
	`nod
(
ODCLFIELD
, 
N
, 
	`ty≥nod
((
yyv•
[(1Ë- (1)].
ty≥
))));

5190 (
yyvÆ
.
node
Ë
	`nodlô
((
yyv•
[(1Ë- (1)].
vÆ
));

5199 (
yyvÆ
.
node
Ë
	`nodlô
((
yyv•
[(2Ë- (2)].
vÆ
));

5200 (
yyvÆ
.
node
)->
vÆ
.
˘y≥
){

5201 
CTINT
:

5202 
CTRUNE
:

5203 
	`m≤egfix
((
yyvÆ
.
node
)->
vÆ
.
u
.
xvÆ
);

5205 
CTFLT
:

5206 
	`m≤egÊt
((
yyvÆ
.
node
)->
vÆ
.
u
.
fvÆ
);

5209 
	`yyîr‹
("badÇegated constant");

5219 (
yyvÆ
.
node
Ë
	`ﬁd«me
(
	`pkglookup
((
yyv•
[(1Ë- (1)].
sym
)->
«me
, 
buûtöpkg
));

5220 if((
yyvÆ
.
node
)->
›
 !
OLITERAL
)

5221 
	`yyîr‹
("bad c⁄°™à%S", (
yyvÆ
.
node
)->
sym
);

5230 if((
yyv•
[(2Ë- (5)].
node
)->
vÆ
.
˘y≥
 =
CTRUNE
 && (yyv•[(4Ë- (5)].node)->vÆ.˘y≥ =
CTINT
) {

5231 (
yyvÆ
.
node
Ë(
yyv•
[(2) - (5)].node);

5232 
	`m∑ddfixfix
((
yyv•
[(2Ë- (5)].
node
)->
vÆ
.
u
.
xvÆ
, (yyvsp[(4) - (5)].node)->val.u.xval, 0);

5235 (
yyvÆ
.
node
Ë
	`nod˝lxlô
((
yyv•
[(2Ë- (5)].node)->
vÆ
, (yyvsp[(4) - (5)].node)->val);

5244 (
yyvÆ
.
li°
Ë
	`li°1
((
yyv•
[(1Ë- (1)].
node
));

5253 (
yyvÆ
.
li°
Ë
	`li°
((
yyv•
[(1Ë- (3)].li°), (yyv•[(3Ë- (3)].
node
));

5262 (
yyvÆ
.
li°
Ë
	`li°1
((
yyv•
[(1Ë- (1)].
node
));

5271 (
yyvÆ
.
li°
Ë
	`li°
((
yyv•
[(1Ë- (3)].li°), (yyv•[(3Ë- (3)].
node
));

5280 (
yyvÆ
.
li°
Ë
	`li°1
((
yyv•
[(1Ë- (1)].
node
));

5289 (
yyvÆ
.
li°
Ë
	`li°
((
yyv•
[(1Ë- (3)].li°), (yyv•[(3Ë- (3)].
node
));

5310 
	`YY_SYMBOL_PRINT
 ("-> $$ =", 
yyr1
[
yyn
], &
yyvÆ
, &
yyloc
);

5312 
	`YYPOPSTACK
 (
yyÀn
);

5313 
yyÀn
 = 0;

5314 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

5316 *++
yyv•
 = 
yyvÆ
;

5322 
yyn
 = 
yyr1
[yyn];

5324 
yy°©e
 = 
yypgŸo
[
yyn
 - 
YYNTOKENS
] + *
yys•
;

5325 i‡(0 <
yy°©e
 && yy°©ê<
YYLAST
 && 
yycheck
[yy°©e] =*
yys•
)

5326 
yy°©e
 = 
yyèbÀ
[yystate];

5328 
yy°©e
 = 
yydefgŸo
[
yyn
 - 
YYNTOKENS
];

5330 
yy√w°©e
;

5336 
yyîæab
:

5339 
yytokí
 = 
yych¨
 =
YYEMPTY
 ? YYEMPTY : 
	`YYTRANSLATE
 (yychar);

5342 i‡(!
yyîr°©us
)

5344 ++
yy√ºs
;

5345 #i‡! 
YYERROR_VERBOSE


5346 
	`yyîr‹
 (
	`YY_
("syntaxÉrror"));

5348 
	#YYSYNTAX_ERROR
 
	`yysy¡ax_îr‹
 (&
yymsg_Æloc
, &
yymsg
, \

5349 
yys•
, 
yytokí
)

	)

5351 *
yymsgp
 = 
	`YY_
("syntaxÉrror");

5352 
yysy¡ax_îr‹_°©us
;

5353 
yysy¡ax_îr‹_°©us
 = 
YYSYNTAX_ERROR
;

5354 i‡(
yysy¡ax_îr‹_°©us
 == 0)

5355 
yymsgp
 = 
yymsg
;

5356 i‡(
yysy¡ax_îr‹_°©us
 == 1)

5358 i‡(
yymsg
 !
yymsgbuf
)

5359 
	`YYSTACK_FREE
 (
yymsg
);

5360 
yymsg
 = (*Ë
	`YYSTACK_ALLOC
 (
yymsg_Æloc
);

5361 i‡(!
yymsg
)

5363 
yymsg
 = 
yymsgbuf
;

5364 
yymsg_Æloc
 =  
yymsgbuf
;

5365 
yysy¡ax_îr‹_°©us
 = 2;

5369 
yysy¡ax_îr‹_°©us
 = 
YYSYNTAX_ERROR
;

5370 
yymsgp
 = 
yymsg
;

5373 
	`yyîr‹
 (
yymsgp
);

5374 i‡(
yysy¡ax_îr‹_°©us
 == 2)

5375 
yyexhau°edœb
;

5377 #unde‡
YYSYNTAX_ERROR


5383 i‡(
yyîr°©us
 == 3)

5388 i‡(
yych¨
 <
YYEOF
)

5391 i‡(
yych¨
 =
YYEOF
)

5392 
YYABORT
;

5396 
	`yyde°ru˘
 ("Error: discarding",

5397 
yytokí
, &
yylvÆ
);

5398 
yych¨
 = 
YYEMPTY
;

5404 
yyîæab1
;

5410 
yyîr‹œb
:

5416 
yyîr‹œb
;

5420 
	`YYPOPSTACK
 (
yyÀn
);

5421 
yyÀn
 = 0;

5422 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

5423 
yy°©e
 = *
yys•
;

5424 
yyîæab1
;

5430 
yyîæab1
:

5431 
yyîr°©us
 = 3;

5435 
yyn
 = 
yy∑˘
[
yy°©e
];

5436 i‡(!
	`yy∑˘_vÆue_is_deÁu…
 (
yyn
))

5438 
yyn
 +
YYTERROR
;

5439 i‡(0 <
yyn
 && yy¿<
YYLAST
 && 
yycheck
[yyn] =
YYTERROR
)

5441 
yyn
 = 
yyèbÀ
[yyn];

5442 i‡(0 < 
yyn
)

5448 i‡(
yys•
 =
yyss
)

5449 
YYABORT
;

5452 
	`yyde°ru˘
 ("Error:Öopping",

5453 
yy°os
[
yy°©e
], 
yyv•
);

5454 
	`YYPOPSTACK
 (1);

5455 
yy°©e
 = *
yys•
;

5456 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

5459 *++
yyv•
 = 
yylvÆ
;

5463 
	`YY_SYMBOL_PRINT
 ("Shi·ög", 
yy°os
[
yyn
], 
yyv•
, 
yyl•
);

5465 
yy°©e
 = 
yyn
;

5466 
yy√w°©e
;

5472 
yyac˚±œb
:

5473 
yyªsu…
 = 0;

5474 
yyªtu∫
;

5479 
yyab‹éab
:

5480 
yyªsu…
 = 1;

5481 
yyªtu∫
;

5483 #i‡!
	`deföed
(
yyovîÊow
Ë|| 
YYERROR_VERBOSE


5487 
yyexhau°edœb
:

5488 
	`yyîr‹
 (
	`YY_
("memoryÉxhausted"));

5489 
yyªsu…
 = 2;

5493 
yyªtu∫
:

5494 i‡(
yych¨
 !
YYEMPTY
)

5498 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
);

5499 
	`yyde°ru˘
 ("Cleanup: discardingÜookahead",

5500 
yytokí
, &
yylvÆ
);

5504 
	`YYPOPSTACK
 (
yyÀn
);

5505 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

5506 
yys•
 !
yyss
)

5508 
	`yyde°ru˘
 ("Cleanup:Öopping",

5509 
yy°os
[*
yys•
], 
yyv•
);

5510 
	`YYPOPSTACK
 (1);

5512 #i‚de‡
yyovîÊow


5513 i‡(
yyss
 !
yysß
)

5514 
	`YYSTACK_FREE
 (
yyss
);

5516 #i‡
YYERROR_VERBOSE


5517 i‡(
yymsg
 !
yymsgbuf
)

5518 
	`YYSTACK_FREE
 (
yymsg
);

5521  
	`YYID
 (
yyªsu…
);

5522 
	}
}

5531 
	$fixlbø˚
(
lbr
)

5536 if(
lbr
 =
LBODY
)

5537 
lo›hack
 = 1;

5538 
	}
}

	@y.tab.h

35 #i‚de‡
YYTOKENTYPE


36 
	#YYTOKENTYPE


	)

39 
	eyytokíty≥
 {

40 
	mLLITERAL
 = 258,

41 
	mLASOP
 = 259,

42 
	mLBREAK
 = 260,

43 
	mLCASE
 = 261,

44 
	mLCHAN
 = 262,

45 
	mLCOLAS
 = 263,

46 
	mLCONST
 = 264,

47 
	mLCONTINUE
 = 265,

48 
	mLDDD
 = 266,

49 
	mLDEFAULT
 = 267,

50 
	mLDEFER
 = 268,

51 
	mLELSE
 = 269,

52 
	mLFALL
 = 270,

53 
	mLFOR
 = 271,

54 
	mLFUNC
 = 272,

55 
	mLGO
 = 273,

56 
	mLGOTO
 = 274,

57 
	mLIF
 = 275,

58 
	mLIMPORT
 = 276,

59 
	mLINTERFACE
 = 277,

60 
	mLMAP
 = 278,

61 
	mLNAME
 = 279,

62 
	mLPACKAGE
 = 280,

63 
	mLRANGE
 = 281,

64 
	mLRETURN
 = 282,

65 
	mLSELECT
 = 283,

66 
	mLSTRUCT
 = 284,

67 
	mLSWITCH
 = 285,

68 
	mLTYPE
 = 286,

69 
	mLVAR
 = 287,

70 
	mLANDAND
 = 288,

71 
	mLANDNOT
 = 289,

72 
	mLBODY
 = 290,

73 
	mLCOMM
 = 291,

74 
	mLDEC
 = 292,

75 
	mLEQ
 = 293,

76 
	mLGE
 = 294,

77 
	mLGT
 = 295,

78 
	mLIGNORE
 = 296,

79 
	mLINC
 = 297,

80 
	mLLE
 = 298,

81 
	mLLSH
 = 299,

82 
	mLLT
 = 300,

83 
	mLNE
 = 301,

84 
	mLOROR
 = 302,

85 
	mLRSH
 = 303,

86 
	mNŸPackage
 = 304,

87 
	mNŸP¨í
 = 305,

88 
	mPª„rToRightP¨í
 = 306

92 
	#LLITERAL
 258

	)

93 
	#LASOP
 259

	)

94 
	#LBREAK
 260

	)

95 
	#LCASE
 261

	)

96 
	#LCHAN
 262

	)

97 
	#LCOLAS
 263

	)

98 
	#LCONST
 264

	)

99 
	#LCONTINUE
 265

	)

100 
	#LDDD
 266

	)

101 
	#LDEFAULT
 267

	)

102 
	#LDEFER
 268

	)

103 
	#LELSE
 269

	)

104 
	#LFALL
 270

	)

105 
	#LFOR
 271

	)

106 
	#LFUNC
 272

	)

107 
	#LGO
 273

	)

108 
	#LGOTO
 274

	)

109 
	#LIF
 275

	)

110 
	#LIMPORT
 276

	)

111 
	#LINTERFACE
 277

	)

112 
	#LMAP
 278

	)

113 
	#LNAME
 279

	)

114 
	#LPACKAGE
 280

	)

115 
	#LRANGE
 281

	)

116 
	#LRETURN
 282

	)

117 
	#LSELECT
 283

	)

118 
	#LSTRUCT
 284

	)

119 
	#LSWITCH
 285

	)

120 
	#LTYPE
 286

	)

121 
	#LVAR
 287

	)

122 
	#LANDAND
 288

	)

123 
	#LANDNOT
 289

	)

124 
	#LBODY
 290

	)

125 
	#LCOMM
 291

	)

126 
	#LDEC
 292

	)

127 
	#LEQ
 293

	)

128 
	#LGE
 294

	)

129 
	#LGT
 295

	)

130 
	#LIGNORE
 296

	)

131 
	#LINC
 297

	)

132 
	#LLE
 298

	)

133 
	#LLSH
 299

	)

134 
	#LLT
 300

	)

135 
	#LNE
 301

	)

136 
	#LOROR
 302

	)

137 
	#LRSH
 303

	)

138 
	#NŸPackage
 304

	)

139 
	#NŸP¨í
 305

	)

140 
	#Pª„rToRightP¨í
 306

	)

145 #i‡! 
deföed
 
YYSTYPE
 && ! deföed 
YYSTYPE_IS_DECLARED


146 
	uYYSTYPE


152 
Node
* 
	mnode
;

153 
NodeLi°
* 
	mli°
;

154 
Ty≥
* 
	mty≥
;

155 
Sym
* 
	msym
;

156 
VÆ
 
	mvÆ
;

157 
	mi
;

163 } 
	tYYSTYPE
;

164 
	#YYSTYPE_IS_TRIVIAL
 1

	)

165 
	#yy°y≥
 
YYSTYPE


	)

166 
	#YYSTYPE_IS_DECLARED
 1

	)

169 
YYSTYPE
 
yylvÆ
;

	@yerr.h

9 
	myy°©e
;

10 
	myych¨
;

11 *
	mmsg
;

12 } 
	gyymsg
[] = {

29 474, 
LBODY
,

47 437, 
LELSE
,

53 237, 
LVAR
,

68 112, 
LNAME
,

	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/ar.h

20 #i‚de‡
_AR_H


21 
	#_AR_H
 1

	)

23 
	~<sys/cdefs.h
>

29 
	#ARMAG
 "!<¨ch>\n"

	)

30 
	#SARMAG
 8

	)

32 
	#ARFMAG
 "`\n"

	)

34 
__BEGIN_DECLS


36 
	s¨_hdr


38 
	m¨_«me
[16];

39 
	m¨_d©e
[12];

40 
	m¨_uid
[6], 
	m¨_gid
[6];

41 
	m¨_mode
[8];

42 
	m¨_size
[10];

43 
	m¨_fmag
[2];

46 
	g__END_DECLS


	@/usr/include/errno.h

23 #i‚def 
_ERRNO_H


27 #i‚def 
__√ed_Em©h


28 
	#_ERRNO_H
 1

	)

29 
	~<„©uªs.h
>

32 
	g__BEGIN_DECLS


36 
	~<bôs/î∫o.h
>

37 #unde‡
__√ed_Em©h


39 #ifdef 
_ERRNO_H


46 #i‚def 
î∫o


47 
î∫o
;

50 #ifde‡
__USE_GNU


55 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

59 
	g__END_DECLS


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


68 #i‚de‡
__îr‹_t_deföed


69 
	tîr‹_t
;

70 
	#__îr‹_t_deföed
 1

	)

72 #unde‡
__√ed_îr‹_t


	@/usr/include/libintl.h

21 #i‚de‡
_LIBINTL_H


22 
	#_LIBINTL_H
 1

	)

24 
	~<„©uªs.h
>

28 
	#__USE_GNU_GETTEXT
 1

	)

32 
	#__GNU_GETTEXT_SUPPORTED_REVISION
(
maj‹
) \

33 ((
maj‹
Ë=0 ? 1 : -1)

	)

35 
__BEGIN_DECLS


40 *
	$gëãxt
 (
__c⁄°
 *
__msgid
)

41 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (1);

45 *
	$dgëãxt
 (
__c⁄°
 *
__domaö«me
, __c⁄° *
__msgid
)

46 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

47 *
	$__dgëãxt
 (
__c⁄°
 *
__domaö«me
, __c⁄° *
__msgid
)

48 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

52 *
	$dcgëãxt
 (
__c⁄°
 *
__domaö«me
,

53 
__c⁄°
 *
__msgid
, 
__ˇãg‹y
)

54 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

55 *
	$__dcgëãxt
 (
__c⁄°
 *
__domaö«me
,

56 
__c⁄°
 *
__msgid
, 
__ˇãg‹y
)

57 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

62 *
	$ngëãxt
 (
__c⁄°
 *
__msgid1
, __c⁄° *
__msgid2
,

63 
__n
)

64 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (1Ë
	`__©åibuã_f‹m©_¨g__
 (2);

68 *
	$dngëãxt
 (
__c⁄°
 *
__domaö«me
, __c⁄° *
__msgid1
,

69 
__c⁄°
 *
__msgid2
, 
__n
)

70 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (2Ë
	`__©åibuã_f‹m©_¨g__
 (3);

74 *
	$d˙gëãxt
 (
__c⁄°
 *
__domaö«me
, __c⁄° *
__msgid1
,

75 
__c⁄°
 *
__msgid2
, 
__n
,

76 
__ˇãg‹y
)

77 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (2Ë
	`__©åibuã_f‹m©_¨g__
 (3);

83 *
	$ãxtdomaö
 (
__c⁄°
 *
__domaö«me
Ë
__THROW
;

87 *
	$bödãxtdomaö
 (
__c⁄°
 *
__domaö«me
,

88 
__c⁄°
 *
__dú«me
Ë
__THROW
;

92 *
	$böd_ãxtdomaö_code£t
 (
__c⁄°
 *
__domaö«me
,

93 
__c⁄°
 *
__code£t
Ë
__THROW
;

97 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


100 
	#__√ed_NULL


	)

101 
	~<°ddef.h
>

104 
	~<loˇÀ.h
>

110 
	#gëãxt
(
msgid
Ë
	`dgëãxt
 (
NULL
, msgid)

	)

112 
	#dgëãxt
(
domaö«me
, 
msgid
) \

113 
	`dcgëãxt
 (
domaö«me
, 
msgid
, 
LC_MESSAGES
)

	)

115 
	#ngëãxt
(
msgid1
, 
msgid2
, 
n
Ë
	`dngëãxt
 (
NULL
, msgid1, msgid2,Ç)

	)

117 
	#dngëãxt
(
domaö«me
, 
msgid1
, 
msgid2
, 
n
) \

118 
	`d˙gëãxt
 (
domaö«me
, 
msgid1
, 
msgid2
, 
n
, 
LC_MESSAGES
)

	)

122 
__END_DECLS


	@/usr/include/malloc.h

21 #i‚de‡
_MALLOC_H


22 
	#_MALLOC_H
 1

	)

24 
	~<„©uªs.h
>

25 
	~<°ddef.h
>

26 
	~<°dio.h
>

27 
	#__mÆloc_±r_t
 *

	)

30 
	#__mÆloc_size_t
 
size_t


	)

31 
	#__mÆloc_±rdiff_t
 
±rdiff_t


	)

33 #ifde‡
__GNUC__


35 
	#__MALLOC_P
(
¨gs
Ë¨g†
__THROW


	)

38 
	#__MALLOC_PMT
(
¨gs
Ë
	)
args

42 
	#__MALLOC_P
(
¨gs
Ë
	)
args

43 
	#__MALLOC_PMT
(
¨gs
Ë
	)
args

48 
__BEGIN_DECLS


51 *
mÆloc
 
__MALLOC_P
 ((
size_t
 
__size
)Ë
__©åibuã_mÆloc__
 
__wur
;

54 *
ˇŒoc
 
__MALLOC_P
 ((
size_t
 
__nmemb
, size_à
__size
))

55 
__©åibuã_mÆloc__
 
__wur
;

62 *
ªÆloc
 
__MALLOC_P
 ((*
__±r
, 
size_t
 
__size
))

63 
__©åibuã_w¨n_unu£d_ªsu…__
;

66 
‰ì
 
__MALLOC_P
 ((*
__±r
));

69 
c‰ì
 
__MALLOC_P
 ((*
__±r
));

72 *
memÆign
 
__MALLOC_P
 ((
size_t
 
__Æignmít
, size_à
__size
))

73 
__©åibuã_mÆloc__
 
__wur
;

76 *
vÆloc
 
__MALLOC_P
 ((
size_t
 
__size
))

77 
__©åibuã_mÆloc__
 
__wur
;

81 * 
pvÆloc
 
__MALLOC_P
 ((
size_t
 
__size
))

82 
__©åibuã_mÆloc__
 
__wur
;

86 *(*
__m‹ec‹e
Ë
__MALLOC_PMT
 ((
±rdiff_t
 
__size
));

89 *
__deÁu…_m‹ec‹e
 
__MALLOC_P
 ((
±rdiff_t
 
__size
))

90 
__©åibuã_mÆloc__
;

94 
	smÆlöfo
 {

95 
	m¨ía
;

96 
	m‹dblks
;

97 
	msmblks
;

98 
	mhblks
;

99 
	mhblkhd
;

100 
	musmblks
;

101 
	mfsmblks
;

102 
	mu‹dblks
;

103 
	mf‹dblks
;

104 
	mkìpco°
;

108 
mÆlöfo
 mÆlöfÿ
__MALLOC_P
 (());

111 #i‚de‡
M_MXFAST


112 
	#M_MXFAST
 1

	)

114 #i‚de‡
M_NLBLKS


115 
	#M_NLBLKS
 2

	)

117 #i‚de‡
M_GRAIN


118 
	#M_GRAIN
 3

	)

120 #i‚de‡
M_KEEP


121 
	#M_KEEP
 4

	)

125 
	#M_TRIM_THRESHOLD
 -1

	)

126 
	#M_TOP_PAD
 -2

	)

127 
	#M_MMAP_THRESHOLD
 -3

	)

128 
	#M_MMAP_MAX
 -4

	)

129 
	#M_CHECK_ACTION
 -5

	)

130 
	#M_PERTURB
 -6

	)

131 
	#M_ARENA_TEST
 -7

	)

132 
	#M_ARENA_MAX
 -8

	)

135 
mÆl›t
 
__MALLOC_P
 ((
__∑øm
, 
__vÆ
));

139 
mÆloc_åim
 
__MALLOC_P
 ((
size_t
 
__∑d
));

143 
size_t
 
mÆloc_ußbÀ_size
 
__MALLOC_P
 ((*
__±r
));

146 
mÆloc_°©s
 
__MALLOC_P
 (());

149 
mÆloc_öfo
 (
__›ti⁄s
, 
FILE
 *
__Â
);

152 *
mÆloc_gë_°©e
 
__MALLOC_P
 (());

156 
mÆloc_£t_°©e
 
__MALLOC_P
 ((*
__±r
));

161 (*
__mÆloc_öôülize_hook
Ë
	`__MALLOC_PMT
 (());

163 (*
__‰ì_hook
Ë
	`__MALLOC_PMT
 ((*
__±r
,

164 
__c⁄°
 
__mÆloc_±r_t
));

165 *(*
__mÆloc_hook
Ë
	`__MALLOC_PMT
 ((
size_t
 
__size
,

166 
__c⁄°
 
__mÆloc_±r_t
));

167 *(*
__ªÆloc_hook
Ë
	`__MALLOC_PMT
 ((*
__±r
, 
size_t
 
__size
,

168 
__c⁄°
 
__mÆloc_±r_t
));

169 *(*
__memÆign_hook
Ë
	`__MALLOC_PMT
 ((
size_t
 
__Æignmít
,

170 
size_t
 
__size
,

171 
__c⁄°
 
__mÆloc_±r_t
));

172 (*
__a·î_m‹ec‹e_hook
Ë
	`__MALLOC_PMT
 (());

175 
__mÆloc_check_öô
 
	`__MALLOC_P
 (());

178 
__END_DECLS


	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

88 #ifde‡
__USE_XOPEN2K8


89 #i‚de‡
__off_t_deföed


90 #i‚de‡
__USE_FILE_OFFSET64


91 
__off_t
 
	toff_t
;

93 
__off64_t
 
	toff_t
;

95 
	#__off_t_deföed


	)

97 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


98 
__off64_t
 
	toff64_t
;

99 
	#__off64_t_deföed


	)

102 #i‚de‡
__ssize_t_deföed


103 
__ssize_t
 
	tssize_t
;

104 
	#__ssize_t_deföed


	)

109 
__BEGIN_NAMESPACE_STD


110 #i‚de‡
__USE_FILE_OFFSET64


111 
_G_Âos_t
 
	tÂos_t
;

113 
_G_Âos64_t
 
	tÂos_t
;

115 
__END_NAMESPACE_STD


116 #ifde‡
__USE_LARGEFILE64


117 
_G_Âos64_t
 
	tÂos64_t
;

121 
	#_IOFBF
 0

	)

122 
	#_IOLBF
 1

	)

123 
	#_IONBF
 2

	)

127 #i‚de‡
BUFSIZ


128 
	#BUFSIZ
 
_IO_BUFSIZ


	)

134 #i‚de‡
EOF


135 
	#EOF
 (-1)

	)

141 
	#SEEK_SET
 0

	)

142 
	#SEEK_CUR
 1

	)

143 
	#SEEK_END
 2

	)

146 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


148 
	#P_tmpdú
 "/tmp"

	)

161 
	~<bôs/°dio_lim.h
>

165 
_IO_FILE
 *
°dö
;

166 
_IO_FILE
 *
°dout
;

167 
_IO_FILE
 *
°dîr
;

168 #ifde‡
__STDC__


170 
	#°dö
 
°dö


	)

171 
	#°dout
 
°dout


	)

172 
	#°dîr
 
°dîr


	)

175 
__BEGIN_NAMESPACE_STD


177 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

179 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

180 
__END_NAMESPACE_STD


182 #ifde‡
__USE_ATFILE


184 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

185 
__c⁄°
 *
__√w
Ë
__THROW
;

188 
__BEGIN_NAMESPACE_STD


193 #i‚de‡
__USE_FILE_OFFSET64


194 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

196 #ifde‡
__REDIRECT


197 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

199 
	#tmpfûe
 
tmpfûe64


	)

203 #ifde‡
__USE_LARGEFILE64


204 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

208 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

209 
__END_NAMESPACE_STD


211 #ifde‡
__USE_MISC


214 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

218 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


226 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

227 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

231 
__BEGIN_NAMESPACE_STD


236 
	`f˛o£
 (
FILE
 *
__°ªam
);

241 
	`fÊush
 (
FILE
 *
__°ªam
);

242 
__END_NAMESPACE_STD


244 #ifde‡
__USE_MISC


251 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

254 #ifde‡
__USE_GNU


261 
	`f˛o£Æl
 ();

265 
__BEGIN_NAMESPACE_STD


266 #i‚de‡
__USE_FILE_OFFSET64


271 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

272 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

277 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

278 
__c⁄°
 *
__ª°ri˘
 
__modes
,

279 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

281 #ifde‡
__REDIRECT


282 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

283 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

284 
__wur
;

285 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

286 
__c⁄°
 *
__ª°ri˘
 
__modes
,

287 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

288 
__wur
;

290 
	#f›í
 
f›í64


	)

291 
	#‰e›í
 
‰e›í64


	)

294 
__END_NAMESPACE_STD


295 #ifde‡
__USE_LARGEFILE64


296 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

297 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

298 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

299 
__c⁄°
 *
__ª°ri˘
 
__modes
,

300 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

303 #ifdef 
__USE_POSIX


305 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

308 #ifdef 
__USE_GNU


311 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

312 
__c⁄°
 *
__ª°ri˘
 
__modes
,

313 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

316 #ifde‡
__USE_XOPEN2K8


318 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

319 
__THROW
 
__wur
;

324 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

328 
__BEGIN_NAMESPACE_STD


331 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

335 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

336 
__modes
, 
size_t
 
__n
Ë
__THROW
;

337 
__END_NAMESPACE_STD


339 #ifdef 
__USE_BSD


342 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

343 
size_t
 
__size
Ë
__THROW
;

346 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

350 
__BEGIN_NAMESPACE_STD


355 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

356 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

361 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

363 
	$•rötf
 (*
__ª°ri˘
 
__s
,

364 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

370 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

371 
_G_va_li°
 
__¨g
);

376 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

378 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

379 
_G_va_li°
 
__¨g
Ë
__THROW
;

380 
__END_NAMESPACE_STD


382 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


383 
__BEGIN_NAMESPACE_C99


385 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

386 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

387 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

389 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

390 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

391 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

392 
__END_NAMESPACE_C99


395 #ifde‡
__USE_GNU


398 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

399 
_G_va_li°
 
__¨g
)

400 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

401 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

402 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

403 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

404 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

405 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

406 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

409 #ifde‡
__USE_XOPEN2K8


416 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

417 
_G_va_li°
 
__¨g
)

418 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

419 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

420 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

424 
__BEGIN_NAMESPACE_STD


429 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

430 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

435 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

437 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

438 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

440 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

441 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

442 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

443 #ifde‡
__REDIRECT


447 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

448 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

449 
__isoc99_fsˇnf
Ë
__wur
;

450 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

451 
__isoc99_sˇnf
Ë
__wur
;

452 
	`__REDIRECT
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

453 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

454 
__isoc99_ssˇnf
Ë
__THROW
;

456 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

457 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

458 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

459 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

460 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

461 
	#fsˇnf
 
__isoc99_fsˇnf


	)

462 
	#sˇnf
 
__isoc99_sˇnf


	)

463 
	#ssˇnf
 
__isoc99_ssˇnf


	)

467 
__END_NAMESPACE_STD


469 #ifdef 
__USE_ISOC99


470 
__BEGIN_NAMESPACE_C99


475 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

476 
_G_va_li°
 
__¨g
)

477 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

483 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

484 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

487 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

488 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

489 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

491 #i‡!
deföed
 
__USE_GNU
 \

492 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

493 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

494 #ifde‡
__REDIRECT


498 
	`__REDIRECT
 (
vfsˇnf
,

499 (
FILE
 *
__ª°ri˘
 
__s
,

500 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

501 
__isoc99_vfsˇnf
)

502 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

503 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

504 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

505 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

506 
	`__REDIRECT
 (
vssˇnf
,

507 (
__c⁄°
 *
__ª°ri˘
 
__s
,

508 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

509 
__isoc99_vssˇnf
)

510 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

512 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

513 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

514 
_G_va_li°
 
__¨g
Ë
__wur
;

515 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

516 
_G_va_li°
 
__¨g
Ë
__wur
;

517 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

518 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

519 
_G_va_li°
 
__¨g
Ë
__THROW
;

520 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

521 
	#vsˇnf
 
__isoc99_vsˇnf


	)

522 
	#vssˇnf
 
__isoc99_vssˇnf


	)

526 
__END_NAMESPACE_C99


530 
__BEGIN_NAMESPACE_STD


535 
	`fgëc
 (
FILE
 *
__°ªam
);

536 
	`gëc
 (
FILE
 *
__°ªam
);

542 
	`gëch¨
 ();

543 
__END_NAMESPACE_STD


547 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

549 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


554 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

555 
	`gëch¨_u∆ocked
 ();

558 #ifde‡
__USE_MISC


565 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

569 
__BEGIN_NAMESPACE_STD


577 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

578 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

584 
	`putch¨
 (
__c
);

585 
__END_NAMESPACE_STD


589 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

591 #ifde‡
__USE_MISC


598 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

601 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


606 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

607 
	`putch¨_u∆ocked
 (
__c
);

611 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

612 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

614 
	`gëw
 (
FILE
 *
__°ªam
);

617 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

621 
__BEGIN_NAMESPACE_STD


626 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

627 
__wur
;

634 *
	$gës
 (*
__s
Ë
__wur
;

635 
__END_NAMESPACE_STD


637 #ifde‡
__USE_GNU


644 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

645 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

649 #ifdef 
__USE_XOPEN2K8


660 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

661 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

662 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

663 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

664 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

665 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

673 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

674 
size_t
 *
__ª°ri˘
 
__n
,

675 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

679 
__BEGIN_NAMESPACE_STD


684 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

690 
	`puts
 (
__c⁄°
 *
__s
);

697 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

704 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

705 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

710 
size_t
 
	$fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

711 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
Ë
__wur
;

712 
__END_NAMESPACE_STD


714 #ifde‡
__USE_GNU


721 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

722 
FILE
 *
__ª°ri˘
 
__°ªam
);

725 #ifde‡
__USE_MISC


732 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

733 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

734 
size_t
 
	$fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

735 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
__BEGIN_NAMESPACE_STD


744 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

749 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

754 
	`ªwöd
 (
FILE
 *
__°ªam
);

755 
__END_NAMESPACE_STD


762 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


763 #i‚de‡
__USE_FILE_OFFSET64


768 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

773 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

775 #ifde‡
__REDIRECT


776 
	`__REDIRECT
 (
f£eko
,

777 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

778 
f£eko64
);

779 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

781 
	#f£eko
 
f£eko64


	)

782 
	#·ñlo
 
·ñlo64


	)

787 
__BEGIN_NAMESPACE_STD


788 #i‚de‡
__USE_FILE_OFFSET64


793 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

798 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

800 #ifde‡
__REDIRECT


801 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

802 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

803 
	`__REDIRECT
 (
f£ços
,

804 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

806 
	#fgëpos
 
fgëpos64


	)

807 
	#f£ços
 
f£ços64


	)

810 
__END_NAMESPACE_STD


812 #ifde‡
__USE_LARGEFILE64


813 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

814 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

815 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

816 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

819 
__BEGIN_NAMESPACE_STD


821 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

823 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

825 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

826 
__END_NAMESPACE_STD


828 #ifde‡
__USE_MISC


830 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

831 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

832 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

836 
__BEGIN_NAMESPACE_STD


841 
	`≥º‹
 (
__c⁄°
 *
__s
);

842 
__END_NAMESPACE_STD


848 
	~<bôs/sys_îæi°.h
>

851 #ifdef 
__USE_POSIX


853 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

856 #ifde‡
__USE_MISC


858 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

862 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

863 
deföed
 
__USE_MISC
)

868 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

874 
	`p˛o£
 (
FILE
 *
__°ªam
);

878 #ifdef 
__USE_POSIX


880 *
	$˘îmid
 (*
__s
Ë
__THROW
;

884 #ifde‡
__USE_XOPEN


886 *
	`cu£rid
 (*
__s
);

890 #ifdef 
__USE_GNU


891 
ob°ack
;

894 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

895 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

896 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

897 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

898 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

899 
_G_va_li°
 
__¨gs
)

900 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

904 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


908 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

912 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

915 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

918 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


922 
	#__√ed_gë›t


	)

923 
	~<gë›t.h
>

928 #ifde‡
__USE_EXTERN_INLINES


929 
	~<bôs/°dio.h
>

931 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


932 
	~<bôs/°dio2.h
>

934 #ifde‡
__LDBL_COMPAT


935 
	~<bôs/°dio-ldbl.h
>

938 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

53 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

501 || 
deföed
 
__USE_BSD


503 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

506 #ifde‡
__USE_XOPEN2K


508 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

509 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

512 
__BEGIN_NAMESPACE_STD


514 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

518 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

520 #ifde‡
__USE_GNU


524 #ifde‡
__˝lu•lus


525 "C++" 
	`©_quick_exô
 ((*
__func
) ())

526 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

528 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

531 
__END_NAMESPACE_STD


533 #ifdef 
__USE_MISC


536 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

537 
__THROW
 
	`__n⁄nuŒ
 ((1));

540 
__BEGIN_NAMESPACE_STD


544 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

546 #ifde‡
__USE_GNU


552 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

554 
__END_NAMESPACE_STD


556 #ifde‡
__USE_ISOC99


557 
__BEGIN_NAMESPACE_C99


560 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

561 
__END_NAMESPACE_C99


565 
__BEGIN_NAMESPACE_STD


567 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

568 
__END_NAMESPACE_STD


572 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

573 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

575 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


579 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

582 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


585 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

586 
__THROW
 
	`__n⁄nuŒ
 ((2));

589 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

592 #ifdef 
__USE_MISC


596 
	$˛óªnv
 (Ë
__THROW
;

600 #i‡
deföed
 
__USE_MISC
 \

601 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

761 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

762 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

763 #ifde‡
__USE_GNU


764 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

766 
	`__n⁄nuŒ
 ((1, 4));

771 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

772 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

773 
__END_NAMESPACE_STD


775 #ifde‡
__USE_ISOC99


776 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

777 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

781 
__BEGIN_NAMESPACE_STD


785 
div_t
 
	$div
 (
__numî
, 
__díom
)

786 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

787 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

788 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

789 
__END_NAMESPACE_STD


791 #ifde‡
__USE_ISOC99


792 
__BEGIN_NAMESPACE_C99


793 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

794 
__díom
)

795 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

796 
__END_NAMESPACE_C99


800 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

801 || 
deföed
 
__USE_SVID


808 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

809 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

814 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

815 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

820 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

821 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

824 #ifde‡
__USE_MISC


826 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

827 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

828 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

829 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

833 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

838 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

839 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

840 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

841 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

846 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

847 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

848 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

857 
__BEGIN_NAMESPACE_STD


860 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

863 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

864 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

867 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

871 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

872 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

874 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

875 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

876 
__THROW
;

877 
__END_NAMESPACE_STD


880 #ifde‡
__USE_SVID


885 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

889 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


896 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

897 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

898 **
__ª°ri˘
 
__vÆuï
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

903 #ifde‡
__USE_XOPEN


905 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

911 #ifde‡
__USE_XOPEN2KXSI


913 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

916 #ifde‡
__USE_XOPEN


921 
	$gø¡±
 (
__fd
Ë
__THROW
;

925 
	$u∆ock±
 (
__fd
Ë
__THROW
;

930 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

933 #ifde‡
__USE_GNU


937 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

938 
__THROW
 
	`__n⁄nuŒ
 ((2));

941 
	`gë±
 ();

944 #ifde‡
__USE_BSD


948 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

949 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


955 
	~<bôs/°dlib.h
>

957 #ifde‡
__LDBL_COMPAT


958 
	~<bôs/°dlib-ldbl.h
>

962 #unde‡
__√ed_mÆloc_™d_ˇŒoc


964 
__END_DECLS


	@/usr/include/string.h

24 #i‚def 
_STRING_H


25 
	#_STRING_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 
__BEGIN_NAMESPACE_STD


44 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

45 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

46 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

50 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

51 
__END_NAMESPACE_STD


56 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


57 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

58 
__c
, 
size_t
 
__n
)

59 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

63 
__BEGIN_NAMESPACE_STD


65 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

68 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

72 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


75 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

76 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

80 #ifde‡
__OPTIMIZE__


81 
__exã∫_Æways_ölöe
 *

82 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


84  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

87 
__exã∫_Æways_ölöe
 
__c⁄°
 *

88 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


90  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

93 
	}
}

95 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

96 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

98 
__END_NAMESPACE_STD


100 #ifde‡
__USE_GNU


103 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


104 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

105 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

107 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

110 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

126 
__BEGIN_NAMESPACE_STD


128 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

131 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

132 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

133 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

139 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

140 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

147 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

153 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

154 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

155 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
__END_NAMESPACE_STD


158 #ifde‡
__USE_XOPEN2K8


162 
	~<xloˇÀ.h
>

165 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

166 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

168 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

169 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

172 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

173 || 
deföed
 
__USE_XOPEN2K8


175 *
	$°rdup
 (
__c⁄°
 *
__s
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

182 #i‡
deföed
 
__USE_XOPEN2K8


183 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

184 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

187 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


189 
	#°rdu∑
(
s
) \

190 (
__exãnsi⁄__
 \

192 
__c⁄°
 *
__ﬁd
 = (
s
); \

193 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

194 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

195 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

196 
	}
}))

	)

199 
	#°∫du∑
(
s
, 
n
) \

200 (
__exãnsi⁄__
 \

202 
__c⁄°
 *
__ﬁd
 = (
s
); \

203 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

204 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

205 
__√w
[
__Àn
] = '\0'; \

206 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

207 }))

	)

210 
	g__BEGIN_NAMESPACE_STD


212 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


215 *
°rchr
 (*
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

218 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

220 #ifde‡
__OPTIMIZE__


221 
__exã∫_Æways_ölöe
 *

222 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


224  
__buûtö_°rchr
 (
__s
, 
__c
);

227 
__exã∫_Æways_ölöe
 
__c⁄°
 *

228 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


230  
__buûtö_°rchr
 (
__s
, 
__c
);

235 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

236 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

239 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


242 *
	`°ºchr
 (*
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

245 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__OPTIMIZE__


248 
__exã∫_Æways_ölöe
 *

249 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


251  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

254 
__exã∫_Æways_ölöe
 
__c⁄°
 *

255 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


257  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

260 
	}
}

262 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

263 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_GNU


270 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


271 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

274 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

276 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

281 
__BEGIN_NAMESPACE_STD


284 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

289 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

291 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


294 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

297 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

299 #ifde‡
__OPTIMIZE__


300 
__exã∫_Æways_ölöe
 *

301 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


303  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

306 
__exã∫_Æways_ölöe
 
__c⁄°
 *

307 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


309  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

312 
	}
}

314 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

318 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


321 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

322 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

324 
__c⁄°
 *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 
__c⁄°
 *

335 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

370 
__c⁄°
 *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 
__c⁄°
 *

482 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 
__c⁄°
 *

510 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 #ifde‡
__GNUC__


530 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

531 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

536 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

541 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

544 #ifdef 
__USE_GNU


547 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

548 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

551 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

552 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

556 #ifdef 
__USE_BSD


559 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

560 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 #ifdef 
__USE_XOPEN2K8


566 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

569 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

577 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

580 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifdef 
__USE_GNU


586 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

587 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

590 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

595 #i‚de‡
ba£«me


600 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


601 "C++" *
	$ba£«me
 (*
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

603 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

604 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

606 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

612 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

613 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

614 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


634 
	~<bôs/°rög.h
>

637 
	~<bôs/°rög2.h
>

640 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


642 
	~<bôs/°rög3.h
>

646 
__END_DECLS


	@/usr/include/unistd.h

23 #i‚def 
_UNISTD_H


24 
	#_UNISTD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


33 #ifde‡
__USE_XOPEN2K8


35 
	#_POSIX_VERSION
 200809L

	)

36 #ñi‡
deföed
 
__USE_XOPEN2K


38 
	#_POSIX_VERSION
 200112L

	)

39 #ñi‡
deföed
 
__USE_POSIX199506


41 
	#_POSIX_VERSION
 199506L

	)

42 #ñi‡
deföed
 
__USE_POSIX199309


44 
	#_POSIX_VERSION
 199309L

	)

47 
	#_POSIX_VERSION
 199009L

	)

53 #ifde‡
__USE_XOPEN2K8


54 
	#__POSIX2_THIS_VERSION
 200809L

	)

56 #ñi‡
deföed
 
__USE_XOPEN2K


58 
	#__POSIX2_THIS_VERSION
 200112L

	)

59 #ñi‡
deföed
 
__USE_POSIX199506


61 
	#__POSIX2_THIS_VERSION
 199506L

	)

64 
	#__POSIX2_THIS_VERSION
 199209L

	)

68 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

72 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

76 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

80 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

84 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

87 #ifde‡
__USE_XOPEN2K8


88 
	#_XOPEN_VERSION
 700

	)

89 #ñi‡
deföed
 
__USE_XOPEN2K


90 
	#_XOPEN_VERSION
 600

	)

91 #ñi‡
deföed
 
__USE_UNIX98


92 
	#_XOPEN_VERSION
 500

	)

94 
	#_XOPEN_VERSION
 4

	)

98 
	#_XOPEN_XCU_VERSION
 4

	)

101 
	#_XOPEN_XPG2
 1

	)

102 
	#_XOPEN_XPG3
 1

	)

103 
	#_XOPEN_XPG4
 1

	)

106 
	#_XOPEN_UNIX
 1

	)

109 
	#_XOPEN_CRYPT
 1

	)

113 
	#_XOPEN_ENH_I18N
 1

	)

116 
	#_XOPEN_LEGACY
 1

	)

203 
	~<bôs/posix_›t.h
>

206 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


207 
	~<bôs/ívú⁄míts.h
>

211 
	#STDIN_FILENO
 0

	)

212 
	#STDOUT_FILENO
 1

	)

213 
	#STDERR_FILENO
 2

	)

218 
	~<bôs/ty≥s.h
>

220 #i‚def 
__ssize_t_deföed


221 
__ssize_t
 
	tssize_t
;

222 
	#__ssize_t_deföed


	)

225 
	#__√ed_size_t


	)

226 
	#__√ed_NULL


	)

227 
	~<°ddef.h
>

229 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


232 #i‚de‡
__gid_t_deföed


233 
__gid_t
 
	tgid_t
;

234 
	#__gid_t_deföed


	)

237 #i‚de‡
__uid_t_deföed


238 
__uid_t
 
	tuid_t
;

239 
	#__uid_t_deföed


	)

242 #i‚de‡
__off_t_deföed


243 #i‚de‡
__USE_FILE_OFFSET64


244 
__off_t
 
	toff_t
;

246 
__off64_t
 
	toff_t
;

248 
	#__off_t_deföed


	)

250 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


251 
__off64_t
 
	toff64_t
;

252 
	#__off64_t_deföed


	)

255 #i‚de‡
__u£c⁄ds_t_deföed


256 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

257 
	#__u£c⁄ds_t_deföed


	)

260 #i‚de‡
__pid_t_deföed


261 
__pid_t
 
	tpid_t
;

262 
	#__pid_t_deföed


	)

266 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


267 #i‚de‡
__öçå_t_deföed


268 
__öçå_t
 
	töçå_t
;

269 
	#__öçå_t_deföed


	)

273 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


274 #i‚de‡
__sockÀn_t_deföed


275 
__sockÀn_t
 
	tsockÀn_t
;

276 
	#__sockÀn_t_deföed


	)

282 
	#R_OK
 4

	)

283 
	#W_OK
 2

	)

284 
	#X_OK
 1

	)

285 
	#F_OK
 0

	)

288 
	$ac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 #ifde‡
__USE_GNU


293 
	$euidac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

297 
	$óc˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1));

301 #ifde‡
__USE_ATFILE


305 
	$Ác˚sßt
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__ty≥
, 
__Êag
)

306 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

311 #i‚def 
_STDIO_H


312 
	#SEEK_SET
 0

	)

313 
	#SEEK_CUR
 1

	)

314 
	#SEEK_END
 2

	)

317 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


319 
	#L_SET
 
SEEK_SET


	)

320 
	#L_INCR
 
SEEK_CUR


	)

321 
	#L_XTND
 
SEEK_END


	)

330 #i‚de‡
__USE_FILE_OFFSET64


331 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

333 #ifde‡
__REDIRECT_NTH


334 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

335 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

336 
l£ek64
);

338 
	#l£ek
 
l£ek64


	)

341 #ifde‡
__USE_LARGEFILE64


342 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

343 
__THROW
;

350 
	`˛o£
 (
__fd
);

357 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

363 
ssize_t
 
	$wrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
Ë
__wur
;

365 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


366 #i‚de‡
__USE_FILE_OFFSET64


373 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

374 
__off_t
 
__off£t
Ë
__wur
;

381 
ssize_t
 
	$pwrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

382 
__off_t
 
__off£t
Ë
__wur
;

384 #ifde‡
__REDIRECT


385 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

386 
__off64_t
 
__off£t
),

387 
¥ód64
Ë
__wur
;

388 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, 
__c⁄°
 *
__buf
,

389 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

390 
pwrôe64
Ë
__wur
;

392 
	#¥ód
 
¥ód64


	)

393 
	#pwrôe
 
pwrôe64


	)

397 #ifde‡
__USE_LARGEFILE64


401 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

402 
__off64_t
 
__off£t
Ë
__wur
;

405 
ssize_t
 
	$pwrôe64
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

406 
__off64_t
 
__off£t
Ë
__wur
;

414 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

416 #ifde‡
__USE_GNU


419 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

429 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

441 
	`¶ìp
 (
__£c⁄ds
);

443 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

444 || 
deföed
 
__USE_BSD


449 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

450 
__THROW
;

457 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

466 
	`∑u£
 ();

470 
	$chown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

471 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

473 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


475 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

480 
	$lchown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

481 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

485 #ifde‡
__USE_ATFILE


488 
	$fchow«t
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
,

489 
__gid_t
 
__group
, 
__Êag
)

490 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

494 
	$chdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

496 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


498 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

508 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

510 #ifdef 
__USE_GNU


514 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

517 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

518 || 
deföed
 
__USE_BSD


522 *
	$gëwd
 (*
__buf
)

523 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

528 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

531 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

533 #ifde‡
__USE_GNU


536 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

540 **
__ívú⁄
;

541 #ifde‡
__USE_GNU


542 **
ívú⁄
;

548 
	$execve
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[],

549 *
__c⁄°
 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

551 #ifde‡
__USE_XOPEN2K8


554 
	$„xecve
 (
__fd
, *
__c⁄°
 
__¨gv
[], *__c⁄° 
__ívp
[])

555 
__THROW
 
	`__n⁄nuŒ
 ((2));

560 
	$execv
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

565 
	$exe˛e
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

566 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

570 
	$exe˛
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

571 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

575 
	$execvp
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[])

576 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$exe˛p
 (
__c⁄°
 *
__fûe
, __c⁄° *
__¨g
, ...)

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifde‡
__USE_GNU


587 
	$execv≥
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[],

588 *
__c⁄°
 
__ívp
[])

589 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

593 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


595 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

600 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

606 
	~<bôs/c⁄‚ame.h
>

609 
	$∑thc⁄f
 (
__c⁄°
 *
__∑th
, 
__«me
)

610 
__THROW
 
	`__n⁄nuŒ
 ((1));

613 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

616 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

618 #ifdef 
__USE_POSIX2


620 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

625 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

628 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

632 #i‚de‡
__FAVOR_BSD


633 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

635 #ifde‡
__REDIRECT_NTH


636 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

638 
	#gëpgΩ
 
__gëpgid


	)

643 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

644 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


645 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

652 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

654 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


665 #i‚de‡
__FAVOR_BSD


669 
	$£çgΩ
 (Ë
__THROW
;

674 #ifde‡
__REDIRECT_NTH


675 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

677 
	#£çgΩ
 
£çgid


	)

686 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

688 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


690 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

694 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

697 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

700 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

703 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

708 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

710 #ifdef 
__USE_GNU


712 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

719 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
;

721 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


724 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
;

727 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


729 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
;

736 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
;

738 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


741 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
;

744 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


746 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
;

749 #ifde‡
__USE_GNU


752 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

753 
__THROW
;

757 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

758 
__THROW
;

762 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

763 
__THROW
;

767 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

768 
__THROW
;

775 
__pid_t
 
	$f‹k
 (Ë
__THROW
;

777 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

778 || 
deföed
 
__USE_BSD


783 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

789 *
	$ây«me
 (
__fd
Ë
__THROW
;

793 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

794 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

798 
	$ißây
 (
__fd
Ë
__THROW
;

800 #i‡
deföed
 
__USE_BSD
 \

801 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

804 
	$ây¶Ÿ
 (Ë
__THROW
;

809 
	$lök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

810 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

812 #ifde‡
__USE_ATFILE


815 
	$lök©
 (
__‰omfd
, 
__c⁄°
 *
__‰om
, 
__tofd
,

816 
__c⁄°
 *
__to
, 
__Êags
)

817 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

820 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


822 
	$symlök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

823 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

828 
ssize_t
 
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

829 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

830 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

833 #ifde‡
__USE_ATFILE


835 
	$symlök©
 (
__c⁄°
 *
__‰om
, 
__tofd
,

836 
__c⁄°
 *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

839 
ssize_t
 
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

840 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

841 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

845 
	$u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

847 #ifde‡
__USE_ATFILE


849 
	$u∆ök©
 (
__fd
, 
__c⁄°
 *
__«me
, 
__Êag
)

850 
__THROW
 
	`__n⁄nuŒ
 ((2));

854 
	$rmdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

858 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

861 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

868 *
	`gëlogö
 ();

869 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


876 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

879 #ifdef 
__USE_BSD


881 
	$£éogö
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

885 #ifdef 
__USE_POSIX2


889 
	#__√ed_gë›t


	)

890 
	~<gë›t.h
>

894 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


898 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

902 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

905 
	$£tho°«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

906 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

910 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

916 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

917 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

918 
	$£tdomaö«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

925 
	$vh™gup
 (Ë
__THROW
;

928 
	$ªvoke
 (
__c⁄°
 *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

936 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

937 
size_t
 
__off£t
, 
__sˇÀ
)

938 
__THROW
 
	`__n⁄nuŒ
 ((1));

944 
	$ac˘
 (
__c⁄°
 *
__«me
Ë
__THROW
;

948 *
	$gëu£rshñl
 (Ë
__THROW
;

949 
	$ídu£rshñl
 (Ë
__THROW
;

950 
	$£tu£rshñl
 (Ë
__THROW
;

956 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

960 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

963 
	$chroŸ
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

967 *
	$gë∑ss
 (
__c⁄°
 *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

971 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


976 
	`fsync
 (
__fd
);

980 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


983 
	`gëho°id
 ();

986 
	$sync
 (Ë
__THROW
;

989 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


992 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

997 
	$gëdèbÀsize
 (Ë
__THROW
;

1003 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1006 #i‚de‡
__USE_FILE_OFFSET64


1007 
	$åunˇã
 (
__c⁄°
 *
__fûe
, 
__off_t
 
__Àngth
)

1008 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1010 #ifde‡
__REDIRECT_NTH


1011 
	`__REDIRECT_NTH
 (
åunˇã
,

1012 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
),

1013 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1015 
	#åunˇã
 
åunˇã64


	)

1018 #ifde‡
__USE_LARGEFILE64


1019 
	$åunˇã64
 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
)

1020 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1025 #i‚de‡
__USE_FILE_OFFSET64


1026 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1028 #ifde‡
__REDIRECT_NTH


1029 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1030 
·runˇã64
Ë
__wur
;

1032 
	#·runˇã
 
·runˇã64


	)

1035 #ifde‡
__USE_LARGEFILE64


1036 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1042 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1043 || 
deföed
 
__USE_MISC


1047 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1053 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1057 #ifde‡
__USE_MISC


1068 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1073 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1085 
	#F_ULOCK
 0

	)

1086 
	#F_LOCK
 1

	)

1087 
	#F_TLOCK
 2

	)

1088 
	#F_TEST
 3

	)

1090 #i‚de‡
__USE_FILE_OFFSET64


1091 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1093 #ifde‡
__REDIRECT


1094 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1095 
lockf64
Ë
__wur
;

1097 
	#lockf
 
lockf64


	)

1100 #ifde‡
__USE_LARGEFILE64


1101 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1106 #ifde‡
__USE_GNU


1111 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1112 (
__exãnsi⁄__
 \

1113 ({ 
__ªsu…
; \

1114 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1115 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1116 
__ªsu…
; 
	}
}))

	)

1119 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1122 
fd©async
 (
__fûdes
);

1128 #ifdef 
__USE_XOPEN


1130 *
	$¸y±
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
)

1131 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1135 
	$í¸y±
 (*
__block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1142 
	$swab
 (
__c⁄°
 *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1143 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1149 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


1151 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1156 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


1157 
	~<bôs/uni°d.h
>

1160 
__END_DECLS


	@/usr/include/bits/confname.h

21 #i‚de‡
_UNISTD_H


28 
	m_PC_LINK_MAX
,

29 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

30 
	m_PC_MAX_CANON
,

31 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

32 
	m_PC_MAX_INPUT
,

33 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

34 
	m_PC_NAME_MAX
,

35 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

36 
	m_PC_PATH_MAX
,

37 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

38 
	m_PC_PIPE_BUF
,

39 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

40 
	m_PC_CHOWN_RESTRICTED
,

41 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

42 
	m_PC_NO_TRUNC
,

43 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

44 
	m_PC_VDISABLE
,

45 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

46 
	m_PC_SYNC_IO
,

47 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

48 
	m_PC_ASYNC_IO
,

49 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

50 
	m_PC_PRIO_IO
,

51 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

52 
	m_PC_SOCK_MAXBUF
,

53 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

54 
	m_PC_FILESIZEBITS
,

55 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

56 
	m_PC_REC_INCR_XFER_SIZE
,

57 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

58 
	m_PC_REC_MAX_XFER_SIZE
,

59 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

60 
	m_PC_REC_MIN_XFER_SIZE
,

61 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

62 
	m_PC_REC_XFER_ALIGN
,

63 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

64 
	m_PC_ALLOC_SIZE_MIN
,

65 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

66 
	m_PC_SYMLINK_MAX
,

67 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

68 
	m_PC_2_SYMLINKS


69 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

75 
	m_SC_ARG_MAX
,

76 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

77 
	m_SC_CHILD_MAX
,

78 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

79 
	m_SC_CLK_TCK
,

80 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

81 
	m_SC_NGROUPS_MAX
,

82 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

83 
	m_SC_OPEN_MAX
,

84 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

85 
	m_SC_STREAM_MAX
,

86 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

87 
	m_SC_TZNAME_MAX
,

88 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

89 
	m_SC_JOB_CONTROL
,

90 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

91 
	m_SC_SAVED_IDS
,

92 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

93 
	m_SC_REALTIME_SIGNALS
,

94 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

95 
	m_SC_PRIORITY_SCHEDULING
,

96 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

97 
	m_SC_TIMERS
,

98 
	#_SC_TIMERS
 
_SC_TIMERS


	)

99 
	m_SC_ASYNCHRONOUS_IO
,

100 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

101 
	m_SC_PRIORITIZED_IO
,

102 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

103 
	m_SC_SYNCHRONIZED_IO
,

104 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

105 
	m_SC_FSYNC
,

106 
	#_SC_FSYNC
 
_SC_FSYNC


	)

107 
	m_SC_MAPPED_FILES
,

108 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

109 
	m_SC_MEMLOCK
,

110 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

111 
	m_SC_MEMLOCK_RANGE
,

112 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

113 
	m_SC_MEMORY_PROTECTION
,

114 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

115 
	m_SC_MESSAGE_PASSING
,

116 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

117 
	m_SC_SEMAPHORES
,

118 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

119 
	m_SC_SHARED_MEMORY_OBJECTS
,

120 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

121 
	m_SC_AIO_LISTIO_MAX
,

122 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

123 
	m_SC_AIO_MAX
,

124 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

125 
	m_SC_AIO_PRIO_DELTA_MAX
,

126 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

127 
	m_SC_DELAYTIMER_MAX
,

128 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

129 
	m_SC_MQ_OPEN_MAX
,

130 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

131 
	m_SC_MQ_PRIO_MAX
,

132 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

133 
	m_SC_VERSION
,

134 
	#_SC_VERSION
 
_SC_VERSION


	)

135 
	m_SC_PAGESIZE
,

136 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

137 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

138 
	m_SC_RTSIG_MAX
,

139 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

140 
	m_SC_SEM_NSEMS_MAX
,

141 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

142 
	m_SC_SEM_VALUE_MAX
,

143 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

144 
	m_SC_SIGQUEUE_MAX
,

145 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

146 
	m_SC_TIMER_MAX
,

147 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

151 
	m_SC_BC_BASE_MAX
,

152 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

153 
	m_SC_BC_DIM_MAX
,

154 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

155 
	m_SC_BC_SCALE_MAX
,

156 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

157 
	m_SC_BC_STRING_MAX
,

158 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

159 
	m_SC_COLL_WEIGHTS_MAX
,

160 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

161 
	m_SC_EQUIV_CLASS_MAX
,

162 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

163 
	m_SC_EXPR_NEST_MAX
,

164 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

165 
	m_SC_LINE_MAX
,

166 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

167 
	m_SC_RE_DUP_MAX
,

168 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

169 
	m_SC_CHARCLASS_NAME_MAX
,

170 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

172 
	m_SC_2_VERSION
,

173 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

174 
	m_SC_2_C_BIND
,

175 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

176 
	m_SC_2_C_DEV
,

177 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

178 
	m_SC_2_FORT_DEV
,

179 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

180 
	m_SC_2_FORT_RUN
,

181 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

182 
	m_SC_2_SW_DEV
,

183 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

184 
	m_SC_2_LOCALEDEF
,

185 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

187 
	m_SC_PII
,

188 
	#_SC_PII
 
_SC_PII


	)

189 
	m_SC_PII_XTI
,

190 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

191 
	m_SC_PII_SOCKET
,

192 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

193 
	m_SC_PII_INTERNET
,

194 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

195 
	m_SC_PII_OSI
,

196 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

197 
	m_SC_POLL
,

198 
	#_SC_POLL
 
_SC_POLL


	)

199 
	m_SC_SELECT
,

200 
	#_SC_SELECT
 
_SC_SELECT


	)

201 
	m_SC_UIO_MAXIOV
,

202 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

203 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

204 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

205 
	m_SC_PII_INTERNET_STREAM
,

206 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

207 
	m_SC_PII_INTERNET_DGRAM
,

208 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

209 
	m_SC_PII_OSI_COTS
,

210 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

211 
	m_SC_PII_OSI_CLTS
,

212 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

213 
	m_SC_PII_OSI_M
,

214 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

215 
	m_SC_T_IOV_MAX
,

216 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

219 
	m_SC_THREADS
,

220 
	#_SC_THREADS
 
_SC_THREADS


	)

221 
	m_SC_THREAD_SAFE_FUNCTIONS
,

222 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

223 
	m_SC_GETGR_R_SIZE_MAX
,

224 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

225 
	m_SC_GETPW_R_SIZE_MAX
,

226 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

227 
	m_SC_LOGIN_NAME_MAX
,

228 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

229 
	m_SC_TTY_NAME_MAX
,

230 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

231 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

232 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

233 
	m_SC_THREAD_KEYS_MAX
,

234 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

235 
	m_SC_THREAD_STACK_MIN
,

236 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

237 
	m_SC_THREAD_THREADS_MAX
,

238 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

239 
	m_SC_THREAD_ATTR_STACKADDR
,

240 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

241 
	m_SC_THREAD_ATTR_STACKSIZE
,

242 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

243 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

244 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

245 
	m_SC_THREAD_PRIO_INHERIT
,

246 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

247 
	m_SC_THREAD_PRIO_PROTECT
,

248 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

249 
	m_SC_THREAD_PROCESS_SHARED
,

250 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

252 
	m_SC_NPROCESSORS_CONF
,

253 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

254 
	m_SC_NPROCESSORS_ONLN
,

255 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

256 
	m_SC_PHYS_PAGES
,

257 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

258 
	m_SC_AVPHYS_PAGES
,

259 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

260 
	m_SC_ATEXIT_MAX
,

261 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

262 
	m_SC_PASS_MAX
,

263 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

265 
	m_SC_XOPEN_VERSION
,

266 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

267 
	m_SC_XOPEN_XCU_VERSION
,

268 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

269 
	m_SC_XOPEN_UNIX
,

270 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

271 
	m_SC_XOPEN_CRYPT
,

272 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

273 
	m_SC_XOPEN_ENH_I18N
,

274 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

275 
	m_SC_XOPEN_SHM
,

276 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

278 
	m_SC_2_CHAR_TERM
,

279 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

280 
	m_SC_2_C_VERSION
,

281 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

282 
	m_SC_2_UPE
,

283 
	#_SC_2_UPE
 
_SC_2_UPE


	)

285 
	m_SC_XOPEN_XPG2
,

286 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

287 
	m_SC_XOPEN_XPG3
,

288 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

289 
	m_SC_XOPEN_XPG4
,

290 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

292 
	m_SC_CHAR_BIT
,

293 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

294 
	m_SC_CHAR_MAX
,

295 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

296 
	m_SC_CHAR_MIN
,

297 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

298 
	m_SC_INT_MAX
,

299 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

300 
	m_SC_INT_MIN
,

301 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

302 
	m_SC_LONG_BIT
,

303 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

304 
	m_SC_WORD_BIT
,

305 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

306 
	m_SC_MB_LEN_MAX
,

307 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

308 
	m_SC_NZERO
,

309 
	#_SC_NZERO
 
_SC_NZERO


	)

310 
	m_SC_SSIZE_MAX
,

311 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

312 
	m_SC_SCHAR_MAX
,

313 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

314 
	m_SC_SCHAR_MIN
,

315 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

316 
	m_SC_SHRT_MAX
,

317 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

318 
	m_SC_SHRT_MIN
,

319 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

320 
	m_SC_UCHAR_MAX
,

321 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

322 
	m_SC_UINT_MAX
,

323 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

324 
	m_SC_ULONG_MAX
,

325 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

326 
	m_SC_USHRT_MAX
,

327 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

329 
	m_SC_NL_ARGMAX
,

330 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

331 
	m_SC_NL_LANGMAX
,

332 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

333 
	m_SC_NL_MSGMAX
,

334 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

335 
	m_SC_NL_NMAX
,

336 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

337 
	m_SC_NL_SETMAX
,

338 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

339 
	m_SC_NL_TEXTMAX
,

340 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

342 
	m_SC_XBS5_ILP32_OFF32
,

343 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

344 
	m_SC_XBS5_ILP32_OFFBIG
,

345 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

346 
	m_SC_XBS5_LP64_OFF64
,

347 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

348 
	m_SC_XBS5_LPBIG_OFFBIG
,

349 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

351 
	m_SC_XOPEN_LEGACY
,

352 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

353 
	m_SC_XOPEN_REALTIME
,

354 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

355 
	m_SC_XOPEN_REALTIME_THREADS
,

356 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

358 
	m_SC_ADVISORY_INFO
,

359 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

360 
	m_SC_BARRIERS
,

361 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

362 
	m_SC_BASE
,

363 
	#_SC_BASE
 
_SC_BASE


	)

364 
	m_SC_C_LANG_SUPPORT
,

365 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

366 
	m_SC_C_LANG_SUPPORT_R
,

367 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

368 
	m_SC_CLOCK_SELECTION
,

369 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

370 
	m_SC_CPUTIME
,

371 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

372 
	m_SC_THREAD_CPUTIME
,

373 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

374 
	m_SC_DEVICE_IO
,

375 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

376 
	m_SC_DEVICE_SPECIFIC
,

377 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

378 
	m_SC_DEVICE_SPECIFIC_R
,

379 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

380 
	m_SC_FD_MGMT
,

381 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

382 
	m_SC_FIFO
,

383 
	#_SC_FIFO
 
_SC_FIFO


	)

384 
	m_SC_PIPE
,

385 
	#_SC_PIPE
 
_SC_PIPE


	)

386 
	m_SC_FILE_ATTRIBUTES
,

387 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

388 
	m_SC_FILE_LOCKING
,

389 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

390 
	m_SC_FILE_SYSTEM
,

391 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

392 
	m_SC_MONOTONIC_CLOCK
,

393 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

394 
	m_SC_MULTI_PROCESS
,

395 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

396 
	m_SC_SINGLE_PROCESS
,

397 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

398 
	m_SC_NETWORKING
,

399 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

400 
	m_SC_READER_WRITER_LOCKS
,

401 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

402 
	m_SC_SPIN_LOCKS
,

403 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

404 
	m_SC_REGEXP
,

405 
	#_SC_REGEXP
 
_SC_REGEXP


	)

406 
	m_SC_REGEX_VERSION
,

407 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

408 
	m_SC_SHELL
,

409 
	#_SC_SHELL
 
_SC_SHELL


	)

410 
	m_SC_SIGNALS
,

411 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

412 
	m_SC_SPAWN
,

413 
	#_SC_SPAWN
 
_SC_SPAWN


	)

414 
	m_SC_SPORADIC_SERVER
,

415 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

416 
	m_SC_THREAD_SPORADIC_SERVER
,

417 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

418 
	m_SC_SYSTEM_DATABASE
,

419 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

420 
	m_SC_SYSTEM_DATABASE_R
,

421 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

422 
	m_SC_TIMEOUTS
,

423 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

424 
	m_SC_TYPED_MEMORY_OBJECTS
,

425 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

426 
	m_SC_USER_GROUPS
,

427 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

428 
	m_SC_USER_GROUPS_R
,

429 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

430 
	m_SC_2_PBS
,

431 
	#_SC_2_PBS
 
_SC_2_PBS


	)

432 
	m_SC_2_PBS_ACCOUNTING
,

433 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

434 
	m_SC_2_PBS_LOCATE
,

435 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

436 
	m_SC_2_PBS_MESSAGE
,

437 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

438 
	m_SC_2_PBS_TRACK
,

439 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

440 
	m_SC_SYMLOOP_MAX
,

441 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

442 
	m_SC_STREAMS
,

443 
	#_SC_STREAMS
 
_SC_STREAMS


	)

444 
	m_SC_2_PBS_CHECKPOINT
,

445 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

447 
	m_SC_V6_ILP32_OFF32
,

448 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

449 
	m_SC_V6_ILP32_OFFBIG
,

450 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

451 
	m_SC_V6_LP64_OFF64
,

452 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

453 
	m_SC_V6_LPBIG_OFFBIG
,

454 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

456 
	m_SC_HOST_NAME_MAX
,

457 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

458 
	m_SC_TRACE
,

459 
	#_SC_TRACE
 
_SC_TRACE


	)

460 
	m_SC_TRACE_EVENT_FILTER
,

461 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

462 
	m_SC_TRACE_INHERIT
,

463 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

464 
	m_SC_TRACE_LOG
,

465 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

467 
	m_SC_LEVEL1_ICACHE_SIZE
,

468 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

469 
	m_SC_LEVEL1_ICACHE_ASSOC
,

470 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

471 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

472 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

473 
	m_SC_LEVEL1_DCACHE_SIZE
,

474 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

475 
	m_SC_LEVEL1_DCACHE_ASSOC
,

476 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

477 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

478 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

479 
	m_SC_LEVEL2_CACHE_SIZE
,

480 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

481 
	m_SC_LEVEL2_CACHE_ASSOC
,

482 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

483 
	m_SC_LEVEL2_CACHE_LINESIZE
,

484 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

485 
	m_SC_LEVEL3_CACHE_SIZE
,

486 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

487 
	m_SC_LEVEL3_CACHE_ASSOC
,

488 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

489 
	m_SC_LEVEL3_CACHE_LINESIZE
,

490 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

491 
	m_SC_LEVEL4_CACHE_SIZE
,

492 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

493 
	m_SC_LEVEL4_CACHE_ASSOC
,

494 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

495 
	m_SC_LEVEL4_CACHE_LINESIZE
,

496 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

499 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

500 
	#_SC_IPV6
 
_SC_IPV6


	)

501 
	m_SC_RAW_SOCKETS
,

502 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

504 
	m_SC_V7_ILP32_OFF32
,

505 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

506 
	m_SC_V7_ILP32_OFFBIG
,

507 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

508 
	m_SC_V7_LP64_OFF64
,

509 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

510 
	m_SC_V7_LPBIG_OFFBIG
,

511 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

513 
	m_SC_SS_REPL_MAX
,

514 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

516 
	m_SC_TRACE_EVENT_NAME_MAX
,

517 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

518 
	m_SC_TRACE_NAME_MAX
,

519 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

520 
	m_SC_TRACE_SYS_MAX
,

521 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

522 
	m_SC_TRACE_USER_EVENT_MAX
,

523 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

525 
	m_SC_XOPEN_STREAMS
,

526 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

528 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

529 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

530 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


531 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

537 
	m_CS_PATH
,

538 
	#_CS_PATH
 
_CS_PATH


	)

540 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

541 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

544 
	m_CS_GNU_LIBC_VERSION
,

545 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

546 
	m_CS_GNU_LIBPTHREAD_VERSION
,

547 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

549 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

550 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

553 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

554 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

557 
	m_CS_LFS_CFLAGS
 = 1000,

558 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

559 
	m_CS_LFS_LDFLAGS
,

560 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

561 
	m_CS_LFS_LIBS
,

562 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

563 
	m_CS_LFS_LINTFLAGS
,

564 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

565 
	m_CS_LFS64_CFLAGS
,

566 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

567 
	m_CS_LFS64_LDFLAGS
,

568 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

569 
	m_CS_LFS64_LIBS
,

570 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

571 
	m_CS_LFS64_LINTFLAGS
,

572 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

575 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

577 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

579 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

580 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

581 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

588 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

589 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

593 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

594 
	m_CS_XBS5_LP64_OFF64_LIBS
,

595 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

596 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

597 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

604 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

605 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

613 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

621 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

622 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

629 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

630 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

637 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

638 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

646 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

654 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

655 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

662 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

663 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

670 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

671 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

673 
	m_CS_V6_ENV
,

674 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

675 
	m_CS_V7_ENV


676 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/environments.h

19 #i‚de‡
_UNISTD_H


43 
	#_POSIX_V7_ILP32_OFF32
 1

	)

44 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

45 
	#_POSIX_V6_ILP32_OFF32
 1

	)

46 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

47 
	#_XBS5_ILP32_OFF32
 1

	)

48 
	#_XBS5_ILP32_OFFBIG
 1

	)

63 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

64 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

65 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

66 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

67 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

68 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

20 #ifde‡
_ERRNO_H


22 #unde‡
EDOM


23 #unde‡
EILSEQ


24 #unde‡
ERANGE


25 
	~<löux/î∫o.h
>

28 
	#ENOTSUP
 
EOPNOTSUPP


	)

31 #i‚de‡
ECANCELED


32 
	#ECANCELED
 125

	)

36 #i‚de‡
EOWNERDEAD


37 
	#EOWNERDEAD
 130

	)

38 
	#ENOTRECOVERABLE
 131

	)

41 #i‚de‡
ERFKILL


42 
	#ERFKILL
 132

	)

45 #i‚de‡
__ASSEMBLER__


47 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

49 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


51 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

56 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


60 
	#EDOM
 33

	)

61 
	#EILSEQ
 84

	)

62 
	#ERANGE
 34

	)

	@/usr/include/bits/posix_opt.h

20 #i‚def 
_BITS_POSIX_OPT_H


21 
	#_BITS_POSIX_OPT_H
 1

	)

24 
	#_POSIX_JOB_CONTROL
 1

	)

27 
	#_POSIX_SAVED_IDS
 1

	)

30 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

33 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

36 
	#_POSIX_FSYNC
 200809L

	)

39 
	#_POSIX_MAPPED_FILES
 200809L

	)

42 
	#_POSIX_MEMLOCK
 200809L

	)

45 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

48 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

51 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

55 
	#_POSIX_VDISABLE
 '\0'

	)

58 
	#_POSIX_NO_TRUNC
 1

	)

61 
	#_XOPEN_REALTIME
 1

	)

64 
	#_XOPEN_REALTIME_THREADS
 1

	)

67 
	#_XOPEN_SHM
 1

	)

70 
	#_POSIX_THREADS
 200809L

	)

73 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

74 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

77 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

80 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

83 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

86 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

90 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

92 #ifde‡
__USE_XOPEN2K8


94 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

97 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

101 
	#_POSIX_SEMAPHORES
 200809L

	)

104 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

107 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

108 
	#_POSIX_ASYNC_IO
 1

	)

110 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

112 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

115 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

118 
	#_LFS_LARGEFILE
 1

	)

119 
	#_LFS64_LARGEFILE
 1

	)

120 
	#_LFS64_STDIO
 1

	)

123 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

126 
	#_POSIX_CPUTIME
 0

	)

129 
	#_POSIX_THREAD_CPUTIME
 0

	)

132 
	#_POSIX_REGEXP
 1

	)

135 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

138 
	#_POSIX_SHELL
 1

	)

141 
	#_POSIX_TIMEOUTS
 200809L

	)

144 
	#_POSIX_SPIN_LOCKS
 200809L

	)

147 
	#_POSIX_SPAWN
 200809L

	)

150 
	#_POSIX_TIMERS
 200809L

	)

153 
	#_POSIX_BARRIERS
 200809L

	)

156 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

159 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

162 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

165 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

168 
	#_POSIX_ADVISORY_INFO
 200809L

	)

171 
	#_POSIX_IPV6
 200809L

	)

174 
	#_POSIX_RAW_SOCKETS
 200809L

	)

177 
	#_POSIX2_CHAR_TERM
 200809L

	)

180 
	#_POSIX_SPORADIC_SERVER
 -1

	)

181 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

184 
	#_POSIX_TRACE
 -1

	)

185 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

186 
	#_POSIX_TRACE_INHERIT
 -1

	)

187 
	#_POSIX_TRACE_LOG
 -1

	)

190 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

193 
	#_XOPEN_STREAMS
 -1

	)

	@/usr/include/bits/stdio-ldbl.h

20 #i‚de‡
_STDIO_H


24 
__BEGIN_NAMESPACE_STD


25 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

26 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

27 
	$__LDBL_REDIR_DECL
 (
•rötf
)

28 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

29 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

30 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
__REDIRECT
 \

33 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

40 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

42 
__END_NAMESPACE_STD


44 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


45 
__BEGIN_NAMESPACE_C99


46 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

47 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

48 
__END_NAMESPACE_C99


51 #ifdef 
__USE_ISOC99


52 
__BEGIN_NAMESPACE_C99


53 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

54 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

55 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

57 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

61 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

63 
__END_NAMESPACE_C99


66 #ifde‡
__USE_GNU


67 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

68 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

69 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

70 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

71 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

73 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

76 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


77 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

78 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

79 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


80 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

81 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

84 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

85 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

86 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

88 #ifde‡
__USE_GNU


89 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

90 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

93 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

94 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

20 #i‚de‡
_STDIO_H


24 #i‚de‡
__exã∫_ölöe


25 
	#__STDIO_INLINE
 
ölöe


	)

27 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

31 #ifde‡
__USE_EXTERN_INLINES


34 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
)

36 
__STDIO_INLINE
 

37 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

39  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

40 
	}
}

44 
__STDIO_INLINE
 

45 
	$gëch¨
 ()

47  
	`_IO_gëc
 (
°dö
);

48 
	}
}

51 #ifde‡
__USE_MISC


53 
__STDIO_INLINE
 

54 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

56  
	`_IO_gëc_u∆ocked
 (
__Â
);

57 
	}
}

61 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


63 
__STDIO_INLINE
 

64 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

66  
	`_IO_gëc_u∆ocked
 (
__Â
);

67 
	}
}

70 
__STDIO_INLINE
 

71 
	$gëch¨_u∆ocked
 ()

73  
	`_IO_gëc_u∆ocked
 (
°dö
);

74 
	}
}

79 
__STDIO_INLINE
 

80 
	$putch¨
 (
__c
)

82  
	`_IO_putc
 (
__c
, 
°dout
);

83 
	}
}

86 #ifde‡
__USE_MISC


88 
__STDIO_INLINE
 

89 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

91  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

92 
	}
}

96 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


98 
__STDIO_INLINE
 

99 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

101  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

102 
	}
}

105 
__STDIO_INLINE
 

106 
	$putch¨_u∆ocked
 (
__c
)

108  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

109 
	}
}

113 #ifdef 
__USE_GNU


115 
__STDIO_INLINE
 
_IO_ssize_t


116 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

118  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

119 
	}
}

123 #ifde‡
__USE_MISC


125 
__STDIO_INLINE
 

126 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

128  
	`_IO_„of_u∆ocked
 (
__°ªam
);

129 
	}
}

132 
__STDIO_INLINE
 

133 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

135  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

136 
	}
}

142 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

143 && !
deföed
 
	g__˝lu•lus


145 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

146 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

147 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

148 && (
size_t
Ë(
size
) != 0) \

149 ? ({ *
__±r
 = (*Ë(
±r
); \

150 
FILE
 *
__°ªam
 = (
°ªam
); \

151 
size_t
 
__˙t
; \

152 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

153 
__˙t
 > 0; --__cnt) \

155 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

156 i‡(
__c
 =
EOF
) \

158 *
__±r
++ = 
__c
; \

160 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

161 / (
size_t
Ë(
size
); }) \

162 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

163 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

165 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

166 (Ë(
n
), (
size_t
) 0) \

167 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

169 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

170 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

171 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

172 && (
size_t
Ë(
size
) != 0) \

173 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

174 
FILE
 *
__°ªam
 = (
°ªam
); \

175 
size_t
 
__˙t
; \

176 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

177 
__˙t
 > 0; --__cnt) \

178 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

180 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

181 / (
size_t
Ë(
size
); }) \

182 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

183 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

185 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

186 (Ë(
n
), (
size_t
) 0) \

187 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

191 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

20 #i‚de‡
_STDIO_H


24 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

25 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

26 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

27 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

28 
_G_va_li°
 
__≠
Ë
__THROW
;

30 #ifde‡
__va_¨g_∑ck


31 
__exã∫_Æways_ölöe
 

32 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

34  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

35 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

36 
	}
}

37 #ñi‡!
deföed
 
__˝lu•lus


38 
	#•rötf
(
°r
, ...) \

39 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

40 
__VA_ARGS__
)

	)

43 
__exã∫_Æways_ölöe
 

44 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

45 
_G_va_li°
 
__≠
))

47  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

48 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

49 
	}
}

51 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


53 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

54 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

55 ...Ë
__THROW
;

56 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

57 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

58 
_G_va_li°
 
__≠
Ë
__THROW
;

60 #ifde‡
__va_¨g_∑ck


61 
__exã∫_Æways_ölöe
 

62 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

63 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

65  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

66 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

67 
	}
}

68 #ñi‡!
deföed
 
__˝lu•lus


69 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

70 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

71 
__VA_ARGS__
)

	)

74 
__exã∫_Æways_ölöe
 

75 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

76 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

78  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

79 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

80 
	}
}

84 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

87 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

88 
__¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

89 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

90 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

91 
__v¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

92 
_G_va_li°
 
__≠
);

94 #ifde‡
__va_¨g_∑ck


95 
__exã∫_Æways_ölöe
 

96 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...)

98  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

99 
	`__va_¨g_∑ck
 ());

100 
	}
}

102 
__exã∫_Æways_ölöe
 

103 
	$¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

105  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

106 
	}
}

107 #ñi‡!
deföed
 
__˝lu•lus


108 
	#¥ötf
(...) \

109 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

110 
	#Ârötf
(
°ªam
, ...) \

111 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

114 
__exã∫_Æways_ölöe
 

115 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

117 #ifde‡
__USE_EXTERN_INLINES


118  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

120  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

122 
	}
}

124 
__exã∫_Æways_ölöe
 

125 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

126 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

128  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

129 
	}
}

131 #ifde‡
__USE_GNU


133 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

134 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

135 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

136 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

137 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

138 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

139 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

140 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

141 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

142 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

143 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

144 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

145 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

147 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

148 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

149 
__Êag
,

150 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

151 
_G_va_li°
 
__¨gs
)

152 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

154 #ifde‡
__va_¨g_∑ck


155 
__exã∫_Æways_ölöe
 

156 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

158  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

159 
	`__va_¨g_∑ck
 ());

160 
	}
}

162 
__exã∫_Æways_ölöe
 

163 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

166  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

167 
	`__va_¨g_∑ck
 ());

168 
	}
}

170 
__exã∫_Æways_ölöe
 

171 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

173  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

174 
	`__va_¨g_∑ck
 ());

175 
	}
}

177 
__exã∫_Æways_ölöe
 

178 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

179 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

181  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

182 
	`__va_¨g_∑ck
 ());

183 
	}
}

184 #ñi‡!
deföed
 
__˝lu•lus


185 
	#a•rötf
(
±r
, ...) \

186 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

187 
	#__a•rötf
(
±r
, ...) \

188 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

189 
	#d¥ötf
(
fd
, ...) \

190 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

191 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

192 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

195 
__exã∫_Æways_ölöe
 

196 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

197 
_G_va_li°
 
__≠
))

199  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

200 
	}
}

202 
__exã∫_Æways_ölöe
 

203 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

205  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

206 
	}
}

208 
__exã∫_Æways_ölöe
 

209 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

210 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

212  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

213 
__≠
);

214 
	}
}

220 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

221 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

222 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

225 
__exã∫_Æways_ölöe
 
__wur
 *

226 
	$gës
 (*
__°r
)

228 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

229  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

230  
	`__gës_w¨n
 (
__°r
);

231 
	}
}

233 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

234 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

235 *
	`__REDIRECT
 (
__fgës_Æüs
,

236 (*
__ª°ri˘
 
__s
, 
__n
,

237 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

238 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

239 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

240 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

241 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

244 
__exã∫_Æways_ölöe
 
__wur
 *

245 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

247 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

249 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

250  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

252 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

253  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

255  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

256 
	}
}

258 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

259 
size_t
 
__size
, size_à
__n
,

260 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

261 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

262 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

263 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

264 
‰ód
Ë
__wur
;

265 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

266 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
),

269 
__‰ód_chk
)

270 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

273 
__exã∫_Æways_ölöe
 
__wur
 
size_t


274 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

275 
FILE
 *
__ª°ri˘
 
__°ªam
)

277 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

279 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

280 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

281 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

282  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

284 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

285  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

287  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

288 
	}
}

290 #ifde‡
__USE_GNU


291 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

292 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

293 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

294 (*
__ª°ri˘
 
__s
, 
__n
,

295 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

296 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

297 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

298 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

299 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

302 
__exã∫_Æways_ölöe
 
__wur
 *

303 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

305 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

307 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

308  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

310 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

311  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

313  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

314 
	}
}

317 #ifde‡
__USE_MISC


318 #unde‡
‰ód_u∆ocked


319 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

320 
size_t
 
__size
, size_à
__n
,

321 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

322 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

323 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

324 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

325 
‰ód_u∆ocked
Ë
__wur
;

326 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

327 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
),

330 
__‰ód_u∆ocked_chk
)

331 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

334 
__exã∫_Æways_ölöe
 
__wur
 
size_t


335 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

336 
FILE
 *
__ª°ri˘
 
__°ªam
)

338 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

340 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

341 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

342 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

343  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

344 
__°ªam
);

346 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

347  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

348 
__°ªam
);

351 #ifde‡
__USE_EXTERN_INLINES


352 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

353 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

354 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

355 && 
__size
 * 
__n
 <= 8)

357 
size_t
 
__˙t
 = 
__size
 * 
__n
;

358 *
__˝å
 = (*Ë
__±r
;

359 i‡(
__˙t
 == 0)

362 ; 
__˙t
 > 0; --__cnt)

364 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

365 i‡(
__c
 =
EOF
)

367 *
__˝å
++ = 
__c
;

369  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

372  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

373 
	}
}

	@/usr/include/bits/stdio_lim.h

19 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


23 #ifde‡
_STDIO_H


24 
	#L_tm≤am
 20

	)

25 
	#TMP_MAX
 238328

	)

26 
	#FILENAME_MAX
 4096

	)

28 #ifde‡
__USE_POSIX


29 
	#L_˘îmid
 9

	)

30 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


31 
	#L_cu£rid
 9

	)

36 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


37 #unde‡
FOPEN_MAX


38 
	#FOPEN_MAX
 16

	)

41 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


42 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-ldbl.h

20 #i‚de‡
_STDLIB_H


24 #ifdef 
__USE_ISOC99


25 
__BEGIN_NAMESPACE_C99


26 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

27 
__END_NAMESPACE_C99


30 #ifde‡
__USE_GNU


31 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

34 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


35 #ifde‡
__USE_MISC


36 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

38 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

39 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

40 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

20 #i‚de‡
_STDLIB_H


24 *
	$__ªÆ∑th_chk
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

25 *
__ª°ri˘
 
__ªsﬁved
,

26 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

27 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

28 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

29 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

30 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

31 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

32 *
__ª°ri˘
 
__ªsﬁved
,

33 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


34 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

37 
__exã∫_Æways_ölöe
 
__wur
 *

38 
	`__NTH
 (
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

40 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

42 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


43 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

44  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

46  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

49  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

50 
	}
}

53 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

54 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

55 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

56 
size_t
 
__buÊí
), 
±¢ame_r
)

57 
	`__n⁄nuŒ
 ((2));

58 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

60 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

61 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

64 
__exã∫_Æways_ölöe
 

65 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

67 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

69 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

70  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

71 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

72  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

74  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

75 
	}
}

78 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

79 
__THROW
 
__wur
;

80 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

81 
w˘omb
Ë
__wur
;

83 
__exã∫_Æways_ölöe
 
__wur
 

84 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

89 
	#__STDLIB_MB_LEN_MAX
 16

	)

90 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


93 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

94  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

95  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

96 
	}
}

99 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

100 
__c⁄°
 *
__ª°ri˘
 
__§c
,

101 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

102 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

103 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

104 
__c⁄°
 *
__ª°ri˘
 
__§c
,

105 
size_t
 
__Àn
), 
mb°owcs
);

106 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

107 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

108 
__c⁄°
 *
__ª°ri˘
 
__§c
,

109 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

110 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

113 
__exã∫_Æways_ölöe
 
size_t


114 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

115 
size_t
 
__Àn
))

117 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

119 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

120  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

121 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

123 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

124  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

125 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

127  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

128 
	}
}

131 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

132 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

133 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

134 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

135 (*
__ª°ri˘
 
__d°
,

136 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

137 
size_t
 
__Àn
), 
wc°ombs
);

138 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

139 (*
__ª°ri˘
 
__d°
,

140 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

141 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

142 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

144 
__exã∫_Æways_ölöe
 
size_t


145 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__§c
,

146 
size_t
 
__Àn
))

148 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

150 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

151  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

152 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

153  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

155  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

156 
	}
}

	@/usr/include/bits/string.h

21 #i‚de‡
_STRING_H


26 
	#_STRING_ARCH_u«lig√d
 1

	)

31 #i‡!
deföed
 
__NO_STRING_INLINES
 && deföed 
__USE_STRING_INLINES
 \

32 && 
deföed
 
	g__GNUC__
 && __GNUC__ >2 && !
__BOUNDED_POINTERS__


34 #i‚de‡
__STRING_INLINE


35 #i‚de‡
__exã∫_ölöe


36 
	#__STRING_INLINE
 
ölöe


	)

38 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

43 
	#__STRING_SMALL_GET16
(
§c
, 
idx
) \

44 ((((
__c⁄°
 *Ë(
§c
))[
idx
 + 1] << 8) \

45 | ((
__c⁄°
 *Ë(
§c
))[
idx
])

	)

46 
	#__STRING_SMALL_GET32
(
§c
, 
idx
) \

47 (((((
__c⁄°
 *Ë(
§c
))[
idx
 + 3] << 8 \

48 | ((
__c⁄°
 *Ë(
§c
))[
idx
 + 2]) << 8 \

49 | ((
__c⁄°
 *Ë(
§c
))[
idx
 + 1]) << 8 \

50 | ((
__c⁄°
 *Ë(
§c
))[
idx
])

	)

54 
	#_HAVE_STRING_ARCH_mem˝y
 1

	)

55 
	#mem˝y
(
de°
, 
§c
, 
n
) \

56 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

57 ? 
	`__mem˝y_c
 ((
de°
), (
§c
), (
n
)) \

58 : 
	`__mem˝y_g
 ((
de°
), (
§c
), (
n
))))

	)

59 
	#__mem˝y_c
(
de°
, 
§c
, 
n
) \

60 ((
n
) == 0 \

61 ? (
de°
) \

62 : (((
n
) % 4 == 0) \

63 ? 
	`__mem˝y_by4
 (
de°
, 
§c
, 
n
) \

64 : (((
n
) % 2 == 0) \

65 ? 
	`__mem˝y_by2
 (
de°
, 
§c
, 
n
) \

66 : 
	`__mem˝y_g
 (
de°
, 
§c
, 
n
))))

	)

68 
__STRING_INLINE
 *
__mem˝y_by4
 (*
__de°
, 
__c⁄°
 *
__§c
,

69 
size_t
 
__n
);

71 
__STRING_INLINE
 *

72 
	$__mem˝y_by4
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

74 
__d0
, 
__d1
;

75 *
__tmp
 = 
__de°
;

76 
__asm__
 
__vﬁ©ûe__


84 : "=&r" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

85 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 4)

87  
__de°
;

88 
	}
}

90 
__STRING_INLINE
 *
__mem˝y_by2
 (*
__de°
, 
__c⁄°
 *
__§c
,

91 
size_t
 
__n
);

93 
__STRING_INLINE
 *

94 
	$__mem˝y_by2
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

96 
__d0
, 
__d1
;

97 *
__tmp
 = 
__de°
;

98 
__asm__
 
__vﬁ©ûe__


111 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

112 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 2)

114  
__de°
;

115 
	}
}

117 
__STRING_INLINE
 *
__mem˝y_g
 (*
__de°
, 
__c⁄°
 *
__§c
,

118 
size_t
 
__n
);

120 
__STRING_INLINE
 *

121 
	$__mem˝y_g
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

123 
__d0
, 
__d1
, 
__d2
;

124 *
__tmp
 = 
__de°
;

125 
__asm__
 
__vﬁ©ûe__


136 : "=&c" (
__d0
), "=&D" (
__d1
), "=&S" (
__d2
),

137 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

138 : "0" (
__n
), "1" (
__tmp
), "2" (
__§c
),

139 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
)

141  
__de°
;

142 
	}
}

144 
	#_HAVE_STRING_ARCH_memmove
 1

	)

145 #i‚de‡
_FORCE_INLINES


148 
	#memmove
(
de°
, 
§c
, 
n
Ë
	`__memmove_g
 (de°, src,Ç)

	)

150 
__STRING_INLINE
 *
	$__memmove_g
 (*, 
__c⁄°
 *, 
size_t
)

151 
	`__asm__
 ("memmove");

153 
__STRING_INLINE
 *

154 
	$__memmove_g
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

156 
__d0
, 
__d1
, 
__d2
;

157 *
__tmp
 = 
__de°
;

158 i‡(
__de°
 < 
__§c
)

159 
__asm__
 
__vﬁ©ûe__


162 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

163 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

164 : "0" (
__n
), "1" (
__§c
), "2" (
__tmp
),

165 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

167 
__asm__
 
__vﬁ©ûe__


171 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

172 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

173 : "0" (
__n
), "1" (__¿- 1 + (
__c⁄°
 *Ë
__§c
),

174 "2" (
__n
 - 1 + (*Ë
__tmp
),

175 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

176  
__de°
;

177 
	}
}

181 
	#_HAVE_STRING_ARCH_memcmp
 1

	)

182 #i‚de‡
_FORCE_INLINES


183 #i‚de‡
__PIC__


185 
__STRING_INLINE
 

186 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

188 
__d0
, 
__d1
, 
__d2
;

189 
__ªs
;

190 
__asm__
 
__vﬁ©ûe__


198 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

199 : "0" (0), "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

200 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

201 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

203  
__ªs
;

204 
	}
}

209 
	#_HAVE_STRING_ARCH_mem£t
 1

	)

210 
	#_USE_STRING_ARCH_mem£t
 1

	)

211 
	#mem£t
(
s
, 
c
, 
n
) \

212 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

213 ? ((
n
) == 1 \

214 ? 
	`__mem£t_c1
 ((
s
), (
c
)) \

215 : 
	`__mem£t_gc
 ((
s
), (
c
), (
n
))) \

216 : (
	`__buûtö_c⁄°™t_p
 (
c
) \

217 ? (
	`__buûtö_c⁄°™t_p
 (
n
) \

218 ? 
	`__mem£t_c˙
 ((
s
), (
c
), (
n
)) \

219 : 
	`mem£t
 ((
s
), (
c
), (
n
))) \

220 : (
	`__buûtö_c⁄°™t_p
 (
n
) \

221 ? 
	`__mem£t_g˙
 ((
s
), (
c
), (
n
)) \

222 : 
	`mem£t
 ((
s
), (
c
), (
n
))))))

	)

224 
	#__mem£t_c1
(
s
, 
c
Ë({ *
__s
 = (s); \

225 *((*Ë
__s
Ë(Ë(
c
); \

226 
__s
; })

	)

228 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

229 ({ *
__s
 = (
s
); \

231 
__ui
; \

232 
__usi
; \

233 
__uc
; \

234 } *
__u
 = 
__s
; \

235 
__c
 = ((Ë((Ë(
c
))) * 0x01010101; \

241 i‡((
n
) == 3 || (n) >= 5) \

242 
__asm__
 
	`__vﬁ©ûe__
 ("" : "Ù" (
__c
) : "0" (__c)); \

245 
n
) \

248 
__u
->
__ui
 = 
__c
; \

249 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

251 
__u
->
__ui
 = 
__c
; \

252 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

254 
__u
->
__ui
 = 
__c
; \

255 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

257 
__u
->
__usi
 = (Ë
__c
; \

258 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

259 
__u
->
__uc
 = (Ë
__c
; \

263 
__u
->
__ui
 = 
__c
; \

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

266 
__u
->
__ui
 = 
__c
; \

267 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

269 
__u
->
__ui
 = 
__c
; \

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

272 
__u
->
__usi
 = (Ë
__c
; \

276 
__u
->
__ui
 = 
__c
; \

277 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

279 
__u
->
__ui
 = 
__c
; \

280 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

282 
__u
->
__ui
 = 
__c
; \

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

285 
__u
->
__uc
 = (Ë
__c
; \

289 
__u
->
__ui
 = 
__c
; \

290 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

292 
__u
->
__ui
 = 
__c
; \

293 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

295 
__u
->
__ui
 = 
__c
; \

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

298 
__u
->
__ui
 = 
__c
; \

303 
__s
; })

	)

305 
	#__mem£t_c˙
(
s
, 
c
, 
n
) \

306 (((
n
) % 4 == 0) \

307 ? 
	`__mem£t_c˙_by4
 (
s
, ((Ë((Ë(
c
))) * 0x01010101,\

308 
n
) \

309 : (((
n
) % 2 == 0) \

310 ? 
	`__mem£t_c˙_by2
 (
s
, \

311 ((Ë((Ë(
c
))) * 0x01010101,\

312 
n
) \

313 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

315 
__STRING_INLINE
 *
__mem£t_c˙_by4
 (*
__s
, 
__c
,

316 
size_t
 
__n
);

318 
__STRING_INLINE
 *

319 
	$__mem£t_c˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

321 *
__tmp
 = 
__s
;

322 
__d0
;

323 #ifde‡
__i686__


324 
__asm__
 
__vﬁ©ûe__


327 : "=&a" (
__c
), "=&D" (
__tmp
), "=&c" (
__d0
),

328 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

329 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

332 
__asm__
 
__vﬁ©ûe__


338 : "=&r" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

339 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

340 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

343  
__s
;

344 
	}
}

346 
__STRING_INLINE
 *
__mem£t_c˙_by2
 (*
__s
, 
__c
,

347 
size_t
 
__n
);

349 
__STRING_INLINE
 *

350 
	$__mem£t_c˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

352 
__d0
, 
__d1
;

353 *
__tmp
 = 
__s
;

354 #ifde‡
__i686__


355 
__asm__
 
__vﬁ©ûe__


359 : "=&a" (
__d0
), "=&D" (
__tmp
), "=&c" (
__d1
),

360 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

361 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

364 
__asm__
 
__vﬁ©ûe__


370 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

371 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

372 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

375  
__s
;

376 
	}
}

378 
	#__mem£t_g˙
(
s
, 
c
, 
n
) \

379 (((
n
) % 4 == 0) \

380 ? 
	`__mem£t_g˙_by4
 (
s
, 
c
, 
n
) \

381 : (((
n
) % 2 == 0) \

382 ? 
	`__mem£t_g˙_by2
 (
s
, 
c
, 
n
) \

383 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

385 
__STRING_INLINE
 *
__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
);

387 
__STRING_INLINE
 *

388 
	$__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

390 *
__tmp
 = 
__s
;

391 
__d0
;

392 
__asm__
 
__vﬁ©ûe__


402 : "=&q" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

403 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

404 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

406  
__s
;

407 
	}
}

409 
__STRING_INLINE
 *
__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
);

411 
__STRING_INLINE
 *

412 
	$__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

414 
__d0
, 
__d1
;

415 *
__tmp
 = 
__s
;

416 
__asm__
 
__vﬁ©ûe__


427 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

428 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

429 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

431  
__s
;

432 
	}
}

436 
	#_HAVE_STRING_ARCH_memchr
 1

	)

437 #i‚de‡
_FORCE_INLINES


438 
__STRING_INLINE
 *

439 
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

441 
__d0
;

442 #ifde‡
__i686__


443 
__d1
;

445 *
__ªs
;

446 i‡(
__n
 == 0)

447  
NULL
;

448 #ifde‡
__i686__


449 
__asm__
 
__vﬁ©ûe__


453 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

454 : "a" (
__c
), "0" (
__s
), "1" (
__n
), "2" (1),

455 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

458 
__asm__
 
__vﬁ©ûe__


464 : "=D" (
__ªs
), "=&c" (
__d0
)

465 : "a" (
__c
), "0" (
__s
), "1" (
__n
),

466 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

469  
__ªs
 - 1;

470 
	}
}

473 
	#_HAVE_STRING_ARCH_memrchr
 1

	)

474 #i‚de‡
_FORCE_INLINES


475 
__STRING_INLINE
 *
__memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
);

477 
__STRING_INLINE
 *

478 
	$__memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

480 
__d0
;

481 #ifde‡
__i686__


482 
__d1
;

484 *
__ªs
;

485 i‡(
__n
 == 0)

486  
NULL
;

487 #ifde‡
__i686__


488 
__asm__
 
__vﬁ©ûe__


494 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

495 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n), "2" (-1),

496 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

499 
__asm__
 
__vﬁ©ûe__


506 : "=D" (
__ªs
), "=&c" (
__d0
)

507 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n),

508 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

511  
__ªs
;

512 
	}
}

513 #ifde‡
__USE_GNU


514 
	#memrchr
(
s
, 
c
, 
n
Ë
	`__memrchr
 ((s), (c), (n))

	)

519 
	#_HAVE_STRING_ARCH_øwmemchr
 1

	)

520 
__STRING_INLINE
 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

522 #i‚de‡
_FORCE_INLINES


523 
__STRING_INLINE
 *

524 
	$__øwmemchr
 (c⁄° *
__s
, 
__c
)

526 
__d0
;

527 *
__ªs
;

528 
__asm__
 
__vﬁ©ûe__


531 : "=D" (
__ªs
), "=&c" (
__d0
)

532 : "a" (
__c
), "0" (
__s
), "1" (0xffffffff),

533 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

535  
__ªs
 - 1;

536 
	}
}

537 #ifde‡
__USE_GNU


538 
__STRING_INLINE
 *

539 
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

541  
	`__øwmemchr
 (
__s
, 
__c
);

542 
	}
}

548 
	#_HAVE_STRING_ARCH_°æí
 1

	)

549 
	#°æí
(
°r
) \

550 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
°r
) \

551 ? 
	`__buûtö_°æí
 (
°r
) \

552 : 
	`__°æí_g
 (
°r
)))

	)

553 
__STRING_INLINE
 
size_t
 
__°æí_g
 (
__c⁄°
 *
__°r
);

555 
__STRING_INLINE
 
size_t


556 
	$__°æí_g
 (
__c⁄°
 *
__°r
)

558 
__dummy
;

559 
__c⁄°
 *
__tmp
 = 
__°r
;

560 
__asm__
 
__vﬁ©ûe__


566 : "Ù" (
__tmp
), "=&q" (
__dummy
)

567 : "0" (
__°r
),

568 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__°r
)

570  
__tmp
 - 
__°r
 - 1;

571 
	}
}

575 
	#_HAVE_STRING_ARCH_°r˝y
 1

	)

576 
	#°r˝y
(
de°
, 
§c
) \

577 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

578 ? ( ((
§c
)[0]Ë=1 && 
	`°æí
 (src) + 1 <= 8 \

579 ? 
	`__°r˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

580 : (*Ë
	`mem˝y
 ((*Ë(
de°
), \

581 (
__c⁄°
 *Ë(
§c
), \

582 
	`°æí
 (
§c
) + 1)) \

583 : 
	`__°r˝y_g
 ((
de°
), (
§c
))))

	)

585 
	#__°r˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

586 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

588 
__ui
; \

589 
__usi
; \

590 
__uc
; \

591 
__c
; \

592 } *
__u
 = (*Ë
__de°
; \

593 
§˛í
) \

596 
__u
->
__uc
 = '\0'; \

599 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

602 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

603 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

604 
__u
->
__uc
 = '\0'; \

607 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

610 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

611 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

612 
__u
->
__uc
 = '\0'; \

615 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

616 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

617 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

620 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

621 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

622 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

623 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

624 
__u
->
__uc
 = '\0'; \

627 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

628 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

629 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

632 (*Ë
__de°
; }))

	)

634 
__STRING_INLINE
 *
__°r˝y_g
 (*
__de°
, 
__c⁄°
 *
__§c
);

636 
__STRING_INLINE
 *

637 
	$__°r˝y_g
 (*
__de°
, 
__c⁄°
 *
__§c
)

639 *
__tmp
 = 
__de°
;

640 
__dummy
;

641 
__asm__
 
__vﬁ©ûe__


650 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
),

651 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

652 : "0" (
__§c
), "1" (
__tmp
),

653 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

655  
__de°
;

656 
	}
}

659 #ifde‡
__USE_GNU


660 
	#_HAVE_STRING_ARCH_°p˝y
 1

	)

662 
	#__°p˝y
(
de°
, 
§c
) \

663 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

664 ? (
	`°æí
 (
§c
) + 1 <= 8 \

665 ? 
	`__°p˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

666 : 
	`__°p˝y_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1)) \

667 : 
	`__°p˝y_g
 ((
de°
), (
§c
))))

	)

668 
	#__°p˝y_c
(
de°
, 
§c
, 
§˛í
) \

669 ((
§˛í
) % 4 == 0 \

670 ? 
	`__memp˝y_by4
 (
de°
, 
§c
, 
§˛í
) - 1 \

671 : ((
§˛í
) % 2 == 0 \

672 ? 
	`__memp˝y_by2
 (
de°
, 
§c
, 
§˛í
) - 1 \

673 : 
	`__memp˝y_byn
 (
de°
, 
§c
, 
§˛í
Ë- 1))

	)

676 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 ((de°), (§c))

	)

678 
	#__°p˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

679 (
	`__exãnsi⁄__
 ({ union { \

680 
__ui
; \

681 
__usi
; \

682 
__uc
; \

683 
__c
; \

684 } *
__u
 = (*Ë(
de°
); \

685 
§˛í
) \

688 
__u
->
__uc
 = '\0'; \

691 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

692 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

695 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

696 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

697 
__u
->
__uc
 = '\0'; \

700 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

701 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

704 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

705 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

706 
__u
->
__uc
 = '\0'; \

709 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

710 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

711 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

712 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

715 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

716 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

717 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

718 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

719 
__u
->
__uc
 = '\0'; \

722 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

723 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

724 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

725 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

728 (*Ë
__u
; }))

	)

730 
__STRING_INLINE
 *
__memp˝y_by4
 (*
__de°
, 
__c⁄°
 *
__§c
,

731 
size_t
 
__§˛í
);

733 
__STRING_INLINE
 *

734 
	$__memp˝y_by4
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__§˛í
)

736 *
__tmp
 = 
__de°
;

737 
__d0
, 
__d1
;

738 
__asm__
 
__vﬁ©ûe__


746 : "=&r" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

747 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4)

749  
__tmp
;

750 
	}
}

752 
__STRING_INLINE
 *
__memp˝y_by2
 (*
__de°
, 
__c⁄°
 *
__§c
,

753 
size_t
 
__§˛í
);

755 
__STRING_INLINE
 *

756 
	$__memp˝y_by2
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__§˛í
)

758 *
__tmp
 = 
__de°
;

759 
__d0
, 
__d1
;

760 
__asm__
 
__vﬁ©ûe__


773 : "=&q" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
),

774 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

775 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

776 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

778  
__tmp
 + 2;

779 
	}
}

781 
__STRING_INLINE
 *
__memp˝y_byn
 (*
__de°
, 
__c⁄°
 *
__§c
,

782 
size_t
 
__§˛í
);

784 
__STRING_INLINE
 *

785 
	$__memp˝y_byn
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__§˛í
)

787 
__d0
, 
__d1
;

788 *
__tmp
 = 
__de°
;

789 
__asm__
 
__vﬁ©ûe__


800 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

801 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

802 : "0" (
__tmp
), "1" (
__§˛í
), "2" (
__§c
),

803 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

805  
__tmp
;

806 
	}
}

808 
__STRING_INLINE
 *
__°p˝y_g
 (*
__de°
, 
__c⁄°
 *
__§c
);

810 
__STRING_INLINE
 *

811 
	$__°p˝y_g
 (*
__de°
, 
__c⁄°
 *
__§c
)

813 *
__tmp
 = 
__de°
;

814 
__dummy
;

815 
__asm__
 
__vﬁ©ûe__


824 : "=&r" (
__§c
), "Ù" (
__tmp
), "=&q" (
__dummy
),

825 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

826 : "0" (
__§c
), "1" (
__tmp
),

827 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

829  
__tmp
 - 1;

830 
	}
}

835 
	#_HAVE_STRING_ARCH_°∫˝y
 1

	)

836 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

837 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

838 ? ((
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

839 ? (*Ë
	`mem˝y
 ((*Ë(
de°
), \

840 (
__c⁄°
 *Ë(
§c
), 
n
) \

841 : 
	`__°∫˝y_cg
 ((
de°
), (
§c
), 
	`°æí
 (§cË+ 1, 
n
))) \

842 : 
	`__°∫˝y_gg
 ((
de°
), (
§c
), 
n
)))

	)

843 
	#__°∫˝y_cg
(
de°
, 
§c
, 
§˛í
, 
n
) \

844 (((
§˛í
) % 4 == 0) \

845 ? 
	`__°∫˝y_by4
 (
de°
, 
§c
, 
§˛í
, 
n
) \

846 : (((
§˛í
) % 2 == 0) \

847 ? 
	`__°∫˝y_by2
 (
de°
, 
§c
, 
§˛í
, 
n
) \

848 : 
	`__°∫˝y_byn
 (
de°
, 
§c
, 
§˛í
, 
n
)))

	)

850 
__STRING_INLINE
 *
__°∫˝y_by4
 (*
__de°
, 
__c⁄°
 
__§c
[],

851 
size_t
 
__§˛í
, size_à
__n
);

853 
__STRING_INLINE
 *

854 
	$__°∫˝y_by4
 (*
__de°
, 
__c⁄°
 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

856 *
__tmp
 = 
__de°
;

857 
__dummy1
, 
__dummy2
;

858 
__asm__
 
__vﬁ©ûe__


866 : "=&r" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

867 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

868 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4),

869 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

871 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

872  
__de°
;

873 
	}
}

875 
__STRING_INLINE
 *
__°∫˝y_by2
 (*
__de°
, 
__c⁄°
 
__§c
[],

876 
size_t
 
__§˛í
, size_à
__n
);

878 
__STRING_INLINE
 *

879 
	$__°∫˝y_by2
 (*
__de°
, 
__c⁄°
 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

881 *
__tmp
 = 
__de°
;

882 
__dummy1
, 
__dummy2
;

883 
__asm__
 
__vﬁ©ûe__


896 : "=&q" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

897 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

898 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

899 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

901 (Ë
	`mem£t
 (
__tmp
 + 2, '\0', 
__n
 - 
__§˛í
);

902  
__de°
;

903 
	}
}

905 
__STRING_INLINE
 *
__°∫˝y_byn
 (*
__de°
, 
__c⁄°
 
__§c
[],

906 
size_t
 
__§˛í
, size_à
__n
);

908 
__STRING_INLINE
 *

909 
	$__°∫˝y_byn
 (*
__de°
, 
__c⁄°
 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

911 
__d0
, 
__d1
;

912 *
__tmp
 = 
__de°
;

913 
__asm__
 
__vﬁ©ûe__


924 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

925 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

926 : "1" (
__§˛í
), "0" (
__tmp
),"2" (
__§c
),

927 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

929 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

930  
__de°
;

931 
	}
}

933 
__STRING_INLINE
 *
__°∫˝y_gg
 (*
__de°
, 
__c⁄°
 *
__§c
,

934 
size_t
 
__n
);

936 
__STRING_INLINE
 *

937 
	$__°∫˝y_gg
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

939 *
__tmp
 = 
__de°
;

940 
__dummy
;

941 i‡(
__n
 > 0)

942 
__asm__
 
__vﬁ©ûe__


958 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
), "=&r" (
__n
)

959 : "0" (
__§c
), "1" (
__tmp
), "3" (
__n
)

962  
__de°
;

963 
	}
}

967 
	#_HAVE_STRING_ARCH_°rˇt
 1

	)

968 
	#°rˇt
(
de°
, 
§c
) \

969 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

970 ? 
	`__°rˇt_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

971 : 
	`__°rˇt_g
 ((
de°
), (
§c
))))

	)

973 
__STRING_INLINE
 *
__°rˇt_c
 (*
__de°
, 
__c⁄°
 
__§c
[],

974 
size_t
 
__§˛í
);

976 
__STRING_INLINE
 *

977 
	$__°rˇt_c
 (*
__de°
, 
__c⁄°
 
__§c
[], 
size_t
 
__§˛í
)

979 #ifde‡
__i686__


980 
__d0
;

981 *
__tmp
;

982 
__asm__
 
__vﬁ©ûe__


984 : "=D" (
__tmp
), "=&c" (
__d0
),

985 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

986 : "0" (
__de°
), "1" (0xffffffff), "a" (0),

987 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

989 --
__tmp
;

991 *
__tmp
 = 
__de°
 - 1;

992 
__asm__
 
__vﬁ©ûe__


997 : "Ù" (
__tmp
),

998 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

999 : "0" (
__tmp
),

1000 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

1003 (Ë
	`mem˝y
 (
__tmp
, 
__§c
, 
__§˛í
);

1004  
__de°
;

1005 
	}
}

1007 
__STRING_INLINE
 *
__°rˇt_g
 (*
__de°
, 
__c⁄°
 *
__§c
);

1009 
__STRING_INLINE
 *

1010 
	$__°rˇt_g
 (*
__de°
, 
__c⁄°
 *
__§c
)

1012 *
__tmp
 = 
__de°
 - 1;

1013 
__dummy
;

1014 
__asm__
 
__vﬁ©ûe__


1026 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
),

1027 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1028 : "1" (
__tmp
), "2" (
__§c
),

1029 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

1031  
__de°
;

1032 
	}
}

1036 
	#_HAVE_STRING_ARCH_°∫ˇt
 1

	)

1037 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

1038 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

1039 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

1040 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

1041 ? 
	`°rˇt
 (
__de°
, (
§c
)) \

1042 : (*(*)
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

1043 (
__c⁄°
 *Ë(
§c
), \

1044 (
n
)Ë0, 
__de°
)) \

1045 : 
	`__°∫ˇt_g
 (
__de°
, (
§c
), (
n
)); }))

	)

1047 
__STRING_INLINE
 *
__°∫ˇt_g
 (*
__de°
, 
__c⁄°
 
__§c
[],

1048 
size_t
 
__n
);

1050 
__STRING_INLINE
 *

1051 
	$__°∫ˇt_g
 (*
__de°
, 
__c⁄°
 
__§c
[], 
size_t
 
__n
)

1053 *
__tmp
 = 
__de°
;

1054 
__dummy
;

1055 #ifde‡
__i686__


1056 
__asm__
 
__vﬁ©ûe__


1070 : "=&a" (
__dummy
), "=&D" (
__tmp
), "=&S" (
__§c
), "=&c" (
__n
)

1071 : "g" (
__n
), "0" (0), "1" (
__tmp
), "2" (
__§c
), "3" (0xffffffff)

1074 --
__tmp
;

1075 
__asm__
 
__vﬁ©ûe__


1092 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__n
)

1093 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
)

1096  
__de°
;

1097 
	}
}

1101 
	#_HAVE_STRING_ARCH_°rcmp
 1

	)

1102 
	#°rcmp
(
s1
, 
s2
) \

1103 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

1104 && ( ((
s1
)[0]Ë!1 || 
	`°æí
 (s1) >= 4) \

1105 && ( ((
s2
)[0]Ë!1 || 
	`°æí
 (s2) >= 4) \

1106 ? 
	`memcmp
 ((
__c⁄°
 *Ë(
s1
), (__c⁄° *Ë(
s2
), \

1107 (
	`°æí
 (
s1
Ë< såÀ¿(
s2
) \

1108 ? 
	`°æí
 (
s1
Ë: såÀ¿(
s2
)) + 1) \

1109 : (
	`__buûtö_c⁄°™t_p
 (
s1
) &&  ((s1)[0]) == 1 \

1110 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (
s1
) < 4 \

1111 ? (
	`__buûtö_c⁄°™t_p
 (
s2
) &&  ((s2)[0]) == 1 \

1112 ? 
	`__°rcmp_cc
 ((
__c⁄°
 *Ë(
s1
), \

1113 (
__c⁄°
 *Ë(
s2
), \

1114 
	`°æí
 (
s1
)) \

1115 : 
	`__°rcmp_cg
 ((
__c⁄°
 *Ë(
s1
), \

1116 (
__c⁄°
 *Ë(
s2
), \

1117 
	`°æí
 (
s1
))) \

1118 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&&  ((
s1
)[0]) == 1 \

1119 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (s2) < 4 \

1120 ? (
	`__buûtö_c⁄°™t_p
 (
s1
) \

1121 ? 
	`__°rcmp_cc
 ((
__c⁄°
 *Ë(
s1
), \

1122 (
__c⁄°
 *Ë(
s2
), \

1123 
	`°æí
 (
s2
)) \

1124 : 
	`__°rcmp_gc
 ((
__c⁄°
 *Ë(
s1
), \

1125 (
__c⁄°
 *Ë(
s2
), \

1126 
	`°æí
 (
s2
))) \

1127 : 
	`__°rcmp_gg
 ((
s1
), (
s2
))))))

	)

1129 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

1130 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = (
s1
)[0] - (
s2
)[0]; \

1131 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

1133 
__ªsu…
 = (
s1
)[1] - (
s2
)[1]; \

1134 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

1136 
__ªsu…
 = (
s1
)[2] - (
s2
)[2]; \

1137 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

1138 
__ªsu…
 = (
s1
)[3] - (
s2
)[3]; \

1141 
__ªsu…
; }))

	)

1143 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

1144 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s2
 = (
s2
); \

1145 
__ªsu…
 = (
s1
)[0] - 
__s2
[0]; \

1146 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

1148 
__ªsu…
 = (
s1
)[1] - 
__s2
[1]; \

1149 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

1151 
__ªsu…
 = (
s1
)[2] - 
__s2
[2]; \

1152 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

1153 
__ªsu…
 = (
s1
)[3] - 
__s2
[3]; \

1156 
__ªsu…
; }))

	)

1158 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

1159 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s1
 = (
s1
); \

1160 
__ªsu…
 = 
__s1
[0] - (
s2
)[0]; \

1161 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

1163 
__ªsu…
 = 
__s1
[1] - (
s2
)[1]; \

1164 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

1166 
__ªsu…
 = 
__s1
[2] - (
s2
)[2]; \

1167 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

1168 
__ªsu…
 = 
__s1
[3] - (
s2
)[3]; \

1171 
__ªsu…
; }))

	)

1173 
__STRING_INLINE
 
__°rcmp_gg
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
);

1175 
__STRING_INLINE
 

1176 
	$__°rcmp_gg
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

1178 
__ªs
;

1179 
__asm__
 
__vﬁ©ûe__


1195 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
)

1196 : "1" (
__s1
), "2" (
__s2
),

1197 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s1
),

1198 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s2
)

1200  
__ªs
;

1201 
	}
}

1205 
	#_HAVE_STRING_ARCH_°∫cmp
 1

	)

1206 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

1207 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`°æí
 (s1Ë< ((
size_t
Ë(
n
)) \

1208 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1209 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`°æí
 (s2Ë< ((
size_t
Ë(
n
))\

1210 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1211 : 
	`__°∫cmp_g
 ((
s1
), (
s2
), (
n
)))))

	)

1213 
__STRING_INLINE
 
__°∫cmp_g
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

1214 
size_t
 
__n
);

1216 
__STRING_INLINE
 

1217 
	$__°∫cmp_g
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

1219 
__ªs
;

1220 
__asm__
 
__vﬁ©ûe__


1239 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
), "=&r" (
__n
)

1240 : "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

1241 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

1242 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

1244  
__ªs
;

1245 
	}
}

1249 
	#_HAVE_STRING_ARCH_°rchr
 1

	)

1250 
	#_USE_STRING_ARCH_°rchr
 1

	)

1251 
	#°rchr
(
s
, 
c
) \

1252 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1253 ? ((
c
) == '\0' \

1254 ? (*Ë
	`__øwmemchr
 ((
s
), (
c
)) \

1255 : 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1256 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1258 
__STRING_INLINE
 *
__°rchr_c
 (
__c⁄°
 *
__s
, 
__c
);

1260 
__STRING_INLINE
 *

1261 
	$__°rchr_c
 (
__c⁄°
 *
__s
, 
__c
)

1263 
__d0
;

1264 *
__ªs
;

1265 
__asm__
 
__vﬁ©ûe__


1275 : "Ù" (
__ªs
), "=&a" (
__d0
)

1276 : "0" (
__s
), "1" (
__c
),

1277 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1279  
__ªs
;

1280 
	}
}

1282 
__STRING_INLINE
 *
__°rchr_g
 (
__c⁄°
 *
__s
, 
__c
);

1284 
__STRING_INLINE
 *

1285 
	$__°rchr_g
 (
__c⁄°
 *
__s
, 
__c
)

1287 
__d0
;

1288 *
__ªs
;

1289 
__asm__
 
__vﬁ©ûe__


1300 : "Ù" (
__ªs
), "=&a" (
__d0
)

1301 : "0" (
__s
), "1" (
__c
),

1302 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1304  
__ªs
;

1305 
	}
}

1309 
	#_HAVE_STRING_ARCH_°rch∫ul
 1

	)

1310 
	#__°rch∫ul
(
s
, 
c
) \

1311 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1312 ? ((
c
) == '\0' \

1313 ? (*Ë
	`__øwmemchr
 ((
s
), 
c
) \

1314 : 
	`__°rch∫ul_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1315 : 
	`__°rch∫ul_g
 ((
s
), 
c
)))

	)

1317 
__STRING_INLINE
 *
__°rch∫ul_c
 (
__c⁄°
 *
__s
, 
__c
);

1319 
__STRING_INLINE
 *

1320 
	$__°rch∫ul_c
 (
__c⁄°
 *
__s
, 
__c
)

1322 
__d0
;

1323 *
__ªs
;

1324 
__asm__
 
__vﬁ©ûe__


1334 : "Ù" (
__ªs
), "=&a" (
__d0
)

1335 : "0" (
__s
), "1" (
__c
),

1336 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1338  
__ªs
;

1339 
	}
}

1341 
__STRING_INLINE
 *
__°rch∫ul_g
 (
__c⁄°
 *
__s
, 
__c
);

1343 
__STRING_INLINE
 *

1344 
	$__°rch∫ul_g
 (
__c⁄°
 *
__s
, 
__c
)

1346 
__d0
;

1347 *
__ªs
;

1348 
__asm__
 
__vﬁ©ûe__


1359 : "Ù" (
__ªs
), "=&a" (
__d0
)

1360 : "0" (
__s
), "1" (
__c
),

1361 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1363  
__ªs
;

1364 
	}
}

1365 #ifde‡
__USE_GNU


1366 
	#°rch∫ul
(
s
, 
c
Ë
	`__°rch∫ul
 ((s), (c))

	)

1370 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1372 
	#_HAVE_STRING_ARCH_ödex
 1

	)

1373 
	#ödex
(
s
, 
c
) \

1374 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1375 ? 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1376 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1381 
	#_HAVE_STRING_ARCH_°ºchr
 1

	)

1382 
	#°ºchr
(
s
, 
c
) \

1383 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1384 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1385 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1387 #ifde‡
__i686__


1388 
__STRING_INLINE
 *
__°ºchr_c
 (
__c⁄°
 *
__s
, 
__c
);

1390 
__STRING_INLINE
 *

1391 
	$__°ºchr_c
 (
__c⁄°
 *
__s
, 
__c
)

1393 
__d0
, 
__d1
;

1394 *
__ªs
;

1395 
__asm__
 
__vﬁ©ûe__


1403 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1404 : "0" (1), "1" (
__s
), "2" (
__c
),

1405 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1407  
__ªs
 - 1;

1408 
	}
}

1410 
__STRING_INLINE
 *
__°ºchr_g
 (
__c⁄°
 *
__s
, 
__c
);

1412 
__STRING_INLINE
 *

1413 
	$__°ºchr_g
 (
__c⁄°
 *
__s
, 
__c
)

1415 
__d0
, 
__d1
;

1416 *
__ªs
;

1417 
__asm__
 
__vﬁ©ûe__


1426 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1427 : "0" (1), "1" (
__s
), "2" (
__c
),

1428 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1430  
__ªs
 - 1;

1431 
	}
}

1433 
__STRING_INLINE
 *
__°ºchr_c
 (
__c⁄°
 *
__s
, 
__c
);

1435 
__STRING_INLINE
 *

1436 
	$__°ºchr_c
 (
__c⁄°
 *
__s
, 
__c
)

1438 
__d0
, 
__d1
;

1439 *
__ªs
;

1440 
__asm__
 
__vﬁ©ûe__


1450 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1451 : "0" (0), "1" (
__s
), "2" (
__c
),

1452 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1454  
__ªs
;

1455 
	}
}

1457 
__STRING_INLINE
 *
__°ºchr_g
 (
__c⁄°
 *
__s
, 
__c
);

1459 
__STRING_INLINE
 *

1460 
	$__°ºchr_g
 (
__c⁄°
 *
__s
, 
__c
)

1462 
__d0
, 
__d1
;

1463 *
__ªs
;

1464 
__asm__
 
__vﬁ©ûe__


1475 : "Ù" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1476 : "0" (0), "1" (
__s
), "2" (
__c
),

1477 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1479  
__ªs
;

1480 
	}
}

1484 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1486 
	#_HAVE_STRING_ARCH_rödex
 1

	)

1487 
	#rödex
(
s
, 
c
) \

1488 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1489 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1490 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1496 
	#_HAVE_STRING_ARCH_°rc•n
 1

	)

1497 
	#°rc•n
(
s
, 
ªje˘
) \

1498 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
) &&  ((reject)[0]) == 1 \

1499 ? ((
ªje˘
)[0] == '\0' \

1500 ? 
	`°æí
 (
s
) \

1501 : ((
ªje˘
)[1] == '\0' \

1502 ? 
	`__°rc•n_c1
 ((
s
), (((
ªje˘
)[0] << 8) & 0xff00)) \

1503 : 
	`__°rc•n_cg
 ((
s
), (
ªje˘
), 
	`°æí
 (reject)))) \

1504 : 
	`__°rc•n_g
 ((
s
), (
ªje˘
))))

	)

1506 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
);

1508 #i‚de‡
_FORCE_INLINES


1509 
__STRING_INLINE
 
size_t


1510 
	$__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
)

1512 
__d0
;

1513 *
__ªs
;

1514 
__asm__
 
__vﬁ©ûe__


1523 : "Ù" (
__ªs
), "=&a" (
__d0
)

1524 : "0" (
__s
), "1" (
__ªje˘
),

1525 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1527  (
__ªs
 - 1Ë- 
__s
;

1528 
	}
}

1531 
__STRING_INLINE
 
size_t
 
__°rc•n_cg
 (
__c⁄°
 *
__s
, __c⁄° 
__ªje˘
[],

1532 
size_t
 
__ªje˘_Àn
);

1534 
__STRING_INLINE
 
size_t


1535 
	$__°rc•n_cg
 (
__c⁄°
 *
__s
, __c⁄° 
__ªje˘
[], 
size_t
 
__ªje˘_Àn
)

1537 
__d0
, 
__d1
, 
__d2
;

1538 
__c⁄°
 *
__ªs
;

1539 
__asm__
 
__vﬁ©ûe__


1550 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1551 : "0" (
__s
), "d" (
__ªje˘
), "g" (
__ªje˘_Àn
)

1553  (
__ªs
 - 1Ë- 
__s
;

1554 
	}
}

1556 
__STRING_INLINE
 
size_t
 
__°rc•n_g
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
);

1557 #ifde‡
__PIC__


1559 
__STRING_INLINE
 
size_t


1560 
	$__°rc•n_g
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

1562 
__d0
, 
__d1
, 
__d2
;

1563 
__c⁄°
 *
__ªs
;

1564 
__asm__
 
__vﬁ©ûe__


1581 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1582 : "r" (
__ªje˘
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1584  (
__ªs
 - 1Ë- 
__s
;

1585 
	}
}

1587 
__STRING_INLINE
 
size_t


1588 
	$__°rc•n_g
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

1590 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1591 
__c⁄°
 *
__ªs
;

1592 
__asm__
 
__vﬁ©ûe__


1606 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1607 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ªje˘
), "b" (__reject)

1610  (
__ªs
 - 1Ë- 
__s
;

1611 
	}
}

1617 
	#_HAVE_STRING_ARCH_°r•n
 1

	)

1618 
	#°r•n
(
s
, 
ac˚±
) \

1619 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1620 ? ((
ac˚±
)[0] == '\0' \

1621 ? ((Ë(
s
), 0) \

1622 : ((
ac˚±
)[1] == '\0' \

1623 ? 
	`__°r•n_c1
 ((
s
), (((
ac˚±
)[0] << 8 ) & 0xff00)) \

1624 : 
	`__°r•n_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1625 : 
	`__°r•n_g
 ((
s
), (
ac˚±
))))

	)

1627 #i‚de‡
_FORCE_INLINES


1628 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
);

1630 
__STRING_INLINE
 
size_t


1631 
	$__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
)

1633 
__d0
;

1634 *
__ªs
;

1636 
__asm__
 
__vﬁ©ûe__


1642 : "Ù" (
__ªs
), "=&q" (
__d0
)

1643 : "0" (
__s
), "1" (
__ac˚±
),

1644 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1646  (
__ªs
 - 1Ë- 
__s
;

1647 
	}
}

1650 
__STRING_INLINE
 
size_t
 
__°r•n_cg
 (
__c⁄°
 *
__s
, __c⁄° 
__ac˚±
[],

1651 
size_t
 
__ac˚±_Àn
);

1653 
__STRING_INLINE
 
size_t


1654 
	$__°r•n_cg
 (
__c⁄°
 *
__s
, __c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1656 
__d0
, 
__d1
, 
__d2
;

1657 
__c⁄°
 *
__ªs
;

1658 
__asm__
 
__vﬁ©ûe__


1669 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1670 : "0" (
__s
), "g" (
__ac˚±
), "g" (
__ac˚±_Àn
),

1673 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
),

1674 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__ac˚±_Àn
]; } *)
__ac˚±
)

1676  (
__ªs
 - 1Ë- 
__s
;

1677 
	}
}

1679 
__STRING_INLINE
 
size_t
 
__°r•n_g
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
);

1680 #ifde‡
__PIC__


1682 
__STRING_INLINE
 
size_t


1683 
	$__°r•n_g
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

1685 
__d0
, 
__d1
, 
__d2
;

1686 
__c⁄°
 *
__ªs
;

1687 
__asm__
 
__vﬁ©ûe__


1703 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1704 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (__accept)

1706  (
__ªs
 - 1Ë- 
__s
;

1707 
	}
}

1709 
__STRING_INLINE
 
size_t


1710 
	$__°r•n_g
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

1712 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1713 
__c⁄°
 *
__ªs
;

1714 
__asm__
 
__vﬁ©ûe__


1728 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1729 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ac˚±
), "b" (__accept)

1731  (
__ªs
 - 1Ë- 
__s
;

1732 
	}
}

1737 
	#_HAVE_STRING_ARCH_°Ωbrk
 1

	)

1738 
	#°Ωbrk
(
s
, 
ac˚±
) \

1739 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1740 ? ((
ac˚±
)[0] == '\0' \

1741 ? ((Ë(
s
), (*) 0) \

1742 : ((
ac˚±
)[1] == '\0' \

1743 ? 
	`°rchr
 ((
s
), (
ac˚±
)[0]) \

1744 : 
	`__°Ωbrk_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1745 : 
	`__°Ωbrk_g
 ((
s
), (
ac˚±
))))

	)

1747 
__STRING_INLINE
 *
__°Ωbrk_cg
 (
__c⁄°
 *
__s
, __c⁄° 
__ac˚±
[],

1748 
size_t
 
__ac˚±_Àn
);

1750 
__STRING_INLINE
 *

1751 
	$__°Ωbrk_cg
 (
__c⁄°
 *
__s
, __c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1753 
__d0
, 
__d1
, 
__d2
;

1754 *
__ªs
;

1755 
__asm__
 
__vﬁ©ûe__


1770 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1771 : "0" (
__s
), "d" (
__ac˚±
), "g" (
__ac˚±_Àn
)

1773  
__ªs
;

1774 
	}
}

1776 
__STRING_INLINE
 *
__°Ωbrk_g
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
);

1777 #ifde‡
__PIC__


1779 
__STRING_INLINE
 *

1780 
	$__°Ωbrk_g
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

1782 
__d0
, 
__d1
, 
__d2
;

1783 *
__ªs
;

1784 
__asm__
 
__vﬁ©ûe__


1805 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1806 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1808  
__ªs
;

1809 
	}
}

1811 
__STRING_INLINE
 *

1812 
	$__°Ωbrk_g
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

1814 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1815 *
__ªs
;

1816 
__asm__
 
__vﬁ©ûe__


1835 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&d" (
__d2
), "=&D" (
__d3
)

1836 : "0" (
__s
), "1" (0), "2" (0xffffffff), "b" (
__ac˚±
)

1838  
__ªs
;

1839 
	}
}

1844 
	#_HAVE_STRING_ARCH_°r°r
 1

	)

1845 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1846 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
) &&  ((needle)[0]) == 1 \

1847 ? ((
√edÀ
)[0] == '\0' \

1848 ? (
hay°ack
) \

1849 : ((
√edÀ
)[1] == '\0' \

1850 ? 
	`°rchr
 ((
hay°ack
), (
√edÀ
)[0]) \

1851 : 
	`__°r°r_cg
 ((
hay°ack
), (
√edÀ
), \

1852 
	`°æí
 (
√edÀ
)))) \

1853 : 
	`__°r°r_g
 ((
hay°ack
), (
√edÀ
))))

	)

1857 
__STRING_INLINE
 *
__°r°r_cg
 (
__c⁄°
 *
__hay°ack
, __c⁄° 
__√edÀ
[],

1858 
size_t
 
__√edÀ_Àn
);

1860 
__STRING_INLINE
 *

1861 
	$__°r°r_cg
 (
__c⁄°
 *
__hay°ack
, __c⁄° 
__√edÀ
[],

1862 
size_t
 
__√edÀ_Àn
)

1864 
__d0
, 
__d1
, 
__d2
;

1865 *
__ªs
;

1866 
__asm__
 
__vﬁ©ûe__


1879 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

1880 : "g" (
__√edÀ_Àn
), "1" (
__hay°ack
), "d" (
__√edÀ
)

1882  
__ªs
;

1883 
	}
}

1885 
__STRING_INLINE
 *
__°r°r_g
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
);

1886 #ifde‡
__PIC__


1888 
__STRING_INLINE
 *

1889 
	$__°r°r_g
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

1891 
__d0
, 
__d1
, 
__d2
;

1892 *
__ªs
;

1893 
__asm__
 
__vﬁ©ûe__


1912 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
)

1913 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1914 "d" (
__√edÀ
)

1916  
__ªs
;

1917 
	}
}

1919 
__STRING_INLINE
 *

1920 
	$__°r°r_g
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

1922 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1923 *
__ªs
;

1924 
__asm__
 
__vﬁ©ûe__


1941 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1942 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1943 "b" (
__√edÀ
)

1945  
__ªs
;

1946 
	}
}

1952 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1953 #ifde‡
__i686__


1954 
	#_HAVE_STRING_ARCH_ffs
 1

	)

1955 
	#ffs
(
w‹d
Ë(
	`__buûtö_c⁄°™t_p
 (word) \

1956 ? 
	`__buûtö_ffs
 (
w‹d
) \

1957 : ({ 
__˙t
, 
__tmp
; \

1958 
__asm__
 
__vﬁ©ûe__
 \

1961 : "=&r" (
__˙t
), "Ù" (
__tmp
) \

1962 : "rm" (
w‹d
), "1" (-1)); \

1963 
__˙t
 + 1; }))

	)

1965 #i‚de‡
ff¶


1966 
	#ff¶
(
w‹d
Ë
	`ffs
(w‹d)

	)

1971 #i‚de‡
_FORCE_INLINES


1972 #unde‡
__STRING_INLINE


	@/usr/include/bits/string2.h

21 #i‚de‡
_STRING_H


25 #i‡!
deföed
 
__NO_STRING_INLINES
 && !deföed 
__BOUNDED_POINTERS__


42 #i‚de‡
__STRING_INLINE


43 #ifde‡
__˝lu•lus


44 
	#__STRING_INLINE
 
ölöe


	)

46 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 #i‡
_STRING_ARCH_u«lig√d


52 
	~<ídün.h
>

53 
	~<bôs/ty≥s.h
>

55 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


56 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

57 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

58 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

59 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

60 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

61 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

62 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

63 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

65 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

66 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

67 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1])

	)

68 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

69 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

70 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

71 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

72 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3])

	)

77 
	#__STRING2_COPY_TYPE
(
N
) \

78 °ru˘ { 
__¨r
[
N
]; } \

79 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

80 
	t__STRING2_COPY_TYPE
 (2);

81 
__STRING2_COPY_TYPE
 (3);

82 
__STRING2_COPY_TYPE
 (4);

83 
__STRING2_COPY_TYPE
 (5);

84 
__STRING2_COPY_TYPE
 (6);

85 
__STRING2_COPY_TYPE
 (7);

86 
__STRING2_COPY_TYPE
 (8);

87 #unde‡
__STRING2_COPY_TYPE


93 
	#__°rög2_1b±r_p
(
__x
) \

94 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

97 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


98 #i‡!
__GNUC_PREREQ
 (3, 0)

99 #i‡
_STRING_ARCH_u«lig√d


100 
	#mem£t
(
s
, 
c
, 
n
) \

101 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

102 ? ((
n
) == 1 \

103 ? 
	`__mem£t_1
 (
s
, 
c
) \

104 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

105 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

106 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

107 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

109 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

110 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

112 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

113 ({ *
__s
 = (
s
); \

115 
__ui
; \

116 
__usi
; \

117 
__uc
; \

118 } *
__u
 = 
__s
; \

119 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

122 (Ë(
n
)) \

125 
__u
->
__ui
 = 
__c
 * 0x01010101; \

126 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

128 
__u
->
__ui
 = 
__c
 * 0x01010101; \

129 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

131 
__u
->
__ui
 = 
__c
 * 0x01010101; \

132 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

134 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

135 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

136 
__u
->
__uc
 = (Ë
__c
; \

140 
__u
->
__ui
 = 
__c
 * 0x01010101; \

141 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

143 
__u
->
__ui
 = 
__c
 * 0x01010101; \

144 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

146 
__u
->
__ui
 = 
__c
 * 0x01010101; \

147 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

149 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

153 
__u
->
__ui
 = 
__c
 * 0x01010101; \

154 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

156 
__u
->
__ui
 = 
__c
 * 0x01010101; \

157 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

159 
__u
->
__ui
 = 
__c
 * 0x01010101; \

160 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

162 
__u
->
__uc
 = (Ë
__c
; \

166 
__u
->
__ui
 = 
__c
 * 0x01010101; \

167 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

169 
__u
->
__ui
 = 
__c
 * 0x01010101; \

170 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

172 
__u
->
__ui
 = 
__c
 * 0x01010101; \

173 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

175 
__u
->
__ui
 = 
__c
 * 0x01010101; \

180 
__s
; })

	)

182 
	#mem£t
(
s
, 
c
, 
n
) \

183 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

184 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

185 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

194 #i‡
__GNUC_PREREQ
 (2, 91)

195 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

203 #ifde‡
__USE_GNU


204 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


205 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


206 #i‡
__GNUC_PREREQ
 (3, 4)

207 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

208 #ñi‡
__GNUC_PREREQ
 (3, 0)

209 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

210 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

211 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

212 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

213 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

215 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

216 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

217 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

218 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

219 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

223 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

226 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


227 #i‡
_STRING_ARCH_u«lig√d


228 #i‚de‡
_FORCE_INLINES


229 
	#__memp˝y_¨gs
(
§c
) \

230 ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[2], \

231 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[6], \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

235 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

237 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

238 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

239 
__uöt32_t
, 
size_t
);

240 
__STRING_INLINE
 *

241 
	$__memp˝y_smÆl
 (*
__de°1
,

242 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

243 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

244 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

245 
size_t
 
__§˛í
)

248 
__uöt32_t
 
__ui
;

249 
__uöt16_t
 
__usi
;

250 
__uc
;

251 
__c
;

252 } *
__u
 = 
__de°1
;

253 (Ë
__§˛í
)

256 
__u
->
__c
 = 
__§c0_1
;

257 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

260 
__u
->
__usi
 = 
__§c0_2
;

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

264 
__u
->
__usi
 = 
__§c0_2
;

265 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

266 
__u
->
__c
 = 
__§c2_1
;

267 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

270 
__u
->
__ui
 = 
__§c0_4
;

271 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

274 
__u
->
__ui
 = 
__§c0_4
;

275 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

276 
__u
->
__c
 = 
__§c4_1
;

277 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

280 
__u
->
__ui
 = 
__§c0_4
;

281 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

282 
__u
->
__usi
 = 
__§c4_2
;

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

286 
__u
->
__ui
 = 
__§c0_4
;

287 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

288 
__u
->
__usi
 = 
__§c4_2
;

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

290 
__u
->
__c
 = 
__§c6_1
;

291 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

294 
__u
->
__ui
 = 
__§c0_4
;

295 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

296 
__u
->
__ui
 = 
__§c4_4
;

297 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

300  (*Ë
__u
;

301 
	}
}

303 #i‚de‡
_FORCE_INLINES


304 
	#__memp˝y_¨gs
(
§c
) \

305 ((
__c⁄°
 *Ë(
§c
))[0], \

306 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

307 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1] } }), \

308 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

309 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

310 ((
__c⁄°
 *Ë(
§c
))[2] } }), \

311 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

312 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

313 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3] } }), \

314 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

315 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

316 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

317 ((
__c⁄°
 *Ë(
§c
))[4] } }), \

318 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

319 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

320 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

321 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5] } }), \

322 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

323 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

324 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

325 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

326 ((
__c⁄°
 *Ë(
§c
))[6] } }), \

327 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

328 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

329 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

330 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

331 ((
__c⁄°
 *Ë(
§c
))[6], ((__c⁄° *Ë(§c))[7] } })

	)

333 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

334 
__STRING2_COPY_ARR3
,

335 
__STRING2_COPY_ARR4
,

336 
__STRING2_COPY_ARR5
,

337 
__STRING2_COPY_ARR6
,

338 
__STRING2_COPY_ARR7
,

339 
__STRING2_COPY_ARR8
, 
size_t
);

340 
__STRING_INLINE
 *

341 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

342 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

343 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

344 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

345 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

348 
__c
;

349 
__STRING2_COPY_ARR2
 
__sˇ2
;

350 
__STRING2_COPY_ARR3
 
__sˇ3
;

351 
__STRING2_COPY_ARR4
 
__sˇ4
;

352 
__STRING2_COPY_ARR5
 
__sˇ5
;

353 
__STRING2_COPY_ARR6
 
__sˇ6
;

354 
__STRING2_COPY_ARR7
 
__sˇ7
;

355 
__STRING2_COPY_ARR8
 
__sˇ8
;

356 } *
__u
 = 
__de°
;

357 (Ë
__§˛í
)

360 
__u
->
__c
 = 
__§c1
;

363 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

366 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

369 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

372 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

375 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

378 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

381 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

384  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

385 
	}
}

393 #i‚de‡
_HAVE_STRING_ARCH_°rchr


394 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

395 #i‡
__GNUC_PREREQ
 (3, 2)

396 
	#°rchr
(
s
, 
c
) \

397 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

398 && (
c
) == '\0' \

399 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

400 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

402 
	#°rchr
(
s
, 
c
) \

403 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

404 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

405 : 
	`°rchr
 (
s
, 
c
)))

	)

411 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

412 || 
deföed
 
	g_FORCE_INLINES


413 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

414 
	#°r˝y
(
de°
, 
§c
) \

415 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

416 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

417 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

418 
	`°æí
 (
§c
) + 1) \

419 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

420 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

423 #i‡
_STRING_ARCH_u«lig√d


424 #i‚de‡
_FORCE_INLINES


425 
	#__°r˝y_¨gs
(
§c
) \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

429 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

431 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

432 
__uöt32_t
, __uöt32_t, 
size_t
);

433 
__STRING_INLINE
 *

434 
	$__°r˝y_smÆl
 (*
__de°
,

435 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

436 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

437 
size_t
 
__§˛í
)

440 
__uöt32_t
 
__ui
;

441 
__uöt16_t
 
__usi
;

442 
__uc
;

443 } *
__u
 = (*Ë
__de°
;

444 (Ë
__§˛í
)

447 
__u
->
__uc
 = '\0';

450 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
->
__usi
 = 
__§c0_2
;

454 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

455 
__u
->
__uc
 = '\0';

458 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
->
__ui
 = 
__§c0_4
;

462 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

463 
__u
->
__uc
 = '\0';

466 
__u
->
__ui
 = 
__§c0_4
;

467 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

468 
__u
->
__usi
 = 
__§c4_2
;

471 
__u
->
__ui
 = 
__§c0_4
;

472 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

473 
__u
->
__usi
 = 
__§c4_2
;

474 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

475 
__u
->
__uc
 = '\0';

478 
__u
->
__ui
 = 
__§c0_4
;

479 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

480 
__u
->
__ui
 = 
__§c4_4
;

483  
__de°
;

484 
	}
}

486 #i‚de‡
_FORCE_INLINES


487 
	#__°r˝y_¨gs
(
§c
) \

488 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

489 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

490 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

491 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

493 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

494 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

495 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

496 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

497 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

498 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

500 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

501 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

502 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

503 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

504 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

505 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

506 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

507 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

509 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

510 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

511 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

512 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

513 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

515 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

516 
__STRING2_COPY_ARR3
,

517 
__STRING2_COPY_ARR4
,

518 
__STRING2_COPY_ARR5
,

519 
__STRING2_COPY_ARR6
,

520 
__STRING2_COPY_ARR7
,

521 
__STRING2_COPY_ARR8
, 
size_t
);

522 
__STRING_INLINE
 *

523 
	$__°r˝y_smÆl
 (*
__de°
,

524 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

525 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

526 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

527 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

530 
__c
;

531 
__STRING2_COPY_ARR2
 
__sˇ2
;

532 
__STRING2_COPY_ARR3
 
__sˇ3
;

533 
__STRING2_COPY_ARR4
 
__sˇ4
;

534 
__STRING2_COPY_ARR5
 
__sˇ5
;

535 
__STRING2_COPY_ARR6
 
__sˇ6
;

536 
__STRING2_COPY_ARR7
 
__sˇ7
;

537 
__STRING2_COPY_ARR8
 
__sˇ8
;

538 } *
__u
 = (*Ë
__de°
;

539 (Ë
__§˛í
)

542 
__u
->
__c
 = '\0';

545 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

548 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

551 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

554 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

557 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

560 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

563 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

566  
__de°
;

567 
	}
}

573 #ifde‡
__USE_GNU


574 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


575 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


576 #i‡
__GNUC_PREREQ
 (3, 4)

577 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

578 #ñi‡
__GNUC_PREREQ
 (3, 0)

579 
	#__°p˝y
(
de°
, 
§c
) \

580 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

581 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

582 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

583 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

585 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

587 
	#__°p˝y
(
de°
, 
§c
) \

588 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

589 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

590 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

591 
	`°æí
 (
§c
) + 1) \

592 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

594 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

598 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

601 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


602 #i‡
_STRING_ARCH_u«lig√d


603 #i‚de‡
_FORCE_INLINES


604 
	#__°p˝y_¨gs
(
§c
) \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

608 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

610 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

611 
__uöt32_t
, __uöt32_t, 
size_t
);

612 
__STRING_INLINE
 *

613 
	$__°p˝y_smÆl
 (*
__de°
,

614 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

615 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

616 
size_t
 
__§˛í
)

619 
__ui
;

620 
__usi
;

621 
__uc
;

622 
__c
;

623 } *
__u
 = (*Ë
__de°
;

624 (Ë
__§˛í
)

627 
__u
->
__uc
 = '\0';

630 
__u
->
__usi
 = 
__§c0_2
;

631 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

634 
__u
->
__usi
 = 
__§c0_2
;

635 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

636 
__u
->
__uc
 = '\0';

639 
__u
->
__ui
 = 
__§c0_4
;

640 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

643 
__u
->
__ui
 = 
__§c0_4
;

644 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

645 
__u
->
__uc
 = '\0';

648 
__u
->
__ui
 = 
__§c0_4
;

649 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

650 
__u
->
__usi
 = 
__§c4_2
;

651 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

654 
__u
->
__ui
 = 
__§c0_4
;

655 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

656 
__u
->
__usi
 = 
__§c4_2
;

657 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

658 
__u
->
__uc
 = '\0';

661 
__u
->
__ui
 = 
__§c0_4
;

662 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

663 
__u
->
__ui
 = 
__§c4_4
;

664 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

667  &
__u
->
__c
;

668 
	}
}

670 #i‚de‡
_FORCE_INLINES


671 
	#__°p˝y_¨gs
(
§c
) \

672 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

673 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

674 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

675 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

677 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

678 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

679 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

680 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

681 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

682 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

684 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

685 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

686 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

687 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

688 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

689 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

690 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

691 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

693 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

694 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

695 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

696 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

697 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

699 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

700 
__STRING2_COPY_ARR3
,

701 
__STRING2_COPY_ARR4
,

702 
__STRING2_COPY_ARR5
,

703 
__STRING2_COPY_ARR6
,

704 
__STRING2_COPY_ARR7
,

705 
__STRING2_COPY_ARR8
, 
size_t
);

706 
__STRING_INLINE
 *

707 
	$__°p˝y_smÆl
 (*
__de°
,

708 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

709 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

710 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

711 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

714 
__c
;

715 
__STRING2_COPY_ARR2
 
__sˇ2
;

716 
__STRING2_COPY_ARR3
 
__sˇ3
;

717 
__STRING2_COPY_ARR4
 
__sˇ4
;

718 
__STRING2_COPY_ARR5
 
__sˇ5
;

719 
__STRING2_COPY_ARR6
 
__sˇ6
;

720 
__STRING2_COPY_ARR7
 
__sˇ7
;

721 
__STRING2_COPY_ARR8
 
__sˇ8
;

722 } *
__u
 = (*Ë
__de°
;

723 (Ë
__§˛í
)

726 
__u
->
__c
 = '\0';

729 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

732 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

735 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

738 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

741 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

744 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

747 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

750  
__de°
 + 
__§˛í
 - 1;

751 
	}
}

759 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


760 #i‡
__GNUC_PREREQ
 (3, 2)

761 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

763 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

764 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

765 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

766 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

768 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

774 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


775 #ifde‡
_USE_STRING_ARCH_°rchr


776 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

777 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

778 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

779 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

780 ? 
	`°rˇt
 (
__de°
, 
§c
) \

781 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

782 
§c
, 
n
)Ë'\0', 
__de°
)) \

783 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

784 #ñi‡
__GNUC_PREREQ
 (3, 2)

785 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

787 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

788 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

789 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

790 ? 
	`°rˇt
 (
de°
, 
§c
) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

792 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

798 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


799 #i‡
__GNUC_PREREQ
 (3, 2)

800 
	#°rcmp
(
s1
, 
s2
) \

801 
__exãnsi⁄__
 \

802 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

803 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

804 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

805 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

806 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

807 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

808 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

809 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

810 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

811 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

812 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

813 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

814 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

815 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

816 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

817 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

818 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

820 
	#°rcmp
(
s1
, 
s2
) \

821 
__exãnsi⁄__
 \

822 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

823 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

824 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

825 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

826 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

827 ? 
	`memcmp
 ((
__c⁄°
 *Ë(
s1
), (__c⁄° *Ë(
s2
), \

828 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

829 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

830 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

831 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

832 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

833 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

834 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

835 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

836 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

837 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

838 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

839 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

842 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

843 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

844 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

845 - ((
__c⁄°
 *Ë(__c⁄° *)(
s2
))[0]);\

846 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

848 
__ªsu…
 = (((
__c⁄°
 *) \

849 (
__c⁄°
 *Ë(
s1
))[1] \

850 - ((
__c⁄°
 *) \

851 (
__c⁄°
 *Ë(
s2
))[1]); \

852 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

854 
__ªsu…
 = \

855 (((
__c⁄°
 *) \

856 (
__c⁄°
 *Ë(
s1
))[2] \

857 - ((
__c⁄°
 *) \

858 (
__c⁄°
 *Ë(
s2
))[2]); \

859 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

860 
__ªsu…
 = \

861 (((
__c⁄°
 *) \

862 (
__c⁄°
 *Ë(
s1
))[3] \

863 - ((
__c⁄°
 *) \

864 (
__c⁄°
 *Ë(
s2
))[3]); \

867 
__ªsu…
; }))

	)

869 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

870 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s2
 = \

871 (
__c⁄°
 *Ë(__c⁄° *Ë(
s2
); \

872 
__ªsu…
 = \

873 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

874 - 
__s2
[0]); \

875 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

877 
__ªsu…
 = (((
__c⁄°
 *) \

878 (
__c⁄°
 *Ë(
s1
))[1] - 
__s2
[1]); \

879 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

881 
__ªsu…
 = (((
__c⁄°
 *) \

882 (
__c⁄°
 *Ë(
s1
))[2] - 
__s2
[2]);\

883 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

884 
__ªsu…
 = (((
__c⁄°
 *) \

885 (
__c⁄°
 *Ë(
s1
))[3] \

886 - 
__s2
[3]); \

889 
__ªsu…
; }))

	)

891 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

892 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s1
 = \

893 (
__c⁄°
 *Ë(__c⁄° *Ë(
s1
); \

894 
__ªsu…
 = \

895 
__s1
[0] - ((
__c⁄°
 *) \

896 (
__c⁄°
 *Ë(
s2
))[0]; \

897 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

899 
__ªsu…
 = (
__s1
[1] \

900 - ((
__c⁄°
 *) \

901 (
__c⁄°
 *Ë(
s2
))[1]); \

902 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

904 
__ªsu…
 = \

905 (
__s1
[2] - ((
__c⁄°
 *) \

906 (
__c⁄°
 *Ë(
s2
))[2]); \

907 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

908 
__ªsu…
 = \

909 (
__s1
[3] \

910 - ((
__c⁄°
 *) \

911 (
__c⁄°
 *Ë(
s2
))[3]); \

914 
__ªsu…
; }))

	)

919 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


920 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

921 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

922 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

923 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

924 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

925 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

926 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

932 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


933 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


934 #i‡
__GNUC_PREREQ
 (3, 2)

935 
	#°rc•n
(
s
, 
ªje˘
) \

936 
__exãnsi⁄__
 \

937 ({ 
__r0
, 
__r1
, 
__r2
; \

938 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

939 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

940 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

941 : ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

942 ? 
	`°æí
 (
s
) \

943 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

944 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

945 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

946 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

947 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

948 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

949 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

950 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

952 
	#°rc•n
(
s
, 
ªje˘
) \

953 
__exãnsi⁄__
 \

954 ({ 
__r0
, 
__r1
, 
__r2
; \

955 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

956 ? ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

957 ? 
	`°æí
 (
s
) \

958 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

959 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

960 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

961 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

962 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

963 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

964 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

965 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

969 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
);

970 
__STRING_INLINE
 
size_t


971 
	$__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

975 ++
__ªsu…
;

976  
__ªsu…
;

977 
	}
}

979 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

980 
__ªje˘2
);

981 
__STRING_INLINE
 
size_t


982 
	$__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
)

984 
size_t
 
__ªsu…
 = 0;

985 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


986 && 
__s
[
__ªsu…
] !
__ªje˘2
)

987 ++
__ªsu…
;

988  
__ªsu…
;

989 
	}
}

991 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

992 
__ªje˘2
, 
__ªje˘3
);

993 
__STRING_INLINE
 
size_t


994 
	$__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
,

995 
__ªje˘3
)

997 
size_t
 
__ªsu…
 = 0;

998 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


999 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

1000 ++
__ªsu…
;

1001  
__ªsu…
;

1002 
	}
}

1008 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


1009 #i‚de‡
_HAVE_STRING_ARCH_°r•n


1010 #i‡
__GNUC_PREREQ
 (3, 2)

1011 
	#°r•n
(
s
, 
ac˚±
) \

1012 
__exãnsi⁄__
 \

1013 ({ 
__a0
, 
__a1
, 
__a2
; \

1014 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1015 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1016 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

1017 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1018 ? ((Ë(
s
), 0) \

1019 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1020 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1021 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1022 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1023 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1024 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1025 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1026 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1028 
	#°r•n
(
s
, 
ac˚±
) \

1029 
__exãnsi⁄__
 \

1030 ({ 
__a0
, 
__a1
, 
__a2
; \

1031 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1032 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1033 ? ((Ë(
s
), 0) \

1034 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1035 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1036 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1037 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1038 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1039 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1040 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1041 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1045 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±
)

1052 ++
__ªsu…
;

1053  
__ªsu…
;

1054 
	}
}

1056 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1057 
__ac˚±2
);

1058 
__STRING_INLINE
 
size_t


1059 
	$__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1061 
size_t
 
__ªsu…
 = 0;

1063 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1064 ++
__ªsu…
;

1065  
__ªsu…
;

1066 
	}
}

1068 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1069 
__ac˚±2
, 
__ac˚±3
);

1070 
__STRING_INLINE
 
size_t


1071 
	$__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1073 
size_t
 
__ªsu…
 = 0;

1075 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1076 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1077 ++
__ªsu…
;

1078  
__ªsu…
;

1079 
	}
}

1084 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1085 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1086 #i‡
__GNUC_PREREQ
 (3, 2)

1087 
	#°Ωbrk
(
s
, 
ac˚±
) \

1088 
__exãnsi⁄__
 \

1089 ({ 
__a0
, 
__a1
, 
__a2
; \

1090 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1091 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1092 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1093 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1094 ? ((Ë(
s
), (*Ë
NULL
) \

1095 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1096 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1097 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1098 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1099 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1100 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1101 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1102 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1104 
	#°Ωbrk
(
s
, 
ac˚±
) \

1105 
__exãnsi⁄__
 \

1106 ({ 
__a0
, 
__a1
, 
__a2
; \

1107 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1108 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1109 ? ((Ë(
s
), (*Ë
NULL
) \

1110 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1111 ? 
	`°rchr
 (
s
, 
__a0
) \

1112 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1113 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1114 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1115 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1116 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1117 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1121 
__STRING_INLINE
 *
__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1122 
__ac˚±2
);

1123 
__STRING_INLINE
 *

1124 
	$__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1127 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1128 ++
__s
;

1129  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1130 
	}
}

1132 
__STRING_INLINE
 *
__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1133 
__ac˚±2
, 
__ac˚±3
);

1134 
__STRING_INLINE
 *

1135 
	$__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
,

1136 
__ac˚±3
)

1139 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1140 && *
__s
 !
__ac˚±3
)

1141 ++
__s
;

1142  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1143 
	}
}

1149 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1150 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1151 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1152 ? (((
__c⁄°
 *Ë(
√edÀ
))[0] == '\0' \

1153 ? (*Ë(
size_t
Ë(
hay°ack
) \

1154 : (((
__c⁄°
 *Ë(
√edÀ
))[1] == '\0' \

1155 ? 
	`°rchr
 (
hay°ack
, \

1156 ((
__c⁄°
 *Ë(
√edÀ
))[0]) \

1157 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1158 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1162 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1163 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1164 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1165 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1166 && ((
__c⁄°
 *Ë(
£p
))[0] != '\0' \

1167 && ((
__c⁄°
 *Ë(
£p
))[1] == '\0' \

1168 ? 
	`__°πok_r_1c
 (
s
, ((
__c⁄°
 *Ë(
£p
))[0], 
√xç
) \

1169 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1172 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1173 
__STRING_INLINE
 *

1174 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1176 *
__ªsu…
;

1177 i‡(
__s
 =
NULL
)

1178 
__s
 = *
__√xç
;

1179 *
__s
 =
__£p
)

1180 ++
__s
;

1181 
__ªsu…
 = 
NULL
;

1182 i‡(*
__s
 != '\0')

1184 
__ªsu…
 = 
__s
++;

1185 *
__s
 != '\0')

1186 i‡(*
__s
++ =
__£p
)

1188 
__s
[-1] = '\0';

1192 *
__√xç
 = 
__s
;

1193  
__ªsu…
;

1194 
	}
}

1195 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1196 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1201 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1202 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1204 *
__°r£p_g
 (**
__°rögp
, 
__c⁄°
 *
__dñim
);

1205 
	#__°r£p
(
s
, 
ªje˘
) \

1206 
__exãnsi⁄__
 \

1207 ({ 
__r0
, 
__r1
, 
__r2
; \

1208 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1209 && (
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], \

1210 ((
__c⁄°
 *Ë(
ªje˘
))[0] != '\0') \

1211 ? ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], \

1212 ((
__c⁄°
 *Ë(
ªje˘
))[1] == '\0') \

1213 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1214 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

1215 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1216 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

1217 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1218 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1219 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1222 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1223 
__STRING_INLINE
 *

1224 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1226 *
__ªtvÆ
 = *
__s
;

1227 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1228 *(*
__s
)++ = '\0';

1229  
__ªtvÆ
;

1230 
	}
}

1232 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1233 
__STRING_INLINE
 *

1234 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1236 *
__ªtvÆ
 = *
__s
;

1237 i‡(
__ªtvÆ
 !
NULL
)

1239 *
__˝
 = 
__ªtvÆ
;

1242 i‡(*
__˝
 == '\0')

1244 
__˝
 = 
NULL
;

1247 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1249 *
__˝
++ = '\0';

1252 ++
__˝
;

1254 *
__s
 = 
__˝
;

1256  
__ªtvÆ
;

1257 
	}
}

1259 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1260 
__ªje˘3
);

1261 
__STRING_INLINE
 *

1262 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1264 *
__ªtvÆ
 = *
__s
;

1265 i‡(
__ªtvÆ
 !
NULL
)

1267 *
__˝
 = 
__ªtvÆ
;

1270 i‡(*
__˝
 == '\0')

1272 
__˝
 = 
NULL
;

1275 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1277 *
__˝
++ = '\0';

1280 ++
__˝
;

1282 *
__s
 = 
__˝
;

1284  
__ªtvÆ
;

1285 
	}
}

1286 #ifde‡
__USE_BSD


1287 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1294 #ifde‡
__USE_MISC


1296 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1297 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1298 
	~<°dlib.h
>

1301 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1303 *
	$__°rdup
 (
__c⁄°
 *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1304 
	#__°rdup
(
s
) \

1305 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1306 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1307 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1308 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1309 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1310 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1312 
__ªtvÆ
; 
	}
})) \

1313 : 
	`__°rdup
 (
s
)))

	)

1315 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1316 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1320 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1322 *
	$__°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

1323 
__THROW
 
__©åibuã_mÆloc__
;

1324 
	#__°∫dup
(
s
, 
n
) \

1325 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1326 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1327 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1328 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1329 
size_t
 
__n
 = (
n
); \

1330 *
__ªtvÆ
; \

1331 i‡(
__n
 < 
__Àn
) \

1332 
__Àn
 = 
__n
 + 1; \

1333 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1334 i‡(
__ªtvÆ
 !
NULL
) \

1336 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1337 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1338 
__Àn
 - 1); \

1340 
__ªtvÆ
; 
	}
})) \

1341 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1343 #ifde‡
__USE_GNU


1344 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1350 #i‚de‡
_FORCE_INLINES


1351 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

19 #i‚de‡
_STRING_H


23 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

26 #i‚de‡
__˝lu•lus


30 #unde‡
mem˝y


31 #unde‡
memmove


32 #unde‡
mem£t


33 #unde‡
°rˇt


34 #unde‡
°r˝y


35 #unde‡
°∫ˇt


36 #unde‡
°∫˝y


37 #ifde‡
__USE_GNU


38 #unde‡
memp˝y


39 #unde‡
°p˝y


41 #ifde‡
__USE_BSD


42 #unde‡
bc›y


43 #unde‡
bzîo


48 
__exã∫_Æways_ölöe
 *

49 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

50 
size_t
 
__Àn
))

52  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

53 
	}
}

55 
__exã∫_Æways_ölöe
 *

56 
__NTH
 (
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__Àn
))

58  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

59 
	}
}

61 #ifde‡
__USE_GNU


62 
__exã∫_Æways_ölöe
 *

63 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

64 
size_t
 
__Àn
))

66  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

67 
	}
}

76 
__exã∫_Æways_ölöe
 *

77 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

79 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

80 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

82 
	`__w¨n_mem£t_zîo_Àn
 ();

83  
__de°
;

85  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

86 
	}
}

88 #ifde‡
__USE_BSD


89 
__exã∫_Æways_ölöe
 

90 
__NTH
 (
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__Àn
))

92 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

93 
	}
}

95 
__exã∫_Æways_ölöe
 

96 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

98 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

99 
	}
}

102 
__exã∫_Æways_ölöe
 *

103 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

105  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

106 
	}
}

108 #ifde‡
__USE_GNU


109 
__exã∫_Æways_ölöe
 *

110 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

112  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

113 
	}
}

117 
__exã∫_Æways_ölöe
 *

118 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

119 
size_t
 
__Àn
))

121  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

122 
	}
}

125 *
	$__°≤˝y_chk
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

126 
size_t
 
__de°Àn
Ë
__THROW
;

127 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
,

128 
__c⁄°
 *
__§c
,

129 
size_t
 
__n
), 
°≤˝y
);

131 
__exã∫_Æways_ölöe
 *

132 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
))

134 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

135 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

136  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

137  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

138 
	}
}

141 
__exã∫_Æways_ölöe
 *

142 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

144  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

145 
	}
}

148 
__exã∫_Æways_ölöe
 *

149 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

150 
size_t
 
__Àn
))

152  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

153 
	}
}

	@/usr/include/bits/sys_errlist.h

20 #i‚de‡
_STDIO_H


26 #ifde‡ 
__USE_BSD


27 
sys_√º
;

28 
__c⁄°
 *__c⁄° 
sys_îæi°
[];

30 #ifde‡ 
__USE_GNU


31 
_sys_√º
;

32 
__c⁄°
 *__c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/types.h

24 #i‚def 
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	t__u_ch¨
;

32 
	t__u_sh‹t
;

33 
	t__u_öt
;

34 
	t__u_l⁄g
;

37 sig√d 
	t__öt8_t
;

38 
	t__uöt8_t
;

39 sig√d 
	t__öt16_t
;

40 
	t__uöt16_t
;

41 sig√d 
	t__öt32_t
;

42 
	t__uöt32_t
;

43 #i‡
__WORDSIZE
 == 64

44 sig√d 
	t__öt64_t
;

45 
	t__uöt64_t
;

46 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


47 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

48 
__exãnsi⁄__
 
	t__uöt64_t
;

52 #i‡
__WORDSIZE
 == 64

53 
	t__quad_t
;

54 
	t__u_quad_t
;

55 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


56 
__exãnsi⁄__
 
	t__quad_t
;

57 
__exãnsi⁄__
 
	t__u_quad_t
;

61 
	m__vÆ
[2];

62 } 
	t__quad_t
;

65 
__u_l⁄g
 
	m__vÆ
[2];

66 } 
	t__u_quad_t
;

99 
	#__S16_TYPE
 

	)

100 
	#__U16_TYPE
 

	)

101 
	#__S32_TYPE
 

	)

102 
	#__U32_TYPE
 

	)

103 
	#__SLONGWORD_TYPE
 

	)

104 
	#__ULONGWORD_TYPE
 

	)

105 #i‡
__WORDSIZE
 == 32

106 
	#__SQUAD_TYPE
 
__quad_t


	)

107 
	#__UQUAD_TYPE
 
__u_quad_t


	)

108 
	#__SWORD_TYPE
 

	)

109 
	#__UWORD_TYPE
 

	)

110 
	#__SLONG32_TYPE
 

	)

111 
	#__ULONG32_TYPE
 

	)

112 
	#__S64_TYPE
 
__quad_t


	)

113 
	#__U64_TYPE
 
__u_quad_t


	)

116 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

117 #ñi‡
__WORDSIZE
 == 64

118 
	t__SQUAD_TYPE
 

	)

119 
	t__UQUAD_TYPE
 

	)

120 
	t__SWORD_TYPE
 

	)

121 
	t__UWORD_TYPE
 

	)

122 
	t__SLONG32_TYPE
 

	)

123 
	t__ULONG32_TYPE
 

	)

124 
	t__S64_TYPE
 

	)

125 
	t__U64_TYPE
 

	)

127 
	t__STD_TYPE
 

	)

131 
	~<bôs/ty≥sizes.h
>

134 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

135 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

136 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

137 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

138 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

139 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

140 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

141 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

142 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

143 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

144 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

145 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

146 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

147 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

148 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

149 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

150 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

151 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

153 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

154 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

155 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

158 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

161 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

164 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

169 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

170 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

173 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

174 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

177 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

178 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

180 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__off64_t
 
	t__loff_t
;

185 
__quad_t
 *
	t__qaddr_t
;

186 *
	t__ˇddr_t
;

189 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

192 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

195 #unde‡
__STD_TYPE


	@/usr/include/bits/unistd.h

20 #i‚de‡
_UNISTD_H


24 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

25 
size_t
 
__buÊí
Ë
__wur
;

26 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

27 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

28 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

29 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

30 
size_t
 
__buÊí
), 
__ªad_chk
)

31 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

34 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


35 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

37 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

39 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

40  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

42 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

43  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

45  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

46 
	}
}

48 #ifde‡
__USE_UNIX98


49 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

50 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

51 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

52 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

53 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

54 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

55 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

56 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

57 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

58 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

59 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

60 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

61 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

62 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

64 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

65 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

66 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

67 
__¥ód64_chk
)

68 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

71 #i‚de‡
__USE_FILE_OFFSET64


72 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


73 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

75 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

77 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

78  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

80 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

81  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

82 
	`__bos0
 (
__buf
));

84  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

85 
	}
}

87 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


88 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

90 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

92 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

93  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

95 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

96  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

97 
	`__bos0
 (
__buf
));

100  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

101 
	}
}

104 #ifde‡
__USE_LARGEFILE64


105 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


106 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

108 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

110 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

111  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

113 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

114  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

115 
	`__bos0
 (
__buf
));

118  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

119 
	}
}

123 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


124 
ssize_t
 
	$__ªadlök_chk
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

125 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

126 
size_t
 
__buÊí
)

127 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

128 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

129 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

130 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

131 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

132 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

133 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

134 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

135 
size_t
 
__buÊí
), 
__ªadlök_chk
)

136 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

139 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


140 
	`__NTH
 (
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

141 
size_t
 
__Àn
))

143 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

145 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

146  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

148 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

149  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

151  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

152 
	}
}

155 #ifde‡
__USE_ATFILE


156 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

157 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

158 
size_t
 
__buÊí
)

159 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

160 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

161 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

162 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

163 
ªadlök©
)

164 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

165 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

166 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

167 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

168 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

169 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

173 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


174 
	`__NTH
 (
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

177 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

179 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

180  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

182 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

183  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

184 
	`__bos
 (
__buf
));

186  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

187 
	}
}

190 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

191 
__THROW
 
__wur
;

192 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

193 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

194 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

195 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

196 
__gëcwd_chk
)

197 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

200 
__exã∫_Æways_ölöe
 
__wur
 *

201 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

203 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

205 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

206  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

208 i‡(
__size
 > 
	`__bos
 (
__buf
))

209  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

211  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

212 
	}
}

214 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


215 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

217 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

218 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

221 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

222 
	`__NTH
 (
	$gëwd
 (*
__buf
))

224 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

225  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

226  
	`__gëwd_w¨n
 (
__buf
);

227 
	}
}

230 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

231 
size_t
 
__buÊí
Ë
__THROW
;

232 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

233 
size_t
 
__Àn
), 
c⁄f°r
);

234 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

235 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

236 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

237 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

240 
__exã∫_Æways_ölöe
 
size_t


241 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

243 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

245 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

246  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

248 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

249  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

251  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

252 
	}
}

255 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

256 
__THROW
 
__wur
;

257 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

258 
gëgroups
Ë
__wur
;

259 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

260 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

261 
__gëgroups_chk
)

262 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

265 
__exã∫_Æways_ölöe
 

266 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

268 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

270 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

271  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

273 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

274  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

276  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

277 
	}
}

280 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

281 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

282 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

283 
size_t
 
__buÊí
), 
ây«me_r
)

284 
	`__n⁄nuŒ
 ((2));

285 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

286 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

287 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

288 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

291 
__exã∫_Æways_ölöe
 

292 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

294 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

296 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

297  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

299 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

300  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

302  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

303 
	}
}

306 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


307 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

308 
	`__n⁄nuŒ
 ((1));

309 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

310 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

311 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

312 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

313 
__gëlogö_r_chk
)

314 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

317 
__exã∫_Æways_ölöe
 

318 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

320 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

322 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

323  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

325 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

326  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

328  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

329 
	}
}

333 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


334 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

335 
__THROW
 
	`__n⁄nuŒ
 ((1));

336 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

337 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

338 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

339 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

340 
__gëho°«me_chk
)

341 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

344 
__exã∫_Æways_ölöe
 

345 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

347 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

349 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

350  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

352 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

353  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

355  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

356 
	}
}

360 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

361 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

363 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

364 
size_t
 
__buÊí
),

365 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

366 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

367 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

368 
__gëdomaö«me_chk
)

369 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

373 
__exã∫_Æways_ölöe
 

374 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

376 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

378 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

379  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

381 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

382  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

384  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

385 
	}
}

	@/usr/include/bits/waitflags.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


26 
	#WNOHANG
 1

	)

27 
	#WUNTRACED
 2

	)

30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

35 
	#__WNOTHREAD
 0x20000000

	)

37 
	#__WALL
 0x40000000

	)

38 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


29 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

32 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

35 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

38 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

41 
	#__WIFSIGNALED
(
°©us
) \

42 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

45 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

49 #ifde‡
WCONTINUED


50 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

54 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

57 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

58 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

59 
	#__W_CONTINUED
 0xffff

	)

60 
	#__WCOREFLAG
 0x80

	)

63 #ifdef 
__USE_BSD


65 
	~<ídün.h
>

67 
	uwaô


69 
	mw_°©us
;

72 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


73 
	m__w_ãrmsig
:7;

74 
	m__w_c‹edump
:1;

75 
	m__w_ªtcode
:8;

78 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


80 
	m__w_ªtcode
:8;

81 
	m__w_c‹edump
:1;

82 
	m__w_ãrmsig
:7;

84 } 
	m__waô_ãrmö©ed
;

87 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


88 
	m__w_°›vÆ
:8;

89 
	m__w_°›sig
:8;

92 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


94 
	m__w_°›sig
:8;

95 
	m__w_°›vÆ
:8;

97 } 
	m__waô_°›≥d
;

100 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

101 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

102 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

103 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

104 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/features.h

19 #i‚def 
_FEATURES_H


20 
	#_FEATURES_H
 1

	)

96 #unde‡
__USE_ISOC99


97 #unde‡
__USE_ISOC95


98 #unde‡
__USE_POSIX


99 #unde‡
__USE_POSIX2


100 #unde‡
__USE_POSIX199309


101 #unde‡
__USE_POSIX199506


102 #unde‡
__USE_XOPEN


103 #unde‡
__USE_XOPEN_EXTENDED


104 #unde‡
__USE_UNIX98


105 #unde‡
__USE_XOPEN2K


106 #unde‡
__USE_XOPEN2KXSI


107 #unde‡
__USE_XOPEN2K8


108 #unde‡
__USE_XOPEN2K8XSI


109 #unde‡
__USE_LARGEFILE


110 #unde‡
__USE_LARGEFILE64


111 #unde‡
__USE_FILE_OFFSET64


112 #unde‡
__USE_BSD


113 #unde‡
__USE_SVID


114 #unde‡
__USE_MISC


115 #unde‡
__USE_ATFILE


116 #unde‡
__USE_GNU


117 #unde‡
__USE_REENTRANT


118 #unde‡
__USE_FORTIFY_LEVEL


119 #unde‡
__FAVOR_BSD


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

129 
	#__USE_ANSI
 1

	)

138 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


139 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

140 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

142 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

147 #i‡
deföed
 
_BSD_SOURCE
 && \

148 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

149 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

150 
	#__FAVOR_BSD
 1

	)

154 #ifde‡
_GNU_SOURCE


155 #unde‡
_ISOC95_SOURCE


156 
	#_ISOC95_SOURCE
 1

	)

157 #unde‡
_ISOC99_SOURCE


158 
	#_ISOC99_SOURCE
 1

	)

159 #unde‡
_POSIX_SOURCE


160 
	#_POSIX_SOURCE
 1

	)

161 #unde‡
_POSIX_C_SOURCE


162 
	#_POSIX_C_SOURCE
 200809L

	)

163 #unde‡
_XOPEN_SOURCE


164 
	#_XOPEN_SOURCE
 700

	)

165 #unde‡
_XOPEN_SOURCE_EXTENDED


166 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

167 #unde‡
_LARGEFILE64_SOURCE


168 
	#_LARGEFILE64_SOURCE
 1

	)

169 #unde‡
_BSD_SOURCE


170 
	#_BSD_SOURCE
 1

	)

171 #unde‡
_SVID_SOURCE


172 
	#_SVID_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

180 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

181 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

182 
	#_BSD_SOURCE
 1

	)

183 
	#_SVID_SOURCE
 1

	)

190 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

191 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

192 
	#__USE_ISOC99
 1

	)

196 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

197 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

198 
	#__USE_ISOC95
 1

	)

203 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

204 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

205 
	#_POSIX_SOURCE
 1

	)

206 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

207 
	#_POSIX_C_SOURCE
 2

	)

208 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

209 
	#_POSIX_C_SOURCE
 199506L

	)

210 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

211 
	#_POSIX_C_SOURCE
 200112L

	)

213 
	#_POSIX_C_SOURCE
 200809L

	)

215 
	#__USE_POSIX_IMPLICITLY
 1

	)

218 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


219 
	#__USE_POSIX
 1

	)

222 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


223 
	#__USE_POSIX2
 1

	)

226 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

227 
	#__USE_POSIX199309
 1

	)

230 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

231 
	#__USE_POSIX199506
 1

	)

234 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

235 
	#__USE_XOPEN2K
 1

	)

236 #unde‡
__USE_ISOC95


237 
	#__USE_ISOC95
 1

	)

238 #unde‡
__USE_ISOC99


239 
	#__USE_ISOC99
 1

	)

242 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

243 
	#__USE_XOPEN2K8
 1

	)

244 #unde‡
_ATFILE_SOURCE


245 
	#_ATFILE_SOURCE
 1

	)

248 #ifdef 
_XOPEN_SOURCE


249 
	#__USE_XOPEN
 1

	)

250 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

251 
	#__USE_XOPEN_EXTENDED
 1

	)

252 
	#__USE_UNIX98
 1

	)

253 #unde‡
_LARGEFILE_SOURCE


254 
	#_LARGEFILE_SOURCE
 1

	)

255 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

256 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

257 
	#__USE_XOPEN2K8
 1

	)

258 
	#__USE_XOPEN2K8XSI
 1

	)

260 
	#__USE_XOPEN2K
 1

	)

261 
	#__USE_XOPEN2KXSI
 1

	)

262 #unde‡
__USE_ISOC95


263 
	#__USE_ISOC95
 1

	)

264 #unde‡
__USE_ISOC99


265 
	#__USE_ISOC99
 1

	)

268 #ifde‡
_XOPEN_SOURCE_EXTENDED


269 
	#__USE_XOPEN_EXTENDED
 1

	)

274 #ifde‡
_LARGEFILE_SOURCE


275 
	#__USE_LARGEFILE
 1

	)

278 #ifde‡
_LARGEFILE64_SOURCE


279 
	#__USE_LARGEFILE64
 1

	)

282 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

283 
	#__USE_FILE_OFFSET64
 1

	)

286 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


287 
	#__USE_MISC
 1

	)

290 #ifdef 
_BSD_SOURCE


291 
	#__USE_BSD
 1

	)

294 #ifdef 
_SVID_SOURCE


295 
	#__USE_SVID
 1

	)

298 #ifdef 
_ATFILE_SOURCE


299 
	#__USE_ATFILE
 1

	)

302 #ifdef 
_GNU_SOURCE


303 
	#__USE_GNU
 1

	)

306 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


307 
	#__USE_REENTRANT
 1

	)

310 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

311 && 
deföed
 
__OPTIMIZE__
 && __OPTIMIZE__ > 0

312 #i‡!
__GNUC_PREREQ
 (4, 1)

313 #ifde‡
__GNUC_RH_RELEASE__


314 #w¨nög 
_FORTIFY_SOURCE
 
suµ‹ãd
 
⁄ly
 
wôh
 
GCC
 4.1 
™d
 
œãr


316 
	#__USE_FORTIFY_LEVEL
 0

	)

317 #ñi‡
_FORTIFY_SOURCE
 > 1

318 
	#__USE_FORTIFY_LEVEL
 2

	)

320 
	#__USE_FORTIFY_LEVEL
 1

	)

323 
	#__USE_FORTIFY_LEVEL
 0

	)

327 
	#__STDC_IEC_559__
 1

	)

328 
	#__STDC_IEC_559_COMPLEX__
 1

	)

331 
	#__STDC_ISO_10646__
 200009L

	)

339 #unde‡
__GNU_LIBRARY__


340 
	#__GNU_LIBRARY__
 6

	)

344 
	#__GLIBC__
 2

	)

345 
	#__GLIBC_MINOR__
 12

	)

347 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

348 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

351 #i‡
deföed
 
__GNUC__
 \

352 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

353 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

354 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

355 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

359 #i‚de‡
__ASSEMBLER__


360 #i‚de‡
_SYS_CDEFS_H


361 
	~<sys/cdefs.h
>

366 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


367 
	#__USE_LARGEFILE
 1

	)

368 
	#__USE_LARGEFILE64
 1

	)

374 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

375 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

376 && 
deföed
 
	g__exã∫_ölöe


377 
	#__USE_EXTERN_INLINES
 1

	)

385 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

156 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


160 #ifde‡
__REDIRECT


161 
__REDIRECT
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

162 c⁄° *
__sh‹t›ts
),

163 
__posix_gë›t
Ë
__THROW
;

165 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

166 c⁄° *
__sh‹t›ts
Ë
__THROW
;

167 
	#gë›t
 
__posix_gë›t


	)

171 
gë›t
 ();

174 #i‚de‡
__√ed_gë›t


175 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

176 c⁄° *
__sh‹t›ts
,

177 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

178 
__THROW
;

179 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

180 c⁄° *
__sh‹t›ts
,

181 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

182 
__THROW
;

186 #ifdef 
__˝lu•lus


191 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

151 
	#_IO_SKIPWS
 01

	)

152 
	#_IO_LEFT
 02

	)

153 
	#_IO_RIGHT
 04

	)

154 
	#_IO_INTERNAL
 010

	)

155 
	#_IO_DEC
 020

	)

156 
	#_IO_OCT
 040

	)

157 
	#_IO_HEX
 0100

	)

158 
	#_IO_SHOWBASE
 0200

	)

159 
	#_IO_SHOWPOINT
 0400

	)

160 
	#_IO_UPPERCASE
 01000

	)

161 
	#_IO_SHOWPOS
 02000

	)

162 
	#_IO_SCIENTIFIC
 04000

	)

163 
	#_IO_FIXED
 010000

	)

164 
	#_IO_UNITBUF
 020000

	)

165 
	#_IO_STDIO
 040000

	)

166 
	#_IO_DONT_CLOSE
 0100000

	)

167 
	#_IO_BOOLALPHA
 0200000

	)

170 
_IO_jump_t
; 
	g_IO_FILE
;

173 #ifde‡
_IO_MTSAFE_IO


174 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

175 
	~<bôs/°dio-lock.h
>

180 
	t_IO_lock_t
;

186 
	s_IO_m¨kî
 {

187 
_IO_m¨kî
 *
	m_√xt
;

188 
_IO_FILE
 *
	m_sbuf
;

192 
	m_pos
;

194 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

195 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

196 
	mpublic
:

197 
°ªamm¨kî
(
°ªambuf
 *
sb
);

198 ~
°ªamm¨kî
();

199 
ßvög
(Ë{  
	m_•os
 == -2; }

200 
dñè
(
°ªamm¨kî
&);

201 
dñè
();

206 
	e__codecvt_ªsu…


208 
	m__codecvt_ok
,

209 
	m__codecvt_∑πül
,

210 
	m__codecvt_îr‹
,

211 
	m__codecvt_noc⁄v


214 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


217 
	s_IO_codecvt


219 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

220 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

221 
	m__mb°©e_t
 *,

222 c⁄° 
	mwch¨_t
 *,

223 c⁄° 
	mwch¨_t
 *,

224 c⁄° 
	mwch¨_t
 **, *,

226 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

227 
	m__mb°©e_t
 *, *,

229 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

230 
	m__mb°©e_t
 *,

232 c⁄° **, 
	mwch¨_t
 *,

233 
	mwch¨_t
 *, wchar_t **);

234 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

235 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

236 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

237 c⁄° *, c⁄° *, 
	m_IO_size_t
);

238 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

240 
_IO_ic⁄v_t
 
	m__cd_ö
;

241 
_IO_ic⁄v_t
 
	m__cd_out
;

245 
	s_IO_wide_d©a


247 
wch¨_t
 *
	m_IO_ªad_±r
;

248 
wch¨_t
 *
	m_IO_ªad_íd
;

249 
wch¨_t
 *
	m_IO_ªad_ba£
;

250 
wch¨_t
 *
	m_IO_wrôe_ba£
;

251 
wch¨_t
 *
	m_IO_wrôe_±r
;

252 
wch¨_t
 *
	m_IO_wrôe_íd
;

253 
wch¨_t
 *
	m_IO_buf_ba£
;

254 
wch¨_t
 *
	m_IO_buf_íd
;

256 
wch¨_t
 *
	m_IO_ßve_ba£
;

257 
wch¨_t
 *
	m_IO_backup_ba£
;

259 
wch¨_t
 *
	m_IO_ßve_íd
;

261 
__mb°©e_t
 
	m_IO_°©e
;

262 
__mb°©e_t
 
	m_IO_œ°_°©e
;

263 
_IO_codecvt
 
	m_codecvt
;

265 
wch¨_t
 
	m_sh‹tbuf
[1];

267 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

271 
	s_IO_FILE
 {

272 
	m_Êags
;

273 
	#_IO_fûe_Êags
 
_Êags


	)

277 * 
	m_IO_ªad_±r
;

278 * 
	m_IO_ªad_íd
;

279 * 
	m_IO_ªad_ba£
;

280 * 
	m_IO_wrôe_ba£
;

281 * 
	m_IO_wrôe_±r
;

282 * 
	m_IO_wrôe_íd
;

283 * 
	m_IO_buf_ba£
;

284 * 
	m_IO_buf_íd
;

286 *
	m_IO_ßve_ba£
;

287 *
	m_IO_backup_ba£
;

288 *
	m_IO_ßve_íd
;

290 
_IO_m¨kî
 *
	m_m¨kîs
;

292 
_IO_FILE
 *
	m_chaö
;

294 
	m_fûío
;

296 
	m_blksize
;

298 
	m_Êags2
;

300 
_IO_off_t
 
	m_ﬁd_off£t
;

302 
	#__HAVE_COLUMN


	)

304 
	m_cur_cﬁumn
;

305 sig√d 
	m_vèbÀ_off£t
;

306 
	m_sh‹tbuf
[1];

310 
_IO_lock_t
 *
	m_lock
;

311 #ifde‡
_IO_USE_OLD_IO_FILE


314 
	s_IO_FILE_com∂ëe


316 
_IO_FILE
 
	m_fûe
;

318 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

319 
_IO_off64_t
 
	m_off£t
;

320 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


322 
_IO_codecvt
 *
	m_codecvt
;

323 
_IO_wide_d©a
 *
	m_wide_d©a
;

324 
_IO_FILE
 *
	m_‰ìªs_li°
;

325 *
	m_‰ìªs_buf
;

326 
size_t
 
	m_‰ìªs_size
;

328 *
	m__∑d1
;

329 *
	m__∑d2
;

330 *
	m__∑d3
;

331 *
	m__∑d4
;

332 
size_t
 
	m__∑d5
;

334 
	m_mode
;

336 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

340 #i‚de‡
__˝lu•lus


341 
_IO_FILE
 
	t_IO_FILE
;

344 
	g_IO_FILE_∂us
;

346 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

347 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

349 #i‚de‡
_LIBC


350 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

351 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

352 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

354 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

355 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

356 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

364 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

372 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

373 
	tsize_t
 
	t__n
);

381 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

384 
	t__io_˛o£_‚
 (*
	t__cookõ
);

387 #ifde‡
_GNU_SOURCE


389 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

390 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

391 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

392 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

397 
__io_ªad_‚
 *
	mªad
;

398 
__io_wrôe_‚
 *
	mwrôe
;

399 
__io_£ek_‚
 *
	m£ek
;

400 
__io_˛o£_‚
 *
	m˛o£
;

401 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

402 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

404 
	g_IO_cookõ_fûe
;

407 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

408 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

412 #ifde‡
__˝lu•lus


416 
__undîÊow
 (
_IO_FILE
 *);

417 
__uÊow
 (
_IO_FILE
 *);

418 
__ovîÊow
 (
_IO_FILE
 *, );

419 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


420 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

421 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

422 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

425 #i‡ 
__GNUC__
 >= 3

426 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

431 
	#_IO_gëc_u∆ocked
(
_Â
) \

432 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

433 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

434 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

435 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

436 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

437 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

438 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

439 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

440 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

441 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

443 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


444 
	#_IO_gëwc_u∆ocked
(
_Â
) \

445 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

446 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

447 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

448 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

449 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

450 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

451 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

452 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

453 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

454 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

457 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

458 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

460 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

461 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

462 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

463 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

465 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

468 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

469 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

471 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

472 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

473 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

475 #ifde‡
_IO_MTSAFE_IO


476 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

477 
	#_IO_Êockfûe
(
_Â
) \

478 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

479 
	#_IO_fu∆ockfûe
(
_Â
) \

480 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

482 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

483 
	#_IO_Êockfûe
(
_Â
Ë

	)

484 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

485 
	#_IO_·rylockfûe
(
_Â
Ë

	)

486 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

487 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

490 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

491 
_IO_va_li°
, *
__ª°ri˘
);

492 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

493 
_IO_va_li°
);

494 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

495 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

497 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

498 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

500 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

502 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


503 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

504 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

505 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

506 #i‡
__GNUC__
 >= 2

509 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


510 
	~<shlib-com∑t.h
>

511 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

512 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

513 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

514 c⁄° 
_IO_°dö_u£d
;

515 
wók_exã∫
 (
_IO_°dö_u£d
);

518 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


519 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

523 
	#_IO_fwide
(
__Â
, 
__mode
) \

524 ({ 
__ªsu…
 = (
__mode
); \

525 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

527 i‡((
__Â
)->
_mode
 == 0) \

529 (
__Â
)->
_mode
 = -1; \

530 
__ªsu…
 = (
__Â
)->
_mode
; \

532 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

533 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

535 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

536 
__ªsu…
; })

	)

539 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

540 
_IO_va_li°
, *
__ª°ri˘
);

541 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

542 
_IO_va_li°
);

543 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

544 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

547 #ifde‡
__LDBL_COMPAT


548 
	~<bôs/libio-ldbl.h
>

551 #ifde‡
__˝lu•lus


	@/usr/include/locale.h

23 #i‚def 
_LOCALE_H


24 
	#_LOCALE_H
 1

	)

26 
	~<„©uªs.h
>

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

30 
	~<bôs/loˇÀ.h
>

32 
	g__BEGIN_DECLS


36 
	#LC_CTYPE
 
__LC_CTYPE


	)

37 
	#LC_NUMERIC
 
__LC_NUMERIC


	)

38 
	#LC_TIME
 
__LC_TIME


	)

39 
	#LC_COLLATE
 
__LC_COLLATE


	)

40 
	#LC_MONETARY
 
__LC_MONETARY


	)

41 
	#LC_MESSAGES
 
__LC_MESSAGES


	)

42 
	#LC_ALL
 
__LC_ALL


	)

43 
	#LC_PAPER
 
__LC_PAPER


	)

44 
	#LC_NAME
 
__LC_NAME


	)

45 
	#LC_ADDRESS
 
__LC_ADDRESS


	)

46 
	#LC_TELEPHONE
 
__LC_TELEPHONE


	)

47 
	#LC_MEASUREMENT
 
__LC_MEASUREMENT


	)

48 
	#LC_IDENTIFICATION
 
__LC_IDENTIFICATION


	)

51 
__BEGIN_NAMESPACE_STD


54 
	slc⁄v


58 *
	mdecimÆ_poöt
;

59 *
	mthoußnds_£p
;

65 *
	mgroupög
;

71 *
	möt_cuº_symbﬁ
;

72 *
	mcuºícy_symbﬁ
;

73 *
	mm⁄_decimÆ_poöt
;

74 *
	mm⁄_thoußnds_£p
;

75 *
	mm⁄_groupög
;

76 *
	mposôive_sign
;

77 *
	m√g©ive_sign
;

78 
	möt_‰ac_digôs
;

79 
	m‰ac_digôs
;

81 
	mp_cs_¥e˚des
;

83 
	mp_£p_by_•a˚
;

85 
	mn_cs_¥e˚des
;

87 
	mn_£p_by_•a˚
;

94 
	mp_sign_po¢
;

95 
	mn_sign_po¢
;

96 #ifde‡
__USE_ISOC99


98 
	möt_p_cs_¥e˚des
;

100 
	möt_p_£p_by_•a˚
;

102 
	möt_n_cs_¥e˚des
;

104 
	möt_n_£p_by_•a˚
;

111 
	möt_p_sign_po¢
;

112 
	möt_n_sign_po¢
;

114 
	m__öt_p_cs_¥e˚des
;

115 
	m__öt_p_£p_by_•a˚
;

116 
	m__öt_n_cs_¥e˚des
;

117 
	m__öt_n_£p_by_•a˚
;

118 
	m__öt_p_sign_po¢
;

119 
	m__öt_n_sign_po¢
;

125 *
	$£éoˇÀ
 (
__ˇãg‹y
, 
__c⁄°
 *
__loˇÀ
Ë
__THROW
;

128 
lc⁄v
 *
	$loˇÀc⁄v
 (Ë
__THROW
;

130 
__END_NAMESPACE_STD


133 #ifdef 
__USE_XOPEN2K8


146 
	~<xloˇÀ.h
>

152 
__loˇÀ_t
 
	$√wloˇÀ
 (
__ˇãg‹y_mask
, 
__c⁄°
 *
__loˇÀ
,

153 
__loˇÀ_t
 
__ba£
Ë
__THROW
;

159 
	#LC_CTYPE_MASK
 (1 << 
__LC_CTYPE
)

	)

160 
	#LC_NUMERIC_MASK
 (1 << 
__LC_NUMERIC
)

	)

161 
	#LC_TIME_MASK
 (1 << 
__LC_TIME
)

	)

162 
	#LC_COLLATE_MASK
 (1 << 
__LC_COLLATE
)

	)

163 
	#LC_MONETARY_MASK
 (1 << 
__LC_MONETARY
)

	)

164 
	#LC_MESSAGES_MASK
 (1 << 
__LC_MESSAGES
)

	)

165 
	#LC_PAPER_MASK
 (1 << 
__LC_PAPER
)

	)

166 
	#LC_NAME_MASK
 (1 << 
__LC_NAME
)

	)

167 
	#LC_ADDRESS_MASK
 (1 << 
__LC_ADDRESS
)

	)

168 
	#LC_TELEPHONE_MASK
 (1 << 
__LC_TELEPHONE
)

	)

169 
	#LC_MEASUREMENT_MASK
 (1 << 
__LC_MEASUREMENT
)

	)

170 
	#LC_IDENTIFICATION_MASK
 (1 << 
__LC_IDENTIFICATION
)

	)

171 
	#LC_ALL_MASK
 (
LC_CTYPE_MASK
 \

172 | 
LC_NUMERIC_MASK
 \

173 | 
LC_TIME_MASK
 \

174 | 
LC_COLLATE_MASK
 \

175 | 
LC_MONETARY_MASK
 \

176 | 
LC_MESSAGES_MASK
 \

177 | 
LC_PAPER_MASK
 \

178 | 
LC_NAME_MASK
 \

179 | 
LC_ADDRESS_MASK
 \

180 | 
LC_TELEPHONE_MASK
 \

181 | 
LC_MEASUREMENT_MASK
 \

182 | 
LC_IDENTIFICATION_MASK
 \

183 )

	)

187 
__loˇÀ_t
 
	$du∂oˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

191 
	$‰ìloˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

198 
__loˇÀ_t
 
	$u£loˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

202 
	#LC_GLOBAL_LOCALE
 ((
__loˇÀ_t
Ë-1L)

	)

206 
__END_DECLS


	@/usr/include/sys/cdefs.h

20 #i‚def 
_SYS_CDEFS_H


21 
	#_SYS_CDEFS_H
 1

	)

24 #i‚de‡
_FEATURES_H


25 
	~<„©uªs.h
>

31 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


36 #unde‡
__P


37 #unde‡
__PMT


39 #ifde‡
__GNUC__


46 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

47 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

48 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
fct

50 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

51 
	#__THROW
 
	`throw
 ()

	)

52 
	#__NTH
(
f˘
Ëf˘ 
	`throw
 ()

	)

54 
	#__THROW


	)

55 
	#__NTH
(
f˘
Ë
	)
fct

61 
	#__ölöe


	)

63 
	#__THROW


	)

64 
	#__NTH
(
f˘
Ë
	)
fct

66 
	#__c⁄°
 c⁄°

	)

67 
	#__sig√d
 sig√d

	)

68 
	#__vﬁ©ûe
 vﬁ©ûe

	)

74 
	#__P
(
¨gs
Ë
	)
args

75 
	#__PMT
(
¨gs
Ë
	)
args

80 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

81 
	#__STRING
(
x
Ë#x

	)

84 
	#__±r_t
 *

	)

85 
	#__l⁄g_doubÀ_t
 

	)

89 #ifdef 
__˝lu•lus


90 
	#__BEGIN_DECLS
 "C" {

	)

91 
	#__END_DECLS
 }

	)

93 
	#__BEGIN_DECLS


	)

94 
	#__END_DECLS


	)

103 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


104 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

105 
	#__END_NAMESPACE_STD
 }

	)

106 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

107 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

108 
	#__END_NAMESPACE_C99
 }

	)

109 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

114 
	#__BEGIN_NAMESPACE_STD


	)

115 
	#__END_NAMESPACE_STD


	)

116 
	#__USING_NAMESPACE_STD
(
«me
)

	)

117 
	#__BEGIN_NAMESPACE_C99


	)

118 
	#__END_NAMESPACE_C99


	)

119 
	#__USING_NAMESPACE_C99
(
«me
)

	)

124 #i‚de‡
__BOUNDED_POINTERS__


125 
	#__bounded


	)

126 
	#__unbounded


	)

127 
	#__±rvÆue


	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

135 #i‡
__GNUC_PREREQ
 (4,3) \

136 || (
deföed
 
	g__GNUC_RH_RELEASE__
 && 
	g__GNUC__
 == 4 \

137 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

138 && 
__GNUC_RH_RELEASE__
 >= 31)

139 
	#__w¨nde˛
(
«me
, 
msg
) \

140 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

141 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

142 
	#__îr‹de˛
(
«me
, 
msg
) \

143 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

145 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

146 
	#__w¨«âr
(
msg
)

	)

147 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

151 #i‡
__GNUC_PREREQ
 (2,97)

153 
	#__Êex¨r
 []

	)

155 #ifde‡
__GNUC__


156 
	#__Êex¨r
 [0]

	)

158 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

159 
	#__Êex¨r
 []

	)

162 
	#__Êex¨r
 [1]

	)

178 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

180 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

181 #ifde‡
__˝lu•lus


182 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

183 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

185 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

186 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

188 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

189 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

202 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

203 
	#__©åibuã__
(
xyz
Ë

	)

209 #i‡
__GNUC_PREREQ
 (2,96)

210 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

212 
	#__©åibuã_mÆloc__


	)

218 #i‡
__GNUC_PREREQ
 (2,96)

219 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

221 
	#__©åibuã_puª__


	)

227 #i‡
__GNUC_PREREQ
 (3,1)

228 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

229 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

231 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

232 
	#__©åibuã_noölöe__


	)

236 #i‡
__GNUC_PREREQ
 (3,2)

237 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

239 
	#__©åibuã_dïªˇãd__


	)

248 #i‡
__GNUC_PREREQ
 (2,8)

249 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

251 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

258 #i‡
__GNUC_PREREQ
 (2,97)

259 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

260 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

262 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

267 #i‡
__GNUC_PREREQ
 (3,3)

268 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

270 
	#__n⁄nuŒ
(
∑øms
)

	)

275 #i‡
__GNUC_PREREQ
 (3,4)

276 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

277 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

278 #i‡
__USE_FORTIFY_LEVEL
 > 0

279 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

282 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

284 #i‚de‡
__wur


285 
	#__wur


	)

289 #i‡
__GNUC_PREREQ
 (3,2)

290 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

292 
	#__Æways_ölöe
 
__ölöe


	)

297 #i‡!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3) \

298 || (
deföed
 
__GNUC_RH_RELEASE__
 && 
__GNUC__
 == 4 \

299 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

300 && 
__GNUC_RH_RELEASE__
 >= 31)

301 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


302 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

303 #i‡
__GNUC_PREREQ
 (4,3) \

304 || (
deföed
 
__GNUC_RH_RELEASE__
 && 
__GNUC__
 == 4 \

305 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

306 && 
__GNUC_RH_RELEASE__
 >= 31)

307 
	#__exã∫_Æways_ölöe
 \

308 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
, 
__¨tificül__
))

	)

310 
	#__exã∫_Æways_ölöe
 \

311 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

314 
	#__exã∫_ölöe
 
__ölöe


	)

315 #i‡
__GNUC_PREREQ
 (4,3)

316 
	#__exã∫_Æways_ölöe
 \

317 
__Æways_ölöe
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

319 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

326 #i‡
__GNUC_PREREQ
 (4,3) \

327 || (
deföed
 
__GNUC_RH_RELEASE__
 && 
__GNUC__
 == 4 \

328 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

329 && 
__GNUC_RH_RELEASE__
 >= 31)

330 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

331 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

338 #i‡!
__GNUC_PREREQ
 (2,8)

339 
	#__exãnsi⁄__


	)

343 #i‡!
__GNUC_PREREQ
 (2,92)

344 
	#__ª°ri˘


	)

350 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


351 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

353 #ifde‡
__GNUC__


354 
	#__ª°ri˘_¨r


	)

356 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

357 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

360 
	#__ª°ri˘_¨r


	)

365 
	~<bôs/w‹dsize.h
>

367 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


368 
	#__LDBL_COMPAT
 1

	)

369 #ifde‡
__REDIRECT


370 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

371 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

372 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

373 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

374 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

375 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

376 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

377 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

378 
	#__LDBL_REDIR_DECL
(
«me
) \

379 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

380 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

381 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

382 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

383 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

386 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


387 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

388 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

389 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

390 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

391 
	#__LDBL_REDIR_DECL
(
«me
)

	)

392 #ifde‡
__REDIRECT


393 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

394 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

395 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/sys/types.h

23 #i‚def 
_SYS_TYPES_H


24 
	#_SYS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 #ifdef 
__USE_BSD


33 #i‚de‡
__u_ch¨_deföed


34 
__u_ch¨
 
	tu_ch¨
;

35 
__u_sh‹t
 
	tu_sh‹t
;

36 
__u_öt
 
	tu_öt
;

37 
__u_l⁄g
 
	tu_l⁄g
;

38 
__quad_t
 
	tquad_t
;

39 
__u_quad_t
 
	tu_quad_t
;

40 
__fsid_t
 
	tfsid_t
;

41 
	#__u_ch¨_deföed


	)

45 
__loff_t
 
	tloff_t
;

47 #i‚de‡
__öo_t_deföed


48 #i‚de‡
__USE_FILE_OFFSET64


49 
__öo_t
 
	töo_t
;

51 
__öo64_t
 
	töo_t
;

53 
	#__öo_t_deföed


	)

55 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


56 
__öo64_t
 
	töo64_t
;

57 
	#__öo64_t_deföed


	)

60 #i‚de‡
__dev_t_deföed


61 
__dev_t
 
	tdev_t
;

62 
	#__dev_t_deföed


	)

65 #i‚de‡
__gid_t_deföed


66 
__gid_t
 
	tgid_t
;

67 
	#__gid_t_deföed


	)

70 #i‚de‡
__mode_t_deföed


71 
__mode_t
 
	tmode_t
;

72 
	#__mode_t_deföed


	)

75 #i‚de‡
__∆ök_t_deföed


76 
__∆ök_t
 
	t∆ök_t
;

77 
	#__∆ök_t_deföed


	)

80 #i‚de‡
__uid_t_deföed


81 
__uid_t
 
	tuid_t
;

82 
	#__uid_t_deföed


	)

85 #i‚de‡
__off_t_deföed


86 #i‚de‡
__USE_FILE_OFFSET64


87 
__off_t
 
	toff_t
;

89 
__off64_t
 
	toff_t
;

91 
	#__off_t_deföed


	)

93 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


94 
__off64_t
 
	toff64_t
;

95 
	#__off64_t_deföed


	)

98 #i‚de‡
__pid_t_deföed


99 
__pid_t
 
	tpid_t
;

100 
	#__pid_t_deföed


	)

103 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

104 && !
deföed
 
__id_t_deföed


105 
__id_t
 
	tid_t
;

106 
	#__id_t_deföed


	)

109 #i‚de‡
__ssize_t_deföed


110 
__ssize_t
 
	tssize_t
;

111 
	#__ssize_t_deföed


	)

114 #ifdef 
__USE_BSD


115 #i‚de‡
__daddr_t_deföed


116 
__daddr_t
 
	tdaddr_t
;

117 
__ˇddr_t
 
	tˇddr_t
;

118 
	#__daddr_t_deföed


	)

122 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


123 
__key_t
 
	tkey_t
;

124 
	#__key_t_deföed


	)

127 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


128 
	#__√ed_˛ock_t


	)

130 
	#__√ed_time_t


	)

131 
	#__√ed_timî_t


	)

132 
	#__√ed_˛ockid_t


	)

133 
	~<time.h
>

135 #ifde‡
__USE_XOPEN


136 #i‚de‡
__u£c⁄ds_t_deföed


137 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

138 
	#__u£c⁄ds_t_deföed


	)

140 #i‚de‡
__su£c⁄ds_t_deföed


141 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

142 
	#__su£c⁄ds_t_deföed


	)

146 
	#__√ed_size_t


	)

147 
	~<°ddef.h
>

149 #ifde‡
__USE_MISC


151 
	tul⁄g
;

152 
	tush‹t
;

153 
	tuöt
;

158 #i‡!
__GNUC_PREREQ
 (2, 7)

161 #i‚de‡
__öt8_t_deföed


162 
	#__öt8_t_deföed


	)

163 
	töt8_t
;

164 
	töt16_t
;

165 
	töt32_t
;

166 #i‡
__WORDSIZE
 == 64

167 
	töt64_t
;

168 #ñi‡
__GLIBC_HAVE_LONG_LONG


169 
__exãnsi⁄__
 
	töt64_t
;

174 
	tu_öt8_t
;

175 
	tu_öt16_t
;

176 
	tu_öt32_t
;

177 #i‡
__WORDSIZE
 == 64

178 
	tu_öt64_t
;

179 #ñi‡
__GLIBC_HAVE_LONG_LONG


180 
__exãnsi⁄__
 
	tu_öt64_t
;

183 
	tªgi°î_t
;

188 
	#__ötN_t
(
N
, 
MODE
) \

189 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

190 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

191 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

193 #i‚de‡
	t__öt8_t_deföed


194 
	t__öt8_t_deföed


	)

195 
	t__ötN_t
 (8, 
	t__QI__
);

196 
__ötN_t
 (16, 
__HI__
);

197 
__ötN_t
 (32, 
__SI__
);

198 
__ötN_t
 (64, 
__DI__
);

201 
__u_ötN_t
 (8, 
__QI__
);

202 
__u_ötN_t
 (16, 
__HI__
);

203 
__u_ötN_t
 (32, 
__SI__
);

204 
__u_ötN_t
 (64, 
__DI__
);

206 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

212 
	#__BIT_TYPES_DEFINED__
 1

	)

215 #ifdef 
__USE_BSD


217 
	~<ídün.h
>

220 
	~<sys/£À˘.h
>

223 
	~<sys/sysma¸os.h
>

227 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

228 && !
deföed
 
__blksize_t_deföed


229 
__blksize_t
 
	tblksize_t
;

230 
	#__blksize_t_deföed


	)

234 #i‚de‡
__USE_FILE_OFFSET64


235 #i‚de‡
__blk˙t_t_deföed


236 
__blk˙t_t
 
	tblk˙t_t
;

237 
	#__blk˙t_t_deföed


	)

239 #i‚de‡
__fsblk˙t_t_deföed


240 
__fsblk˙t_t
 
	tfsblk˙t_t
;

241 
	#__fsblk˙t_t_deföed


	)

243 #i‚de‡
__fsfû˙t_t_deföed


244 
__fsfû˙t_t
 
	tfsfû˙t_t
;

245 
	#__fsfû˙t_t_deföed


	)

248 #i‚de‡
__blk˙t_t_deföed


249 
__blk˙t64_t
 
	tblk˙t_t
;

250 
	#__blk˙t_t_deföed


	)

252 #i‚de‡
__fsblk˙t_t_deföed


253 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

254 
	#__fsblk˙t_t_deföed


	)

256 #i‚de‡
__fsfû˙t_t_deföed


257 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

258 
	#__fsfû˙t_t_deföed


	)

262 #ifde‡
__USE_LARGEFILE64


263 
__blk˙t64_t
 
	tblk˙t64_t
;

264 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

265 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

270 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


271 
	~<bôs/±hªadty≥s.h
>

274 
	g__END_DECLS


	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/bits/libio-ldbl.h

20 #i‚de‡
_IO_STDIO_H


24 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

25 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/locale.h

20 #i‡!
deföed
 
_LOCALE_H
 && !deföed 
_LANGINFO_H


24 #i‚de‡
_BITS_LOCALE_H


25 
	#_BITS_LOCALE_H
 1

	)

29 
	m__LC_CTYPE
 = 0,

30 
	m__LC_NUMERIC
 = 1,

31 
	m__LC_TIME
 = 2,

32 
	m__LC_COLLATE
 = 3,

33 
	m__LC_MONETARY
 = 4,

34 
	m__LC_MESSAGES
 = 5,

35 
	m__LC_ALL
 = 6,

36 
	m__LC_PAPER
 = 7,

37 
	m__LC_NAME
 = 8,

38 
	m__LC_ADDRESS
 = 9,

39 
	m__LC_TELEPHONE
 = 10,

40 
	m__LC_MEASUREMENT
 = 11,

41 
	m__LC_IDENTIFICATION
 = 12

	@/usr/include/bits/pthreadtypes.h

19 #i‚de‡
_BITS_PTHREADTYPES_H


20 
	#_BITS_PTHREADTYPES_H
 1

	)

22 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

23 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

24 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

25 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

26 
	#__SIZEOF_PTHREAD_COND_COMPAT_T
 12

	)

27 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

28 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

29 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

30 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

31 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

36 
	t±hªad_t
;

41 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

42 
	m__Æign
;

43 } 
	t±hªad_©å_t
;

46 
	s__±hªad_öã∫Æ_¶i°


48 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

49 } 
	t__±hªad_¶i°_t
;

56 
	s__±hªad_muãx_s


58 
	m__lock
;

59 
	m__cou¡
;

60 
	m__ow√r
;

63 
	m__köd
;

64 
	m__nu£rs
;

65 
__exãnsi⁄__
 union

67 
	m__•ös
;

68 
__±hªad_¶i°_t
 
	m__li°
;

70 } 
	m__d©a
;

71 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

72 
	m__Æign
;

73 } 
	t±hªad_muãx_t
;

77 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

78 
	m__Æign
;

79 } 
	t±hªad_muãx©å_t
;

88 
	m__lock
;

89 
	m__fuãx
;

90 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

91 
__exãnsi⁄__
 
	m__wakeup_£q
;

92 
__exãnsi⁄__
 
	m__wokí_£q
;

93 *
	m__muãx
;

94 
	m__nwaôîs
;

95 
	m__brﬂdˇ°_£q
;

96 } 
	m__d©a
;

97 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

98 
__exãnsi⁄__
 
	m__Æign
;

99 } 
	t±hªad_c⁄d_t
;

103 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

104 
	m__Æign
;

105 } 
	t±hªad_c⁄d©å_t
;

109 
	t±hªad_key_t
;

113 
	t±hªad_⁄˚_t
;

116 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


123 
	m__lock
;

124 
	m__ƒ_ªadîs
;

125 
	m__ªadîs_wakeup
;

126 
	m__wrôî_wakeup
;

127 
	m__ƒ_ªadîs_queued
;

128 
	m__ƒ_wrôîs_queued
;

131 
	m__Êags
;

132 
	m__sh¨ed
;

133 
	m__∑d1
;

134 
	m__∑d2
;

135 
	m__wrôî
;

136 } 
	m__d©a
;

137 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

138 
	m__Æign
;

139 } 
	t±hªad_rwlock_t
;

143 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

144 
	m__Æign
;

145 } 
	t±hªad_rwlock©å_t
;

149 #ifde‡
__USE_XOPEN2K


151 vﬁ©ûê
	t±hªad_•ölock_t
;

158 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

159 
	m__Æign
;

160 } 
	t±hªad_b¨rõr_t
;

164 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

165 
	m__Æign
;

166 } 
	t±hªad_b¨rõøâr_t
;

171 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/stdio-lock.h

20 #i‚de‡
_BITS_STDIO_LOCK_H


21 
	#_BITS_STDIO_LOCK_H
 1

	)

23 
	~<bôs/libc-lock.h
>

25 
	$__libc_lock_deföe_ªcursive
 (, 
_IO_lock_t
)

28 #ifde‡
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


29 
	t_IO_lock_öôülizî
 
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


	)

30 #ñi‡
	t_IO_MTSAFE_IO


31 #îr‹ 
	tlibio
 
	t√eds
 
	tªcursive
 
	tmuãxes
 
	t_IO_MTSAFE_IO


34 
	t_IO_lock_öô
(
	t_«me
Ë
	t__libc_lock_öô_ªcursive
 (_«me)

	)

35 
	t_IO_lock_föi
(
	t_«me
Ë
	t__libc_lock_föi_ªcursive
 (_«me)

	)

36 
	t_IO_lock_lock
(
	t_«me
Ë
	t__libc_lock_lock_ªcursive
 (_«me)

	)

37 
	t_IO_lock_åylock
(
	t_«me
Ë
	t__libc_lock_åylock_ªcursive
 (_«me)

	)

38 
	t_IO_lock_u∆ock
(
	t_«me
Ë
	t__libc_lock_u∆ock_ªcursive
 (_«me)

	)

41 
	t_IO_˛ónup_ªgi⁄_°¨t
(
	t_f˘
, 
	t_Â
) \

42 
	t__libc_˛ónup_ªgi⁄_°¨t
 (((
	t_Â
)->
	t_Êags
 & 
	t_IO_USER_LOCK
Ë=0, 
	t_f˘
, _Â)

	)

43 
	t_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
	t_f˘
) \

44 
	t__libc_˛ónup_ªgi⁄_°¨t
 (1, 
	t_f˘
, 
	tNULL
)

	)

45 
	t_IO_˛ónup_ªgi⁄_íd
(
	t_doô
) \

46 
	t__libc_˛ónup_ªgi⁄_íd
 (
	t_doô
)

	)

48 #i‡
	tdeföed
 
	t_LIBC
 && !deföed 
	tNOT_IN_libc


49 
	t_IO_acquúe_lock
(
	t_Â
) \

50 
	t_IO_˛ónup_ªgi⁄_°¨t
 (((*Ë(*)Ë
	t_IO_fu∆ockfûe
, (
	t_Â
)); \

51 
	`_IO_Êockfûe
 (
_Â
)

	)

53 
	#_IO_ªÀa£_lock
(
_Â
) \

54 
	`_IO_fu∆ockfûe
 (
_Â
); \

55 
	`_IO_˛ónup_ªgi⁄_íd
 (0)

	)

	@/usr/include/bits/typesizes.h

20 #i‚de‡
_BITS_TYPES_H


24 #i‚def 
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE
 
__U32_TYPE


	)

32 
	#__GID_T_TYPE
 
__U32_TYPE


	)

33 
	#__INO_T_TYPE
 
__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

36 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE
 
__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE
 
__S32_TYPE


	)

40 
	#__RLIM_T_TYPE
 
__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE
 
__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE
 
__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE
 
__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE
 
__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE
 
__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE
 
__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 *

	)

58 
	#__BLKSIZE_T_TYPE
 
__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

60 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/wordsize.h

19 
	#__WORDSIZE
 32

	)

	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

92 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

94 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

96 
__BEGIN_NAMESPACE_STD


102 
	`__ex˘y≥
 (
iß um
);

103 
	`__ex˘y≥
 (
ißÕha
);

104 
	`__ex˘y≥
 (
is˙ål
);

105 
	`__ex˘y≥
 (
isdigô
);

106 
	`__ex˘y≥
 (
i¶owî
);

107 
	`__ex˘y≥
 (
isgøph
);

108 
	`__ex˘y≥
 (
i•röt
);

109 
	`__ex˘y≥
 (
i•un˘
);

110 
	`__ex˘y≥
 (
is•a˚
);

111 
	`__ex˘y≥
 (
isuµî
);

112 
	`__ex˘y≥
 (
isxdigô
);

116 
	$tﬁowî
 (
__c
Ë
__THROW
;

119 
	$touµî
 (
__c
Ë
__THROW
;

121 
__END_NAMESPACE_STD


125 #ifdef 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
	`__ex˘y≥
 (
isbœnk
);

130 
__END_NAMESPACE_C99


133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE
 && !deföed 
__˝lu•lus


173 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

174 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

175 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

176 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

177 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

178 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

179 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

180 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

181 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

182 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

183 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

185 #ifde‡
__USE_ISOC99


186 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

189 #ifde‡
__USE_EXTERN_INLINES


190 
__exã∫_ölöe
 

191 
__NTH
 (
	$tﬁowî
 (
__c
))

193  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

194 
	}
}

196 
__exã∫_ölöe
 

197 
__NTH
 (
	$touµî
 (
__c
))

199  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

200 
	}
}

203 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


204 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

205 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

208 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


209 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

210 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

212 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

213 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

219 #ifde‡
__USE_XOPEN2K8


233 
	~<xloˇÀ.h
>

237 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

238 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

240 
	#__ex˘y≥_l
(
«me
) \

241 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

247 
__ex˘y≥_l
 (
iß um_l
);

248 
__ex˘y≥_l
 (
ißÕha_l
);

249 
__ex˘y≥_l
 (
is˙ål_l
);

250 
__ex˘y≥_l
 (
isdigô_l
);

251 
__ex˘y≥_l
 (
i¶owî_l
);

252 
__ex˘y≥_l
 (
isgøph_l
);

253 
__ex˘y≥_l
 (
i•röt_l
);

254 
__ex˘y≥_l
 (
i•un˘_l
);

255 
__ex˘y≥_l
 (
is•a˚_l
);

256 
__ex˘y≥_l
 (
isuµî_l
);

257 
__ex˘y≥_l
 (
isxdigô_l
);

259 
__ex˘y≥_l
 (
isbœnk_l
);

263 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

264 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

267 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

270 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


271 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

272 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

273 
	#__touµî_l
(
c
, 
loˇÀ
) \

274 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

275 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

276 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

280 #i‚de‡
__NO_CTYPE


281 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

282 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

283 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

284 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

285 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

286 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

287 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

288 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

289 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

290 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

291 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

293 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

295 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


296 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

297 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

300 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

301 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

302 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

303 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

304 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

305 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

306 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

307 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

308 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

309 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

310 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

312 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

314 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


315 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

316 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

323 
__END_DECLS


	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/gnu/stubs.h

4 
	~<bôs/w‹dsize.h
>

6 #i‡
__WORDSIZE
 == 32

7 
	~<gnu/°ubs-32.h
>

8 #ñi‡
__WORDSIZE
 == 64

9 
	~<gnu/°ubs-64.h
>

	@/usr/include/linux/errno.h

1 #i‚de‡
_LINUX_ERRNO_H


2 
	#_LINUX_ERRNO_H


	)

4 
	~<asm/î∫o.h
>

	@/usr/include/sys/select.h

22 #i‚de‡
_SYS_SELECT_H


23 
	#_SYS_SELECT_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

31 
	~<bôs/£À˘.h
>

34 
	~<bôs/sig£t.h
>

36 #i‚de‡
__sig£t_t_deföed


37 
	#__sig£t_t_deföed


	)

38 
__sig£t_t
 
	tsig£t_t
;

42 
	#__√ed_time_t


	)

43 
	#__√ed_time•ec


	)

44 
	~<time.h
>

45 
	#__√ed_timevÆ


	)

46 
	~<bôs/time.h
>

48 #i‚de‡
__su£c⁄ds_t_deföed


49 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

50 
	#__su£c⁄ds_t_deföed


	)

55 
	t__fd_mask
;

58 #unde‡
__NFDBITS


59 #unde‡
__FDELT


60 #unde‡
__FDMASK


62 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

63 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

64 
	#__FDMASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

71 #ifde‡
__USE_XOPEN


72 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

75 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

76 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

78 } 
	tfd_£t
;

81 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

83 #ifde‡
__USE_MISC


85 
__fd_mask
 
	tfd_mask
;

88 
	#NFDBITS
 
__NFDBITS


	)

93 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

94 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

95 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

96 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

99 
__BEGIN_DECLS


109 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

110 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

111 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

112 
timevÆ
 *
__ª°ri˘
 
__timeout
);

114 #ifde‡
__USE_XOPEN2K


121 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

122 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

123 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

124 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

125 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

128 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

21 #i‚de‡
_SYS_SYSMACROS_H


22 
	#_SYS_SYSMACROS_H
 1

	)

24 
	~<„©uªs.h
>

29 #ifde‡
__GLIBC_HAVE_LONG_LONG


30 
__exãnsi⁄__


31 
	$gnu_dev_maj‹
 (
__dev
)

32 
__THROW
;

33 
__exãnsi⁄__


34 
	$gnu_dev_mö‹
 (
__dev
)

35 
__THROW
;

36 
__exãnsi⁄__


37 
	$gnu_dev_makedev
 (
__maj‹
,

38 
__mö‹
)

39 
__THROW
;

41 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


42 
__exãnsi⁄__
 
__exã∫_ölöe
 

43 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

45  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

46 
	}
}

48 
__exãnsi⁄__
 
__exã∫_ölöe
 

49 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

51  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

52 
	}
}

54 
__exãnsi⁄__
 
__exã∫_ölöe
 

55 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

57  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

58 | (((Ë(
__mö‹
 & ~0xff)) << 12)

59 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

60 
	}
}

65 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

66 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

67 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/bits/byteswap.h

21 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


25 #i‚de‡
_BITS_BYTESWAP_H


26 
	#_BITS_BYTESWAP_H
 1

	)

29 
	#__bsw≠_c⁄°™t_16
(
x
) \

30 ((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8))

	)

32 #ifde‡
__GNUC__


33 #i‡
__GNUC__
 >= 2

34 
	#__bsw≠_16
(
x
) \

35 (
__exãnsi⁄__
 \

36 ({ 
__v
, 
__x
 = (
x
); \

37 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

38 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

40 
	`__asm__
 ("rorw $8, %w0" \

41 : "Ù" (
__v
) \

42 : "0" (
__x
) \

44 
__v
; }))

	)

47 
	#__bsw≠_16
(
x
) \

48 (
__exãnsi⁄__
 \

49 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_16
 (__x); }))

	)

52 
__ölöe
 

53 
	$__bsw≠_16
 (
__bsx
)

55  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

56 
	}
}

60 
	#__bsw≠_c⁄°™t_32
(
x
) \

61 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

62 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

64 #ifde‡
__GNUC__


65 #i‡
__GNUC__
 >= 2

68 #i‡!
deföed
 
__i486__
 && !deföed 
__≥¡ium__
 && !deföed 
__≥¡ium¥o__
 \

69 && !
deföed
 
	g__≥¡ium4__
 && !deföed 
	g__k8__
 && !deföed 
	g__©hl⁄__
 \

70 && !
deföed
 
	g__k6__
 && !deföed 
	g__noc⁄a__
 && !deföed 
	g__c‹e2__
 \

71 && !
deföed
 
	g__geode__
 && !deföed 
	g__amdÁm10__


72 
	#__bsw≠_32
(
x
) \

73 (
__exãnsi⁄__
 \

74 ({ 
__v
, 
__x
 = (
x
); \

75 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

76 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

78 
	`__asm__
 ("rorw $8, %w0;" \

81 : "Ù" (
__v
) \

82 : "0" (
__x
) \

84 
__v
; }))

	)

86 
	#__bsw≠_32
(
x
) \

87 (
__exãnsi⁄__
 \

88 ({ 
__v
, 
__x
 = (
x
); \

89 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

90 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

92 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

93 
__v
; }))

	)

96 
	#__bsw≠_32
(
x
) \

97 (
__exãnsi⁄__
 \

98 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

101 
__ölöe
 

102 
	$__bsw≠_32
 (
__bsx
)

104  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

105 
	}
}

109 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

111 
	#__bsw≠_c⁄°™t_64
(
x
) \

112 ((((
x
) & 0xff00000000000000ull) >> 56) \

113 | (((
x
) & 0x00ff000000000000ull) >> 40) \

114 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

115 | (((
x
) & 0x000000ff00000000ull) >> 8) \

116 | (((
x
) & 0x00000000ff000000ull) << 8) \

117 | (((
x
) & 0x0000000000ff0000ull) << 24) \

118 | (((
x
) & 0x000000000000ff00ull) << 40) \

119 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

121 
	#__bsw≠_64
(
x
) \

122 (
__exãnsi⁄__
 \

123 ({ uni⁄ { 
__exãnsi⁄__
 
__Œ
; \

124 
__l
[2]; } 
__w
, 
__r
; \

125 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

126 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

129 
__w
.
__Œ
 = (
x
); \

130 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

131 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

133 
__r
.
__Œ
; }))

	)

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/libc-lock.h

21 #i‚de‡
_BITS_LIBC_LOCK_H


22 
	#_BITS_LIBC_LOCK_H
 1

	)

24 
	~<±hªad.h
>

27 #ifde‡
_IO_MTSAFE_IO


28 
±hªad_muãx_t
 
	t__libc_lock_t
;

29 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

30 #ifde‡
__USE_UNIX98


31 
±hªad_rwlock_t
 
	t__libc_rwlock_t
;

33 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

35 
__libc_lock_ªcursive_t
 
	t__πld_lock_ªcursive_t
;

37 
__libc_lock_›aque__
 
	t__libc_lock_t
;

38 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

39 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

43 
±hªad_key_t
 
	t__libc_key_t
;

52 
	#__libc_lock_deföe
(
CLASS
,
NAME
) \

53 
CLASS
 
__libc_lock_t
 
NAME
;

	)

54 
	#__libc_rwlock_deföe
(
CLASS
,
NAME
) \

55 
CLASS
 
__libc_rwlock_t
 
NAME
;

	)

56 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

57 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

58 
	#__πld_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

59 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
;

	)

70 #i‡
__LT_SPINLOCK_INIT
 == 0

71 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

72 
CLASS
 
__libc_lock_t
 
NAME
;

	)

74 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

75 
CLASS
 
__libc_lock_t
 
NAME
 = 
PTHREAD_MUTEX_INITIALIZER
;

	)

78 
	#__libc_rwlock_deföe_öôülized
(
CLASS
,
NAME
) \

79 
CLASS
 
__libc_rwlock_t
 
NAME
 = 
PTHREAD_RWLOCK_INITIALIZER
;

	)

83 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

84 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

85 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

86 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

88 
	#__πld_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

89 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
 = 
_RTLD_LOCK_RECURSIVE_INITIALIZER
;

	)

90 
	#_RTLD_LOCK_RECURSIVE_INITIALIZER
 \

91 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

93 #i‡
deföed
 
__PIC__


94 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

95 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
FUNC
Ë*
_‚
 = (FUNC); \

96 
_‚
 !
NULL
 ? (*_‚Ë
ARGS
 : 
ELSE
; }))

	)

98 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

99 (
FUNC
 !
NULL
 ? FUNC 
ARGS
 : 
ELSE
)

	)

101 
	#__libc_maybe_ˇŒ2
(
FUNC
, 
ARGS
, 
ELSE
Ë
	`__libc_maybe_ˇŒ
 (
__
##FUNC, ARGS, ELSE)

	)

105 
	#__libc_lock_öô
(
NAME
) \

106 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_öô
, (&(
NAME
), 
NULL
), 0))

	)

107 
	#__libc_rwlock_öô
(
NAME
) \

108 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_öô
, (&(
NAME
), 
NULL
), 0));

	)

111 
	#__libc_lock_öô_ªcursive
(
NAME
) \

113 i‡(
__±hªad_muãx_öô
 !
NULL
) \

115 
±hªad_muãx©å_t
 
__©å
; \

116 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

117 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

118 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

119 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

121 } 0);

	)

122 
	#__πld_lock_öô_ªcursive
(
NAME
) \

123 
	`__libc_lock_öô_ªcursive
 (
NAME
)

	)

128 
	#__libc_lock_föi
(
NAME
) \

129 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_de°roy
, (&(
NAME
)), 0));

	)

130 
	#__libc_rwlock_föi
(
NAME
) \

131 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_de°roy
, (&(
NAME
)), 0));

	)

134 
	#__libc_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi
 ((NAME).
muãx
)

	)

135 
	#__πld_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi_ªcursive
 (NAME)

	)

138 
	#__libc_lock_lock
(
NAME
) \

139 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_lock
, (&(
NAME
)), 0));

	)

140 
	#__libc_rwlock_rdlock
(
NAME
) \

141 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_rdlock
, (&(
NAME
)), 0));

	)

142 
	#__libc_rwlock_wæock
(
NAME
) \

143 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_wæock
, (&(
NAME
)), 0));

	)

146 
	#__libc_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock
 ((NAME).
muãx
)

	)

149 
	#__libc_lock_åylock
(
NAME
) \

150 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_åylock
, (&(
NAME
)), 0))

	)

151 
	#__libc_rwlock_åyrdlock
(
NAME
) \

152 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åyrdlock
, (&(
NAME
)), 0))

	)

153 
	#__libc_rwlock_åywæock
(
NAME
) \

154 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åywæock
, (&(
NAME
)), 0))

	)

157 
	#__libc_lock_åylock_ªcursive
(
NAME
Ë
	`__libc_lock_åylock
 ((NAME).
muãx
)

	)

158 
	#__πld_lock_åylock_ªcursive
(
NAME
) \

159 
	`__libc_lock_åylock_ªcursive
 (
NAME
)

	)

162 
	#__libc_lock_u∆ock
(
NAME
) \

163 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_u∆ock
, (&(
NAME
)), 0));

	)

164 
	#__libc_rwlock_u∆ock
(
NAME
) \

165 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_u∆ock
, (&(
NAME
)), 0));

	)

168 
	#__libc_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock
 ((NAME).
muãx
)

	)

170 
	#__πld_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock_ªcursive
 (NAME)

	)

171 
	#__πld_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock_ªcursive
 (NAME)

	)

174 #i‡
PTHREAD_ONCE_INIT
 == 0

177 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

178 
CLASS
 
±hªad_⁄˚_t
 
NAME


	)

180 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

181 
CLASS
 
±hªad_⁄˚_t
 
NAME
 = 
PTHREAD_ONCE_INIT


	)

185 
	#__libc_⁄˚
(
ONCE_CONTROL
, 
INIT_FUNCTION
) \

187 i‡(
__±hªad_⁄˚
 !
NULL
) \

188 
	`__±hªad_⁄˚
 (&(
ONCE_CONTROL
), (
INIT_FUNCTION
)); \

189 i‡((
ONCE_CONTROL
Ë=
PTHREAD_ONCE_INIT
) { \

190 
	`INIT_FUNCTION
 (); \

191 (
ONCE_CONTROL
) = 2; \

193 } 0)

	)

197 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

198 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

199 
_avaû
 = (
DOIT
Ë&& 
_±hªad_˛ónup_push_de„r
 !
NULL
; \

200 i‡(
_avaû
) { \

201 
	`_±hªad_˛ónup_push_de„r
 (&
_buf„r
, (
FCT
), (
ARG
)); \

202 }

	)

205 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

206 i‡(
_avaû
) { \

207 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

209 }

	)

212 
	#__libc_˛ónup_íd
(
DOIT
) \

213 i‡(
_avaû
) { \

214 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

215 }

	)

217 
	#__libc_˛ónup_push
(
f˘
, 
¨g
) \

218 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

219 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_push
, (&
_buf„r
, (
f˘
), (
¨g
)), 0)

	)

221 
	#__libc_˛ónup_p›
(
execuã
) \

222 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_p›
, (&
_buf„r
, 
execuã
), 0); \

223 }

	)

226 
	#__libc_key_¸óã
(
KEY
, 
DESTRUCTOR
) \

227 (
	`__libc_maybe_ˇŒ
 (
__±hªad_key_¸óã
, (
KEY
, 
DESTRUCTOR
), 1))

	)

230 
	#__libc_gë•ecific
(
KEY
) \

231 (
	`__libc_maybe_ˇŒ
 (
__±hªad_gë•ecific
, (
KEY
), 
NULL
))

	)

234 
	#__libc_£t•ecific
(
KEY
, 
VALUE
) \

235 (
	`__libc_maybe_ˇŒ
 (
__±hªad_£t•ecific
, (
KEY
, 
VALUE
), 0))

	)

239 
	#__libc_©f‹k
(
PREPARE
, 
PARENT
, 
CHILD
) \

240 (
	`__libc_maybe_ˇŒ
 (
__±hªad_©f‹k
, (
PREPARE
, 
PARENT
, 
CHILD
), 0))

	)

242 
__BEGIN_DECLS


244 
_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

245 (*
__routöe
) (*),

246 *
__¨g
Ë
__THROW
;

248 
	$_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

249 
__execuã
Ë
__THROW
;

255 
	`__±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

256 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx_©å
);

258 
	`__±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
);

260 
	`__±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
);

262 
	`__±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
);

264 
	`__±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
);

266 
	`__±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
);

268 
	`__±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
);

270 
	`__±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
,

271 
__köd
);

273 #ifde‡
__USE_UNIX98


274 
	`__±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__rwlock
,

275 
__c⁄°
 
±hªad_rwlock©å_t
 *
__©å
);

277 
	`__±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
);

279 
	`__±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

281 
	`__±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

283 
	`__±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
);

285 
	`__±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
);

287 
	`__±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
);

290 
	`__±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

291 (*
__de°r_fun˘i⁄
) (*));

293 
	`__±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

294 
__c⁄°
 *
__poöãr
);

296 *
	`__±hªad_gë•ecific
 (
±hªad_key_t
 
__key
);

298 
	`__±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

299 (*
__öô_routöe
) ());

301 
	`__±hªad_©f‹k
 ((*
__¥ï¨e
) (),

302 (*
__∑ª¡
) (),

303 (*
__chûd
) ());

305 
__END_DECLS


309 #i‚de‡
__NO_WEAK_PTHREAD_ALIASES


310 #¥agm®
wók
 
__±hªad_muãx_öô


311 #¥agm®
wók
 
__±hªad_muãx_de°roy


312 #¥agm®
wók
 
__±hªad_muãx_lock


313 #¥agm®
wók
 
__±hªad_muãx_åylock


314 #¥agm®
wók
 
__±hªad_muãx_u∆ock


315 #¥agm®
wók
 
__±hªad_muãx©å_öô


316 #¥agm®
wók
 
__±hªad_muãx©å_de°roy


317 #¥agm®
wók
 
__±hªad_muãx©å_£ây≥


318 #¥agm®
wók
 
__±hªad_rwlock_de°roy


319 #¥agm®
wók
 
__±hªad_rwlock_rdlock


320 #¥agm®
wók
 
__±hªad_rwlock_åyrdlock


321 #¥agm®
wók
 
__±hªad_rwlock_wæock


322 #¥agm®
wók
 
__±hªad_rwlock_åywæock


323 #¥agm®
wók
 
__±hªad_rwlock_u∆ock


324 #¥agm®
wók
 
__±hªad_key_¸óã


325 #¥agm®
wók
 
__±hªad_£t•ecific


326 #¥agm®
wók
 
__±hªad_gë•ecific


327 #¥agm®
wók
 
__±hªad_⁄˚


328 #¥agm®
wók
 
__±hªad_öôülize


329 #¥agm®
wók
 
__±hªad_©f‹k


330 #¥agm®
wók
 
_±hªad_˛ónup_push_de„r


331 #¥agm®
wók
 
_±hªad_˛ónup_p›_ª°‹e


332 #¥agm®
wók
 
_±hªad_˛ónup_push


333 #¥agm®
wók
 
_±hªad_˛ónup_p›


338 
	#__libc_muãx_u∆ock
 
__±hªad_muãx_u∆ock


	)

	@/usr/include/bits/select.h

19 #i‚de‡
_SYS_SELECT_H


24 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

26 
	#__FD_ZERO
(
fd•
) \

28 
__d0
, 
__d1
; \

29 
__asm__
 
	`__vﬁ©ûe__
 ("cld;Ñep; stosl" \

30 : "=c" (
__d0
), "=D" (
__d1
) \

31 : "a" (0), "0" ( (
fd_£t
) \

32 /  (
__fd_mask
)), \

33 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

35 } 0)

	)

37 
	#__FD_SET
(
fd
, 
fd•
) \

38 
__asm__
 
	`__vﬁ©ûe__
 ("btsl %1,%0" \

39 : "=m" (
	`__FDS_BITS
 (
fd•
)[
	`__FDELT
 (
fd
)]) \

40 : "r" (((Ë(
fd
)Ë% 
__NFDBITS
) \

41 : "cc","mem‹y")

	)

42 
	#__FD_CLR
(
fd
, 
fd•
) \

43 
__asm__
 
	`__vﬁ©ûe__
 ("btrl %1,%0" \

44 : "=m" (
	`__FDS_BITS
 (
fd•
)[
	`__FDELT
 (
fd
)]) \

45 : "r" (((Ë(
fd
)Ë% 
__NFDBITS
) \

46 : "cc","mem‹y")

	)

47 
	#__FD_ISSET
(
fd
, 
fd•
) \

48 (
__exãnsi⁄__
 \

49 ({
__ªsu…
; \

50 
__asm__
 
	`__vﬁ©ûe__
 ("btl %1,%2 ; setcb %b0" \

51 : "=q" (
__ªsu…
) \

52 : "r" (((Ë(
fd
)Ë% 
__NFDBITS
), \

53 "m" (
	`__FDS_BITS
 (
fd•
)[
	`__FDELT
 (
fd
)]) \

55 
__ªsu…
; }))

	)

61 
	#__FD_ZERO
(
£t
) \

63 
__i
; \

64 
fd_£t
 *
__¨r
 = (
£t
); \

65 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

66 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

67 } 0)

	)

68 
	#__FD_SET
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] |
	`__FDMASK
 (d))

	)

69 
	#__FD_CLR
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] &~
	`__FDMASK
 (d))

	)

70 
	#__FD_ISSET
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] & 
	`__FDMASK
 (d))

	)

	@/usr/include/bits/sigset.h

21 #i‚def 
_SIGSET_H_ty≥s


22 
	#_SIGSET_H_ty≥s
 1

	)

24 
	t__sig_©omic_t
;

28 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

31 
	m__vÆ
[
_SIGSET_NWORDS
];

32 } 
	t__sig£t_t
;

43 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


44 
	#_SIGSET_H_‚s
 1

	)

46 #i‚de‡
_EXTERN_INLINE


47 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

51 
	#__sigmask
(
sig
) \

52 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

55 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

57 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

58 
	#__sigem±y£t
(
£t
) \

59 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

60 
sig£t_t
 *
__£t
 = (
£t
); \

61 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

62 0; }))

	)

63 
	#__sigfûl£t
(
£t
) \

64 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

65 
sig£t_t
 *
__£t
 = (
£t
); \

66 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

67 0; }))

	)

69 #ifde‡
__USE_GNU


73 
	#__sigi£m±y£t
(
£t
) \

74 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

75 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

76 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

77 !
__ªt
 && --
__˙t
 >= 0) \

78 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

79 
__ªt
 =0; }))

	)

80 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

81 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

82 
sig£t_t
 *
__de°
 = (
de°
); \

83 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

84 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

85 --
__˙t
 >= 0) \

86 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

87 & 
__right
->
__vÆ
[
__˙t
]); \

88 0; }))

	)

89 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

90 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

91 
sig£t_t
 *
__de°
 = (
de°
); \

92 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

93 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

94 --
__˙t
 >= 0) \

95 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

96 | 
__right
->
__vÆ
[
__˙t
]); \

97 0; }))

	)

104 
__sigismembî
 (
__c⁄°
 
__sig£t_t
 *, );

105 
__sigadd£t
 (
__sig£t_t
 *, );

106 
__sigdñ£t
 (
__sig£t_t
 *, );

108 #ifde‡
__USE_EXTERN_INLINES


109 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

110 
_EXTERN_INLINE
 \

111 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

113 
__mask
 = 
	`__sigmask
 (
__sig
); \

114 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

115  
BODY
; \

116 }

	)

118 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
Ë? 1 : 0, 
__c⁄°
)

119 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

120 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

122 #unde‡
__SIGSETFN


	@/usr/include/bits/time.h

24 #i‚de‡
__√ed_timevÆ


25 #i‚de‡
_BITS_TIME_H


26 
	#_BITS_TIME_H
 1

	)

34 
	#CLOCKS_PER_SEC
 1000000l

	)

36 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


39 
	~<bôs/ty≥s.h
>

40 
__sysc⁄f
 ();

41 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

44 #ifde‡
__USE_POSIX199309


46 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

50 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

54 
	#CLOCK_MONOTONIC_RAW
 4

	)

56 
	#CLOCK_REALTIME_COARSE
 5

	)

58 
	#CLOCK_MONOTONIC_COARSE
 6

	)

61 
	#TIMER_ABSTIME
 1

	)

67 #ifde‡
__√ed_timevÆ


68 #unde‡
__√ed_timevÆ


69 #i‚de‡
_STRUCT_TIMEVAL


70 
	#_STRUCT_TIMEVAL
 1

	)

71 
	~<bôs/ty≥s.h
>

75 
	stimevÆ


77 
__time_t
 
	mtv_£c
;

78 
__su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

72 
	t__c⁄°
 **, __const *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

86 
	t__c⁄°
 *,

87 
	t__c⁄°
 **,

88 
	t__c⁄°
 *, **,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

93 
	t__c⁄°
 *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 
__c⁄°
 *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___kî√l_co¶


	)

11 
	#__°ub___kî√l_söl


	)

12 
	#__°ub___kî√l_è∆


	)

13 
	#__°ub_chÊags


	)

14 
	#__°ub_Áâach


	)

15 
	#__°ub_fchÊags


	)

16 
	#__°ub_fdëach


	)

17 
	#__°ub_gây


	)

18 
	#__°ub_lchmod


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

56 #i‚de‡
_WINT_T


61 
	#_WINT_T


	)

62 
	twöt_t
;

66 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

67 && 
deföed
 
__WINT_TYPE__


68 
__BEGIN_NAMESPACE_STD


69 
__WINT_TYPE__
 
	twöt_t
;

70 
	g__END_NAMESPACE_STD


75 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

76 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

80 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


81 
	#__mb°©e_t_deföed
 1

	)

85 
	m__cou¡
;

88 #ifde‡
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wöt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vÆue
;

95 } 
	t__mb°©e_t
;

97 #unde‡
__√ed_mb°©e_t


102 #ifde‡
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifde‡
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

112 #i‚de‡
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #i‚de‡
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


125 
	~<w˘y≥.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

147 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

155 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

157 
__THROW
;

160 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

161 
__THROW
 
__©åibuã_puª__
;

163 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__©åibuã_puª__
;

165 
__END_NAMESPACE_STD


167 #ifde‡
__USE_XOPEN2K8


169 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

172 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

173 
size_t
 
__n
Ë
__THROW
;

177 
	~<xloˇÀ.h
>

179 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

180 
__loˇÀ_t
 
__loc
Ë
__THROW
;

182 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

183 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

193 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

194 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifde‡
__USE_XOPEN2K8


203 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

204 
__loˇÀ_t
 
__loc
Ë
__THROW
;

209 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

210 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

213 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

221 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
__©åibuã_puª__
;

228 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

230 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

231 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

232 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
__©åibuã_puª__
;

237 
__END_NAMESPACE_STD


239 #ifde‡
__USE_GNU


242 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

243 
__THROW
 
__©åibuã_puª__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

250 
__THROW
 
__©åibuã_puª__
;

253 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

254 
__THROW
 
__©åibuã_puª__
;

256 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, 
__c⁄°
 wch¨_à*
__ac˚±
)

258 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

259 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
,

260 
__c⁄°
 
wch¨_t
 *
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
__©åibuã_puª__
;

267 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

269 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

270 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

271 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

274 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
__©åibuã_puª__
;

279 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

280 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

281 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

284 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

285 
__END_NAMESPACE_STD


287 #ifde‡
__USE_XOPEN


289 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

291 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

292 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

293 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

296 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
__©åibuã_puª__
;

301 #ifde‡
__USE_XOPEN2K8


303 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

304 
__THROW
 
__©åibuã_puª__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

313 "C++" 
__c⁄°
 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

317 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
__©åibuã_puª__
;

322 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s1
,

323 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

327 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

328 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

332 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

333 
__THROW
;

336 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

337 
__END_NAMESPACE_STD


339 #ifde‡
__USE_GNU


342 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

343 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

344 
__THROW
;

348 
__BEGIN_NAMESPACE_STD


351 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

355 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

359 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

363 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

364 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

365 
mb°©e_t
 *
__p
Ë
__THROW
;

368 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

369 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

372 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

373 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
__END_NAMESPACE_STD


378 #ifde‡
__USE_EXTERN_INLINES


384 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

385 
__exã∫_ölöe
 
wöt_t


386 
	`__NTH
 (
	$btowc
 (
__c
))

387 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

388 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

390 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

391 
__exã∫_ölöe
 

392 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

393 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

394 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

396 
__exã∫_ölöe
 
size_t


397 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

398 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

399 {  (
__ps
 !
NULL


400 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

403 
__BEGIN_NAMESPACE_STD


406 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

407 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

408 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

412 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

413 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

414 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

415 
__END_NAMESPACE_STD


418 #ifdef 
__USE_XOPEN2K8


421 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

422 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

423 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

427 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

428 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

429 
size_t
 
__nwc
, size_à
__Àn
,

430 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

435 #ifde‡
__USE_XOPEN


437 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

441 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

445 
__BEGIN_NAMESPACE_STD


448 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

449 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

450 
__END_NAMESPACE_STD


452 #ifde‡
__USE_ISOC99


453 
__BEGIN_NAMESPACE_C99


455 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

456 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

457 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
__END_NAMESPACE_C99


463 
__BEGIN_NAMESPACE_STD


466 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

467 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

471 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

473 
__THROW
;

474 
__END_NAMESPACE_STD


476 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

477 
__BEGIN_NAMESPACE_C99


480 
__exãnsi⁄__


481 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

482 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

483 
__THROW
;

487 
__exãnsi⁄__


488 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

489 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

490 
__ba£
Ë
__THROW
;

491 
__END_NAMESPACE_C99


494 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


497 
__exãnsi⁄__


498 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

499 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

500 
__THROW
;

504 
__exãnsi⁄__


505 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

506 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

507 
__ba£
Ë
__THROW
;

510 #ifde‡
__USE_GNU


524 
	~<xloˇÀ.h
>

528 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

529 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

530 
__loˇÀ_t
 
__loc
Ë
__THROW
;

532 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

533 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

534 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

536 
__exãnsi⁄__


537 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
)

545 
__THROW
;

547 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

549 
__THROW
;

551 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

552 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
;

555 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

556 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

557 
__loˇÀ_t
 
__loc
Ë
__THROW
;

562 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

563 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

567 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

568 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

569 
__THROW
;

575 #ifdef 
__USE_XOPEN2K8


578 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

581 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


582 
__BEGIN_NAMESPACE_STD


585 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

592 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

593 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

599 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

602 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

603 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
__THROW
 ;

610 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

611 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

612 
__gnuc_va_li°
 
__¨g
)

618 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

619 
__gnuc_va_li°
 
__¨g
)

623 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

624 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

625 
__gnuc_va_li°
 
__¨g
)

626 
__THROW
 ;

633 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

634 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

640 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

643 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

644 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
__THROW
 ;

647 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

648 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

649 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

650 #ifde‡
__REDIRECT


654 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

655 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

656 
__isoc99_fwsˇnf
)

658 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

659 
__isoc99_wsˇnf
)

661 
	`__REDIRECT
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

662 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

663 
__isoc99_swsˇnf
)

664 
__THROW
 ;

666 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

667 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

668 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

669 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

670 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

671 
__THROW
;

672 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

673 
	#wsˇnf
 
__isoc99_wsˇnf


	)

674 
	#swsˇnf
 
__isoc99_swsˇnf


	)

678 
__END_NAMESPACE_STD


681 #ifde‡
__USE_ISOC99


682 
__BEGIN_NAMESPACE_C99


687 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

688 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

689 
__gnuc_va_li°
 
__¨g
)

695 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

696 
__gnuc_va_li°
 
__¨g
)

699 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

700 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

702 
__THROW
 ;

704 #i‡!
deföed
 
__USE_GNU
 \

705 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

706 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

707 #ifde‡
__REDIRECT


708 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

709 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

710 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

712 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

713 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

715 
	`__REDIRECT
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

716 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

717 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

718 
__THROW
 ;

720 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

721 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
);

723 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

726 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

728 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

729 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

730 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

734 
__END_NAMESPACE_C99


738 
__BEGIN_NAMESPACE_STD


743 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

744 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

750 
wöt_t
 
	`gëwch¨
 ();

757 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

758 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

764 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

772 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

773 
__FILE
 *
__ª°ri˘
 
__°ªam
);

779 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

780 
__FILE
 *
__ª°ri˘
 
__°ªam
);

787 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

788 
__END_NAMESPACE_STD


791 #ifde‡
__USE_GNU


799 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

800 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

808 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

816 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

826 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

835 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

836 
__FILE
 *
__ª°ri˘
 
__°ªam
);

844 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

845 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
__BEGIN_NAMESPACE_C99


853 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

854 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

855 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

856 
__END_NAMESPACE_C99


858 #ifde‡
__USE_GNU


859 
	~<xloˇÀ.h
>

863 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

864 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

865 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

866 
__loˇÀ_t
 
__loc
Ë
__THROW
;

875 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


876 
	#__√ed_iswxxx


	)

877 
	~<w˘y≥.h
>

881 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


882 
	~<bôs/wch¨2.h
>

885 #ifde‡
__LDBL_COMPAT


886 
	~<bôs/wch¨-ldbl.h
>

889 
__END_DECLS


897 #unde‡
__√ed_mb°©e_t


898 #unde‡
__√ed_wöt_t


	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

109 
	#ERFKILL
 132

	)

111 
	#EHWPOISON
 133

	)

	@/usr/include/bits/wchar-ldbl.h

20 #i‚de‡
_WCHAR_H


24 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


25 
__BEGIN_NAMESPACE_C99


26 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

27 
__LDBL_REDIR_DECL
 (
w¥ötf
);

28 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

31 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

32 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

33 && !
deföed
 
	g__REDIRECT
 \

34 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

35 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

37 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

39 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

41 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

43 
__END_NAMESPACE_C99


46 #ifde‡
__USE_ISOC99


47 
__BEGIN_NAMESPACE_C99


48 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

49 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

50 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

51 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

53 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

55 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

57 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

59 
__END_NAMESPACE_C99


62 #ifde‡
__USE_GNU


63 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

66 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


67 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

68 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

69 #i‡
__USE_FORTIFY_LEVEL
 > 1

70 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

73 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar.h

20 #i‚de‡
_BITS_WCHAR_H


21 
	#_BITS_WCHAR_H
 1

	)

23 
	#__WCHAR_MIN
 (-2147483647»- 1l)

	)

24 
	#__WCHAR_MAX
 (2147483647l)

	)

	@/usr/include/bits/wchar2.h

20 #i‚de‡
_WCHAR_H


25 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

26 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

27 
size_t
 
__ns1
Ë
__THROW
;

28 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

29 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

30 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

31 
wmem˝y
);

32 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

33 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

34 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

35 
size_t
 
__ns1
), 
__wmem˝y_chk
)

36 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

39 
__exã∫_Æways_ölöe
 
wch¨_t
 *

40 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

41 
size_t
 
__n
))

43 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

45 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

46  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

47 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

49 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

50  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

51 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

53  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

54 
	}
}

57 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

58 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

59 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

60 
__c⁄°
 
wch¨_t
 *
__s2
,

61 
size_t
 
__n
), 
wmemmove
);

62 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

63 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

64 
size_t
 
__n
, size_à
__ns1
), 
__wmemmove_chk
)

65 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

68 
__exã∫_Æways_ölöe
 
wch¨_t
 *

69 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
))

71 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

73 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

74  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

75 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

77 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

78  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

79 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

81  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

82 
	}
}

85 #ifde‡
__USE_GNU


86 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

87 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

88 
size_t
 
__ns1
Ë
__THROW
;

89 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

90 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

91 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
,

92 
size_t
 
__n
), 
wmemp˝y
);

93 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

94 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

95 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

96 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

97 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

100 
__exã∫_Æways_ölöe
 
wch¨_t
 *

101 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

102 
size_t
 
__n
))

104 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

106 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

107  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

108 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

110 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

111  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

112 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

114  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

115 
	}
}

119 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

120 
size_t
 
__ns
Ë
__THROW
;

121 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

122 
size_t
 
__n
), 
wmem£t
);

123 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

124 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

125 
size_t
 
__ns
), 
__wmem£t_chk
)

126 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

129 
__exã∫_Æways_ölöe
 
wch¨_t
 *

130 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
))

132 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

134 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

135  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

137 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

138  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

139 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

141  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

142 
	}
}

145 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

146 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

147 
size_t
 
__n
Ë
__THROW
;

148 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

149 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

150 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

152 
__exã∫_Æways_ölöe
 
wch¨_t
 *

153 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
))

155 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

156  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

157  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

158 
	}
}

161 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

162 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

163 
size_t
 
__de°Àn
Ë
__THROW
;

164 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
,

165 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

166 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
w˝˝y
);

168 
__exã∫_Æways_ölöe
 
wch¨_t
 *

169 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
))

171 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

172  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

173  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

174 
	}
}

177 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

178 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

179 
size_t
 
__de°Àn
Ë
__THROW
;

180 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

181 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

182 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

183 
size_t
 
__n
), 
wc¢˝y
);

184 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

185 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

186 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

187 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

188 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

191 
__exã∫_Æways_ölöe
 
wch¨_t
 *

192 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
,

193 
size_t
 
__n
))

195 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

197 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

198  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

199 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

200 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

201  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

202 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

204  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

205 
	}
}

208 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

209 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

210 
size_t
 
__de°Àn
Ë
__THROW
;

211 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

212 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

213 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

214 
size_t
 
__n
), 
w˝n˝y
);

215 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

216 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

217 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

218 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

219 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

222 
__exã∫_Æways_ölöe
 
wch¨_t
 *

223 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
,

224 
size_t
 
__n
))

226 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

228 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

229  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

230 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

231 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

232  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

233 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

235  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

236 
	}
}

239 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

240 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

241 
size_t
 
__de°Àn
Ë
__THROW
;

242 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

243 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

244 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

246 
__exã∫_Æways_ölöe
 
wch¨_t
 *

247 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
))

249 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

250  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

251  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

252 
	}
}

255 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

256 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

257 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

258 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

259 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

260 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

261 
size_t
 
__n
), 
wc¢ˇt
);

263 
__exã∫_Æways_ölöe
 
wch¨_t
 *

264 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
,

265 
size_t
 
__n
))

267 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

268  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

269 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

270  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

271 
	}
}

274 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

275 
__Êag
, 
size_t
 
__s_Àn
,

276 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

277 
__THROW
 ;

279 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

280 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

281 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

282 
sw¥ötf
);

284 #ifde‡
__va_¨g_∑ck


285 
__exã∫_Æways_ölöe
 

286 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

287 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

289 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

290  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

291 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

292 
__fmt
, 
	`__va_¨g_∑ck
 ());

293  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

294 
	}
}

295 #ñi‡!
deföed
 
__˝lu•lus


297 
	#sw¥ötf
(
s
, 
n
, ...) \

298 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

299 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

300 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

301 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

304 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

305 
__Êag
, 
size_t
 
__s_Àn
,

306 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

307 
__gnuc_va_li°
 
__¨g
)

308 
__THROW
 ;

310 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

311 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

312 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

313 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

315 
__exã∫_Æways_ölöe
 

316 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

317 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

319 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

320  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

321 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

322  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

323 
	}
}

326 #i‡
__USE_FORTIFY_LEVEL
 > 1

328 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

329 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

330 
__w¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

332 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

333 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

334 
__gnuc_va_li°
 
__≠
);

335 
__vw¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

336 
__gnuc_va_li°
 
__≠
);

338 #ifde‡
__va_¨g_∑ck


339 
__exã∫_Æways_ölöe
 

340 
	$w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

342  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

343 
	}
}

345 
__exã∫_Æways_ölöe
 

346 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

348  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

349 
	`__va_¨g_∑ck
 ());

350 
	}
}

351 #ñi‡!
deföed
 
__˝lu•lus


352 
	#w¥ötf
(...) \

353 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

354 
	#fw¥ötf
(
°ªam
, ...) \

355 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

358 
__exã∫_Æways_ölöe
 

359 
	$vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

361  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

362 
	}
}

364 
__exã∫_Æways_ölöe
 

365 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

366 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

368  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

369 
	}
}

373 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

374 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

375 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

376 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

377 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

378 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

379 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

380 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

381 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

384 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

385 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

387 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

389 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

390  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

391 
__n
, 
__°ªam
);

393 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

394  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

395 
__n
, 
__°ªam
);

397  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

398 
	}
}

400 #ifde‡
__USE_GNU


401 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

402 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

403 
__wur
;

404 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

405 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

406 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

407 
__wur
;

408 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

409 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

410 
__FILE
 *
__ª°ri˘
 
__°ªam
),

411 
__fgëws_u∆ocked_chk
)

412 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

415 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

416 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

418 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

420 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

421  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

422 
__n
, 
__°ªam
);

424 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

425  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

426 
__n
, 
__°ªam
);

428  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

429 
	}
}

433 
size_t
 
	$__w¸tomb_chk
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

434 
mb°©e_t
 *
__ª°ri˘
 
__p
,

435 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

436 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

437 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

438 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

440 
__exã∫_Æways_ölöe
 
__wur
 
size_t


441 
	`__NTH
 (
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

442 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

447 
	#__WCHAR_MB_LEN_MAX
 16

	)

448 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


451 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

452  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

453  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

454 
	}
}

457 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

458 
__c⁄°
 **
__ª°ri˘
 
__§c
,

459 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

460 
size_t
 
__d°Àn
Ë
__THROW
;

461 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

462 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

463 
__c⁄°
 **
__ª°ri˘
 
__§c
,

464 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

465 
mb§towcs
);

466 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

467 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

468 
__c⁄°
 **
__ª°ri˘
 
__§c
,

469 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

470 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

471 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

474 
__exã∫_Æways_ölöe
 
size_t


475 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

476 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

478 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

480 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

481  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

482 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

484 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

485  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

486 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

488  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

489 
	}
}

492 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

493 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

494 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

495 
size_t
 
__d°Àn
Ë
__THROW
;

496 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

497 (*
__ª°ri˘
 
__d°
,

498 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

499 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

500 
wc§tombs
);

501 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

502 (*
__ª°ri˘
 
__d°
,

503 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

504 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

505 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

506 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

508 
__exã∫_Æways_ölöe
 
size_t


509 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

510 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

512 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

514 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

515  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

517 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

518  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

520  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

521 
	}
}

524 #ifde‡
__USE_GNU


525 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

526 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

527 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

528 
size_t
 
__d°Àn
Ë
__THROW
;

529 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

530 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

531 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

532 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

533 
mb¢πowcs
);

534 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

535 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

536 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

537 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

538 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

539 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

542 
__exã∫_Æways_ölöe
 
size_t


543 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

544 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

546 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

548 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

549  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

550 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

552 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

553  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

554 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

556  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

557 
	}
}

560 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

561 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

562 
size_t
 
__nwc
, size_à
__Àn
,

563 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

564 
__THROW
;

565 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

566 (*
__ª°ri˘
 
__d°
,

567 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

568 
size_t
 
__nwc
, size_à
__Àn
,

569 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

570 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

571 (*
__ª°ri˘
 
__d°
,

572 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

573 
size_t
 
__nwc
, size_à
__Àn
,

574 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

575 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

576 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

578 
__exã∫_Æways_ölöe
 
size_t


579 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

580 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

582 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

584 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

585  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

586 
	`__bos
 (
__d°
));

588 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

589  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

590 
	`__bos
 (
__d°
));

592  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

593 
	}
}

	@/usr/include/pthread.h

20 #i‚de‡
_PTHREAD_H


21 
	#_PTHREAD_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<ídün.h
>

25 
	~<sched.h
>

26 
	~<time.h
>

28 
	~<bôs/±hªadty≥s.h
>

29 
	~<bôs/£tjmp.h
>

30 
	~<bôs/w‹dsize.h
>

36 
	mPTHREAD_CREATE_JOINABLE
,

37 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

38 
	mPTHREAD_CREATE_DETACHED


39 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

46 
	mPTHREAD_MUTEX_TIMED_NP
,

47 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

48 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

49 
	mPTHREAD_MUTEX_ADAPTIVE_NP


50 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


52 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

53 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

54 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

55 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


57 #ifde‡
__USE_GNU


59 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


64 #ifde‡
__USE_XOPEN2K


68 
	mPTHREAD_MUTEX_STALLED
,

69 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

70 
	mPTHREAD_MUTEX_ROBUST
,

71 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


76 #ifde‡
__USE_UNIX98


80 
	mPTHREAD_PRIO_NONE
,

81 
	mPTHREAD_PRIO_INHERIT
,

82 
	mPTHREAD_PRIO_PROTECT


88 #i‡
__WORDSIZE
 == 64

89 
	#PTHREAD_MUTEX_INITIALIZER
 \

90 { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }

	)

91 #ifde‡
__USE_GNU


92 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

93 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0, 0 } } }

	)

94 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0, 0 } } }

	)

96 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

97 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0, 0 } } }

	)

100 
	#PTHREAD_MUTEX_INITIALIZER
 \

101 { { 0, 0, 0, 0, 0, { 0 } } }

	)

102 #ifde‡
__USE_GNU


103 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0 } } }

	)

105 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0 } } }

	)

107 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

108 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0 } } }

	)

114 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


117 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

119 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

120 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


124 
	#PTHREAD_RWLOCK_INITIALIZER
 \

125 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

126 #ifde‡
__USE_GNU


127 #i‡
__WORDSIZE
 == 64

128 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

130 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

132 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


133 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

134 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

135 0, 0, 0, 0 } }

	)

137 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

138 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

139 0 } }

	)

149 
	mPTHREAD_INHERIT_SCHED
,

150 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

151 
	mPTHREAD_EXPLICIT_SCHED


152 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

159 
	mPTHREAD_SCOPE_SYSTEM
,

160 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

161 
	mPTHREAD_SCOPE_PROCESS


162 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

169 
	mPTHREAD_PROCESS_PRIVATE
,

170 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

171 
	mPTHREAD_PROCESS_SHARED


172 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

178 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

182 
	s_±hªad_˛ónup_buf„r


184 (*
	m__routöe
) (*);

185 *
	m__¨g
;

186 
	m__ˇn˚…y≥
;

187 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

193 
	mPTHREAD_CANCEL_ENABLE
,

194 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

195 
	mPTHREAD_CANCEL_DISABLE


196 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

200 
	mPTHREAD_CANCEL_DEFERRED
,

201 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

202 
	mPTHREAD_CANCEL_ASYNCHRONOUS


203 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

205 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

209 
	#PTHREAD_ONCE_INIT
 0

	)

212 #ifde‡
__USE_XOPEN2K


216 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

220 
__BEGIN_DECLS


225 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

226 
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

227 *(*
__°¨t_routöe
) (*),

228 *
__ª°ri˘
 
__¨g
Ë
__THROW
 
__n⁄nuŒ
 ((1, 3));

234 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

242 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

244 #ifde‡
__USE_GNU


247 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

255 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

256 
__c⁄°
 
time•ec
 *
__ab°ime
);

263 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

267 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

270 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
Ë
__THROW
;

278 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

281 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

282 
__THROW
 
	`__n⁄nuŒ
 ((1));

285 
	$±hªad_©å_gëdëach°©e
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

286 *
__dëach°©e
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

290 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

291 
__dëach°©e
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$±hªad_©å_gëgu¨dsize
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

297 
size_t
 *
__gu¨dsize
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

301 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

302 
size_t
 
__gu¨dsize
)

303 
__THROW
 
	`__n⁄nuŒ
 ((1));

307 
	$±hªad_©å_gësched∑øm
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


308 
__©å
,

309 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

310 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

313 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

314 
__c⁄°
 
sched_∑øm
 *
__ª°ri˘


315 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

318 
	$±hªad_©å_gëschedpﬁicy
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


319 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

320 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

323 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

324 
__THROW
 
	`__n⁄nuŒ
 ((1));

327 
	$±hªad_©å_gëöhîôsched
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


328 
__©å
, *
__ª°ri˘
 
__öhîô
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

333 
__öhîô
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

338 
	$±hªad_©å_gësc›e
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

339 *
__ª°ri˘
 
__sc›e
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

343 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

344 
__THROW
 
	`__n⁄nuŒ
 ((1));

347 
	$±hªad_©å_gë°ackaddr
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


348 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

349 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

355 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

356 *
__°ackaddr
)

357 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

360 
	$±hªad_©å_gë°acksize
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


361 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

367 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

368 
size_t
 
__°acksize
)

369 
__THROW
 
	`__n⁄nuŒ
 ((1));

371 #ifde‡
__USE_XOPEN2K


373 
	$±hªad_©å_gë°ack
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

374 **
__ª°ri˘
 
__°ackaddr
,

375 
size_t
 *
__ª°ri˘
 
__°acksize
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

381 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

382 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

385 #ifde‡
__USE_GNU


388 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

389 
size_t
 
__˝u£tsize
,

390 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

391 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

395 
	$±hªad_©å_gëafföôy_≈
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

396 
size_t
 
__˝u£tsize
,

397 
˝u_£t_t
 *
__˝u£t
)

398 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

404 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

405 
__THROW
 
	`__n⁄nuŒ
 ((2));

413 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

414 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

415 
__THROW
 
	`__n⁄nuŒ
 ((3));

418 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

419 *
__ª°ri˘
 
__pﬁicy
,

420 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

424 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

425 
__THROW
;

428 #ifde‡
__USE_GNU


430 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

431 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

435 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, 
__c⁄°
 *
__«me
)

436 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 #ifde‡
__USE_UNIX98


442 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

445 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

448 #ifde‡
__USE_GNU


453 
	$±hªad_yõld
 (Ë
__THROW
;

458 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

459 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

460 
__THROW
 
	`__n⁄nuŒ
 ((3));

463 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

464 
˝u_£t_t
 *
__˝u£t
)

465 
__THROW
 
	`__n⁄nuŒ
 ((3));

478 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

479 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

490 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

494 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

497 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

502 
	`±hªad_ã°ˇn˚l
 ();

511 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

512 
__mask_was_ßved
;

513 } 
__ˇn˚l_jmp_buf
[1];

514 *
__∑d
[4];

515 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

518 #i‚de‡
__˛ónup_f˘_©åibuã


519 
	#__˛ónup_f˘_©åibuã


	)

524 
	s__±hªad_˛ónup_‰ame


526 (*
__ˇn˚l_routöe
) (*);

527 *
__ˇn˚l_¨g
;

528 
__do_ô
;

529 
__ˇn˚l_ty≥
;

532 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


533 #ifde‡
__˝lu•lus


535 ˛as†
	c__±hªad_˛ónup_˛ass


537 (*
__ˇn˚l_routöe
) (*);

538 *
__ˇn˚l_¨g
;

539 
__do_ô
;

540 
__ˇn˚l_ty≥
;

542 
public
:

543 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

544 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

545 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

546 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

547 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

548 &
__ˇn˚l_ty≥
); 
	}
}

549 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

559 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

561 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

565 
	#±hªad_˛ónup_p›
(
execuã
) \

566 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

567 } 0)

	)

569 #ifde‡
__USE_GNU


573 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

575 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

576 
__˛‰ame
.
	`__de„r
 ()

	)

581 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

582 
__˛‰ame
.
	`__ª°‹e
 (); \

583 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

584 } 0)

	)

591 
__exã∫_ölöe
 

592 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

594 i‡(
__‰ame
->
__do_ô
)

595 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

596 
	}
}

605 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

607 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

608 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

609 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

610 .
__do_ô
 = 1 };

	)

614 
	#±hªad_˛ónup_p›
(
execuã
) \

615 
__˛‰ame
.
__do_ô
 = (
execuã
); \

616 } 0)

	)

618 #ifde‡
__USE_GNU


622 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

624 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

625 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

626 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

627 .
__do_ô
 = 1 }; \

628 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

629 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

634 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

635 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

636 
__˛‰ame
.
__do_ô
 = (
execuã
); \

637 } 0)

	)

648 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

650 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

651 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

652 *
__ˇn˚l_¨g
 = (
¨g
); \

653 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

654 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

655 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

657 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

658 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

662 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

663 dÿ{

	)

664 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

665 
__˛ónup_f˘_©åibuã
;

669 
	#±hªad_˛ónup_p›
(
execuã
) \

672 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

673 i‡(
execuã
) \

674 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

675 } 0)

	)

676 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

677 
__˛ónup_f˘_©åibuã
;

679 #ifde‡
__USE_GNU


683 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

685 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

686 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

687 *
__ˇn˚l_¨g
 = (
¨g
); \

688 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

689 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

690 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

692 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

693 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

697 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

698 dÿ{

	)

699 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

700 
__˛ónup_f˘_©åibuã
;

705 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

708 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

709 i‡(
execuã
) \

710 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

711 
	}
} 0)

	)

712 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

713 
__˛ónup_f˘_©åibuã
;

717 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

718 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

719 #i‚de‡
SHARED


720 
	`__©åibuã__
 ((
__wók__
))

726 
__jmp_buf_èg
;

727 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROW
;

733 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

734 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx©å
)

735 
__THROW
 
	`__n⁄nuŒ
 ((1));

738 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

739 
__THROW
 
	`__n⁄nuŒ
 ((1));

742 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

743 
__THROW
 
	`__n⁄nuŒ
 ((1));

746 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

747 
__THROW
 
	`__n⁄nuŒ
 ((1));

749 #ifde‡
__USE_XOPEN2K


751 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

752 
__c⁄°
 
time•ec
 *
__ª°ri˘


753 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

757 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

758 
__THROW
 
	`__n⁄nuŒ
 ((1));

762 
	$±hªad_muãx_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx_t
 *

763 
__ª°ri˘
 
__muãx
,

764 *
__ª°ri˘
 
__¥io˚ûög
)

765 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

769 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

770 
__¥io˚ûög
,

771 *
__ª°ri˘
 
__ﬁd_˚ûög
)

772 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

775 #ifde‡
__USE_XOPEN2K8


777 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

778 
__THROW
 
	`__n⁄nuŒ
 ((1));

779 #ifde‡
__USE_GNU


780 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

781 
__THROW
 
	`__n⁄nuŒ
 ((1));

790 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1));

794 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

795 
__THROW
 
	`__n⁄nuŒ
 ((1));

798 
	$±hªad_muãx©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_muãx©å_t
 *

799 
__ª°ri˘
 
__©å
,

800 *
__ª°ri˘
 
__psh¨ed
)

801 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

804 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

805 
__psh¨ed
)

806 
__THROW
 
	`__n⁄nuŒ
 ((1));

808 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


810 
	$±hªad_muãx©å_gëty≥
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__ª°ri˘


811 
__©å
, *
__ª°ri˘
 
__köd
)

812 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

817 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1));

822 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (
__c⁄°
 
±hªad_muãx©å_t
 *

823 
__ª°ri˘
 
__©å
,

824 *
__ª°ri˘
 
__¥Ÿocﬁ
)

825 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

829 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

830 
__¥Ÿocﬁ
)

831 
__THROW
 
	`__n⁄nuŒ
 ((1));

834 
	$±hªad_muãx©å_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx©å_t
 *

835 
__ª°ri˘
 
__©å
,

836 *
__ª°ri˘
 
__¥io˚ûög
)

837 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

840 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

841 
__¥io˚ûög
)

842 
__THROW
 
	`__n⁄nuŒ
 ((1));

844 #ifde‡
__USE_XOPEN2K


846 
	$±hªad_muãx©å_gërobu°
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

847 *
__robu°√ss
)

848 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

849 #ifde‡
__USE_GNU


850 
	$±hªad_muãx©å_gërobu°_≈
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

851 *
__robu°√ss
)

852 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__robu°√ss
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

859 #ifde‡
__USE_GNU


860 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

861 
__robu°√ss
)

862 
__THROW
 
	`__n⁄nuŒ
 ((1));

867 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


872 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

873 
__c⁄°
 
±hªad_rwlock©å_t
 *
__ª°ri˘


874 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

877 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

881 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

882 
__THROW
 
	`__n⁄nuŒ
 ((1));

885 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

886 
__THROW
 
	`__n⁄nuŒ
 ((1));

888 #ifde‡
__USE_XOPEN2K


890 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

891 
__c⁄°
 
time•ec
 *
__ª°ri˘


892 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

896 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

897 
__THROW
 
	`__n⁄nuŒ
 ((1));

900 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1));

903 #ifde‡
__USE_XOPEN2K


905 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

906 
__c⁄°
 
time•ec
 *
__ª°ri˘


907 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

911 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

912 
__THROW
 
	`__n⁄nuŒ
 ((1));

918 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1));

922 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

923 
__THROW
 
	`__n⁄nuŒ
 ((1));

926 
	$±hªad_rwlock©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

927 
__ª°ri˘
 
__©å
,

928 *
__ª°ri˘
 
__psh¨ed
)

929 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

932 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

933 
__psh¨ed
)

934 
__THROW
 
	`__n⁄nuŒ
 ((1));

937 
	$±hªad_rwlock©å_gëköd_≈
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

938 
__ª°ri˘
 
__©å
,

939 *
__ª°ri˘
 
__¥ef
)

940 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

943 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

944 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

952 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

953 
__c⁄°
 
±hªad_c⁄d©å_t
 *
__ª°ri˘


954 
__c⁄d_©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

957 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

958 
__THROW
 
	`__n⁄nuŒ
 ((1));

961 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

962 
__THROW
 
	`__n⁄nuŒ
 ((1));

965 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

966 
__THROW
 
	`__n⁄nuŒ
 ((1));

973 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

974 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

975 
	`__n⁄nuŒ
 ((1, 2));

984 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

985 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

986 
__c⁄°
 
time•ec
 *
__ª°ri˘


987 
__ab°ime
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

992 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

993 
__THROW
 
	`__n⁄nuŒ
 ((1));

996 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

997 
__THROW
 
	`__n⁄nuŒ
 ((1));

1000 
	$±hªad_c⁄d©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1001 
__ª°ri˘
 
__©å
,

1002 *
__ª°ri˘
 
__psh¨ed
)

1003 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1006 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1007 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1009 #ifde‡
__USE_XOPEN2K


1011 
	$±hªad_c⁄d©å_gë˛ock
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1012 
__ª°ri˘
 
__©å
,

1013 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1014 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1017 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1018 
__˛ockid_t
 
__˛ock_id
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1));

1023 #ifde‡
__USE_XOPEN2K


1028 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1029 
__THROW
 
	`__n⁄nuŒ
 ((1));

1032 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1033 
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1037 
__THROW
 
	`__n⁄nuŒ
 ((1));

1040 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1041 
__THROW
 
	`__n⁄nuŒ
 ((1));

1044 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1045 
__THROW
 
	`__n⁄nuŒ
 ((1));

1052 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1053 
__c⁄°
 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1054 
__©å
, 
__cou¡
)

1055 
__THROW
 
	`__n⁄nuŒ
 ((1));

1058 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1059 
__THROW
 
	`__n⁄nuŒ
 ((1));

1062 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1063 
__THROW
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1068 
__THROW
 
	`__n⁄nuŒ
 ((1));

1071 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1072 
__THROW
 
	`__n⁄nuŒ
 ((1));

1075 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (
__c⁄°
 
±hªad_b¨rõøâr_t
 *

1076 
__ª°ri˘
 
__©å
,

1077 *
__ª°ri˘
 
__psh¨ed
)

1078 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1081 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1082 
__psh¨ed
)

1083 
__THROW
 
	`__n⁄nuŒ
 ((1));

1095 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1096 (*
__de°r_fun˘i⁄
) (*))

1097 
__THROW
 
	`__n⁄nuŒ
 ((1));

1100 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1103 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1106 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1107 
__c⁄°
 *
__poöãr
Ë
__THROW
 ;

1110 #ifde‡
__USE_XOPEN2K


1112 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1113 
__˛ockid_t
 *
__˛ock_id
)

1114 
__THROW
 
	`__n⁄nuŒ
 ((2));

1129 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1130 (*
__∑ª¡
) (),

1131 (*
__chûd
Ë()Ë
__THROW
;

1134 #ifde‡
__USE_EXTERN_INLINES


1136 
__exã∫_ölöe
 

1137 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1139  
__thªad1
 =
__thªad2
;

1140 
	}
}

1143 
	g__END_DECLS


	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<wch¨.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_XOPEN2K8


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@/usr/include/bits/setjmp.h

21 #i‚de‡
_BITS_SETJMP_H


22 
	#_BITS_SETJMP_H
 1

	)

24 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


28 #i‚def 
_ASM


29 
	t__jmp_buf
[6];

	@/usr/include/sched.h

21 #i‚def 
_SCHED_H


22 
	#_SCHED_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

32 
	#__√ed_time_t


	)

33 
	#__√ed_time•ec


	)

34 
	~<time.h
>

36 #i‚de‡
__pid_t_deföed


37 
__pid_t
 
	tpid_t
;

38 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

45 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

48 
__BEGIN_DECLS


51 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

52 
__THROW
;

55 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

58 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

59 
__c⁄°
 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

62 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

65 
	$sched_yõld
 (Ë
__THROW
;

68 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

77 #ifde‡
__USE_GNU


79 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

80 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

82 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

83 
˝u£ç
)

	)

84 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

87 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

89 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

90 
˝u£ç
)

	)

91 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

94 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

96 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

97 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

101 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

103 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

105 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

107 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

109 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

110 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

112 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

113 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

114 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

118 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

119 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

122 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

123 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

126 
__END_DECLS


	@/usr/include/bits/sched.h

22 #i‚de‡
__√ed_sched∑øm


24 #i‚de‡
_SCHED_H


30 
	#SCHED_OTHER
 0

	)

31 
	#SCHED_FIFO
 1

	)

32 
	#SCHED_RR
 2

	)

33 #ifde‡
__USE_GNU


34 
	#SCHED_BATCH
 3

	)

35 
	#SCHED_IDLE
 5

	)

37 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

40 #ifde‡
__USE_MISC


42 
	#CSIGNAL
 0x000000f‡

	)

43 
	#CLONE_VM
 0x00000100

	)

44 
	#CLONE_FS
 0x00000200

	)

45 
	#CLONE_FILES
 0x00000400

	)

46 
	#CLONE_SIGHAND
 0x00000800

	)

47 
	#CLONE_PTRACE
 0x00002000

	)

48 
	#CLONE_VFORK
 0x00004000

	)

50 
	#CLONE_PARENT
 0x00008000

	)

52 
	#CLONE_THREAD
 0x00010000

	)

53 
	#CLONE_NEWNS
 0x00020000

	)

54 
	#CLONE_SYSVSEM
 0x00040000

	)

55 
	#CLONE_SETTLS
 0x00080000

	)

56 
	#CLONE_PARENT_SETTID
 0x00100000

	)

58 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

60 
	#CLONE_DETACHED
 0x00400000

	)

61 
	#CLONE_UNTRACED
 0x00800000

	)

63 
	#CLONE_CHILD_SETTID
 0x01000000

	)

65 
	#CLONE_NEWUTS
 0x04000000

	)

66 
	#CLONE_NEWIPC
 0x08000000

	)

67 
	#CLONE_NEWUSER
 0x10000000

	)

68 
	#CLONE_NEWPID
 0x20000000

	)

69 
	#CLONE_NEWNET
 0x40000000

	)

70 
	#CLONE_IO
 0x80000000

	)

74 
	ssched_∑øm


76 
	m__sched_¥i‹ôy
;

79 
	g__BEGIN_DECLS


81 #ifde‡
__USE_MISC


83 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

84 
__Êags
, *
__¨g
, ...Ë
__THROW
;

87 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

90 
	$sched_gë˝u
 (Ë
__THROW
;

93 
__END_DECLS


97 #i‡!
deföed
 
__deföed_sched∑øm
 \

98 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

99 
	#__deföed_sched∑øm
 1

	)

101 
	s__sched_∑øm


103 
__sched_¥i‹ôy
;

105 #unde‡
__√ed_sched∑øm


109 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


110 
	#__˝u_£t_t_deföed


	)

112 
	#__CPU_SETSIZE
 1024

	)

113 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

116 
	t__˝u_mask
;

119 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

120 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

125 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

126 } 
	t˝u_£t_t
;

129 #i‡
	`__GNUC_PREREQ
 (2, 91)

130 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

131 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

133 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

135 
size_t
 
__i
; \

136 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

137 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

138 
__i
 = 0; __ò< 
__imax
; ++__i) \

139 
__bôs
[
__i
] = 0; \

140 
	}
} 0)

	)

142 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

143 (
__exãnsi⁄__
 \

144 ({ 
size_t
 
__˝u
 = (
˝u
); \

145 
__˝u
 < 8 * (
£tsize
) \

146 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

147 |
	`__CPUMASK
 (
__˝u
)) \

148 : 0; }))

	)

149 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

150 (
__exãnsi⁄__
 \

151 ({ 
size_t
 
__˝u
 = (
˝u
); \

152 
__˝u
 < 8 * (
£tsize
) \

153 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

154 &~
	`__CPUMASK
 (
__˝u
)) \

155 : 0; }))

	)

156 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

157 (
__exãnsi⁄__
 \

158 ({ 
size_t
 
__˝u
 = (
˝u
); \

159 
__˝u
 < 8 * (
£tsize
) \

160 ? ((((
__c⁄°
 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

161 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

162 : 0; }))

	)

164 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

165 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

167 #i‡
__GNUC_PREREQ
 (2, 91)

168 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

169 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

171 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

172 (
__exãnsi⁄__
 \

173 ({ 
__c⁄°
 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

174 
__c⁄°
 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

175 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

176 
size_t
 
__i
; \

177 
__i
 = 0; __ò< 
__imax
; ++__i) \

178 i‡(
__bôs
[
__i
] != __bits[__i]) \

180 
__i
 =
__imax
; }))

	)

183 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

184 (
__exãnsi⁄__
 \

185 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

186 
__c⁄°
 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

187 
__c⁄°
 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

188 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

189 
size_t
 
__i
; \

190 
__i
 = 0; __ò< 
__imax
; ++__i) \

191 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

192 
__de°
; }))

	)

194 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

195 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

196 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

197 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

199 
__BEGIN_DECLS


201 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

202 
__THROW
;

203 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

204 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

206 
__END_DECLS


	@
1
.
1
/usr/include
106
2085
align.c
bits.c
builtin.c
closure.c
const.c
cplx.c
dcl.c
esc.c
export.c
fmt.c
gen.c
go.h
go.y
init.c
inl.c
lex.c
md5.c
md5.h
mkbuiltin1.c
mparith1.c
mparith2.c
mparith3.c
obj.c
opnames.h
order.c
pgen.c
range.c
reflect.c
select.c
sinit.c
subr.c
swt.c
typecheck.c
unsafe.c
walk.c
y.tab.c
y.tab.h
yerr.h
/usr/include/alloca.h
/usr/include/ar.h
/usr/include/errno.h
/usr/include/libintl.h
/usr/include/malloc.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/unistd.h
/usr/include/bits/confname.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/posix_opt.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/types.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/locale.h
/usr/include/sys/cdefs.h
/usr/include/sys/types.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/locale.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/typesizes.h
/usr/include/bits/wordsize.h
/usr/include/ctype.h
/usr/include/endian.h
/usr/include/gnu/stubs.h
/usr/include/linux/errno.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/time.h
/usr/include/asm/errno.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/libc-lock.h
/usr/include/bits/select.h
/usr/include/bits/sigset.h
/usr/include/bits/time.h
/usr/include/gconv.h
/usr/include/gnu/stubs-32.h
/usr/include/wchar.h
/usr/include/asm-generic/errno.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar.h
/usr/include/bits/wchar2.h
/usr/include/pthread.h
/usr/include/wctype.h
/usr/include/asm-generic/errno-base.h
/usr/include/bits/setjmp.h
/usr/include/sched.h
/usr/include/bits/sched.h
