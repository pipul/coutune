%!PS-Adobe-3.0%%Title: (Shortcuts)%%Creator: (ClarisWorks Office: LaserWriter 8 8.3.3)%%CreationDate: (3:47 PM Monday, 17 June 1996)%%For: (peter-f)%%Pages: 10%%DocumentFonts: Times-Roman Times-Italic Times-Bold Helvetica Courier Symbol%%DocumentNeededFonts: Times-Roman Times-Italic Times-Bold Helvetica Courier Symbol%%DocumentSuppliedFonts:%%DocumentData: Clean7Bit%%PageOrder: Ascend%%Orientation: Portrait%%DocumentMedia: Default 595 842 0 () ()%ADO_ImageableArea: 28 30 566 811%%EndCommentsuserdict begin/dscInfo 5 dict dup begin/Title(Shortcuts)def/Creator(ClarisWorks Office: LaserWriter 8 8.3.3)def/CreationDate(3:47 PM Monday, 17 June 1996)def/For(peter-f)def/Pages 10 defend def end/md 167 dict def md begin/currentpacking where {pop /sc_oldpacking currentpacking def true setpacking}if%%BeginFile: adobe_psp_basic%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved./bd{bind def}bind def/xdf{exch def}bd/xs{exch store}bd/ld{load def}bd/Z{0 def}bd/T/true/F/false/:L/lineto/lw/setlinewidth/:M/moveto/rl/rlineto/rm/rmoveto/:C/curveto/:T/translate/:K/closepath/:mf/makefont/gS/gsave/gR/grestore/np/newpath14{ld}repeat/$m matrix def/av 83 def/por true def/normland false def/psb-nosave{}bd/pse-nosave{}bd/us Z/psb{/us save store}bd/pse{us restore}bd/level2/languagelevel where{pop languagelevel 2 ge}{false}ifelsedef/featurecleanup{stoppedcleartomarkcountdictstack exch sub dup 0 gt{{end}repeat}{pop}ifelse}bd/noload Z/startnoload{{/noload save store}if}bd/endnoload{{noload restore}if}bdlevel2 startnoload/setjob{statusdict/jobname 3 -1 roll put}bd/setcopies{userdict/#copies 3 -1 roll put}bdlevel2 endnoload level2 not startnoload/setjob{1 dict begin/JobName xdf currentdict end setuserparams}bd/setcopies{1 dict begin/NumCopies xdf currentdict end setpagedevice}bdlevel2 not endnoload/pm Z/mT Z/sD Z/realshowpage Z/initializepage{/pm save store mT concat}bd/endp{pm restore showpage}def/$c/DeviceRGB def/rectclip where{pop/rC/rectclip ld}{/rC{np 4 2 roll:M1 index 0 rl0 exch rlneg 0 rl:Kclip np}bd}ifelse/rectfill where{pop/rF/rectfill ld}{/rF{gSnp4 2 roll:M1 index 0 rl0 exch rlneg 0 rlfillgR}bd}ifelse/rectstroke where{pop/rS/rectstroke ld}{/rS{gSnp4 2 roll:M1 index 0 rl0 exch rlneg 0 rl:KstrokegR}bd}ifelse%%EndFile%%BeginFile: adobe_psp_colorspace_level1%%Copyright: Copyright 1991-1993 Adobe Systems Incorporated. All Rights Reserved./G/setgray ld/:F1/setgray ld/:F/setrgbcolor ld/:F4/setcmykcolor where{pop/setcmykcolor ld}{{3{dup3 -1 roll adddup 1 gt{pop 1}if1 exch sub4 1 roll}repeatpopsetrgbcolor}bd}ifelse/:Fx{counttomark{0{G}0{:F}{:F4}}exch getexecpop}bd/:rg{/DeviceRGB :ss}bd/:sc{$cs :ss}bd/:dc{/$cs xdf}bd/:sgl{}def/:dr{}bd/:fCRD{pop}bd/:ckcs{}bd/:ss{/$c xdf}bd/$cs Z%%EndFile%%BeginFile: adobe_psp_uniform_graphics%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved./@a{np :M 0 rl :L 0 exch rl 0 rl :L fill}bd/@b{np :M 0 rl 0 exch rl :L 0 rl 0 exch rl fill}bd/arct where{pop}{/arct{arcto pop pop pop pop}bd}ifelse/x1 Z/x2 Z/y1 Z/y2 Z/rad Z/@q{/rad xs/y2 xs/x2 xs/y1 xs/x1 xsnpx2 x1 add 2 div y1 :Mx2 y1 x2 y2 rad arctx2 y2 x1 y2 rad arctx1 y2 x1 y1 rad arctx1 y1 x2 y1 rad arctfill}bd/@s{/rad xs/y2 xs/x2 xs/y1 xs/x1 xsnpx2 x1 add 2 div y1 :Mx2 y1 x2 y2 rad arctx2 y2 x1 y2 rad arctx1 y2 x1 y1 rad arctx1 y1 x2 y1 rad arct:Kstroke}bd/@i{np 0 360 arc fill}bd/@j{gSnp:Tscale0 0 .5 0 360 arcfillgR}bd/@e{np0 360 arc:Kstroke}bd/@f{np$m currentmatrixpop:Tscale0 0 .5 0 360 arc:K$m setmatrixstroke}bd/@k{gSnp:T0 0 :M0 0 5 2 rollarc fillgR}bd/@l{gSnp:T0 0 :Mscale0 0 .5 5 -2 roll arcfillgR}bd/@m{nparcstroke}bd/@n{np$m currentmatrixpop:Tscale0 0 .5 5 -2 roll arc$m setmatrixstroke}bd%%EndFile%%BeginFile: adobe_psp_basic_text%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved./S/show ld/A{0.0 exch ashow}bd/R{0.0 exch 32 exch widthshow}bd/W{0.0 3 1 roll widthshow}bd/J{0.0 32 4 2 roll 0.0 exch awidthshow}bd/V{0.0 4 1 roll 0.0 exch awidthshow}bd/fcflg true def/fc{fcflg{vmstatus exch sub 50000 lt{(%%[ Warning: Running out of memory ]%%\r)print flush/fcflg false store}if pop}if}bd/$f[1 0 0 -1 0 0]def/:ff{$f :mf}bd/MacEncoding StandardEncoding 256 array copy defMacEncoding 39/quotesingle putMacEncoding 96/grave put/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronMacEncoding 128 128 getinterval astore poplevel2 startnoload/copyfontdict{findfont dup length dictbegin{1 index/FID ne{def}{pop pop}ifelse}forall}bdlevel2 endnoload level2 not startnoload/copyfontdict{findfont dup length dictcopybegin}bdlevel2 not endnoloadmd/fontname known not{/fontname/customfont def}if/Encoding Z/:mre{copyfontdict/Encoding MacEncoding deffontname currentdictenddefinefont :ff def}bd/:bsr{copyfontdict/Encoding Encoding 256 array copy defEncoding dup}bd/pd{put dup}bd/:esr{pop popfontname currentdictenddefinefont :ff def}bd/scf{scalefont def}bd/scf-non{$m scale :mf setfont}bd/ps Z/fz{/ps xs}bd/sf/setfont ld/cF/currentfont ld/mbf{/makeblendedfont where{popmakeblendedfont/ABlend exch definefont}{pop}ifelsedef}def%%EndFile/currentpacking where {pop sc_oldpacking setpacking}if end%%EndProlog%%BeginSetupmd begincountdictstack[{%%BeginFeature: *ManualFeed False	<</ManualFeed false>> setpagedevice%%EndFeature}featurecleanupcountdictstack[{%%BeginFeature: *PageSize A4Small	<</DeferredMediaSelection true /PageSize [595 842] /ImagingBBox null>> setpagedevice%%EndFeature}featurecleanup(peter-f)setjob/mT[1 0 0 -1 28 811]def/sD 16 dict def300 level2{1 dict dup/WaitTimeout 4 -1 roll put setuserparams}{statusdict/waittimeout 3 -1 roll put}ifelse%%IncludeFont: Times-Roman%%IncludeFont: Times-Italic%%IncludeFont: Times-Bold%%IncludeFont: Helvetica%%IncludeFont: Courier%%IncludeFont: Symbol/f0_1/Times-Roman:mre/f0_18 f0_1 18 scf/f0_14 f0_1 14 scf/f0_12 f0_1 12 scf/f0_10 f0_1 10 scf/f0_9 f0_1 9 scf/f1_1/Times-Italic:mre/f1_12 f1_1 12 scf/f1_10 f1_1 10 scf/f2_1/Times-Bold:mre/f2_12 f2_1 12 scf/f3_1/Helvetica:mre/f3_12 f3_1 12 scf/f3_10 f3_1 10 scf/f3_9 f3_1 9 scf/f4_1/Courier:mre/f4_10 f4_1 10 scf/f5_1/Symbol:bsr240/apple pd:esr/f5_10 f5_1 10 scf/Courier findfont[10 0 0 -10 0 0]:mf setfont%PostScript Hack by Mike Brors 12/7/90/DisableNextSetRGBColor	{	userdict begin	/setrgbcolor 		{		pop		pop		pop		userdict begin		/setrgbcolor systemdict /setrgbcolor get def		end		} def	end} bind def/bcarray where {	pop	bcarray 2 {		/da 4 ps div def		df setfont gsave cs wi		1 index 0 ne{exch da add exch}if grestore setcharwidth		cs 0 0 smc da 0 smc da da smc 0 da smc c		gray		{ gl}		{1 setgray}ifelse		da 2. div dup moveto show	}bind put} if%% Used to snap to device pixels, 1/4th of the pixel in./stp {  % x y  pl  x y                % Snap To Pixel, pixel  (auto stroke adjust)	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} bind def/snapmoveto { % x y  m  -             % moveto, auto stroke adjust	stp  moveto} bind def/snaplineto { % x y  l  -             % lineto, auto stroke adjust	stp lineto} bind def%%EndSetup%%Page: 1 1%%BeginPageSetupinitializepage(peter-f; page: 1 of 10)setjob%%EndPageSetupgS 0 0 538 781 rC42 40 454 699 rCgRgS 6 4 526 735 rC62 54 :Mf0_18 sf.297 .03(A New Data Structure for Cumulative Probability Tables)J226 85 :Mf0_14 sf.885 .088(Peter Fenwick,)J211 106 :M.451 .045(Technical Report 88)J222 127 :M-.038(ISSN 1173-3500)A232 148 :M.114 .011(28 May 1993)J118 182 :Mf0_12 sf-.1(Department of Computer Science,  The University of Auckland,)A164 198 :M-.058(Private Bag 92019, Auckland, New Zealand)A204 215 :Mf1_12 sf.125(peter-f@cs.auckland.ac.nz)A42 260 :Mf2_12 sf.391(Summary)A84 281 :Mf0_10 sf.965 .097(A new method \(the \322Binary Indexed Tree\323\) is presented for maintaining the cumulative)J84 297 :M.208 .021(probabilities which are needed to support dynamic arithmetic data compression.  It is based)J84 313 :M.537 .054(on a decomposition of the cumulative probabilities into portions which parallel the binary)J84 329 :M.195 .02(representation of the index of the table element \(or symbol\).  The operations to traverse the)J84 345 :M.884 .088(data structure are based on the binary coding of the index. In comparison with previous)J84 361 :M-.003(methods, the Binary Indexed Tree is faster, using more compact data and simpler code.  The)A84 377 :M.227 .023(access time for all operations is either constant or proportional to the logarithm of the table)J84 393 :M(size. In conjunction with the compact data structure, this makes the new method particularly)S84 409 :M.074 .007(suitable for large symbol alphabets.)J42 446 :Mf2_12 sf.425(Introduction)A42 467 :Mf0_10 sf.215 .022(A major cost in adaptive arithmetic data compression is the maintenance of the table of cumulative probabilities)J42 483 :M.3 .03(which is needed in reducing the range for successive symbols. Witten, Neal and Cleary [5] ease the problem by)J42 499 :M.428 .043(providing a move-to-front mapping of the symbols which ensures that the most frequent symbols are kept near)J42 515 :M.534 .053(the front of the search space.  It works well for highly skewed alphabets \(which may be expected to compress)J42 531 :M.132 .013(well\) but is much less efficient for more uniform distributions of symbol probability.  Moffat [3] describes a tree)J42 547 :M1.07 .107(structure \(actually a heap\) which provides a linear-time access to all symbols. Jones [2] uses splay trees to)J42 563 :M.324 .032(provide an optimised data structure for handling the probability tables.  The three techniques will be referred in)J42 579 :M.433 .043(this paper as MTF, HEAP and SPLAY, respectively. In all cases they attempt to keep frequently used symbols)J42 595 :M1.58 .158(in quickly-referenced positions within the data structure, but at the cost of sometimes extensive data re-)J42 611 :M.006(organisation.)A42 643 :M.521 .052(This current paper describes a new method which uses only a single array to store the probabilities, but stores)J42 659 :M.426 .043(them in carefully chosen pattern to suit a novel search technique whose cost is proportional to the number of 1)J42 675 :M.166 .017(bits in the element index.  This cost applies to both updating and interrogating the table.  In comparison with the)J42 691 :M.026 .003(other methods it is simple, compact and fast and involves no reorganisation or movement of the data.)JgRendp%%Page: 2 2%%BeginPageSetupinitializepage(peter-f; page: 2 of 10)setjob%%EndPageSetupgS 0 0 538 781 rC42 40 454 699 rC42 40 454 687 rCgRgS 6 4 526 723 rC42 49 :Mf2_12 sf.631(Principles)A42 70 :Mf0_10 sf.154 .015(The basic idea is that, just as an integer is the sum of appropriate powers of two, so can a cumulative probability)J42 86 :M.22 .022(be represented as the appropriate sum of sets of cumulative \322sub probabilities\323.  Thus, if the index contains a \3222)J42 102 :M.653 .065(bit\323 we include two probabilities, if it has an \3228 bit\323 we include 8 probabilities, and so on.  Figure 1 shows a)J42 118 :M.151 .015(table of size 16.)J42 150 :M-.442(Index)A106 150 :M(0)S128 150 :M(1)S151 150 :M(2)S174 150 :M(3)S196 150 :M(4)S219 150 :M(5)S242 150 :M(6)S264 150 :M(7)S287 150 :M(8)S310 150 :M(9)S330 150 :M(10)S353 150 :M(11)S376 150 :M(12)S398 150 :M(13)S421 150 :M(14)S444 150 :M(15)S42 162 :M.064(Contents)A106 162 :M(0)S128 162 :M(1)S144 162 :M<31C932>S174 162 :M(3)S189 162 :M<31C934>S219 162 :M(5)S235 162 :M<35C936>S264 162 :M(7)S280 162 :M<31C938>S310 162 :M(9)S322 162 :M(9\31110)S353 162 :M(11)S368 162 :M(9\31112)S398 162 :M(13)S411 162 :M(13\31114)S444 162 :M(15)S42 186 :M.161 .016(Item Prob)J106 186 :M(0)S128 186 :M(2)S151 186 :M(0)S174 186 :M(1)S196 186 :M(1)S219 186 :M(1)S242 186 :M(0)S264 186 :M(4)S287 186 :M(4)S310 186 :M(0)S332 186 :M(1)S355 186 :M(0)S378 186 :M(1)S400 186 :M(2)S423 186 :M(3)S446 186 :M(0)S42 198 :M.685 .069(Cum Prob)J106 198 :M(0)S128 198 :M(2)S151 198 :M(2)S174 198 :M(3)S196 198 :M(4)S219 198 :M(5)S242 198 :M(5)S264 198 :M(9)S285 198 :M(13)S308 198 :M(13)S330 198 :M(14)S353 198 :M(14)S376 198 :M(15)S398 198 :M(17)S421 198 :M(20)S444 198 :M(20)S42 210 :M-.114(Stored Values)A106 210 :M(0)S128 210 :M(2)S151 210 :M(2)S174 210 :M(1)S196 210 :M(4)S219 210 :M(1)S242 210 :M(1)S264 210 :M(4)S285 210 :M(13)S310 210 :M(0)S332 210 :M(1)S355 210 :M(0)S378 210 :M(2)S400 210 :M(2)S423 210 :M(5)S446 210 :M(0)S196 234 :Mf0_12 sf-.098(Figure 1.  Example of the table)A42 271 :Mf0_10 sf.103 .01(The first row is simply the index.  The second shows the contents of that entry of the table; for example, element)J42 287 :M.41 .041(4 contains the sum of elements 1 to 4 inclusive, while element 6 has the sum of element 5 and element 6.  The)J42 303 :M.318 .032(final three rows show an actual example, with the individual probabilities, the true cumulative probabilities and)J42 319 :M.077 .008(values  stored in the table.)J42 335 :M.476 .048(  )J147 342 245 326 rC1 G328 343 18 12 rF328 343 18 12 rCgRgS 323 307 28 48 rC333 352 :M1 Gf3_10 sf0 G.882(15)AgR1 GgS 147 342 245 326 rC328 360 18 12 rF328 360 18 12 rCgRgS 323 324 28 48 rC333 369 :Mf3_10 sf0 G.882(14)AgRgS 147 342 245 326 rC328 377 18 12 rF328 377 18 12 rCgRgS 323 341 28 48 rC333 386 :Mf3_10 sf0 G.882(13)AgRgS 147 342 245 326 rC328 394 18 12 rF328 394 18 12 rCgRgS 323 358 28 48 rC333 403 :Mf3_10 sf0 G.882(12)AgRgS 147 342 245 326 rC328 411 18 12 rF328 411 18 12 rCgRgS 323 375 28 48 rC333 420 :Mf3_10 sf0 G.882(11)AgRgS 147 342 245 326 rC328 428 18 12 rF328 428 18 12 rCgRgS 323 392 28 48 rC333 437 :Mf3_10 sf0 G.882(10)AgRgS 147 342 245 326 rC328 445 18 12 rF328 445 18 12 rCgRgS 323 409 28 48 rC339 454 :Mf3_10 sf0 G(9)SgRgS 147 342 245 326 rC328 462 18 12 rF328 462 18 12 rCgRgS 323 426 28 48 rC339 471 :Mf3_10 sf0 G(8)SgRgS 147 342 245 326 rC328 479 18 12 rF328 479 18 12 rCgRgS 323 443 28 48 rC339 488 :Mf3_10 sf0 G(7)SgRgS 147 342 245 326 rC328 496 18 12 rF328 496 18 12 rCgRgS 323 460 28 48 rC339 505 :Mf3_10 sf0 G(6)SgRgS 147 342 245 326 rC328 513 18 12 rF328 513 18 12 rCgRgS 323 477 28 48 rC339 522 :Mf3_10 sf0 G(5)SgRgS 147 342 245 326 rC328 530 18 12 rF328 530 18 12 rCgRgS 323 494 28 48 rC339 539 :Mf3_10 sf0 G(4)SgRgS 147 342 245 326 rC328 547 18 12 rF328 547 18 12 rCgRgS 323 511 28 48 rC339 556 :Mf3_10 sf0 G(3)SgRgS 147 342 245 326 rC328 564 18 12 rF328 564 18 12 rCgRgS 323 528 28 48 rC339 573 :Mf3_10 sf0 G(2)SgRgS 147 342 245 326 rC328 581 18 12 rF328 581 18 12 rCgRgS 323 545 28 48 rC339 590 :Mf3_10 sf0 G(1)SgRgS 147 342 245 326 rC328 598 18 12 rF328 598 18 12 rCgRgS 323 562 28 48 rC339 607 :M0 Gf3_10 sf(0)SgR.75 GgS 147 342 245 326 rC186 597 12 12 rF0 G186.5 597.5 11 11 rS1 G208 461 13 131 rF0 G208.5 461.5 12 130 rS1 G237 393 12 63 rF0 G237.5 393.5 11 62 rS1 G259 359 13 29 rF0 G259.5 359.5 12 28 rS1 G259 427 13 29 rF0 G259.5 427.5 12 28 rS1 G259 495 13 29 rF0 G259.5 495.5 12 28 rS1 G259 563 13 29 rF0 G259.5 563.5 12 28 rS1 G237 529 12 63 rF0 G237.5 529.5 11 62 rS.75 G282 580 12 12 rF0 G282.5 580.5 11 11 rS.75 G282 342 12 12 rF0 G282.5 342.5 11 11 rS.75 G282 376 12 12 rF0 G282.5 376.5 11 11 rS.75 G282 410 12 12 rF0 G282.5 410.5 11 11 rS.75 G282 444 12 12 rF0 G282.5 444.5 11 11 rS.75 G282 478 12 12 rF0 G282.5 478.5 11 11 rS.75 G282 512 12 12 rF0 G282.5 512.5 11 11 rS.75 G282 546 12 12 rF0 G282.5 546.5 11 11 rS220 467 -1 1 323 466 1 220 466 @a174 603 -1 1 187 602 1 174 602 @a293 586 -1 1 323 585 1 293 585 @a-1 -1 289 603 1 1 288 591 @b271 569 -1 1 323 568 1 271 568 @a293 552 -1 1 323 551 1 293 551 @a248 535 -1 1 323 534 1 248 534 @a293 518 -1 1 323 517 1 293 517 @a271 501 -1 1 323 500 1 271 500 @a293 484 -1 1 323 483 1 293 483 @a293 450 -1 1 323 449 1 293 449 @a271 433 -1 1 323 432 1 271 432 @a293 416 -1 1 323 415 1 293 415 @a248 399 -1 1 323 398 1 248 398 @a293 382 -1 1 323 381 1 293 381 @a271 365 -1 1 323 364 1 271 364 @a293 348 -1 1 323 347 1 293 347 @a-1 -1 289 365 1 1 288 353 @b-1 -1 289 399 1 1 288 387 @b-1 -1 266 399 1 1 265 387 @b-1 -1 289 433 1 1 288 421 @b-1 -1 243 467 1 1 242 455 @b-1 -1 266 467 1 1 265 455 @b-1 -1 289 467 1 1 288 455 @b-1 -1 289 501 1 1 288 489 @b-1 -1 266 535 1 1 265 523 @b-1 -1 289 535 1 1 288 523 @b-1 -1 289 569 1 1 288 557 @b-1 -1 266 603 1 1 265 591 @b-1 -1 243 603 1 1 242 591 @b-1 -1 215 603 1 1 214 591 @b1 G147 626 244 12 rF147 626 244 12 rCgRgS 142 590 254 48 rC147 635 :M1 Gf3_10 sf0 G-.036(Bars show range of values accumulated in top element)AgR1 GgS 147 342 245 326 rC351 462 29 24 rF351 462 29 24 rCgRgS 346 426 39 60 rC351 471 :M0 Gf3_10 sf-.222(Initial)A351 483 :M.136(Index)AgR0 GgS 147 342 245 326 rC197 603 -1 1 323 602 1 197 602 @a-1 -1 175 620 1 1 174 602 @b1 G164 654 227 13 rF164 654 227 13 rCgRgS 159 618 237 49 rC181 663 :Mf0_12 sf-.107(Figure 2.  The tree of partial probabilities)AgR.75 GgS 147 342 245 326 rC259 359 13 12 rF0 G259.5 359.5 12 11 rS.75 G237 393 12 12 rF0 G237.5 393.5 11 11 rS.75 G259 427 13 12 rF0 G259.5 427.5 12 11 rS.75 G208 461 13 12 rF0 G208.5 461.5 12 11 rS.75 G259 495 13 12 rF0 G259.5 495.5 12 11 rS.75 G237 529 12 12 rF0 G237.5 529.5 11 11 rS.75 G259 563 13 12 rF0 G259.5 563.5 12 11 rSgR0 GgS 42 728 454 11 rCgRgS 6 692 526 47 rC42 736 :Mf3_9 sf.15 .015(Cumulative probabilities)J228 736 :M-.053(17 Jun 1996)A454 736 :M-.103(Page 1)AgRendp%%Page: 3 3%%BeginPageSetupinitializepage(peter-f; page: 3 of 10)setjob%%EndPageSetupgS 0 0 538 781 rC42 40 454 699 rC42 40 454 687 rCgRgS 6 4 526 723 rC42 49 :Mf0_10 sf1.027 .103(To read the cumulative probability for element 11, we first take the value at that index \(V[11]\).  Then, we)J42 65 :M.199 .02(successively strip off the least-significant 1-bit of the index and add in that element, finally adding V[0].  In this)J42 81 :M-.022(case we add V[10] and V[8] as intermediate values.  Referring back to the second row of the table, we see that the)A42 97 :M1.603 .16(sequence V[11]+V[10]+V[8]+V[0] corresponds to the probabilities P[11]+P[9\31110]+P[1\3118]+P[0], where)J42 113 :M.154 .015(P[1\3118] means P[1]+\311+P[8].  The final value is thus P[0\31111], which is desired result.)J42 145 :M.151 .015(The indexing method generates a tree within the table of partial probabilities, with the structure shown in Figure)J42 161 :M.212 .021(2.  Each bar represents the range of probabilities held in the array element corresponding to its topmost position)J42 177 :M.507 .051(\(the shaded rectangles\).  It is clear that traversing the tree from any node to the root will accumulate all of the)J42 193 :M-.037(necessary probabilities.)A42 225 :M.86 .086(Alternatively, we can draw the tree in a more conventional form.  The table is, in effect, two different trees)J42 241 :M.09 .009(superimposed on the same table and differentiated by their access algorithms.  The \322interrogation tree\323 \(to read a)J42 257 :M-.029(cumulative probability\) is a decidedly unbalanced tree, as  shown in Figure 3.  The \322update tree\323 will be described)A42 273 :M-.052(later.)A67 430 :Mf0_12 sf( )S70 296 401 134 rC1 G97 338 15 15 rF97 338 15 15 rCgRgS 92 302 25 51 rC101 348 :Mf3_12 sf(1)SgRgS 70 296 401 134 rC104 343 7.5 @e1 G71 299 15 15 rF71 299 15 15 rCgRgS 66 263 25 51 rC75 309 :Mf3_12 sf(0)SgRgS 70 296 401 134 rC78 305 7.5 @e1 G122 337 15 15 rF122 337 15 15 rCgRgS 117 301 25 51 rC126 347 :Mf3_12 sf(2)SgRgS 70 296 401 134 rC129 343 7.5 @e1 G147 363 15 15 rF147 363 15 15 rCgRgS 142 327 25 51 rC151 373 :Mf3_12 sf(3)SgRgS 70 296 401 134 rC154 368 7.5 @e1 G173 337 15 15 rF173 337 15 15 rCgRgS 168 301 25 51 rC177 347 :Mf3_12 sf(4)SgRgS 70 296 401 134 rC180 343 7.5 @e1 G198 362 15 15 rF198 362 15 15 rCgRgS 193 326 25 51 rC202 372 :Mf3_12 sf(5)SgRgS 70 296 401 134 rC205 368 7.5 @e1 G224 362 15 15 rF224 362 15 15 rCgRgS 219 326 25 51 rC228 372 :Mf3_12 sf(6)SgRgS 70 296 401 134 rC231 368 7.5 @e1 G249 386 15 15 rF249 386 15 15 rCgRgS 244 350 25 51 rC253 396 :Mf3_12 sf(7)SgRgS 70 296 401 134 rC256 393 7.5 @e1 G275 337 15 15 rF275 337 15 15 rCgRgS 270 301 25 51 rC279 347 :Mf3_12 sf(8)SgRgS 70 296 401 134 rC282 343 7.5 @e1 G300 362 15 15 rF300 362 15 15 rCgRgS 295 326 25 51 rC304 372 :Mf3_12 sf(9)SgRgS 70 296 401 134 rC307 368 7.5 @e1 G325 363 15 15 rF325 363 15 15 rCgRgS 320 327 25 51 rC326 373 :Mf3_12 sf.658(10)AgRgS 70 296 401 134 rC16 15 332.5 368 @f1 G351 388 15 15 rF351 388 15 15 rCgRgS 346 352 25 51 rC352 398 :Mf3_12 sf.658(11)AgRgS 70 296 401 134 rC358 393 7.5 @e1 G376 363 15 15 rF376 363 15 15 rCgRgS 371 327 25 51 rC377 373 :Mf3_12 sf.658(12)AgRgS 70 296 401 134 rC16 15 383.5 368 @f1 G402 387 15 15 rF402 387 15 15 rCgRgS 397 351 25 51 rC403 397 :Mf3_12 sf.658(13)AgRgS 70 296 401 134 rC409 393 7.5 @e1 G428 387 15 15 rF428 387 15 15 rCgRgS 423 351 25 51 rC429 397 :Mf3_12 sf.658(14)AgRgS 70 296 401 134 rC435 393 7.5 @e1 G453 413 15 15 rF453 413 15 15 rCgRgS 448 377 25 51 rC454 423 :Mf3_12 sf.658(15)AgRgS 70 296 401 134 rC16 15 460.5 418 @f83 313 -1 1 104 335 1 83 312 @a85 311 -1 1 125 336 1 85 310 @a86 308 -1 1 174 338 1 86 307 @a86 304 -1 1 275 341 1 86 303 @a134 351 -1 1 150 363 1 134 350 @a186 349 -1 1 200 362 1 186 348 @a188 345 -1 1 226 362 1 188 344 @a236 375 -1 1 251 388 1 236 374 @a287 350 -1 1 304 363 1 287 349 @a289 345 -1 1 329 362 1 289 344 @a288 343 -1 1 377 365 1 288 342 @a340 374 -1 1 354 386 1 340 373 @a389 374 -1 1 405 386 1 389 373 @a392 370 -1 1 431 386 1 392 369 @a442 399 -1 1 458 413 1 442 398 @agRgS 6 4 526 723 rC190 454 :Mf0_12 sf-.057( Figure 3.  The interrogation tree.)A42 487 :Mf0_10 sf-.002( The branching ratio of each node is the number of trailing zeros in its binary representation \(each child is formed)A42 503 :M.506 .051(by converting one of the trailing zeros to a one\).  The depth at each node is the Hamming weight of its binary)J42 519 :M.504 .05(index.  It is unusual in that its power derives, not from its structure or shape, but from the indexing algorithm.)J42 535 :M.276 .028(In recognition of the close relationship between the tree traversal algorithms and the binary representation of an)J42 551 :M-.078(element index, the name \322Binary Indexed Tree\323 is proposed for the new structure.)A42 583 :Mf2_12 sf2.141 .214(Operations and code to handle the structure.)J42 604 :Mf0_10 sf.313 .031(We need the following functions when processing a symbol in conjunction with arithmetic coding.  In all cases)J42 620 :M.154 .015(the \322index\323 is synonymous with the coding symbol.)J57 636 :M.5(1.)A72 636 :M-.032(Read the cumulative probability for an index)A57 652 :M.5(2.)A72 652 :M-.008(Update the table according a new probability at a given position.)A57 668 :M.5(3.)A72 668 :M.06 .006(Read the actual probability at a position)J57 684 :M.5(4.)A72 684 :M.353 .035(Find the symbol position within which a given probability lies.)J57 700 :M.5(5.)A72 700 :M.046 .005(Scaling the entire tree by a constant factor \(usually halving all counts\))J42 716 :M.889 .089(In all of these functions we need efficient ways of isolating and manipulating the least significant 1 bit of a)JgRgS 42 728 454 11 rCgRgS 6 692 526 47 rC42 736 :Mf3_9 sf.15 .015(Cumulative probabilities)J228 736 :M-.053(17 Jun 1996)A454 736 :M-.103(Page 2)AgRendp%%Page: 4 4%%BeginPageSetupinitializepage(peter-f; page: 4 of 10)setjob%%EndPageSetupgS 0 0 538 781 rC42 40 454 699 rC42 40 454 687 rCgRgS 6 4 526 723 rC42 49 :Mf0_10 sf.642 .064(number.  Isolating the bit is most easily done \(for a 2\325s complement number\) by considering the operation of)J42 65 :M.827 .083(complementing a positive number.  The serial complementing algorithm examines the bits in order from the)J42 81 :M.121 .012(right \(least significant bit\), copying all of the least-significant zeros and the rightmost 1 and then complementing)J42 97 :M1.414 .141(each bit to the left.  Thus taking the logical AND of a number and its 2\325s complement isolates the least)J42 113 :M.705 .071(significant one bit; the bit is present in both values, to its right both values are all-zero, and to its left one or)J42 129 :M.236 .024(other of the numbers always has a zero.  Thus 20 is represented to 8 bits as 00010100 with a 2\325s complement of)J42 145 :M1.05 .105(11101100; ANDing the two values gives the result 00000100.  With the function BitAnd, as used in many)J42 161 :M(dialects of Pascal, we have that )Sf4_10 sf(LSOne:=BitAnd\(ix,-ix\))Sf0_10 sf(.)S42 193 :M.912 .091(From the above discussion we see that the assignment  )J278 193 :Mf4_10 sf.185(ix:=ix-BitAnd\(ix,-ix\))Af0_10 sf.418 .042(will strip off the least)J42 209 :M4.542 .454(significant one bit of a binary number.  A slightly simpler realisation of the function is)J42 225 :Mf4_10 sf.29(ix:=BitAnd\(ix,ix-1\))Af0_10 sf.611 .061(.  The discussion is similar to the above, noting that )Jf4_10 sf.29(\(ix-1\))Af0_10 sf.726 .073( replaces a trailing)J42 241 :M.762 .076(\31110000\311 by \31101111\311 , leaving unchanged the bits to the left of the rightmost 1.  Both of the operations)J42 257 :M-.009(\(extracting the bit and removing the bit\) are simple and can be done with negligible overhead on most computers.)A42 289 :M3.717 .372(These techniques assume the most frequent case of 2\325s complement representation.  The case)J42 305 :Mf4_10 sf.089(ix:=BitAnd\(ix,ix-1\))Af0_10 sf.233 .023( works with all representations because it uses only positive numbers which are the)J42 321 :M.169 .017(same in all cases.  A reasonable way to extract the least significant bit  is then  )Jf4_10 sf.089(ix:=ix-BitAnd\(ix,ix-1\))A42 337 :Mf0_10 sf.602 .06(or, for 1\325s complement, )Jf4_10 sf.239(LSOne:=BitAnd\(ix,-ix-1\))Af0_10 sf.69 .069(.  Sign-and-magnitude numbers can be handled by)J42 356 :M.035 .004(calculating )Jf4_10 sf.01(LSOne:=BitAnd\(ix,2)A0 -3 rm(k)S0 3 rm(-ix\))Sf0_10 sf.019 .002(, where )Jf4_10 sf(2)S0 -3 rm(k)S0 3 rmf0_10 sf.02 .002( is a power of 2 greater than the table size.)J42 390 :Mf2_12 sf3.047 .305(The cumulative probability.)J42 411 :Mf0_10 sf.187 .019(A Pascal function to read the cumulative probability is shown in Figure 4.  For this and the following examples,)J42 427 :M.039 .004(the array Tree contains the appropriate sub-probabilities.  The number of iterations is clearly just the number of 1)J42 443 :M-.041(bits in the desired index.)A42 650 :Mf0_12 sf( )S45 466 424 184 rC1 G46 467 421 182 rF46 467 421 182 rCgRgS 41 431 431 218 rC46 476 :Mf0_12 sf(    )Sf4_10 sf.006 .001(function GetCumul \(Ix: integer\): integer; { read cumulative value })J46 488 :M( )S79 488 :M(var)S96 500 :M(Sum: integer;)S79 512 :M(begin)S79 524 :M(Sum := Tree[0];)S288 524 :M({ initial value })S79 536 :M(while Ix > 0 do)S96 548 :M(begin)S96 560 :M(Sum := Sum + Tree[Ix];)S288 560 :M({ include this value })S96 572 :M(Ix := BitAnd\(Ix, Ix - 1\);)S288 572 :M({ remove Least Sig one })S96 584 :M(end;)S79 596 :M(GetCumul := Sum;)S79 608 :M(end;)S174 632 :Mf0_12 sf-.03(Figure 4.  The GetCumul function.)AgRgS 6 4 526 723 rC42 662 :Mf0_10 sf1.126 .113(As a simple indication of the cost of reading a value from the table, we can count the number of memory)J42 680 :M.664 .066(accesses into the data table.  For a table of 2)J229 678 :Mf0_9 sf.423(N)Af0_10 sf0 2 rm.82 .082( entries, this is clearly 1+N/2 on average.  Note that this is an)J0 -2 rm42 697 :Mf1_10 sf.163(average)Af0_10 sf.554 .055( value only.  The combination of an irregular symbol distribution and the non-uniform access costs of)J42 713 :M-.077(the Binary Indexed Tree can lead to considerable variations for real symbol alphabets.)AgRgS 42 728 454 11 rCgRgS 6 692 526 47 rC42 736 :Mf3_9 sf.15 .015(Cumulative probabilities)J228 736 :M-.053(17 Jun 1996)A454 736 :M-.103(Page 3)AgRendp%%Page: 5 5%%BeginPageSetupinitializepage(peter-f; page: 5 of 10)setjob%%EndPageSetupgS 0 0 538 781 rC42 40 454 699 rC42 40 454 687 rCgRgS 6 4 526 723 rC42 49 :Mf2_12 sf2.347 .235(Updating the table)J42 70 :Mf0_10 sf.11 .011(In reading a value we strip off 1 bits and move back towards the start of the table.  In updating the table we must)J42 86 :M.621 .062(increment all sub-probabilities above the position being incremented.  Referring to Figure 1, an adjustment to)J42 102 :M.09 .009(element 9 must be accompanied by adjustments to elements 10 and 12 \(those whose ranges cover 9\).  From 9 we)J42 118 :M.288 .029(step to 10 \(add 1\) and then to 12 \(add 2\).  Instead of stripping off the least-significant 1 bit  \(ie subtracting\), we)J42 134 :M.057 .006(now add it on at each stage to get the next entry to adjust.)J42 157 418 124 rC1 G43 158 416 122 rF43 158 416 122 rCgRgS 38 122 426 158 rC76 168 :Mf4_10 sf.007 .001(procedure PutValue \(Val, Ix: integer\);)J93 181 :M(begin)S109 193 :M(repeat)S109 205 :M(Tree[Ix] := Tree[Ix] + Val;)S109 217 :M(Ix := Ix + BitAnd\(Ix, -Ix\);)S295 217 :M({ add least-sig one })S109 229 :M(until Ix >= TableSz;)S93 241 :M(end;)S181 267 :Mf0_12 sf-.033(Figure 5.  Updating the table.)AgRgS 6 4 526 723 rC42 293 :Mf0_10 sf.138 .014(In the example of Figure 1, if we wish to adjust position 5, the successive indices are 5, then 6 \(5+1\), and finally)J42 309 :M.115 .012(8 \(6+2\).  These three changes affect all of the cumulative probabilities from position 5 up.)J72 456 :Mf0_12 sf(  )S78 332 389 124 rC1 G80 438 15 15 rF80 438 15 15 rCgRgS 75 402 25 51 rC84 448 :Mf3_12 sf(1)SgRgS 78 332 389 124 rC87 443 7.5 @e1 G80 360 15 15 rF80 360 15 15 rCgRgS 75 324 25 51 rC84 370 :Mf3_12 sf(0)SgRgS 78 332 389 124 rC87 366 7.5 @e1 G105 412 15 15 rF105 412 15 15 rCgRgS 100 376 25 51 rC109 422 :Mf3_12 sf(2)SgRgS 78 332 389 124 rC112 418 7.5 @e1 G131 413 15 15 rF131 413 15 15 rCgRgS 126 377 25 51 rC135 423 :Mf3_12 sf(3)SgRgS 78 332 389 124 rC138 418 7.5 @e1 G156 386 15 15 rF156 386 15 15 rCgRgS 151 350 25 51 rC160 396 :Mf3_12 sf(4)SgRgS 78 332 389 124 rC163 392 7.5 @e1 G182 412 15 15 rF182 412 15 15 rCgRgS 177 376 25 51 rC186 422 :Mf3_12 sf(5)SgRgS 78 332 389 124 rC189 418 7.5 @e1 G208 386 15 15 rF208 386 15 15 rCgRgS 203 350 25 51 rC212 396 :Mf3_12 sf(6)SgRgS 78 332 389 124 rC215 392 7.5 @e1 G233 385 15 15 rF233 385 15 15 rCgRgS 228 349 25 51 rC237 395 :Mf3_12 sf(7)SgRgS 78 332 389 124 rC240 392 7.5 @e1 G259 360 15 15 rF259 360 15 15 rCgRgS 254 324 25 51 rC263 370 :Mf3_12 sf(8)SgRgS 78 332 389 124 rC266 366 7.5 @e1 G284 412 15 15 rF284 412 15 15 rCgRgS 279 376 25 51 rC288 422 :Mf3_12 sf(9)SgRgS 78 332 389 124 rC291 418 7.5 @e1 G309 387 15 15 rF309 387 15 15 rCgRgS 304 351 25 51 rC310 397 :Mf3_12 sf.658(10)AgRgS 78 332 389 124 rC16 15 316.5 392 @f1 G335 387 15 15 rF335 387 15 15 rCgRgS 330 351 25 51 rC336 397 :Mf3_12 sf.658(11)AgRgS 78 332 389 124 rC342 392 7.5 @e1 G360 361 15 15 rF360 361 15 15 rCgRgS 355 325 25 51 rC361 371 :Mf3_12 sf.658(12)AgRgS 78 332 389 124 rC16 15 367.5 366 @f1 G386 386 15 15 rF386 386 15 15 rCgRgS 381 350 25 51 rC387 396 :Mf3_12 sf.658(13)AgRgS 78 332 389 124 rC393 392 7.5 @e1 G412 360 15 15 rF412 360 15 15 rCgRgS 407 324 25 51 rC413 370 :Mf3_12 sf.658(14)AgRgS 78 332 389 124 rC419 366 7.5 @e1 G437 361 15 15 rF437 361 15 15 rCgRgS 432 325 25 51 rC438 371 :Mf3_12 sf.658(15)AgRgS 78 332 389 124 rC16 15 444.5 366 @f1 G450 334 15 15 rF450 334 15 15 rCgRgS 445 298 25 51 rC451 344 :Mf3_12 sf.658(16)AgRgS 78 332 389 124 rC457 340 7.5 @e-1 -1 120 415 1 1 157 395 @b-1 -1 143 413 1 1 160 398 @b-1 -1 93 439 1 1 106 424 @b-1 -1 195 412 1 1 210 397 @b-1 -1 222 387 1 1 259 370 @b-1 -1 247 387 1 1 261 373 @b-1 -1 296 413 1 1 311 396 @b-1 -1 323 386 1 1 361 369 @b-1 -1 350 388 1 1 363 373 @b-1 -1 401 387 1 1 413 373 @b-1 -1 273 362 1 1 451 341 @b-1 -1 427 363 1 1 452 344 @b-1 -1 451 361 1 1 456 348 @b-1 -1 171 389 1 1 258 367 @b-1 -1 375 363 1 1 452 342 @bgRgS 6 4 526 723 rC203 468 :Mf0_12 sf-.035(Figure 6. The updating tree.)A42 489 :Mf0_10 sf.409 .041(The tree for updating is essentially the mirror-image of the interrogation tree, with each element resembling its)J42 505 :M.379 .038(16-complement in the earlier one.  It is shown in Figure 6.  Each parent still has a 1 with trailing zeros, but the)J42 521 :M.338 .034(child indices are formed by successively replacing the first 1, 2, 3 \311 of those zeros by ones.  The interrogation)J42 537 :M.782 .078(tree has element 0 at its root; this tree has an implicit element 16 at the root and element 0 stands apart as a)J42 553 :M1.592 .159(special case.  \(Element 16, or its equivalent, is used as the END symbol in Witten\325s implementation of)J42 569 :M-.015(arithmetic coding and is then a valid part of the table.\))A42 601 :M.394 .039(The cost in table references is most easily found by noting that the interrogation and updating trees are mirror-)J42 617 :M.083 .008(images of each other.  The cost of adding a probability into the table is therefore still references to N/2 elements,)J42 633 :M.436 .044(or N references with separate reads and writes.  Once again, we can expect real alphabets to have considerable)J42 649 :M-.038(deviations from this average.)A42 681 :Mf2_12 sf3.046 .305(Reading a single probability.)J42 702 :Mf0_10 sf.064 .006(We read a single probability by taking the difference of two adjacent cumulative probabilities.  Quite clearly, the)J42 718 :M.317 .032(two elements will often share a large common path which need not be evaluated as its contributions will cancel)JgRgS 42 728 454 11 rCgRgS 6 692 526 47 rC42 736 :Mf3_9 sf.15 .015(Cumulative probabilities)J228 736 :M-.053(17 Jun 1996)A454 736 :M-.103(Page 4)AgRendp%%Page: 6 6%%BeginPageSetupinitializepage(peter-f; page: 6 of 10)setjob%%EndPageSetupgS 0 0 538 781 rC42 40 454 699 rC42 40 454 687 rCgRgS 6 4 526 723 rC42 49 :Mf0_10 sf-.014(out.  The method for element \322i\323 is  to read the value at node \322i\323, obtain the parent to node \322i\323 and then trace back)A42 65 :M.011 .001(from node \322i\3201\323 to the parent of node \322i\323, subtracting off the values traversed.  Code is shown in Figure 7.)J43 88 452 240 rC1 G44 89 450 237 rF44 89 450 237 rCgRgS 39 53 460 273 rC44 98 :Mf4_10 sf.006 .001(function GetProb \(Ix: integer\): integer; { read individual probability })J77 110 :M(var)S94 122 :M(Val, Parent: integer;)S77 134 :M(begin)S77 146 :M(Val := Tree[Ix];)S286 146 :M({ get the current prob })S77 158 :M(if Ix > 0 then)S286 158 :M({ Ix=0 is a special case })S94 170 :M(begin)S94 182 :M(Parent := BitAnd\(Ix, Ix - 1\);)S286 182 :M({ get the parent node })S94 194 :M(Ix := Ix - 1;)S286 194 :M({ the previous node })S94 206 :M(while Parent <> Ix do)S286 206 :M({ repeat until at prev parent })S110 218 :M(begin)S110 230 :M(Val := Val - Tree[Ix];)S286 230 :M({ adjust for traversed value })S110 242 :M(Ix := BitAnd\(Ix, Ix - 1\);)S286 242 :M({ get this parent })S110 254 :M(end;)S94 266 :M(end;)S77 278 :M(GetProb := Val;)S77 290 :M(end;)S179 314 :Mf0_12 sf-.061(Figure 7.  Finding a single probability)AgRgS 6 4 526 723 rC42 340 :Mf0_10 sf.789 .079(The cost is one plus the number of trailing zeros in the index.  Half the time \(with an odd initial index\) it is)J42 356 :M.596 .06(necessary to read only a single value from the table, for one quarter of the time \(indices 2, 6, 10, 12, \311\) it is)J42 375 :M.272 .027(necessary to read 2 values, in one of eight cases to read 3 values, and so on.  Each term has the form i )Jf5_10 sf.167 .017<B420>J469 375 :Mf0_10 sf-.186(2)A0 -3 rm-.114(-i)A0 3 rm-.21( and)A42 393 :M.832 .083(the series has a sum to infinity of 2, which value may be taken as a reasonable approximation of the cost in)J42 409 :M.295 .03(most cases.  For a 256 element table the sum is actually 1.93.)J42 441 :Mf2_12 sf2.41 .241(Finding an element corresponding to a probability)J42 463 :Mf1_12 sf2.943 .294(Note : This method is not satisfactory and has been replaced by that described in)J42 481 :M.246 .025(Technical Report 110, Jan 1995)J42 514 :Mf0_10 sf.264 .026(The last operation is that of finding the element corresponding to a given cumulative probability.  This action is)J42 530 :M-.035(performed by the modified binary search shown in Figure 8.)A42 562 :M.165 .017(It is called with the test value and a mask which initially locates the midpoint of the table.  \(With the 16 element)J42 578 :M-.014(table of the examples here, the initial value of Mask would be 8.\)  At each stage Index defines the base of the area)A42 594 :M.438 .044(still to be searched.  The midpoint is probed and, if the value is above the midpoint, the value is subtracted off)J42 610 :M.281 .028(the desired probability and the midpoint becomes the new Index value \(or base of the search area\).  Finally, the)J42 626 :M(Mask value is halved to search at a finer resolution.)SgRgS 42 728 454 11 rCgRgS 6 692 526 47 rC42 736 :Mf3_9 sf.15 .015(Cumulative probabilities)J228 736 :M-.053(17 Jun 1996)A454 736 :M-.103(Page 5)AgRendp%%Page: 7 7%%BeginPageSetupinitializepage(peter-f; page: 7 of 10)setjob%%EndPageSetupgS 0 0 538 781 rC42 40 454 699 rC42 40 454 687 rC80 40 378 251 rC1 G81 41 376 249 rF81 41 376 249 rCgRgS 76 5 386 285 rC81 50 :Mf4_10 sf.007 .001(function getIndex \(Prob, Mask: integer\): integer;)J108 62 :M(var)S119 74 :M(Index, TestIx: integer;)S108 86 :M(begin)S108 98 :M(Index := 0;)S295 98 :M({ initial index })S108 110 :M(if Prob > Tree[0] then)S119 122 :M(while Mask <> 0 do)S295 122 :M({ scan all possible bits })S131 134 :M(begin)S141 146 :M(TestIx := Index + Mask;)S295 146 :M({ get trial index })S141 158 :M(if Prob >= Tree[TestIx] then)S153 170 :M(begin)S295 170 :M({ value in new range })S153 182 :M(Index := TestIx;)S295 182 :M({ update current index })S153 194 :M(Prob := Prob - Tree[Index];)S323 194 :M({ revise probability })S153 206 :M(end;)S141 218 :M(Mask := Mask div 2;)S295 218 :M({ scale back test bit })S141 230 :M(end;)S81 242 :M(    getIndex := Index;)S108 254 :M(end;)S150 278 :Mf0_12 sf-.079(Figure 8.  Finding the element, given a probability)AgRgS 6 4 526 723 rC42 304 :Mf0_10 sf.965 .096(The program of Figure 8 fails if the true probability of the element is zero.  This is not a problem with the)J42 320 :M.034 .003(arithmetic coding algorithm of Witten etal which requires  non-zero probabilities.  There seems to be no efficient)J42 336 :M1.18 .118(programming solution to this problem, but a simple detour is to assume a constant base probability for all)J42 352 :M-.016(values, adjusting the cumulative or real probabilities as they are read.)A42 378 :M.237 .024(The average cost in table references is an initial test of the zero element, followed by a probe for each bit of the)J42 394 :M.983 .098(index and a 50% probability of reading the value to revise the probability \(although this last reference may)J42 413 :M.327 .033(disappear with complier optimisation\).  The cost in table references, for a 2)J0 -3 rm.155(N)A0 3 rm.276 .028( entry table, is then either 1+N, or)J42 431 :M.277 .028(1+3N/2.  The cost is again logarithmic in the table size.)J42 457 :Mf2_12 sf2.255 .225(Scaling the entire tree)J42 478 :Mf0_10 sf.413 .041(Most implementations of adaptive arithmetic coding require that the cumulative probabilities be scaled back as)J42 494 :M.643 .064(soon as the total probability exceeds some defined threshold.  For example, we may halve all probabilities as)J42 510 :M.912 .091(soon as the total exceeds 16383.  Superficially, it appears that as all values are a linear combination of tree)J42 526 :M.484 .048(entries we can simply halve all of the table entries, but rounding leads to inconsistent entries, with some small)J42 542 :M.965 .096(probabilities vanishing completely.  A simple possibility is to read all of the cumulative probabilities into a)J42 558 :M-.1(work array and then clear and rebuild the tree.)A42 584 :M.378 .038(However, it is possible to rebuild the tree in place.  First note that when reading values we refer only to entries)J42 600 :M.46 .046(below the leaf node, while when updating, we modify only those above the leaf node.  Therefore, by scanning)J42 616 :M.124 .012(down the table reading and updating, we will always read only the old, unmodified values.  The loop to halve all)J42 632 :M.035 .003(probabilities just reads the probability for an index and subtracts half that value from the same index.  It is shown)J42 648 :M.522 .052(in Figure 9.)J75 674 :Mf4_10 sf(for i := TableSz downto 0 do)S108 686 :M(addValue\(-GetProb\(i\) div 2,1\);)S188 710 :Mf0_12 sf-.085(Figure 9.  Halving all probabilities)AgRgS 42 728 454 11 rCgRgS 6 692 526 47 rC42 736 :Mf3_9 sf.15 .015(Cumulative probabilities)J228 736 :M-.053(17 Jun 1996)A454 736 :M-.103(Page 6)AgRendp%%Page: 8 8%%BeginPageSetupinitializepage(peter-f; page: 8 of 10)setjob%%EndPageSetupgS 0 0 538 781 rC42 40 454 699 rC42 40 454 687 rCgRgS 6 4 526 723 rC42 49 :Mf2_12 sf2.836 .284(Performance and Comparisons)J42 70 :Mf0_10 sf.318 .032(The Binary Indexed Tree technique \(BIT\) was compared with the MTF algorithm of Witten etal, Jones SPLAY)J42 86 :M.531 .053(algorithm and Moffat\325s HEAP algorithm.  In all cases the model maintenance involves relatively simple loops)J42 102 :M.355 .035(which adjust array elements.  A simple comparison is the number of accesses to the arrays of the model. While)J42 118 :M.348 .035(the code in SPLAY and HEAP is more complex than for the other two examples, its quantity and style is more)J42 134 :M.242 .024(or less in line with the number of memory references.   The arithmetic coder itself is taken from Witten etal [5],)J42 150 :M-.066(replacing the model as necessary.)A83 173 373 159 rC1 G84 174 370 157 rF84 174 370 157 rCgRgS 79 138 380 193 rC183 183 :Mf3_10 sf-.525(M T F)A232 183 :M.19(SPLAY)A294 183 :M.257(HEAP)A360 183 :M-.528(B I T)A122 195 :M.331(bib)A186 195 :M.515(32.7)A244 195 :M.515(76.3)A301 195 :M.515(22.5)A358 195 :M.515(17.9)A122 207 :M.661(geo)A186 207 :M.515(81.3)A244 207 :M.515(80.2)A301 207 :M.515(25.2)A358 207 :M.515(13.8)A122 219 :M.368(obj1)A186 219 :M.515(83.4)A244 219 :M.515(73.1)A301 219 :M.515(27.5)A358 219 :M.515(13.5)A122 231 :M.175(paper1)A186 231 :M.515(28.2)A244 231 :M.515(69.7)A301 231 :M.515(22.1)A358 231 :M.515(17.7)A122 243 :M.175(paper2)A186 243 :M.515(22.6)A244 243 :M.515(67.5)A301 243 :M.515(21.6)A358 243 :M.515(17.7)A122 255 :M.249(progc)A186 255 :M.515(34.3)A244 255 :M.515(71.9)A301 255 :M.515(22.6)A358 255 :M.515(17.9)A122 267 :M.194(progl)A186 267 :M.515(24.9)A244 267 :M.515(63.0)A301 267 :M.515(21.8)A358 267 :M.515(17.9)A122 279 :M.359(progp)A186 279 :M.515(29.2)A244 279 :M.515(65.5)A301 279 :M.515(22.0)A358 279 :M.515(18.1)A122 291 :M-.056(trans)A186 291 :M.515(38.5)A244 291 :M.515(70.7)A301 291 :M.515(23.2)A358 291 :M.515(17.2)A122 303 :M.074(skew)A192 303 :M.552(5.3)A244 303 :M.515(14.6)A301 303 :M.515(17.2)A358 303 :M.515(18.2)A206 327 :Mf0_12 sf-.093(Table 1.  Comparative results)AgRgS 6 4 526 723 rC42 360 :Mf0_10 sf.01 .001(Measurements were made on the smaller files of the Calgary Corpus \(size about 100 kbytes and smaller\) with the)J42 376 :M-.003(results of Table 1.  The additional file SKEW contains the pattern \322aaaab\323, repeated to a length of 20,000 bytes.)A42 408 :M1.235 .124(In all of the realistic cases the Binary Indexed Tree requires fewer data memory references than the other)J42 424 :M.352 .035(algorithms.  All of the textual files have an average cost of about 18 array references for each symbol encoded,)J42 440 :M.111 .011(compared with an average of about 30 for MTF, 70 for SPLAY and 22 for HEAP.  The two binary files are even)J42 456 :M.175 .018(better, at 13.7 compared with 82 and 26.  The critical factor appears to be the actual  vocabulary of the file, with)J42 472 :M.961 .096(the three older methods improving for smaller working alphabets.  This effect is particularly marked on the)J42 488 :M.115 .011(SKEW file, where move-to-front performs particularly well, but the Binary Indexed Tree still behaves as for any)J42 504 :M.804 .08(text file.  Jones, comparing actual execution times for SPLAY and MTF, noted that the splay algorithm was)J42 520 :M.006 .001(faster only for files with high entropy \(such as GEO\).  Moffat found little real difference in performance between)J42 536 :M.061 .006(MTF and HEAP.  The results here agree with those observations.)J42 568 :M.579 .058(The costs given earlier for a 256 entry table predict 8 references to update an element, 5 to read a cumulative)J42 584 :M.836 .084(probability and 2 to read a single probability, giving a total of 15 references per input byte. As the alphabet)J42 600 :M.162 .016(actually uses 257 symbols, to allow the End-of-File code, the PutValue routine always refers to the root element)J42 616 :M.24 .024(\(Tree[256]\).  This adds an extra 2 memory references to each update operation, increasing the previous count to)J42 632 :M-.032(17.  The need to scale \(read and update\) all values each 18384 input symbols adds another 0.2 references per input)A42 648 :M.327 .033(symbol.  This gives a predicted cost of 17.2 references per byte.  The extra 0.5 \320 1 references per symbol  arise)J42 664 :M.093 .009(from the non-uniform symbol distribution interacting with the tree structure.)J42 696 :M.406 .041(The MTF model uses 3 parallel arrays, with a total of 4 bytes per symbol of the coding alphabet.  \(We assume)J42 712 :M.125 .012(here that all integers are 16 bit.\)  Moffat\325s HEAP algorithm adds a further integer array, to give a total of 6 bytes)JgRgS 42 728 454 11 rCgRgS 6 692 526 47 rC42 736 :Mf3_9 sf.15 .015(Cumulative probabilities)J228 736 :M-.053(17 Jun 1996)A454 736 :M-.103(Page 7)AgRendp%%Page: 9 9%%BeginPageSetupinitializepage(peter-f; page: 9 of 10)setjob%%EndPageSetupgS 0 0 538 781 rC42 40 454 699 rC42 40 454 687 rCgRgS 6 4 526 723 rC42 49 :Mf0_10 sf.513 .051(per symbol.  Jones\325 SPLAY algorithm uses 4 arrays of integers \(although one could be 8 bits\), to give 8 bytes)J42 65 :M.27 .027(per symbol.  The Binary Indexed Tree requires only one integer \(2 bytes\) for each possible symbol and is much)J42 81 :M.054 .005(more compact than any of the alternatives as well as being faster for most files.)J42 113 :Mf2_12 sf2.881 .288(Further applications)J42 134 :Mf0_10 sf.664 .066(When starting arithmetic compression it is sometimes useful to increment counts by more than one to force a)J42 150 :M.303 .03(faster initial adjustment of the model.  One little known problem of the move-to-front algorithm is that it works)J42 166 :M.438 .044(only for increments by one and that extending it to handle larger increments is not easy without compromising)J42 182 :M-.055(the efficiency.  The Binary Indexed Tree does not have this problem.)A42 214 :M.006 .001(The simple compact data structure of the Binary Indexed Tree makes it useful for a \322brute force\323 implementation)J42 230 :M.466 .047(of an Order-1 arithmetic compressor.  Briefly, such a compressor uses the known, previous, character to select)J42 246 :M.321 .032(one of 256 models to encode the next character, leading to a total of 65,536 entries in the model tables.  As the)J42 262 :M.739 .074(move-to-front model needs at least 4 bytes per entry \(256K bytes in total\), it is usual to combine the models)J42 278 :M.264 .026(with an LRU structure which retains only important elements.  For example, Gutmann [1] requires 10 bytes per)J42 294 :M.26 .026(element and uses from 3000 elements \(for text files\) to 20,000 elements for some binaries.  The Binary Indexed)J42 310 :M.251 .025(Tree requires only 2 bytes per element and only 128K bytes to hold the entire model.  The storage requirements)J42 326 :M.62 .062(are therefore reasonable in modern computers and we avoid all of the problems associated with managing the)J42 342 :M.994 .099(LRU lists.)J42 374 :M-.019(Another potential use for the Binary Indexed Tree is in handling very large alphabets such as occur in word based)A42 390 :M.635 .063(arithmetic compression [4].  In this case we take advantage of the compact data structure and the logarithmic)J42 406 :M-.058(access cost.)A42 438 :Mf2_12 sf.735(Acknowledgments.)A42 459 :Mf0_10 sf.307 .031(Thanks are due to the University of Auckland for the provision of research facilities, and to Peter Gutmann and)J42 475 :M-.027(Stuart Woolford whose interest provided the incentive for this work.)A42 528 :Mf2_12 sf.805(References.)A46 549 :Mf0_10 sf.5(1.)A69 549 :M.269 .027(Gutmann, P.C. \322Practical Dictionary/Arithmetic Data Compression Synthesis\323, MSc thesis, University of )J69 565 :M-.022(Auckland, Feb 1992)A46 581 :M.5(2.)A69 581 :M.293 .029(Jones, D.W. \322Application of splay trees to data compression\323, )Jf1_10 sf.49 .049(Comm ACM)Jf0_10 sf.21 .021(, Vol 31 No 8 pp 996\3201007 )J69 597 :M.187 .019(Aug 88)J46 613 :M.5(3.)A69 613 :M.15 .015(Moffat, A. \322Linear Time Adaptive coding\323,)Jf1_10 sf.123 .012( IEEE Trans Info Theory)Jf0_10 sf.092 .009(., Vol 36, No 2, pp 401\320406  Mar 90)J46 629 :M.5(4.)A69 629 :M.324 .032(Moffat, A. \322Word-based text compression\323, )Jf1_10 sf.448 .045(Software\320Practice and Experience)Jf0_10 sf.168 .017(, Vol 19,  pp 185\320198  )J69 645 :M.335 .033(Feb 89)J46 661 :M.5(5.)A69 661 :M.385 .038(Witten, I.H., Neal, R., and Cleary, J.G. \322Arithmetic Compression for data compression\323, )Jf1_10 sf.156(CACM)Af0_10 sf.206 .021( Vol 30, )J69 677 :M.356 .036(No 6, pp 520-540 Jun 87)JgRgS 42 728 454 11 rCgRgS 6 692 526 47 rC42 736 :Mf3_9 sf.15 .015(Cumulative probabilities)J228 736 :M-.053(17 Jun 1996)A454 736 :M-.103(Page 8)AgRendp%%Page: 10 10%%BeginPageSetupinitializepage(peter-f; page: 10 of 10)setjob%%EndPageSetupgS 0 0 538 781 rC42 40 454 699 rC42 40 454 687 rC46 82 450 177 rC1 G47 153 46 33 rF47 153 46 33 rCgRgS 42 117 56 69 rC47 161 :Mf3_9 sf-.098(Memory)A47 172 :M.497 .05(references )J47 183 :M(per symbol)SgRgS 46 82 450 177 rC108 87 -1 1 113 86 1 108 86 @a112 87 -1 1 422 86 1 112 86 @a97 83 12 11 rCgRgS 92 47 22 47 rC97 91 :Mf3_9 sf(90)SgRgS 46 82 450 177 rC108 104 -1 1 113 103 1 108 103 @a112 104 -1 1 422 103 1 112 103 @a97 100 12 11 rCgRgS 92 64 22 47 rC97 108 :Mf3_9 sf(80)SgRgS 46 82 450 177 rC108 121 -1 1 113 120 1 108 120 @a112 121 -1 1 422 120 1 112 120 @a97 117 12 11 rCgRgS 92 81 22 47 rC97 125 :Mf3_9 sf(70)SgRgS 46 82 450 177 rC108 138 -1 1 113 137 1 108 137 @a112 138 -1 1 422 137 1 112 137 @a97 134 12 11 rCgRgS 92 98 22 47 rC97 142 :Mf3_9 sf(60)SgRgS 46 82 450 177 rC108 155 -1 1 113 154 1 108 154 @a112 155 -1 1 422 154 1 112 154 @a97 151 12 11 rCgRgS 92 115 22 47 rC97 159 :Mf3_9 sf(50)SgRgS 46 82 450 177 rC108 174 -1 1 113 173 1 108 173 @a112 174 -1 1 422 173 1 112 173 @a97 170 12 11 rCgRgS 92 134 22 47 rC97 178 :Mf3_9 sf(40)SgRgS 46 82 450 177 rC108 191 -1 1 113 190 1 108 190 @a112 191 -1 1 422 190 1 112 190 @a97 187 12 11 rCgRgS 92 151 22 47 rC97 195 :Mf3_9 sf(30)SgRgS 46 82 450 177 rC108 208 -1 1 113 207 1 108 207 @a112 208 -1 1 422 207 1 112 207 @a97 204 12 11 rCgRgS 92 168 22 47 rC97 212 :Mf3_9 sf(20)SgRgS 46 82 450 177 rC108 225 -1 1 113 224 1 108 224 @a112 225 -1 1 422 224 1 112 224 @a97 221 12 11 rCgRgS 92 185 22 47 rC97 229 :Mf3_9 sf(10)SgRgS 46 82 450 177 rC108 242 -1 1 113 241 1 108 241 @a112 242 -1 1 422 241 1 112 241 @a102 238 7 11 rCgRgS 97 202 17 47 rC102 246 :Mf3_9 sf(0)SgRgS 46 82 450 177 rC-1 -1 111 242 1 1 110 86 @b110 242 -1 1 422 241 1 110 241 @a113 185 6 57 rF113.5 185.5 5 56 rS.5 G119 109 5 133 rF0 G119.5 109.5 4 132 rS.75 G124 203 6 39 rF0 G124.5 203.5 5 38 rS.875 G130 210 5 32 rF0 G130.5 210.5 4 31 rS.25 G135 241 6 1 rF0 G135.5 241.5 5 0 rS144 101 6 141 rF144.5 101.5 5 140 rS.5 G150 103 5 139 rF0 G150.5 103.5 4 138 rS.75 G155 198 6 44 rF0 G155.5 198.5 5 43 rS.875 G161 217 5 25 rF0 G161.5 217.5 4 24 rS.25 G166 241 6 1 rF0 G166.5 241.5 5 0 rS175 97 6 145 rF175.5 97.5 5 144 rS.5 G181 115 5 127 rF0 G181.5 115.5 4 126 rS.75 G186 194 6 48 rF0 G186.5 194.5 5 47 rS.875 G192 218 5 24 rF0 G192.5 218.5 4 23 rS.25 G197 241 6 1 rF0 G197.5 241.5 5 0 rS206 193 6 49 rF206.5 193.5 5 48 rS.5 G212 121 5 121 rF0 G212.5 121.5 4 120 rS.75 G217 203 6 39 rF0 G217.5 203.5 5 38 rS.875 G223 211 5 31 rF0 G223.5 211.5 4 30 rS.25 G228 241 6 1 rF0 G228.5 241.5 5 0 rS237 202 6 40 rF237.5 202.5 5 39 rS.5 G243 125 5 117 rF0 G243.5 125.5 4 116 rS.75 G248 204 6 38 rF0 G248.5 204.5 5 37 rS.875 G254 211 5 31 rF0 G254.5 211.5 4 30 rS.25 G259 241 6 1 rF0 G259.5 241.5 5 0 rS268 182 6 60 rF268.5 182.5 5 59 rS.5 G274 117 5 125 rF0 G274.5 117.5 4 124 rS.75 G279 202 6 40 rF0 G279.5 202.5 5 39 rS.875 G285 210 6 32 rF0 G285.5 210.5 5 31 rS.25 G291 241 6 1 rF0 G291.5 241.5 5 0 rS300 198 6 44 rF300.5 198.5 5 43 rS.5 G306 132 5 110 rF0 G306.5 132.5 4 109 rS.75 G311 204 6 38 rF0 G311.5 204.5 5 37 rS.875 G317 210 5 32 rF0 G317.5 210.5 4 31 rS.25 G322 241 6 1 rF0 G322.5 241.5 5 0 rS331 191 6 51 rF331.5 191.5 5 50 rS.5 G337 128 5 114 rF0 G337.5 128.5 4 113 rS.75 G342 203 6 39 rF0 G342.5 203.5 5 38 rS.875 G348 210 5 32 rF0 G348.5 210.5 4 31 rS.25 G353 241 6 1 rF0 G353.5 241.5 5 0 rS362 175 6 67 rF362.5 175.5 5 66 rS.5 G368 119 5 123 rF0 G368.5 119.5 4 122 rS.75 G373 201 6 41 rF0 G373.5 201.5 5 40 rS.875 G379 212 5 30 rF0 G379.5 212.5 4 29 rS.25 G384 241 6 1 rF0 G384.5 241.5 5 0 rS393 232 6 10 rF393.5 232.5 5 9 rS.5 G399 216 5 26 rF0 G399.5 216.5 4 25 rS.75 G404 212 6 30 rF0 G404.5 212.5 5 29 rS.875 G410 210 5 32 rF0 G410.5 210.5 4 31 rS.25 G415 241 6 1 rF0 G415.5 241.5 5 0 rS-1 -1 112 244 1 1 111 239 @b121 247 14 11 rCgRgS 116 211 24 47 rC121 255 :Mf3_9 sf(bib)SgRgS 46 82 450 177 rC-1 -1 143 244 1 1 142 239 @b151 247 17 11 rCgRgS 146 211 27 47 rC151 255 :Mf3_9 sf(geo)SgRgS 46 82 450 177 rC-1 -1 174 244 1 1 173 239 @b181 247 19 11 rCgRgS 176 211 29 47 rC181 255 :Mf3_9 sf(obj1)SgRgS 46 82 450 177 rC-1 -1 205 244 1 1 204 239 @b206 247 30 11 rCgRgS 201 211 40 47 rC206 255 :Mf3_9 sf(paper1)SgRgS 46 82 450 177 rC-1 -1 236 244 1 1 235 239 @b237 247 30 11 rCgRgS 232 211 40 47 rC237 255 :Mf3_9 sf(paper2)SgRgS 46 82 450 177 rC-1 -1 267 244 1 1 266 239 @b271 247 25 11 rCgRgS 266 211 35 47 rC271 255 :Mf3_9 sf.124(progc)AgRgS 46 82 450 177 rC-1 -1 299 244 1 1 298 239 @b304 247 22 11 rCgRgS 299 211 32 47 rC304 255 :Mf3_9 sf(progl)SgRgS 46 82 450 177 rC-1 -1 330 244 1 1 329 239 @b334 247 25 11 rCgRgS 329 211 35 47 rC334 255 :Mf3_9 sf(progp)SgRgS 46 82 450 177 rC-1 -1 361 244 1 1 360 239 @b366 247 23 11 rCgRgS 361 211 33 47 rC366 255 :Mf3_9 sf.25(trans)AgRgS 46 82 450 177 rC-1 -1 392 244 1 1 391 239 @b397 247 23 11 rCgRgS 392 211 33 47 rC397 255 :Mf3_9 sf.167(skew)AgRgS 46 82 450 177 rC447 123 10 10 rF447.5 123.5 9 9 rS462 125 23 11 rCgRgS 457 89 33 47 rC462 133 :Mf3_9 sf-.623(M T F)AgR.5 GgS 46 82 450 177 rC447 143 10 10 rF0 G447.5 143.5 9 9 rS462 145 31 11 rCgRgS 457 109 41 47 rC462 153 :M0 Gf3_9 sf(SPLAY)SgR.75 GgS 46 82 450 177 rC447 163 10 11 rF0 G447.5 163.5 9 10 rS462 166 26 11 rCgRgS 457 130 36 47 rC462 174 :M0 Gf3_9 sf-.169(HEAP)AgR.875 GgS 46 82 450 177 rC447 184 10 10 rF0 G447.5 184.5 9 9 rS462 186 20 11 rCgRgS 457 150 30 47 rC462 194 :M0 Gf3_9 sf-.251(B I T)AgR0 GgS 46 82 450 177 rC443.5 116.5 50 88 rSgRgS 42 728 454 11 rCgRgS 6 692 526 47 rC42 736 :Mf3_9 sf.15 .015(Cumulative probabilities)J228 736 :M-.053(17 Jun 1996)A454 736 :M-.103(Page 9)AgRendp%%Trailerend%%EOF